
FinalProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002908  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b44  08002b44  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002b44  08002b44  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b44  08002b44  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b48  08002b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000024  08002b70  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002b70  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4ad  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001713  00000000  00000000  0002a501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  0002bc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000730  00000000  00000000  0002c400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ac2  00000000  00000000  0002cb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008baa  00000000  00000000  000565f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb29a  00000000  00000000  0005f19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015a436  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001edc  00000000  00000000  0015a48c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000024 	.word	0x20000024
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002aac 	.word	0x08002aac

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000028 	.word	0x20000028
 80001f8:	08002aac 	.word	0x08002aac

080001fc <LCD_sendCommand>:
static uint16_t tftDC_PIN;
//Reset pin
static GPIO_TypeDef  *tftRESET_GPIO;
static uint16_t tftRESET_PIN;

void LCD_sendCommand(uint8_t com){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
    uint8_t tmpCmd = com;
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 0);
 800020a:	4b11      	ldr	r3, [pc, #68]	; (8000250 <LCD_sendCommand+0x54>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a11      	ldr	r2, [pc, #68]	; (8000254 <LCD_sendCommand+0x58>)
 8000210:	8811      	ldrh	r1, [r2, #0]
 8000212:	2200      	movs	r2, #0
 8000214:	4618      	mov	r0, r3
 8000216:	f001 f90d 	bl	8001434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 800021a:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <LCD_sendCommand+0x5c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a0f      	ldr	r2, [pc, #60]	; (800025c <LCD_sendCommand+0x60>)
 8000220:	8811      	ldrh	r1, [r2, #0]
 8000222:	2200      	movs	r2, #0
 8000224:	4618      	mov	r0, r3
 8000226:	f001 f905 	bl	8001434 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 800022a:	f107 010f 	add.w	r1, r7, #15
 800022e:	2305      	movs	r3, #5
 8000230:	2201      	movs	r2, #1
 8000232:	480b      	ldr	r0, [pc, #44]	; (8000260 <LCD_sendCommand+0x64>)
 8000234:	f002 f92d 	bl	8002492 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <LCD_sendCommand+0x5c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a07      	ldr	r2, [pc, #28]	; (800025c <LCD_sendCommand+0x60>)
 800023e:	8811      	ldrh	r1, [r2, #0]
 8000240:	2201      	movs	r2, #1
 8000242:	4618      	mov	r0, r3
 8000244:	f001 f8f6 	bl	8001434 <HAL_GPIO_WritePin>
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	200000ac 	.word	0x200000ac
 8000254:	200000b0 	.word	0x200000b0
 8000258:	200000a4 	.word	0x200000a4
 800025c:	200000a8 	.word	0x200000a8
 8000260:	20000040 	.word	0x20000040

08000264 <LCD_sendData>:

void LCD_sendData(uint8_t data){
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmpDat = data;
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 1);
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <LCD_sendData+0x54>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a11      	ldr	r2, [pc, #68]	; (80002bc <LCD_sendData+0x58>)
 8000278:	8811      	ldrh	r1, [r2, #0]
 800027a:	2201      	movs	r2, #1
 800027c:	4618      	mov	r0, r3
 800027e:	f001 f8d9 	bl	8001434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 8000282:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <LCD_sendData+0x5c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a0f      	ldr	r2, [pc, #60]	; (80002c4 <LCD_sendData+0x60>)
 8000288:	8811      	ldrh	r1, [r2, #0]
 800028a:	2200      	movs	r2, #0
 800028c:	4618      	mov	r0, r3
 800028e:	f001 f8d1 	bl	8001434 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpDat, 1, 5);
 8000292:	f107 010f 	add.w	r1, r7, #15
 8000296:	2305      	movs	r3, #5
 8000298:	2201      	movs	r2, #1
 800029a:	480b      	ldr	r0, [pc, #44]	; (80002c8 <LCD_sendData+0x64>)
 800029c:	f002 f8f9 	bl	8002492 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 80002a0:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <LCD_sendData+0x5c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a07      	ldr	r2, [pc, #28]	; (80002c4 <LCD_sendData+0x60>)
 80002a6:	8811      	ldrh	r1, [r2, #0]
 80002a8:	2201      	movs	r2, #1
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 f8c2 	bl	8001434 <HAL_GPIO_WritePin>
}
 80002b0:	bf00      	nop
 80002b2:	3710      	adds	r7, #16
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	200000ac 	.word	0x200000ac
 80002bc:	200000b0 	.word	0x200000b0
 80002c0:	200000a4 	.word	0x200000a4
 80002c4:	200000a8 	.word	0x200000a8
 80002c8:	20000040 	.word	0x20000040

080002cc <LCD_sendCommandArg>:

void LCD_sendCommandArg(uint8_t command, uint8_t *dataBytes, uint8_t dataLen){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	6039      	str	r1, [r7, #0]
 80002d6:	71fb      	strb	r3, [r7, #7]
 80002d8:	4613      	mov	r3, r2
 80002da:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 80002dc:	4b1f      	ldr	r3, [pc, #124]	; (800035c <LCD_sendCommandArg+0x90>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a1f      	ldr	r2, [pc, #124]	; (8000360 <LCD_sendCommandArg+0x94>)
 80002e2:	8811      	ldrh	r1, [r2, #0]
 80002e4:	2200      	movs	r2, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 f8a4 	bl	8001434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 0); //0 for command
 80002ec:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <LCD_sendCommandArg+0x98>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a1d      	ldr	r2, [pc, #116]	; (8000368 <LCD_sendCommandArg+0x9c>)
 80002f2:	8811      	ldrh	r1, [r2, #0]
 80002f4:	2200      	movs	r2, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 f89c 	bl	8001434 <HAL_GPIO_WritePin>
    uint8_t buf = command;
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&lcdSPIhandle, &buf, 1, 5);
 8000300:	f107 010b 	add.w	r1, r7, #11
 8000304:	2305      	movs	r3, #5
 8000306:	2201      	movs	r2, #1
 8000308:	4818      	ldr	r0, [pc, #96]	; (800036c <LCD_sendCommandArg+0xa0>)
 800030a:	f002 f8c2 	bl	8002492 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 1); //start writing args
 800030e:	4b15      	ldr	r3, [pc, #84]	; (8000364 <LCD_sendCommandArg+0x98>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a15      	ldr	r2, [pc, #84]	; (8000368 <LCD_sendCommandArg+0x9c>)
 8000314:	8811      	ldrh	r1, [r2, #0]
 8000316:	2201      	movs	r2, #1
 8000318:	4618      	mov	r0, r3
 800031a:	f001 f88b 	bl	8001434 <HAL_GPIO_WritePin>
    for(int i = 0; i < dataLen; ++i){
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	e00b      	b.n	800033c <LCD_sendCommandArg+0x70>
        HAL_SPI_Transmit(&lcdSPIhandle, dataBytes, 1, 5);
 8000324:	2305      	movs	r3, #5
 8000326:	2201      	movs	r2, #1
 8000328:	6839      	ldr	r1, [r7, #0]
 800032a:	4810      	ldr	r0, [pc, #64]	; (800036c <LCD_sendCommandArg+0xa0>)
 800032c:	f002 f8b1 	bl	8002492 <HAL_SPI_Transmit>
        dataBytes++;
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	3301      	adds	r3, #1
 8000334:	603b      	str	r3, [r7, #0]
    for(int i = 0; i < dataLen; ++i){
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	3301      	adds	r3, #1
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	79bb      	ldrb	r3, [r7, #6]
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	429a      	cmp	r2, r3
 8000342:	dbef      	blt.n	8000324 <LCD_sendCommandArg+0x58>
    }  
    HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <LCD_sendCommandArg+0x90>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a05      	ldr	r2, [pc, #20]	; (8000360 <LCD_sendCommandArg+0x94>)
 800034a:	8811      	ldrh	r1, [r2, #0]
 800034c:	2201      	movs	r2, #1
 800034e:	4618      	mov	r0, r3
 8000350:	f001 f870 	bl	8001434 <HAL_GPIO_WritePin>
}
 8000354:	bf00      	nop
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	200000a4 	.word	0x200000a4
 8000360:	200000a8 	.word	0x200000a8
 8000364:	200000ac 	.word	0x200000ac
 8000368:	200000b0 	.word	0x200000b0
 800036c:	20000040 	.word	0x20000040

08000370 <LCD_init>:

void LCD_init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN){
 8000370:	b5b0      	push	{r4, r5, r7, lr}
 8000372:	b098      	sub	sp, #96	; 0x60
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	603b      	str	r3, [r7, #0]
 800037c:	4613      	mov	r3, r2
 800037e:	80fb      	strh	r3, [r7, #6]
    //Copy SPI settings (...?)
    memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000380:	2264      	movs	r2, #100	; 0x64
 8000382:	68f9      	ldr	r1, [r7, #12]
 8000384:	4872      	ldr	r0, [pc, #456]	; (8000550 <LCD_init+0x1e0>)
 8000386:	f002 fb7b 	bl	8002a80 <memcpy>
    //set pins and ports
    //CS pin
    tftCS_GPIO = csPORT;
 800038a:	4a72      	ldr	r2, [pc, #456]	; (8000554 <LCD_init+0x1e4>)
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	6013      	str	r3, [r2, #0]
    tftCS_PIN = csPIN;
 8000390:	4a71      	ldr	r2, [pc, #452]	; (8000558 <LCD_init+0x1e8>)
 8000392:	88fb      	ldrh	r3, [r7, #6]
 8000394:	8013      	strh	r3, [r2, #0]
    HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <LCD_init+0x1e4>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a6f      	ldr	r2, [pc, #444]	; (8000558 <LCD_init+0x1e8>)
 800039c:	8811      	ldrh	r1, [r2, #0]
 800039e:	2201      	movs	r2, #1
 80003a0:	4618      	mov	r0, r3
 80003a2:	f001 f847 	bl	8001434 <HAL_GPIO_WritePin>
    //DC pin
    tftDC_GPIO = dcPORT;
 80003a6:	4a6d      	ldr	r2, [pc, #436]	; (800055c <LCD_init+0x1ec>)
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	6013      	str	r3, [r2, #0]
    tftDC_PIN = dcPIN;
 80003ac:	4a6c      	ldr	r2, [pc, #432]	; (8000560 <LCD_init+0x1f0>)
 80003ae:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80003b2:	8013      	strh	r3, [r2, #0]
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 1);
 80003b4:	4b69      	ldr	r3, [pc, #420]	; (800055c <LCD_init+0x1ec>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a69      	ldr	r2, [pc, #420]	; (8000560 <LCD_init+0x1f0>)
 80003ba:	8811      	ldrh	r1, [r2, #0]
 80003bc:	2201      	movs	r2, #1
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 f838 	bl	8001434 <HAL_GPIO_WritePin>
    //RESET pin
    tftRESET_GPIO = resetPORT;
 80003c4:	4a67      	ldr	r2, [pc, #412]	; (8000564 <LCD_init+0x1f4>)
 80003c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80003c8:	6013      	str	r3, [r2, #0]
    tftRESET_PIN = resetPIN;
 80003ca:	4a67      	ldr	r2, [pc, #412]	; (8000568 <LCD_init+0x1f8>)
 80003cc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80003d0:	8013      	strh	r3, [r2, #0]
    HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, 1);  //Turn LCD ON //low
 80003d2:	4b64      	ldr	r3, [pc, #400]	; (8000564 <LCD_init+0x1f4>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a64      	ldr	r2, [pc, #400]	; (8000568 <LCD_init+0x1f8>)
 80003d8:	8811      	ldrh	r1, [r2, #0]
 80003da:	2201      	movs	r2, #1
 80003dc:	4618      	mov	r0, r3
 80003de:	f001 f829 	bl	8001434 <HAL_GPIO_WritePin>


    //init commands

    LCD_sendCommand(HX8357_SWRESET);
 80003e2:	2001      	movs	r0, #1
 80003e4:	f7ff ff0a 	bl	80001fc <LCD_sendCommand>
    HAL_Delay(10);
 80003e8:	200a      	movs	r0, #10
 80003ea:	f000 fd87 	bl	8000efc <HAL_Delay>
    uint8_t setC[] = {0xFF, 0x83, 0x57};
 80003ee:	4a5f      	ldr	r2, [pc, #380]	; (800056c <LCD_init+0x1fc>)
 80003f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003f4:	6812      	ldr	r2, [r2, #0]
 80003f6:	4611      	mov	r1, r2
 80003f8:	8019      	strh	r1, [r3, #0]
 80003fa:	3302      	adds	r3, #2
 80003fc:	0c12      	lsrs	r2, r2, #16
 80003fe:	701a      	strb	r2, [r3, #0]
    LCD_sendCommandArg(HX8357D_SETC, setC, 3);
 8000400:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000404:	2203      	movs	r2, #3
 8000406:	4619      	mov	r1, r3
 8000408:	20b9      	movs	r0, #185	; 0xb9
 800040a:	f7ff ff5f 	bl	80002cc <LCD_sendCommandArg>
    HAL_Delay(500);
 800040e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000412:	f000 fd73 	bl	8000efc <HAL_Delay>
    uint8_t setRGB[] = {0x80, 0x00, 0x06, 0x06};
 8000416:	4b56      	ldr	r3, [pc, #344]	; (8000570 <LCD_init+0x200>)
 8000418:	65bb      	str	r3, [r7, #88]	; 0x58
    LCD_sendCommandArg(HX8357_SETRGB, setRGB, 4);
 800041a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800041e:	2204      	movs	r2, #4
 8000420:	4619      	mov	r1, r3
 8000422:	20b3      	movs	r0, #179	; 0xb3
 8000424:	f7ff ff52 	bl	80002cc <LCD_sendCommandArg>
    uint8_t setCOM = 0x25;
 8000428:	2325      	movs	r3, #37	; 0x25
 800042a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    LCD_sendCommandArg(HX8357D_SETCOM, &setCOM, 1);
 800042e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8000432:	2201      	movs	r2, #1
 8000434:	4619      	mov	r1, r3
 8000436:	20b6      	movs	r0, #182	; 0xb6
 8000438:	f7ff ff48 	bl	80002cc <LCD_sendCommandArg>
    uint8_t setOSC = 0x68;
 800043c:	2368      	movs	r3, #104	; 0x68
 800043e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    LCD_sendCommandArg(HX8357_SETOSC, &setOSC, 1);
 8000442:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8000446:	2201      	movs	r2, #1
 8000448:	4619      	mov	r1, r3
 800044a:	20b0      	movs	r0, #176	; 0xb0
 800044c:	f7ff ff3e 	bl	80002cc <LCD_sendCommandArg>
    uint8_t setPANEL = 0x05;
 8000450:	2305      	movs	r3, #5
 8000452:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    LCD_sendCommandArg(HX8357_SETPANEL, &setPANEL, 1);
 8000456:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800045a:	2201      	movs	r2, #1
 800045c:	4619      	mov	r1, r3
 800045e:	20cc      	movs	r0, #204	; 0xcc
 8000460:	f7ff ff34 	bl	80002cc <LCD_sendCommandArg>
    uint8_t setPWR1[] = {0x00, 0x15, 0x1C, 0x1C, 0x83, 0xAA};
 8000464:	4a43      	ldr	r2, [pc, #268]	; (8000574 <LCD_init+0x204>)
 8000466:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800046a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800046e:	6018      	str	r0, [r3, #0]
 8000470:	3304      	adds	r3, #4
 8000472:	8019      	strh	r1, [r3, #0]
    LCD_sendCommandArg(HX8357_SETPWR1, setPWR1, 6);
 8000474:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000478:	2206      	movs	r2, #6
 800047a:	4619      	mov	r1, r3
 800047c:	20b1      	movs	r0, #177	; 0xb1
 800047e:	f7ff ff25 	bl	80002cc <LCD_sendCommandArg>
    uint8_t setSTBA[] = {0x50, 0x50, 0x01, 0x3C, 0x1E, 0x08};
 8000482:	4a3d      	ldr	r2, [pc, #244]	; (8000578 <LCD_init+0x208>)
 8000484:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000488:	e892 0003 	ldmia.w	r2, {r0, r1}
 800048c:	6018      	str	r0, [r3, #0]
 800048e:	3304      	adds	r3, #4
 8000490:	8019      	strh	r1, [r3, #0]
    LCD_sendCommandArg(HX8357D_SETSTBA, setSTBA, 6);
 8000492:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000496:	2206      	movs	r2, #6
 8000498:	4619      	mov	r1, r3
 800049a:	20c0      	movs	r0, #192	; 0xc0
 800049c:	f7ff ff16 	bl	80002cc <LCD_sendCommandArg>
    uint8_t setCYC[] = {0x02, 0x40, 0x00, 0x2A, 0x2A, 0x0D, 0x78};
 80004a0:	4a36      	ldr	r2, [pc, #216]	; (800057c <LCD_init+0x20c>)
 80004a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004aa:	6018      	str	r0, [r3, #0]
 80004ac:	3304      	adds	r3, #4
 80004ae:	8019      	strh	r1, [r3, #0]
 80004b0:	3302      	adds	r3, #2
 80004b2:	0c0a      	lsrs	r2, r1, #16
 80004b4:	701a      	strb	r2, [r3, #0]
    LCD_sendCommandArg(HX8357D_SETCYC, setCYC, 7);
 80004b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004ba:	2207      	movs	r2, #7
 80004bc:	4619      	mov	r1, r3
 80004be:	20b4      	movs	r0, #180	; 0xb4
 80004c0:	f7ff ff04 	bl	80002cc <LCD_sendCommandArg>
    uint8_t setGAMMA[] = {0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B,
 80004c4:	4b2e      	ldr	r3, [pc, #184]	; (8000580 <LCD_init+0x210>)
 80004c6:	f107 0418 	add.w	r4, r7, #24
 80004ca:	461d      	mov	r5, r3
 80004cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d4:	682b      	ldr	r3, [r5, #0]
 80004d6:	8023      	strh	r3, [r4, #0]
                        0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03,
                        0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B,
                        0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03,
                        0x00, 0x01};
    LCD_sendCommandArg(HX8357D_SETGAMMA, setGAMMA, 34);
 80004d8:	f107 0318 	add.w	r3, r7, #24
 80004dc:	2222      	movs	r2, #34	; 0x22
 80004de:	4619      	mov	r1, r3
 80004e0:	20e0      	movs	r0, #224	; 0xe0
 80004e2:	f7ff fef3 	bl	80002cc <LCD_sendCommandArg>
    uint8_t setCOLMOD = 0x55;
 80004e6:	2355      	movs	r3, #85	; 0x55
 80004e8:	75fb      	strb	r3, [r7, #23]
    LCD_sendCommandArg(HX8357_COLMOD, &setCOLMOD, 1);
 80004ea:	f107 0317 	add.w	r3, r7, #23
 80004ee:	2201      	movs	r2, #1
 80004f0:	4619      	mov	r1, r3
 80004f2:	203a      	movs	r0, #58	; 0x3a
 80004f4:	f7ff feea 	bl	80002cc <LCD_sendCommandArg>
    uint8_t setMADCTL = 0xC0;
 80004f8:	23c0      	movs	r3, #192	; 0xc0
 80004fa:	75bb      	strb	r3, [r7, #22]
    LCD_sendCommandArg(HX8357_MADCTL, &setMADCTL, 1);
 80004fc:	f107 0316 	add.w	r3, r7, #22
 8000500:	2201      	movs	r2, #1
 8000502:	4619      	mov	r1, r3
 8000504:	2036      	movs	r0, #54	; 0x36
 8000506:	f7ff fee1 	bl	80002cc <LCD_sendCommandArg>
    uint8_t setTEON = 0x00;
 800050a:	2300      	movs	r3, #0
 800050c:	757b      	strb	r3, [r7, #21]
    LCD_sendCommandArg(HX8357_TEON, &setTEON, 1);
 800050e:	f107 0315 	add.w	r3, r7, #21
 8000512:	2201      	movs	r2, #1
 8000514:	4619      	mov	r1, r3
 8000516:	2035      	movs	r0, #53	; 0x35
 8000518:	f7ff fed8 	bl	80002cc <LCD_sendCommandArg>
    uint8_t setTEARLINE[] = {0x00, 0x02};
 800051c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000520:	823b      	strh	r3, [r7, #16]
    LCD_sendCommandArg(HX8357_TEARLINE, setTEARLINE, 2);
 8000522:	f107 0310 	add.w	r3, r7, #16
 8000526:	2202      	movs	r2, #2
 8000528:	4619      	mov	r1, r3
 800052a:	2044      	movs	r0, #68	; 0x44
 800052c:	f7ff fece 	bl	80002cc <LCD_sendCommandArg>
    LCD_sendCommand(HX8357_SLPOUT);
 8000530:	2011      	movs	r0, #17
 8000532:	f7ff fe63 	bl	80001fc <LCD_sendCommand>
    HAL_Delay(150);
 8000536:	2096      	movs	r0, #150	; 0x96
 8000538:	f000 fce0 	bl	8000efc <HAL_Delay>
    LCD_sendCommand(HX8357_DISPON);
 800053c:	2029      	movs	r0, #41	; 0x29
 800053e:	f7ff fe5d 	bl	80001fc <LCD_sendCommand>
    HAL_Delay(50);
 8000542:	2032      	movs	r0, #50	; 0x32
 8000544:	f000 fcda 	bl	8000efc <HAL_Delay>
}
 8000548:	bf00      	nop
 800054a:	3760      	adds	r7, #96	; 0x60
 800054c:	46bd      	mov	sp, r7
 800054e:	bdb0      	pop	{r4, r5, r7, pc}
 8000550:	20000040 	.word	0x20000040
 8000554:	200000a4 	.word	0x200000a4
 8000558:	200000a8 	.word	0x200000a8
 800055c:	200000ac 	.word	0x200000ac
 8000560:	200000b0 	.word	0x200000b0
 8000564:	200000b4 	.word	0x200000b4
 8000568:	200000b8 	.word	0x200000b8
 800056c:	08002ac4 	.word	0x08002ac4
 8000570:	06060080 	.word	0x06060080
 8000574:	08002ac8 	.word	0x08002ac8
 8000578:	08002ad0 	.word	0x08002ad0
 800057c:	08002ad8 	.word	0x08002ad8
 8000580:	08002ae0 	.word	0x08002ae0

08000584 <LCD_setCursorPosition>:

//? below
//Graphics function prototypes
void LCD_setCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	4604      	mov	r4, r0
 800058c:	4608      	mov	r0, r1
 800058e:	4611      	mov	r1, r2
 8000590:	461a      	mov	r2, r3
 8000592:	4623      	mov	r3, r4
 8000594:	80fb      	strh	r3, [r7, #6]
 8000596:	4603      	mov	r3, r0
 8000598:	80bb      	strh	r3, [r7, #4]
 800059a:	460b      	mov	r3, r1
 800059c:	807b      	strh	r3, [r7, #2]
 800059e:	4613      	mov	r3, r2
 80005a0:	803b      	strh	r3, [r7, #0]
  uint8_t setCASET[] = {x1 >> 8, x1 & 0xFF, x2 >> 8, x2 & 0xFF};
 80005a2:	88fb      	ldrh	r3, [r7, #6]
 80005a4:	0a1b      	lsrs	r3, r3, #8
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	733b      	strb	r3, [r7, #12]
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	737b      	strb	r3, [r7, #13]
 80005b2:	887b      	ldrh	r3, [r7, #2]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	73bb      	strb	r3, [r7, #14]
 80005bc:	887b      	ldrh	r3, [r7, #2]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	73fb      	strb	r3, [r7, #15]
  LCD_sendCommandArg(HX8357_CASET, setCASET, 4);
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2204      	movs	r2, #4
 80005c8:	4619      	mov	r1, r3
 80005ca:	202a      	movs	r0, #42	; 0x2a
 80005cc:	f7ff fe7e 	bl	80002cc <LCD_sendCommandArg>
  uint8_t setPASET[] = {y1 >> 8, y1 & 0xFF, y2 >> 8, y2 & 0xFF};
 80005d0:	88bb      	ldrh	r3, [r7, #4]
 80005d2:	0a1b      	lsrs	r3, r3, #8
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	723b      	strb	r3, [r7, #8]
 80005da:	88bb      	ldrh	r3, [r7, #4]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	727b      	strb	r3, [r7, #9]
 80005e0:	883b      	ldrh	r3, [r7, #0]
 80005e2:	0a1b      	lsrs	r3, r3, #8
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	72bb      	strb	r3, [r7, #10]
 80005ea:	883b      	ldrh	r3, [r7, #0]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	72fb      	strb	r3, [r7, #11]
  LCD_sendCommandArg(HX8357_PASET, setPASET, 4);
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2204      	movs	r2, #4
 80005f6:	4619      	mov	r1, r3
 80005f8:	202b      	movs	r0, #43	; 0x2b
 80005fa:	f7ff fe67 	bl	80002cc <LCD_sendCommandArg>
  LCD_sendCommand(HX8357_RAMWR);
 80005fe:	202c      	movs	r0, #44	; 0x2c
 8000600:	f7ff fdfc 	bl	80001fc <LCD_sendCommand>
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	bd90      	pop	{r4, r7, pc}

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fbfe 	bl	8000e12 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f839 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f8bb 	bl	8000794 <MX_GPIO_Init>
  MX_SPI1_Init();
 800061e:	f000 f87b 	bl	8000718 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_init(&hspi1, tftCS_GPIO, tftCS_PIN, tftDC_GPIO, tftDC_PIN, tftRESET_GPIO, tftRESET_PIN);
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <main+0x64>)
 8000624:	6818      	ldr	r0, [r3, #0]
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <main+0x68>)
 8000628:	881c      	ldrh	r4, [r3, #0]
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <main+0x6c>)
 800062c:	681d      	ldr	r5, [r3, #0]
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <main+0x70>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <main+0x74>)
 8000634:	6812      	ldr	r2, [r2, #0]
 8000636:	4913      	ldr	r1, [pc, #76]	; (8000684 <main+0x78>)
 8000638:	8809      	ldrh	r1, [r1, #0]
 800063a:	9102      	str	r1, [sp, #8]
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	462b      	mov	r3, r5
 8000642:	4622      	mov	r2, r4
 8000644:	4601      	mov	r1, r0
 8000646:	4810      	ldr	r0, [pc, #64]	; (8000688 <main+0x7c>)
 8000648:	f7ff fe92 	bl	8000370 <LCD_init>

  HAL_Delay(1000);
 800064c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000650:	f000 fc54 	bl	8000efc <HAL_Delay>
  //LCD_drawPixel(100, 100, HX8357_BLACK);
  LCD_setCursorPosition(0, 0, 100, 100);
 8000654:	2364      	movs	r3, #100	; 0x64
 8000656:	2264      	movs	r2, #100	; 0x64
 8000658:	2100      	movs	r1, #0
 800065a:	2000      	movs	r0, #0
 800065c:	f7ff ff92 	bl	8000584 <LCD_setCursorPosition>
  LCD_sendData(0);
 8000660:	2000      	movs	r0, #0
 8000662:	f7ff fdff 	bl	8000264 <LCD_sendData>
  LCD_sendData(0);
 8000666:	2000      	movs	r0, #0
 8000668:	f7ff fdfc 	bl	8000264 <LCD_sendData>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066c:	e7fe      	b.n	800066c <main+0x60>
 800066e:	bf00      	nop
 8000670:	20000000 	.word	0x20000000
 8000674:	20000004 	.word	0x20000004
 8000678:	20000008 	.word	0x20000008
 800067c:	2000000c 	.word	0x2000000c
 8000680:	20000010 	.word	0x20000010
 8000684:	20000014 	.word	0x20000014
 8000688:	200000bc 	.word	0x200000bc

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b096      	sub	sp, #88	; 0x58
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	2244      	movs	r2, #68	; 0x44
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f002 f9fe 	bl	8002a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	463b      	mov	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006b2:	f000 fef7 	bl	80014a4 <HAL_PWREx_ControlVoltageScaling>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006bc:	f000 fad8 	bl	8000c70 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006c0:	2310      	movs	r3, #16
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006cc:	2360      	movs	r3, #96	; 0x60
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 ff97 	bl	800160c <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80006e4:	f000 fac4 	bl	8000c70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f001 fba9 	bl	8001e58 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800070c:	f000 fab0 	bl	8000c70 <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3758      	adds	r7, #88	; 0x58
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_SPI1_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_SPI1_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_SPI1_Init+0x74>)
 8000724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000728:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_SPI1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI1_Init+0x74>)
 8000732:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000736:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_SPI1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI1_Init+0x74>)
 8000746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI1_Init+0x74>)
 800074e:	2208      	movs	r2, #8
 8000750:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_SPI1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI1_Init+0x74>)
 8000766:	2207      	movs	r2, #7
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_SPI1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI1_Init+0x74>)
 8000772:	2208      	movs	r2, #8
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_SPI1_Init+0x74>)
 8000778:	f001 fde8 	bl	800234c <HAL_SPI_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000782:	f000 fa75 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200000bc 	.word	0x200000bc
 8000790:	40013000 	.word	0x40013000

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08e      	sub	sp, #56	; 0x38
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	4bb3      	ldr	r3, [pc, #716]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4ab2      	ldr	r2, [pc, #712]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4bb0      	ldr	r3, [pc, #704]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	623b      	str	r3, [r7, #32]
 80007c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4bad      	ldr	r3, [pc, #692]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4aac      	ldr	r2, [pc, #688]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4baa      	ldr	r3, [pc, #680]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	61fb      	str	r3, [r7, #28]
 80007d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007da:	4ba7      	ldr	r3, [pc, #668]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4aa6      	ldr	r2, [pc, #664]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 80007e0:	f043 0320 	orr.w	r3, r3, #32
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4ba4      	ldr	r3, [pc, #656]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0320 	and.w	r3, r3, #32
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	4ba1      	ldr	r3, [pc, #644]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4aa0      	ldr	r2, [pc, #640]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b9e      	ldr	r3, [pc, #632]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b9b      	ldr	r3, [pc, #620]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a9a      	ldr	r2, [pc, #616]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b98      	ldr	r3, [pc, #608]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b95      	ldr	r3, [pc, #596]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a94      	ldr	r2, [pc, #592]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b92      	ldr	r3, [pc, #584]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	4b8f      	ldr	r3, [pc, #572]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a8e      	ldr	r2, [pc, #568]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b8c      	ldr	r3, [pc, #560]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000852:	4b89      	ldr	r3, [pc, #548]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a88      	ldr	r2, [pc, #544]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 8000858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b86      	ldr	r3, [pc, #536]	; (8000a78 <MX_GPIO_Init+0x2e4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800086a:	f000 febf 	bl	80015ec <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000874:	4881      	ldr	r0, [pc, #516]	; (8000a7c <MX_GPIO_Init+0x2e8>)
 8000876:	f000 fddd 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000880:	487f      	ldr	r0, [pc, #508]	; (8000a80 <MX_GPIO_Init+0x2ec>)
 8000882:	f000 fdd7 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000886:	230c      	movs	r3, #12
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000896:	230d      	movs	r3, #13
 8000898:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800089a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089e:	4619      	mov	r1, r3
 80008a0:	4877      	ldr	r0, [pc, #476]	; (8000a80 <MX_GPIO_Init+0x2ec>)
 80008a2:	f000 fc35 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80008a6:	2307      	movs	r3, #7
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008aa:	2312      	movs	r3, #18
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008b6:	2304      	movs	r3, #4
 80008b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	4619      	mov	r1, r3
 80008c0:	486e      	ldr	r0, [pc, #440]	; (8000a7c <MX_GPIO_Init+0x2e8>)
 80008c2:	f000 fc25 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008c6:	2380      	movs	r3, #128	; 0x80
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80008d6:	230d      	movs	r3, #13
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	4619      	mov	r1, r3
 80008e0:	4866      	ldr	r0, [pc, #408]	; (8000a7c <MX_GPIO_Init+0x2e8>)
 80008e2:	f000 fc15 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008e6:	233f      	movs	r3, #63	; 0x3f
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008ea:	230b      	movs	r3, #11
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f6:	4619      	mov	r1, r3
 80008f8:	4862      	ldr	r0, [pc, #392]	; (8000a84 <MX_GPIO_Init+0x2f0>)
 80008fa:	f000 fc09 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fe:	2301      	movs	r3, #1
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800090e:	2301      	movs	r3, #1
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f000 fbf8 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000920:	230a      	movs	r3, #10
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000924:	230b      	movs	r3, #11
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000930:	4619      	mov	r1, r3
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f000 fbeb 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800093a:	2301      	movs	r3, #1
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800094a:	2302      	movs	r3, #2
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	4619      	mov	r1, r3
 8000954:	484c      	ldr	r0, [pc, #304]	; (8000a88 <MX_GPIO_Init+0x2f4>)
 8000956:	f000 fbdb 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800095a:	2302      	movs	r3, #2
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800095e:	230b      	movs	r3, #11
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	4619      	mov	r1, r3
 800096c:	4846      	ldr	r0, [pc, #280]	; (8000a88 <MX_GPIO_Init+0x2f4>)
 800096e:	f000 fbcf 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000972:	2344      	movs	r3, #68	; 0x44
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000976:	2303      	movs	r3, #3
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	4619      	mov	r1, r3
 8000984:	4840      	ldr	r0, [pc, #256]	; (8000a88 <MX_GPIO_Init+0x2f4>)
 8000986:	f000 fbc3 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800098a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800099c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a0:	4619      	mov	r1, r3
 80009a2:	4836      	ldr	r0, [pc, #216]	; (8000a7c <MX_GPIO_Init+0x2e8>)
 80009a4:	f000 fbb4 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80009a8:	f44f 535e 	mov.w	r3, #14208	; 0x3780
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	4619      	mov	r1, r3
 80009c4:	482e      	ldr	r0, [pc, #184]	; (8000a80 <MX_GPIO_Init+0x2ec>)
 80009c6:	f000 fba3 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e0:	4619      	mov	r1, r3
 80009e2:	4827      	ldr	r0, [pc, #156]	; (8000a80 <MX_GPIO_Init+0x2ec>)
 80009e4:	f000 fb94 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80009e8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80009fa:	2303      	movs	r3, #3
 80009fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	4619      	mov	r1, r3
 8000a04:	481e      	ldr	r0, [pc, #120]	; (8000a80 <MX_GPIO_Init+0x2ec>)
 8000a06:	f000 fb83 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	4818      	ldr	r0, [pc, #96]	; (8000a88 <MX_GPIO_Init+0x2f4>)
 8000a28:	f000 fb72 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000a2c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000a3e:	230d      	movs	r3, #13
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a46:	4619      	mov	r1, r3
 8000a48:	480f      	ldr	r0, [pc, #60]	; (8000a88 <MX_GPIO_Init+0x2f4>)
 8000a4a:	f000 fb61 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000a60:	230e      	movs	r3, #14
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4807      	ldr	r0, [pc, #28]	; (8000a88 <MX_GPIO_Init+0x2f4>)
 8000a6c:	f000 fb50 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a74:	e00a      	b.n	8000a8c <MX_GPIO_Init+0x2f8>
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	48001400 	.word	0x48001400
 8000a80:	48001000 	.word	0x48001000
 8000a84:	48000800 	.word	0x48000800
 8000a88:	48000400 	.word	0x48000400
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	486d      	ldr	r0, [pc, #436]	; (8000c5c <MX_GPIO_Init+0x4c8>)
 8000aa6:	f000 fb33 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000aaa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000abc:	2302      	movs	r3, #2
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4865      	ldr	r0, [pc, #404]	; (8000c5c <MX_GPIO_Init+0x4c8>)
 8000ac8:	f000 fb22 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000acc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ade:	2308      	movs	r3, #8
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	485d      	ldr	r0, [pc, #372]	; (8000c60 <MX_GPIO_Init+0x4cc>)
 8000aea:	f000 fb11 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000aee:	2340      	movs	r3, #64	; 0x40
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000afe:	230d      	movs	r3, #13
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	4856      	ldr	r0, [pc, #344]	; (8000c64 <MX_GPIO_Init+0x4d0>)
 8000b0a:	f000 fb01 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	4619      	mov	r1, r3
 8000b28:	484e      	ldr	r0, [pc, #312]	; (8000c64 <MX_GPIO_Init+0x4d0>)
 8000b2a:	f000 faf1 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000b2e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b40:	230c      	movs	r3, #12
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4846      	ldr	r0, [pc, #280]	; (8000c64 <MX_GPIO_Init+0x4d0>)
 8000b4c:	f000 fae0 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000b50:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b62:	230a      	movs	r3, #10
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b70:	f000 face 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f000 fac0 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b90:	2301      	movs	r3, #1
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ba0:	2309      	movs	r3, #9
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	482c      	ldr	r0, [pc, #176]	; (8000c5c <MX_GPIO_Init+0x4c8>)
 8000bac:	f000 fab0 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4824      	ldr	r0, [pc, #144]	; (8000c5c <MX_GPIO_Init+0x4c8>)
 8000bcc:	f000 faa0 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000bd0:	2378      	movs	r3, #120	; 0x78
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000be0:	2307      	movs	r3, #7
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	481c      	ldr	r0, [pc, #112]	; (8000c5c <MX_GPIO_Init+0x4c8>)
 8000bec:	f000 fa90 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000bf0:	2338      	movs	r3, #56	; 0x38
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c00:	2306      	movs	r3, #6
 8000c02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4817      	ldr	r0, [pc, #92]	; (8000c68 <MX_GPIO_Init+0x4d4>)
 8000c0c:	f000 fa80 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c16:	2312      	movs	r3, #18
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c22:	2304      	movs	r3, #4
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480e      	ldr	r0, [pc, #56]	; (8000c68 <MX_GPIO_Init+0x4d4>)
 8000c2e:	f000 fa6f 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c32:	2301      	movs	r3, #1
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c42:	2302      	movs	r3, #2
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4807      	ldr	r0, [pc, #28]	; (8000c6c <MX_GPIO_Init+0x4d8>)
 8000c4e:	f000 fa5f 	bl	8001110 <HAL_GPIO_Init>

}
 8000c52:	bf00      	nop
 8000c54:	3738      	adds	r7, #56	; 0x38
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	48000c00 	.word	0x48000c00
 8000c60:	48001800 	.word	0x48001800
 8000c64:	48000800 	.word	0x48000800
 8000c68:	48000400 	.word	0x48000400
 8000c6c:	48001000 	.word	0x48001000

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>
	...

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c86:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <HAL_MspInit+0x44>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_MspInit+0x44>)
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <HAL_SPI_MspInit+0x7c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d128      	bne.n	8000d38 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_SPI_MspInit+0x80>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cea:	4a16      	ldr	r2, [pc, #88]	; (8000d44 <HAL_SPI_MspInit+0x80>)
 8000cec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_SPI_MspInit+0x80>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_SPI_MspInit+0x80>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <HAL_SPI_MspInit+0x80>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_SPI_MspInit+0x80>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d16:	23f0      	movs	r3, #240	; 0xf0
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d26:	2305      	movs	r3, #5
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d34:	f000 f9ec 	bl	8001110 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	3728      	adds	r7, #40	; 0x28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40013000 	.word	0x40013000
 8000d44:	40021000 	.word	0x40021000

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d94:	f000 f892 	bl	8000ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc4:	f7ff ffea 	bl	8000d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc8:	480c      	ldr	r0, [pc, #48]	; (8000dfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000dca:	490d      	ldr	r1, [pc, #52]	; (8000e00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <LoopForever+0xe>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de0:	4c0a      	ldr	r4, [pc, #40]	; (8000e0c <LoopForever+0x16>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dee:	f001 fe23 	bl	8002a38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000df2:	f7ff fc0b 	bl	800060c <main>

08000df6 <LoopForever>:

LoopForever:
    b LoopForever
 8000df6:	e7fe      	b.n	8000df6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000df8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000e04:	08002b4c 	.word	0x08002b4c
  ldr r2, =_sbss
 8000e08:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000e0c:	20000124 	.word	0x20000124

08000e10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC1_IRQHandler>

08000e12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 f943 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e22:	2000      	movs	r0, #0
 8000e24:	f000 f80e 	bl	8000e44 <HAL_InitTick>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	71fb      	strb	r3, [r7, #7]
 8000e32:	e001      	b.n	8000e38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e34:	f7ff ff22 	bl	8000c7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e38:	79fb      	ldrb	r3, [r7, #7]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <HAL_InitTick+0x6c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d023      	beq.n	8000ea0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <HAL_InitTick+0x70>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_InitTick+0x6c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f941 	bl	80010f6 <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10f      	bne.n	8000e9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d809      	bhi.n	8000e94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f000 f919 	bl	80010be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_InitTick+0x74>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	e007      	b.n	8000ea4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e004      	b.n	8000ea4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	e001      	b.n	8000ea4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000020 	.word	0x20000020
 8000eb4:	20000018 	.word	0x20000018
 8000eb8:	2000001c 	.word	0x2000001c

08000ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x20>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000020 	.word	0x20000020
 8000ee0:	20000120 	.word	0x20000120

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000120 	.word	0x20000120

08000efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff ffee 	bl	8000ee4 <HAL_GetTick>
 8000f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f14:	d005      	beq.n	8000f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_Delay+0x44>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f22:	bf00      	nop
 8000f24:	f7ff ffde 	bl	8000ee4 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d8f7      	bhi.n	8000f24 <HAL_Delay+0x28>
  {
  }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000020 	.word	0x20000020

08000f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff47 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff5c 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff8e 	bl	8000ffc <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5d 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffb0 	bl	8001064 <SysTick_Config>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111e:	e166      	b.n	80013ee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2101      	movs	r1, #1
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	4013      	ands	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 8158 	beq.w	80013e8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b01      	cmp	r3, #1
 8001142:	d005      	beq.n	8001150 <HAL_GPIO_Init+0x40>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d130      	bne.n	80011b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001186:	2201      	movs	r2, #1
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	f003 0201 	and.w	r2, r3, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d017      	beq.n	80011ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d123      	bne.n	8001242 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	6939      	ldr	r1, [r7, #16]
 800123e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0203 	and.w	r2, r3, #3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80b2 	beq.w	80013e8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001284:	4b61      	ldr	r3, [pc, #388]	; (800140c <HAL_GPIO_Init+0x2fc>)
 8001286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001288:	4a60      	ldr	r2, [pc, #384]	; (800140c <HAL_GPIO_Init+0x2fc>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6613      	str	r3, [r2, #96]	; 0x60
 8001290:	4b5e      	ldr	r3, [pc, #376]	; (800140c <HAL_GPIO_Init+0x2fc>)
 8001292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800129c:	4a5c      	ldr	r2, [pc, #368]	; (8001410 <HAL_GPIO_Init+0x300>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012c6:	d02b      	beq.n	8001320 <HAL_GPIO_Init+0x210>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a52      	ldr	r2, [pc, #328]	; (8001414 <HAL_GPIO_Init+0x304>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d025      	beq.n	800131c <HAL_GPIO_Init+0x20c>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a51      	ldr	r2, [pc, #324]	; (8001418 <HAL_GPIO_Init+0x308>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d01f      	beq.n	8001318 <HAL_GPIO_Init+0x208>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a50      	ldr	r2, [pc, #320]	; (800141c <HAL_GPIO_Init+0x30c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d019      	beq.n	8001314 <HAL_GPIO_Init+0x204>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a4f      	ldr	r2, [pc, #316]	; (8001420 <HAL_GPIO_Init+0x310>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d013      	beq.n	8001310 <HAL_GPIO_Init+0x200>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a4e      	ldr	r2, [pc, #312]	; (8001424 <HAL_GPIO_Init+0x314>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d00d      	beq.n	800130c <HAL_GPIO_Init+0x1fc>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a4d      	ldr	r2, [pc, #308]	; (8001428 <HAL_GPIO_Init+0x318>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d007      	beq.n	8001308 <HAL_GPIO_Init+0x1f8>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a4c      	ldr	r2, [pc, #304]	; (800142c <HAL_GPIO_Init+0x31c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d101      	bne.n	8001304 <HAL_GPIO_Init+0x1f4>
 8001300:	2307      	movs	r3, #7
 8001302:	e00e      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001304:	2308      	movs	r3, #8
 8001306:	e00c      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001308:	2306      	movs	r3, #6
 800130a:	e00a      	b.n	8001322 <HAL_GPIO_Init+0x212>
 800130c:	2305      	movs	r3, #5
 800130e:	e008      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001310:	2304      	movs	r3, #4
 8001312:	e006      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001314:	2303      	movs	r3, #3
 8001316:	e004      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001318:	2302      	movs	r3, #2
 800131a:	e002      	b.n	8001322 <HAL_GPIO_Init+0x212>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001320:	2300      	movs	r3, #0
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	f002 0203 	and.w	r2, r2, #3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	4093      	lsls	r3, r2
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001332:	4937      	ldr	r1, [pc, #220]	; (8001410 <HAL_GPIO_Init+0x300>)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001340:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <HAL_GPIO_Init+0x320>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001364:	4a32      	ldr	r2, [pc, #200]	; (8001430 <HAL_GPIO_Init+0x320>)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800136a:	4b31      	ldr	r3, [pc, #196]	; (8001430 <HAL_GPIO_Init+0x320>)
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800138e:	4a28      	ldr	r2, [pc, #160]	; (8001430 <HAL_GPIO_Init+0x320>)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <HAL_GPIO_Init+0x320>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013b8:	4a1d      	ldr	r2, [pc, #116]	; (8001430 <HAL_GPIO_Init+0x320>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <HAL_GPIO_Init+0x320>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013e2:	4a13      	ldr	r2, [pc, #76]	; (8001430 <HAL_GPIO_Init+0x320>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3301      	adds	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	fa22 f303 	lsr.w	r3, r2, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f47f ae91 	bne.w	8001120 <HAL_GPIO_Init+0x10>
  }
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000
 8001414:	48000400 	.word	0x48000400
 8001418:	48000800 	.word	0x48000800
 800141c:	48000c00 	.word	0x48000c00
 8001420:	48001000 	.word	0x48001000
 8001424:	48001400 	.word	0x48001400
 8001428:	48001800 	.word	0x48001800
 800142c:	48001c00 	.word	0x48001c00
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001450:	e002      	b.n	8001458 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001474:	d102      	bne.n	800147c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147a:	e00b      	b.n	8001494 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800147e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800148a:	d102      	bne.n	8001492 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800148c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001490:	e000      	b.n	8001494 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001492:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40007000 	.word	0x40007000

080014a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d141      	bne.n	8001536 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014b2:	4b4b      	ldr	r3, [pc, #300]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014be:	d131      	bne.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014c0:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014c6:	4a46      	ldr	r2, [pc, #280]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d0:	4b43      	ldr	r3, [pc, #268]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014d8:	4a41      	ldr	r2, [pc, #260]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80014e0:	4b40      	ldr	r3, [pc, #256]	; (80015e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2232      	movs	r2, #50	; 0x32
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	4a3f      	ldr	r2, [pc, #252]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014ec:	fba2 2303 	umull	r2, r3, r2, r3
 80014f0:	0c9b      	lsrs	r3, r3, #18
 80014f2:	3301      	adds	r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f6:	e002      	b.n	80014fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014fe:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800150a:	d102      	bne.n	8001512 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f2      	bne.n	80014f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001512:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800151e:	d158      	bne.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e057      	b.n	80015d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001524:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800152a:	4a2d      	ldr	r2, [pc, #180]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001530:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001534:	e04d      	b.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800153c:	d141      	bne.n	80015c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800153e:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800154a:	d131      	bne.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001552:	4a23      	ldr	r2, [pc, #140]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800155c:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001564:	4a1e      	ldr	r2, [pc, #120]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2232      	movs	r2, #50	; 0x32
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	0c9b      	lsrs	r3, r3, #18
 800157e:	3301      	adds	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001582:	e002      	b.n	800158a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3b01      	subs	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001596:	d102      	bne.n	800159e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f2      	bne.n	8001584 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015aa:	d112      	bne.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e011      	b.n	80015d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015c0:	e007      	b.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40007000 	.word	0x40007000
 80015e4:	20000018 	.word	0x20000018
 80015e8:	431bde83 	.word	0x431bde83

080015ec <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_PWREx_EnableVddIO2+0x1c>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <HAL_PWREx_EnableVddIO2+0x1c>)
 80015f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015fa:	6053      	str	r3, [r2, #4]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40007000 	.word	0x40007000

0800160c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d102      	bne.n	8001620 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	f000 bc16 	b.w	8001e4c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001620:	4ba0      	ldr	r3, [pc, #640]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 030c 	and.w	r3, r3, #12
 8001628:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800162a:	4b9e      	ldr	r3, [pc, #632]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80e4 	beq.w	800180a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d007      	beq.n	8001658 <HAL_RCC_OscConfig+0x4c>
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2b0c      	cmp	r3, #12
 800164c:	f040 808b 	bne.w	8001766 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2b01      	cmp	r3, #1
 8001654:	f040 8087 	bne.w	8001766 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001658:	4b92      	ldr	r3, [pc, #584]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_RCC_OscConfig+0x64>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e3ed      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1a      	ldr	r2, [r3, #32]
 8001674:	4b8b      	ldr	r3, [pc, #556]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d004      	beq.n	800168a <HAL_RCC_OscConfig+0x7e>
 8001680:	4b88      	ldr	r3, [pc, #544]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001688:	e005      	b.n	8001696 <HAL_RCC_OscConfig+0x8a>
 800168a:	4b86      	ldr	r3, [pc, #536]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 800168c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001696:	4293      	cmp	r3, r2
 8001698:	d223      	bcs.n	80016e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 fd92 	bl	80021c8 <RCC_SetFlashLatencyFromMSIRange>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e3ce      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ae:	4b7d      	ldr	r3, [pc, #500]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a7c      	ldr	r2, [pc, #496]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80016b4:	f043 0308 	orr.w	r3, r3, #8
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4977      	ldr	r1, [pc, #476]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016cc:	4b75      	ldr	r3, [pc, #468]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	4972      	ldr	r1, [pc, #456]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
 80016e0:	e025      	b.n	800172e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016e2:	4b70      	ldr	r3, [pc, #448]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a6f      	ldr	r2, [pc, #444]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80016e8:	f043 0308 	orr.w	r3, r3, #8
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b6d      	ldr	r3, [pc, #436]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	496a      	ldr	r1, [pc, #424]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001700:	4b68      	ldr	r3, [pc, #416]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	4965      	ldr	r1, [pc, #404]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fd52 	bl	80021c8 <RCC_SetFlashLatencyFromMSIRange>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e38e      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800172e:	f000 fcbf 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 8001732:	4602      	mov	r2, r0
 8001734:	4b5b      	ldr	r3, [pc, #364]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	495a      	ldr	r1, [pc, #360]	; (80018a8 <HAL_RCC_OscConfig+0x29c>)
 8001740:	5ccb      	ldrb	r3, [r1, r3]
 8001742:	f003 031f 	and.w	r3, r3, #31
 8001746:	fa22 f303 	lsr.w	r3, r2, r3
 800174a:	4a58      	ldr	r2, [pc, #352]	; (80018ac <HAL_RCC_OscConfig+0x2a0>)
 800174c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800174e:	4b58      	ldr	r3, [pc, #352]	; (80018b0 <HAL_RCC_OscConfig+0x2a4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fb76 	bl	8000e44 <HAL_InitTick>
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d052      	beq.n	8001808 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	e372      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d032      	beq.n	80017d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800176e:	4b4d      	ldr	r3, [pc, #308]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a4c      	ldr	r2, [pc, #304]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800177a:	f7ff fbb3 	bl	8000ee4 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001782:	f7ff fbaf 	bl	8000ee4 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e35b      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001794:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017a0:	4b40      	ldr	r3, [pc, #256]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a3f      	ldr	r2, [pc, #252]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80017a6:	f043 0308 	orr.w	r3, r3, #8
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	493a      	ldr	r1, [pc, #232]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017be:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	4935      	ldr	r1, [pc, #212]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
 80017d2:	e01a      	b.n	800180a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017d4:	4b33      	ldr	r3, [pc, #204]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a32      	ldr	r2, [pc, #200]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb80 	bl	8000ee4 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017e8:	f7ff fb7c 	bl	8000ee4 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e328      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017fa:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x1dc>
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001808:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d073      	beq.n	80018fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	2b08      	cmp	r3, #8
 800181a:	d005      	beq.n	8001828 <HAL_RCC_OscConfig+0x21c>
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2b0c      	cmp	r3, #12
 8001820:	d10e      	bne.n	8001840 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b03      	cmp	r3, #3
 8001826:	d10b      	bne.n	8001840 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d063      	beq.n	80018fc <HAL_RCC_OscConfig+0x2f0>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d15f      	bne.n	80018fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e305      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001848:	d106      	bne.n	8001858 <HAL_RCC_OscConfig+0x24c>
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a15      	ldr	r2, [pc, #84]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e01d      	b.n	8001894 <HAL_RCC_OscConfig+0x288>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0x270>
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 8001868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a0c      	ldr	r2, [pc, #48]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 8001874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	e00b      	b.n	8001894 <HAL_RCC_OscConfig+0x288>
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 8001882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <HAL_RCC_OscConfig+0x298>)
 800188e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01b      	beq.n	80018d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff fb22 	bl	8000ee4 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018a2:	e010      	b.n	80018c6 <HAL_RCC_OscConfig+0x2ba>
 80018a4:	40021000 	.word	0x40021000
 80018a8:	08002b04 	.word	0x08002b04
 80018ac:	20000018 	.word	0x20000018
 80018b0:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b4:	f7ff fb16 	bl	8000ee4 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	; 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e2c2      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018c6:	4baf      	ldr	r3, [pc, #700]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x2a8>
 80018d2:	e014      	b.n	80018fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff fb06 	bl	8000ee4 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff fb02 	bl	8000ee4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e2ae      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ee:	4ba5      	ldr	r3, [pc, #660]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x2d0>
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d060      	beq.n	80019cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	2b04      	cmp	r3, #4
 800190e:	d005      	beq.n	800191c <HAL_RCC_OscConfig+0x310>
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2b0c      	cmp	r3, #12
 8001914:	d119      	bne.n	800194a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d116      	bne.n	800194a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800191c:	4b99      	ldr	r3, [pc, #612]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_OscConfig+0x328>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e28b      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001934:	4b93      	ldr	r3, [pc, #588]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	061b      	lsls	r3, r3, #24
 8001942:	4990      	ldr	r1, [pc, #576]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001948:	e040      	b.n	80019cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d023      	beq.n	800199a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001952:	4b8c      	ldr	r3, [pc, #560]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a8b      	ldr	r2, [pc, #556]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195e:	f7ff fac1 	bl	8000ee4 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001966:	f7ff fabd 	bl	8000ee4 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e269      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001978:	4b82      	ldr	r3, [pc, #520]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0f0      	beq.n	8001966 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001984:	4b7f      	ldr	r3, [pc, #508]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	061b      	lsls	r3, r3, #24
 8001992:	497c      	ldr	r1, [pc, #496]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
 8001998:	e018      	b.n	80019cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800199a:	4b7a      	ldr	r3, [pc, #488]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a79      	ldr	r2, [pc, #484]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 80019a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a6:	f7ff fa9d 	bl	8000ee4 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ae:	f7ff fa99 	bl	8000ee4 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e245      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019c0:	4b70      	ldr	r3, [pc, #448]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1f0      	bne.n	80019ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d03c      	beq.n	8001a52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d01c      	beq.n	8001a1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019e0:	4b68      	ldr	r3, [pc, #416]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 80019e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e6:	4a67      	ldr	r2, [pc, #412]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff fa78 	bl	8000ee4 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f8:	f7ff fa74 	bl	8000ee4 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e220      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a0a:	4b5e      	ldr	r3, [pc, #376]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0ef      	beq.n	80019f8 <HAL_RCC_OscConfig+0x3ec>
 8001a18:	e01b      	b.n	8001a52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a1a:	4b5a      	ldr	r3, [pc, #360]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a20:	4a58      	ldr	r2, [pc, #352]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001a22:	f023 0301 	bic.w	r3, r3, #1
 8001a26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2a:	f7ff fa5b 	bl	8000ee4 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a32:	f7ff fa57 	bl	8000ee4 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e203      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a44:	4b4f      	ldr	r3, [pc, #316]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1ef      	bne.n	8001a32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 80a6 	beq.w	8001bac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a64:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10d      	bne.n	8001a8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a70:	4b44      	ldr	r3, [pc, #272]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	4a43      	ldr	r2, [pc, #268]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7c:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a8c:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <HAL_RCC_OscConfig+0x57c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d118      	bne.n	8001aca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a98:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <HAL_RCC_OscConfig+0x57c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a3a      	ldr	r2, [pc, #232]	; (8001b88 <HAL_RCC_OscConfig+0x57c>)
 8001a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa4:	f7ff fa1e 	bl	8000ee4 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aac:	f7ff fa1a 	bl	8000ee4 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e1c6      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001abe:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <HAL_RCC_OscConfig+0x57c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d108      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x4d8>
 8001ad2:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad8:	4a2a      	ldr	r2, [pc, #168]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae2:	e024      	b.n	8001b2e <HAL_RCC_OscConfig+0x522>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b05      	cmp	r3, #5
 8001aea:	d110      	bne.n	8001b0e <HAL_RCC_OscConfig+0x502>
 8001aec:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af2:	4a24      	ldr	r2, [pc, #144]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b02:	4a20      	ldr	r2, [pc, #128]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b0c:	e00f      	b.n	8001b2e <HAL_RCC_OscConfig+0x522>
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b24:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001b26:	f023 0304 	bic.w	r3, r3, #4
 8001b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d016      	beq.n	8001b64 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b36:	f7ff f9d5 	bl	8000ee4 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b3c:	e00a      	b.n	8001b54 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3e:	f7ff f9d1 	bl	8000ee4 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e17b      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_OscConfig+0x578>)
 8001b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0ed      	beq.n	8001b3e <HAL_RCC_OscConfig+0x532>
 8001b62:	e01a      	b.n	8001b9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff f9be 	bl	8000ee4 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b6a:	e00f      	b.n	8001b8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f9ba 	bl	8000ee4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d906      	bls.n	8001b8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e164      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b8c:	4ba8      	ldr	r3, [pc, #672]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1e8      	bne.n	8001b6c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b9a:	7ffb      	ldrb	r3, [r7, #31]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d105      	bne.n	8001bac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba0:	4ba3      	ldr	r3, [pc, #652]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	4aa2      	ldr	r2, [pc, #648]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001baa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d03c      	beq.n	8001c32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bc0:	4b9b      	ldr	r3, [pc, #620]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bc6:	4a9a      	ldr	r2, [pc, #616]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7ff f988 	bl	8000ee4 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bd8:	f7ff f984 	bl	8000ee4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e130      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bea:	4b91      	ldr	r3, [pc, #580]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001bec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0ef      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x5cc>
 8001bf8:	e01b      	b.n	8001c32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bfa:	4b8d      	ldr	r3, [pc, #564]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c00:	4a8b      	ldr	r2, [pc, #556]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001c02:	f023 0301 	bic.w	r3, r3, #1
 8001c06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7ff f96b 	bl	8000ee4 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c12:	f7ff f967 	bl	8000ee4 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e113      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c24:	4b82      	ldr	r3, [pc, #520]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1ef      	bne.n	8001c12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8107 	beq.w	8001e4a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	f040 80cb 	bne.w	8001ddc <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c46:	4b7a      	ldr	r3, [pc, #488]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f003 0203 	and.w	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d12c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	3b01      	subs	r3, #1
 8001c66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d123      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d11b      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d113      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c96:	085b      	lsrs	r3, r3, #1
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d109      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	085b      	lsrs	r3, r3, #1
 8001cac:	3b01      	subs	r3, #1
 8001cae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d06d      	beq.n	8001d90 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d068      	beq.n	8001d8c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cba:	4b5d      	ldr	r3, [pc, #372]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d105      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cc6:	4b5a      	ldr	r3, [pc, #360]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e0ba      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b56      	ldr	r3, [pc, #344]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a55      	ldr	r2, [pc, #340]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001cdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ce0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ce2:	f7ff f8ff 	bl	8000ee4 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cea:	f7ff f8fb 	bl	8000ee4 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0a7      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cfc:	4b4c      	ldr	r3, [pc, #304]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f0      	bne.n	8001cea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d08:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	4b49      	ldr	r3, [pc, #292]	; (8001e34 <HAL_RCC_OscConfig+0x828>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d18:	3a01      	subs	r2, #1
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	4311      	orrs	r1, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d22:	0212      	lsls	r2, r2, #8
 8001d24:	4311      	orrs	r1, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d2a:	0852      	lsrs	r2, r2, #1
 8001d2c:	3a01      	subs	r2, #1
 8001d2e:	0552      	lsls	r2, r2, #21
 8001d30:	4311      	orrs	r1, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d36:	0852      	lsrs	r2, r2, #1
 8001d38:	3a01      	subs	r2, #1
 8001d3a:	0652      	lsls	r2, r2, #25
 8001d3c:	4311      	orrs	r1, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d42:	06d2      	lsls	r2, r2, #27
 8001d44:	430a      	orrs	r2, r1
 8001d46:	493a      	ldr	r1, [pc, #232]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d4c:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a37      	ldr	r2, [pc, #220]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d58:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4a34      	ldr	r2, [pc, #208]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d64:	f7ff f8be 	bl	8000ee4 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7ff f8ba 	bl	8000ee4 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e066      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7e:	4b2c      	ldr	r3, [pc, #176]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d8a:	e05e      	b.n	8001e4a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e05d      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d90:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d156      	bne.n	8001e4a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d9c:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a23      	ldr	r2, [pc, #140]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001da8:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	4a20      	ldr	r2, [pc, #128]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001db4:	f7ff f896 	bl	8000ee4 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7ff f892 	bl	8000ee4 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e03e      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x7b0>
 8001dda:	e036      	b.n	8001e4a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2b0c      	cmp	r3, #12
 8001de0:	d031      	beq.n	8001e46 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001de8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d105      	bne.n	8001e06 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001e00:	f023 0303 	bic.w	r3, r3, #3
 8001e04:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <HAL_RCC_OscConfig+0x824>)
 8001e0c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e14:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7ff f865 	bl	8000ee4 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e1c:	e00c      	b.n	8001e38 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7ff f861 	bl	8000ee4 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d905      	bls.n	8001e38 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e00d      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
 8001e30:	40021000 	.word	0x40021000
 8001e34:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_RCC_OscConfig+0x848>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1ec      	bne.n	8001e1e <HAL_RCC_OscConfig+0x812>
 8001e44:	e001      	b.n	8001e4a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000

08001e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e10f      	b.n	8002090 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e70:	4b89      	ldr	r3, [pc, #548]	; (8002098 <HAL_RCC_ClockConfig+0x240>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d910      	bls.n	8001ea0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b86      	ldr	r3, [pc, #536]	; (8002098 <HAL_RCC_ClockConfig+0x240>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 020f 	bic.w	r2, r3, #15
 8001e86:	4984      	ldr	r1, [pc, #528]	; (8002098 <HAL_RCC_ClockConfig+0x240>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b82      	ldr	r3, [pc, #520]	; (8002098 <HAL_RCC_ClockConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0f7      	b.n	8002090 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 8089 	beq.w	8001fc0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d133      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb6:	4b79      	ldr	r3, [pc, #484]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0e4      	b.n	8002090 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001ec6:	f000 f9d9 	bl	800227c <RCC_GetSysClockFreqFromPLLSource>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4a74      	ldr	r2, [pc, #464]	; (80020a0 <HAL_RCC_ClockConfig+0x248>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d955      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ed2:	4b72      	ldr	r3, [pc, #456]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10a      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ede:	4b6f      	ldr	r3, [pc, #444]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ee6:	4a6d      	ldr	r2, [pc, #436]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e044      	b.n	8001f7e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d03e      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x126>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d13a      	bne.n	8001f7e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f08:	4b64      	ldr	r3, [pc, #400]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f10:	4a62      	ldr	r2, [pc, #392]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f16:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	e02f      	b.n	8001f7e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f26:	4b5d      	ldr	r3, [pc, #372]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d115      	bne.n	8001f5e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0ac      	b.n	8002090 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f3e:	4b57      	ldr	r3, [pc, #348]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e0a0      	b.n	8002090 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f4e:	4b53      	ldr	r3, [pc, #332]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e098      	b.n	8002090 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001f5e:	f000 f8a7 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4a4e      	ldr	r2, [pc, #312]	; (80020a0 <HAL_RCC_ClockConfig+0x248>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d909      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f6a:	4b4c      	ldr	r3, [pc, #304]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f72:	4a4a      	ldr	r2, [pc, #296]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f7e:	4b47      	ldr	r3, [pc, #284]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f023 0203 	bic.w	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4944      	ldr	r1, [pc, #272]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f90:	f7fe ffa8 	bl	8000ee4 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	e00a      	b.n	8001fae <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f98:	f7fe ffa4 	bl	8000ee4 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e070      	b.n	8002090 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	4b3b      	ldr	r3, [pc, #236]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 020c 	and.w	r2, r3, #12
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d1eb      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d009      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fcc:	4b33      	ldr	r3, [pc, #204]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4930      	ldr	r1, [pc, #192]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b80      	cmp	r3, #128	; 0x80
 8001fe4:	d105      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001fe6:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	4a2c      	ldr	r2, [pc, #176]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8001fec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ff0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff2:	4b29      	ldr	r3, [pc, #164]	; (8002098 <HAL_RCC_ClockConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d210      	bcs.n	8002022 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002000:	4b25      	ldr	r3, [pc, #148]	; (8002098 <HAL_RCC_ClockConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 020f 	bic.w	r2, r3, #15
 8002008:	4923      	ldr	r1, [pc, #140]	; (8002098 <HAL_RCC_ClockConfig+0x240>)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002010:	4b21      	ldr	r3, [pc, #132]	; (8002098 <HAL_RCC_ClockConfig+0x240>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d001      	beq.n	8002022 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e036      	b.n	8002090 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202e:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	4918      	ldr	r1, [pc, #96]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 800203c:	4313      	orrs	r3, r2
 800203e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d009      	beq.n	8002060 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4910      	ldr	r1, [pc, #64]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002060:	f000 f826 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <HAL_RCC_ClockConfig+0x244>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	091b      	lsrs	r3, r3, #4
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	490c      	ldr	r1, [pc, #48]	; (80020a4 <HAL_RCC_ClockConfig+0x24c>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
 800207c:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <HAL_RCC_ClockConfig+0x250>)
 800207e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_RCC_ClockConfig+0x254>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fedd 	bl	8000e44 <HAL_InitTick>
 800208a:	4603      	mov	r3, r0
 800208c:	73fb      	strb	r3, [r7, #15]

  return status;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40022000 	.word	0x40022000
 800209c:	40021000 	.word	0x40021000
 80020a0:	04c4b400 	.word	0x04c4b400
 80020a4:	08002b04 	.word	0x08002b04
 80020a8:	20000018 	.word	0x20000018
 80020ac:	2000001c 	.word	0x2000001c

080020b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	; 0x24
 80020b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020be:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c8:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x34>
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d121      	bne.n	8002122 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d11e      	bne.n	8002122 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020e4:	4b34      	ldr	r3, [pc, #208]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020f0:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f6:	0a1b      	lsrs	r3, r3, #8
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	e005      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002100:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800210c:	4a2b      	ldr	r2, [pc, #172]	; (80021bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002114:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10d      	bne.n	8002138 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002120:	e00a      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b04      	cmp	r3, #4
 8002126:	d102      	bne.n	800212e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002128:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	e004      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b08      	cmp	r3, #8
 8002132:	d101      	bne.n	8002138 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002134:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002136:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	2b0c      	cmp	r3, #12
 800213c:	d134      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d003      	beq.n	8002156 <HAL_RCC_GetSysClockFreq+0xa6>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d003      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0xac>
 8002154:	e005      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002156:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002158:	617b      	str	r3, [r7, #20]
      break;
 800215a:	e005      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800215c:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800215e:	617b      	str	r3, [r7, #20]
      break;
 8002160:	e002      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	617b      	str	r3, [r7, #20]
      break;
 8002166:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	3301      	adds	r3, #1
 8002174:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	fb02 f203 	mul.w	r2, r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	0e5b      	lsrs	r3, r3, #25
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	3301      	adds	r3, #1
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021a8:	69bb      	ldr	r3, [r7, #24]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3724      	adds	r7, #36	; 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	08002b14 	.word	0x08002b14
 80021c0:	00f42400 	.word	0x00f42400
 80021c4:	007a1200 	.word	0x007a1200

080021c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021d0:	2300      	movs	r3, #0
 80021d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021d4:	4b27      	ldr	r3, [pc, #156]	; (8002274 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021e0:	f7ff f940 	bl	8001464 <HAL_PWREx_GetVoltageRange>
 80021e4:	6178      	str	r0, [r7, #20]
 80021e6:	e014      	b.n	8002212 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021e8:	4b22      	ldr	r3, [pc, #136]	; (8002274 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	4a21      	ldr	r2, [pc, #132]	; (8002274 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f2:	6593      	str	r3, [r2, #88]	; 0x58
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002200:	f7ff f930 	bl	8001464 <HAL_PWREx_GetVoltageRange>
 8002204:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	4a1a      	ldr	r2, [pc, #104]	; (8002274 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800220c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002210:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002218:	d10b      	bne.n	8002232 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b80      	cmp	r3, #128	; 0x80
 800221e:	d913      	bls.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2ba0      	cmp	r3, #160	; 0xa0
 8002224:	d902      	bls.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002226:	2302      	movs	r3, #2
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	e00d      	b.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800222c:	2301      	movs	r3, #1
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	e00a      	b.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b7f      	cmp	r3, #127	; 0x7f
 8002236:	d902      	bls.n	800223e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002238:	2302      	movs	r3, #2
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	e004      	b.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b70      	cmp	r3, #112	; 0x70
 8002242:	d101      	bne.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002244:	2301      	movs	r3, #1
 8002246:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 020f 	bic.w	r2, r3, #15
 8002250:	4909      	ldr	r1, [pc, #36]	; (8002278 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	429a      	cmp	r2, r3
 8002264:	d001      	beq.n	800226a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	40022000 	.word	0x40022000

0800227c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002286:	4b2d      	ldr	r3, [pc, #180]	; (800233c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d118      	bne.n	80022c4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002292:	4b2a      	ldr	r3, [pc, #168]	; (800233c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d107      	bne.n	80022ae <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800229e:	4b27      	ldr	r3, [pc, #156]	; (800233c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	e005      	b.n	80022ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022ae:	4b23      	ldr	r3, [pc, #140]	; (800233c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022ba:	4a21      	ldr	r2, [pc, #132]	; (8002340 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022c4:	4b1d      	ldr	r3, [pc, #116]	; (800233c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d003      	beq.n	80022dc <RCC_GetSysClockFreqFromPLLSource+0x60>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d003      	beq.n	80022e2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 80022da:	e005      	b.n	80022e8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80022de:	613b      	str	r3, [r7, #16]
    break;
 80022e0:	e005      	b.n	80022ee <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80022e4:	613b      	str	r3, [r7, #16]
    break;
 80022e6:	e002      	b.n	80022ee <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	613b      	str	r3, [r7, #16]
    break;
 80022ec:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	3301      	adds	r3, #1
 80022fa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	fb02 f203 	mul.w	r2, r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002312:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0e5b      	lsrs	r3, r3, #25
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	3301      	adds	r3, #1
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800232e:	683b      	ldr	r3, [r7, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40021000 	.word	0x40021000
 8002340:	08002b14 	.word	0x08002b14
 8002344:	00f42400 	.word	0x00f42400
 8002348:	007a1200 	.word	0x007a1200

0800234c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e095      	b.n	800248a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	2b00      	cmp	r3, #0
 8002364:	d108      	bne.n	8002378 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800236e:	d009      	beq.n	8002384 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	61da      	str	r2, [r3, #28]
 8002376:	e005      	b.n	8002384 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fc90 	bl	8000cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023c4:	d902      	bls.n	80023cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	e002      	b.n	80023d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80023da:	d007      	beq.n	80023ec <HAL_SPI_Init+0xa0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023e4:	d002      	beq.n	80023ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242e:	ea42 0103 	orr.w	r1, r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	0c1b      	lsrs	r3, r3, #16
 8002448:	f003 0204 	and.w	r2, r3, #4
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002468:	ea42 0103 	orr.w	r1, r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b088      	sub	sp, #32
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	4613      	mov	r3, r2
 80024a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_SPI_Transmit+0x22>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e158      	b.n	8002766 <HAL_SPI_Transmit+0x2d4>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024bc:	f7fe fd12 	bl	8000ee4 <HAL_GetTick>
 80024c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d002      	beq.n	80024d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024d2:	2302      	movs	r3, #2
 80024d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024d6:	e13d      	b.n	8002754 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_SPI_Transmit+0x52>
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d102      	bne.n	80024ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024e8:	e134      	b.n	8002754 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2203      	movs	r2, #3
 80024ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	88fa      	ldrh	r2, [r7, #6]
 8002502:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	88fa      	ldrh	r2, [r7, #6]
 8002508:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002534:	d10f      	bne.n	8002556 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002544:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002554:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002560:	2b40      	cmp	r3, #64	; 0x40
 8002562:	d007      	beq.n	8002574 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002572:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800257c:	d94b      	bls.n	8002616 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_SPI_Transmit+0xfa>
 8002586:	8afb      	ldrh	r3, [r7, #22]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d13e      	bne.n	800260a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002590:	881a      	ldrh	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259c:	1c9a      	adds	r2, r3, #2
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025b0:	e02b      	b.n	800260a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d112      	bne.n	80025e6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c4:	881a      	ldrh	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	1c9a      	adds	r2, r3, #2
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025e4:	e011      	b.n	800260a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025e6:	f7fe fc7d 	bl	8000ee4 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d803      	bhi.n	80025fe <HAL_SPI_Transmit+0x16c>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d102      	bne.n	8002604 <HAL_SPI_Transmit+0x172>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002608:	e0a4      	b.n	8002754 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800260e:	b29b      	uxth	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ce      	bne.n	80025b2 <HAL_SPI_Transmit+0x120>
 8002614:	e07c      	b.n	8002710 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <HAL_SPI_Transmit+0x192>
 800261e:	8afb      	ldrh	r3, [r7, #22]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d170      	bne.n	8002706 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d912      	bls.n	8002654 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	881a      	ldrh	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	1c9a      	adds	r2, r3, #2
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002648:	b29b      	uxth	r3, r3
 800264a:	3b02      	subs	r3, #2
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002652:	e058      	b.n	8002706 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	330c      	adds	r3, #12
 800265e:	7812      	ldrb	r2, [r2, #0]
 8002660:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800267a:	e044      	b.n	8002706 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b02      	cmp	r3, #2
 8002688:	d12b      	bne.n	80026e2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800268e:	b29b      	uxth	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d912      	bls.n	80026ba <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002698:	881a      	ldrh	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	1c9a      	adds	r2, r3, #2
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b02      	subs	r3, #2
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026b8:	e025      	b.n	8002706 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	330c      	adds	r3, #12
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026e0:	e011      	b.n	8002706 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026e2:	f7fe fbff 	bl	8000ee4 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d803      	bhi.n	80026fa <HAL_SPI_Transmit+0x268>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d102      	bne.n	8002700 <HAL_SPI_Transmit+0x26e>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002704:	e026      	b.n	8002754 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1b5      	bne.n	800267c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	6839      	ldr	r1, [r7, #0]
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 f949 	bl	80029ac <SPI_EndRxTxTransaction>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10a      	bne.n	8002744 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	77fb      	strb	r3, [r7, #31]
 8002750:	e000      	b.n	8002754 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002752:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002764:	7ffb      	ldrb	r3, [r7, #31]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	4613      	mov	r3, r2
 800277e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002780:	f7fe fbb0 	bl	8000ee4 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	4413      	add	r3, r2
 800278e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002790:	f7fe fba8 	bl	8000ee4 <HAL_GetTick>
 8002794:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002796:	4b39      	ldr	r3, [pc, #228]	; (800287c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	015b      	lsls	r3, r3, #5
 800279c:	0d1b      	lsrs	r3, r3, #20
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	fb02 f303 	mul.w	r3, r2, r3
 80027a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027a6:	e054      	b.n	8002852 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ae:	d050      	beq.n	8002852 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027b0:	f7fe fb98 	bl	8000ee4 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d902      	bls.n	80027c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d13d      	bne.n	8002842 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027de:	d111      	bne.n	8002804 <SPI_WaitFlagStateUntilTimeout+0x94>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027e8:	d004      	beq.n	80027f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f2:	d107      	bne.n	8002804 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002802:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800280c:	d10f      	bne.n	800282e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800282c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e017      	b.n	8002872 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3b01      	subs	r3, #1
 8002850:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4013      	ands	r3, r2
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	429a      	cmp	r2, r3
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	429a      	cmp	r2, r3
 800286e:	d19b      	bne.n	80027a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3720      	adds	r7, #32
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000018 	.word	0x20000018

08002880 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	; 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002892:	f7fe fb27 	bl	8000ee4 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	4413      	add	r3, r2
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80028a2:	f7fe fb1f 	bl	8000ee4 <HAL_GetTick>
 80028a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	330c      	adds	r3, #12
 80028ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80028b0:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	00da      	lsls	r2, r3, #3
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	0d1b      	lsrs	r3, r3, #20
 80028c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c2:	fb02 f303 	mul.w	r3, r2, r3
 80028c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80028c8:	e060      	b.n	800298c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028d0:	d107      	bne.n	80028e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d104      	bne.n	80028e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80028e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d050      	beq.n	800298c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028ea:	f7fe fafb 	bl	8000ee4 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d902      	bls.n	8002900 <SPI_WaitFifoStateUntilTimeout+0x80>
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d13d      	bne.n	800297c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800290e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002918:	d111      	bne.n	800293e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002922:	d004      	beq.n	800292e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292c:	d107      	bne.n	800293e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800293c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002946:	d10f      	bne.n	8002968 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002966:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e010      	b.n	800299e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	3b01      	subs	r3, #1
 800298a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	4013      	ands	r3, r2
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d196      	bne.n	80028ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3728      	adds	r7, #40	; 0x28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000018 	.word	0x20000018

080029ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2200      	movs	r2, #0
 80029c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f7ff ff5b 	bl	8002880 <SPI_WaitFifoStateUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d007      	beq.n	80029e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d4:	f043 0220 	orr.w	r2, r3, #32
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e027      	b.n	8002a30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2200      	movs	r2, #0
 80029e8:	2180      	movs	r1, #128	; 0x80
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7ff fec0 	bl	8002770 <SPI_WaitFlagStateUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fa:	f043 0220 	orr.w	r2, r3, #32
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e014      	b.n	8002a30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff ff34 	bl	8002880 <SPI_WaitFifoStateUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d007      	beq.n	8002a2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a22:	f043 0220 	orr.w	r2, r3, #32
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e000      	b.n	8002a30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <__libc_init_array>:
 8002a38:	b570      	push	{r4, r5, r6, lr}
 8002a3a:	4d0d      	ldr	r5, [pc, #52]	; (8002a70 <__libc_init_array+0x38>)
 8002a3c:	4c0d      	ldr	r4, [pc, #52]	; (8002a74 <__libc_init_array+0x3c>)
 8002a3e:	1b64      	subs	r4, r4, r5
 8002a40:	10a4      	asrs	r4, r4, #2
 8002a42:	2600      	movs	r6, #0
 8002a44:	42a6      	cmp	r6, r4
 8002a46:	d109      	bne.n	8002a5c <__libc_init_array+0x24>
 8002a48:	4d0b      	ldr	r5, [pc, #44]	; (8002a78 <__libc_init_array+0x40>)
 8002a4a:	4c0c      	ldr	r4, [pc, #48]	; (8002a7c <__libc_init_array+0x44>)
 8002a4c:	f000 f82e 	bl	8002aac <_init>
 8002a50:	1b64      	subs	r4, r4, r5
 8002a52:	10a4      	asrs	r4, r4, #2
 8002a54:	2600      	movs	r6, #0
 8002a56:	42a6      	cmp	r6, r4
 8002a58:	d105      	bne.n	8002a66 <__libc_init_array+0x2e>
 8002a5a:	bd70      	pop	{r4, r5, r6, pc}
 8002a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a60:	4798      	blx	r3
 8002a62:	3601      	adds	r6, #1
 8002a64:	e7ee      	b.n	8002a44 <__libc_init_array+0xc>
 8002a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a6a:	4798      	blx	r3
 8002a6c:	3601      	adds	r6, #1
 8002a6e:	e7f2      	b.n	8002a56 <__libc_init_array+0x1e>
 8002a70:	08002b44 	.word	0x08002b44
 8002a74:	08002b44 	.word	0x08002b44
 8002a78:	08002b44 	.word	0x08002b44
 8002a7c:	08002b48 	.word	0x08002b48

08002a80 <memcpy>:
 8002a80:	440a      	add	r2, r1
 8002a82:	4291      	cmp	r1, r2
 8002a84:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a88:	d100      	bne.n	8002a8c <memcpy+0xc>
 8002a8a:	4770      	bx	lr
 8002a8c:	b510      	push	{r4, lr}
 8002a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a96:	4291      	cmp	r1, r2
 8002a98:	d1f9      	bne.n	8002a8e <memcpy+0xe>
 8002a9a:	bd10      	pop	{r4, pc}

08002a9c <memset>:
 8002a9c:	4402      	add	r2, r0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d100      	bne.n	8002aa6 <memset+0xa>
 8002aa4:	4770      	bx	lr
 8002aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8002aaa:	e7f9      	b.n	8002aa0 <memset+0x4>

08002aac <_init>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	bf00      	nop
 8002ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab2:	bc08      	pop	{r3}
 8002ab4:	469e      	mov	lr, r3
 8002ab6:	4770      	bx	lr

08002ab8 <_fini>:
 8002ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aba:	bf00      	nop
 8002abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002abe:	bc08      	pop	{r3}
 8002ac0:	469e      	mov	lr, r3
 8002ac2:	4770      	bx	lr
