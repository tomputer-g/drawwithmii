
FinalProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af0c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800b0d0  0800b0d0  0001b0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b604  0800b604  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  0800b604  0800b604  0001b604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b60c  0800b60c  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b60c  0800b60c  0001b60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b610  0800b610  0001b610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800b614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000224  0800b838  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800b838  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3d8  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003149  00000000  00000000  0003c62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  0003f778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  00040d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d978  00000000  00000000  00042230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c1c0  00000000  00000000  0006fba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ee64  00000000  00000000  0008bd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019abcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070e4  00000000  00000000  0019ac1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000928  00000000  00000000  001a1d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000224 	.word	0x20000224
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b0b4 	.word	0x0800b0b4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000228 	.word	0x20000228
 80001fc:	0800b0b4 	.word	0x0800b0b4

08000200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000204:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000206:	2400      	movs	r4, #0
 8000208:	9409      	str	r4, [sp, #36]	; 0x24
 800020a:	940a      	str	r4, [sp, #40]	; 0x28
 800020c:	940b      	str	r4, [sp, #44]	; 0x2c
 800020e:	940c      	str	r4, [sp, #48]	; 0x30
 8000210:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000212:	4bb0      	ldr	r3, [pc, #704]	; (80004d4 <MX_GPIO_Init+0x2d4>)
 8000214:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000216:	f042 0210 	orr.w	r2, r2, #16
 800021a:	64da      	str	r2, [r3, #76]	; 0x4c
 800021c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800021e:	f002 0210 	and.w	r2, r2, #16
 8000222:	9201      	str	r2, [sp, #4]
 8000224:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000228:	f042 0204 	orr.w	r2, r2, #4
 800022c:	64da      	str	r2, [r3, #76]	; 0x4c
 800022e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000230:	f002 0204 	and.w	r2, r2, #4
 8000234:	9202      	str	r2, [sp, #8]
 8000236:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000238:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800023a:	f042 0220 	orr.w	r2, r2, #32
 800023e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000242:	f002 0220 	and.w	r2, r2, #32
 8000246:	9203      	str	r2, [sp, #12]
 8000248:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800024a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800024c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000250:	64da      	str	r2, [r3, #76]	; 0x4c
 8000252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000254:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000258:	9204      	str	r2, [sp, #16]
 800025a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800025e:	f042 0201 	orr.w	r2, r2, #1
 8000262:	64da      	str	r2, [r3, #76]	; 0x4c
 8000264:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000266:	f002 0201 	and.w	r2, r2, #1
 800026a:	9205      	str	r2, [sp, #20]
 800026c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800026e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000274:	64da      	str	r2, [r3, #76]	; 0x4c
 8000276:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000278:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800027c:	9206      	str	r2, [sp, #24]
 800027e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000280:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000282:	f042 0202 	orr.w	r2, r2, #2
 8000286:	64da      	str	r2, [r3, #76]	; 0x4c
 8000288:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800028a:	f002 0202 	and.w	r2, r2, #2
 800028e:	9207      	str	r2, [sp, #28]
 8000290:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000292:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000294:	f042 0208 	orr.w	r2, r2, #8
 8000298:	64da      	str	r2, [r3, #76]	; 0x4c
 800029a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800029c:	f003 0308 	and.w	r3, r3, #8
 80002a0:	9308      	str	r3, [sp, #32]
 80002a2:	9b08      	ldr	r3, [sp, #32]
  HAL_PWREx_EnableVddIO2();
 80002a4:	f004 fa56 	bl	8004754 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_RESET);
 80002a8:	4622      	mov	r2, r4
 80002aa:	f44f 519c 	mov.w	r1, #4992	; 0x1380
 80002ae:	488a      	ldr	r0, [pc, #552]	; (80004d8 <MX_GPIO_Init+0x2d8>)
 80002b0:	f003 fcfc 	bl	8003cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 80002b4:	4622      	mov	r2, r4
 80002b6:	2102      	movs	r1, #2
 80002b8:	4888      	ldr	r0, [pc, #544]	; (80004dc <MX_GPIO_Init+0x2dc>)
 80002ba:	f003 fcf7 	bl	8003cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80002be:	f8df a220 	ldr.w	sl, [pc, #544]	; 80004e0 <MX_GPIO_Init+0x2e0>
 80002c2:	4622      	mov	r2, r4
 80002c4:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 80002c8:	4650      	mov	r0, sl
 80002ca:	f003 fcef 	bl	8003cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13, GPIO_PIN_RESET);
 80002ce:	f8df b214 	ldr.w	fp, [pc, #532]	; 80004e4 <MX_GPIO_Init+0x2e4>
 80002d2:	4622      	mov	r2, r4
 80002d4:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80002d8:	4658      	mov	r0, fp
 80002da:	f003 fce7 	bl	8003cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80002de:	f8df 8208 	ldr.w	r8, [pc, #520]	; 80004e8 <MX_GPIO_Init+0x2e8>
 80002e2:	4622      	mov	r2, r4
 80002e4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80002e8:	4640      	mov	r0, r8
 80002ea:	f003 fcdf 	bl	8003cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80002ee:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 80004ec <MX_GPIO_Init+0x2ec>
 80002f2:	4622      	mov	r2, r4
 80002f4:	2140      	movs	r1, #64	; 0x40
 80002f6:	4648      	mov	r0, r9
 80002f8:	f003 fcd8 	bl	8003cac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80002fc:	230c      	movs	r3, #12
 80002fe:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000300:	2502      	movs	r5, #2
 8000302:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000304:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000306:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000308:	230d      	movs	r3, #13
 800030a:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800030c:	a909      	add	r1, sp, #36	; 0x24
 800030e:	4650      	mov	r0, sl
 8000310:	f003 fb3a 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000314:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000318:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800031a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800031e:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000322:	a909      	add	r1, sp, #36	; 0x24
 8000324:	4648      	mov	r0, r9
 8000326:	f003 fb2f 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800032a:	2307      	movs	r3, #7
 800032c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800032e:	2312      	movs	r3, #18
 8000330:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000334:	2603      	movs	r6, #3
 8000336:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000338:	2304      	movs	r3, #4
 800033a:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800033c:	a909      	add	r1, sp, #36	; 0x24
 800033e:	4866      	ldr	r0, [pc, #408]	; (80004d8 <MX_GPIO_Init+0x2d8>)
 8000340:	f003 fb22 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
 8000344:	f44f 539c 	mov.w	r3, #4992	; 0x1380
 8000348:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034a:	2701      	movs	r7, #1
 800034c:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000350:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000352:	a909      	add	r1, sp, #36	; 0x24
 8000354:	4860      	ldr	r0, [pc, #384]	; (80004d8 <MX_GPIO_Init+0x2d8>)
 8000356:	f003 fb17 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800035a:	233f      	movs	r3, #63	; 0x3f
 800035c:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800035e:	230b      	movs	r3, #11
 8000360:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000364:	a909      	add	r1, sp, #36	; 0x24
 8000366:	4648      	mov	r0, r9
 8000368:	f003 fb0e 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800036c:	2310      	movs	r3, #16
 800036e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000370:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000374:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000378:	a909      	add	r1, sp, #36	; 0x24
 800037a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037e:	f003 fb03 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000382:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000384:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000386:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000388:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800038a:	a909      	add	r1, sp, #36	; 0x24
 800038c:	4853      	ldr	r0, [pc, #332]	; (80004dc <MX_GPIO_Init+0x2dc>)
 800038e:	f003 fafb 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000392:	f44f 531e 	mov.w	r3, #10112	; 0x2780
 8000396:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000398:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800039e:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003a0:	a909      	add	r1, sp, #36	; 0x24
 80003a2:	4650      	mov	r0, sl
 80003a4:	f003 faf0 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80003a8:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80003ac:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ae:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003b4:	a909      	add	r1, sp, #36	; 0x24
 80003b6:	4650      	mov	r0, sl
 80003b8:	f003 fae6 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13;
 80003bc:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80003c0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c6:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003c8:	a909      	add	r1, sp, #36	; 0x24
 80003ca:	4658      	mov	r0, fp
 80003cc:	f003 fadc 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80003d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003d6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003da:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80003dc:	230d      	movs	r3, #13
 80003de:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e0:	a909      	add	r1, sp, #36	; 0x24
 80003e2:	4658      	mov	r0, fp
 80003e4:	f003 fad0 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80003e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80003ec:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003ee:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003f2:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80003f4:	2307      	movs	r3, #7
 80003f6:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003f8:	a909      	add	r1, sp, #36	; 0x24
 80003fa:	4640      	mov	r0, r8
 80003fc:	f003 fac4 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000400:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000404:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800040c:	a909      	add	r1, sp, #36	; 0x24
 800040e:	4640      	mov	r0, r8
 8000410:	f003 faba 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000414:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8000418:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800041c:	2311      	movs	r3, #17
 800041e:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000420:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000422:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000424:	a909      	add	r1, sp, #36	; 0x24
 8000426:	4648      	mov	r0, r9
 8000428:	f003 faae 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800042c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000430:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000432:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000436:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000438:	230c      	movs	r3, #12
 800043a:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800043c:	a909      	add	r1, sp, #36	; 0x24
 800043e:	4648      	mov	r0, r9
 8000440:	f003 faa2 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000444:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000448:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800044a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800044e:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000450:	f04f 090a 	mov.w	r9, #10
 8000454:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000458:	a909      	add	r1, sp, #36	; 0x24
 800045a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800045e:	f003 fa93 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000466:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000468:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046c:	a909      	add	r1, sp, #36	; 0x24
 800046e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000472:	f003 fa89 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000476:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000478:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800047c:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800047e:	2309      	movs	r3, #9
 8000480:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000482:	a909      	add	r1, sp, #36	; 0x24
 8000484:	4640      	mov	r0, r8
 8000486:	f003 fa7f 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800048a:	2304      	movs	r3, #4
 800048c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000492:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000494:	230c      	movs	r3, #12
 8000496:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000498:	a909      	add	r1, sp, #36	; 0x24
 800049a:	4640      	mov	r0, r8
 800049c:	f003 fa74 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80004a0:	2378      	movs	r3, #120	; 0x78
 80004a2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a4:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004a8:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004aa:	2307      	movs	r3, #7
 80004ac:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004ae:	a909      	add	r1, sp, #36	; 0x24
 80004b0:	4640      	mov	r0, r8
 80004b2:	f003 fa69 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80004b6:	2330      	movs	r3, #48	; 0x30
 80004b8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ba:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004be:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80004c0:	2306      	movs	r3, #6
 80004c2:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c4:	a909      	add	r1, sp, #36	; 0x24
 80004c6:	4658      	mov	r0, fp
 80004c8:	f003 fa5e 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004cc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80004d0:	e00e      	b.n	80004f0 <MX_GPIO_Init+0x2f0>
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000
 80004d8:	48001400 	.word	0x48001400
 80004dc:	48001800 	.word	0x48001800
 80004e0:	48001000 	.word	0x48001000
 80004e4:	48000400 	.word	0x48000400
 80004e8:	48000c00 	.word	0x48000c00
 80004ec:	48000800 	.word	0x48000800
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004f0:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f4:	a909      	add	r1, sp, #36	; 0x24
 80004f6:	4658      	mov	r0, fp
 80004f8:	f003 fa46 	bl	8003988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80004fc:	4622      	mov	r2, r4
 80004fe:	4621      	mov	r1, r4
 8000500:	4648      	mov	r0, r9
 8000502:	f003 fa0a 	bl	800391a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000506:	4648      	mov	r0, r9
 8000508:	f003 fa23 	bl	8003952 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800050c:	4622      	mov	r2, r4
 800050e:	4621      	mov	r1, r4
 8000510:	2028      	movs	r0, #40	; 0x28
 8000512:	f003 fa02 	bl	800391a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000516:	2028      	movs	r0, #40	; 0x28
 8000518:	f003 fa1b 	bl	8003952 <HAL_NVIC_EnableIRQ>

}
 800051c:	b00f      	add	sp, #60	; 0x3c
 800051e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000522 <movePlot>:
void movePlot(int dXStep, int dYStep){
 8000522:	b508      	push	{r3, lr}
	plotXStep += dXStep;
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <movePlot+0x32>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4402      	add	r2, r0
 800052a:	601a      	str	r2, [r3, #0]
	plotYStep += dYStep;
 800052c:	685a      	ldr	r2, [r3, #4]
 800052e:	440a      	add	r2, r1
 8000530:	605a      	str	r2, [r3, #4]
	if(dXStep == 0){
 8000532:	b148      	cbz	r0, 8000548 <movePlot+0x26>
	}else if(dYStep == 0){
 8000534:	b959      	cbnz	r1, 800054e <movePlot+0x2c>
		stepDiag(dXStep, 0);
 8000536:	f002 f8c1 	bl	80026bc <stepDiag>
	printf("movePlot: now at (%d, %d)\n\r", plotXStep, plotYStep);
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <movePlot+0x32>)
 800053c:	685a      	ldr	r2, [r3, #4]
 800053e:	6819      	ldr	r1, [r3, #0]
 8000540:	4805      	ldr	r0, [pc, #20]	; (8000558 <movePlot+0x36>)
 8000542:	f008 fcff 	bl	8008f44 <iprintf>
}
 8000546:	bd08      	pop	{r3, pc}
		stepDiag(0, dYStep);
 8000548:	f002 f8b8 	bl	80026bc <stepDiag>
 800054c:	e7f5      	b.n	800053a <movePlot+0x18>
		stepDiag(dXStep, dYStep);
 800054e:	f002 f8b5 	bl	80026bc <stepDiag>
 8000552:	e7f2      	b.n	800053a <movePlot+0x18>
 8000554:	20000240 	.word	0x20000240
 8000558:	0800b110 	.word	0x0800b110

0800055c <moveTo>:
{
 800055c:	b508      	push	{r3, lr}
  int dXStep = xPos - plotXStep;
 800055e:	4b04      	ldr	r3, [pc, #16]	; (8000570 <moveTo+0x14>)
 8000560:	681a      	ldr	r2, [r3, #0]
  int dYStep = yPos - plotYStep;
 8000562:	685b      	ldr	r3, [r3, #4]
  movePlot(dXStep, dYStep);
 8000564:	1ac9      	subs	r1, r1, r3
 8000566:	1a80      	subs	r0, r0, r2
 8000568:	f7ff ffdb 	bl	8000522 <movePlot>
}
 800056c:	bd08      	pop	{r3, pc}
 800056e:	bf00      	nop
 8000570:	20000240 	.word	0x20000240

08000574 <scaleN64Plot>:
void scaleN64Plot(signed char xval, signed char yval, int threshold){
 8000574:	b510      	push	{r4, lr}
    plotXGoalStep = 0;
 8000576:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <scaleN64Plot+0x7c>)
 8000578:	2400      	movs	r4, #0
 800057a:	609c      	str	r4, [r3, #8]
    plotYGoalStep = 0;
 800057c:	60dc      	str	r4, [r3, #12]
    if(xval > threshold && plotXStep < (STEP_PER_CM * TRAVEL_X_CM) - stepDistance)
 800057e:	4290      	cmp	r0, r2
 8000580:	dd07      	ble.n	8000592 <scaleN64Plot+0x1e>
 8000582:	681c      	ldr	r4, [r3, #0]
 8000584:	f240 739d 	movw	r3, #1949	; 0x79d
 8000588:	429c      	cmp	r4, r3
 800058a:	dc02      	bgt.n	8000592 <scaleN64Plot+0x1e>
      plotXGoalStep =  stepDistance;
 800058c:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <scaleN64Plot+0x7c>)
 800058e:	2432      	movs	r4, #50	; 0x32
 8000590:	609c      	str	r4, [r3, #8]
    if(xval < -1 * threshold && plotXStep > stepDistance)
 8000592:	4253      	negs	r3, r2
 8000594:	4298      	cmp	r0, r3
 8000596:	da07      	bge.n	80005a8 <scaleN64Plot+0x34>
 8000598:	4815      	ldr	r0, [pc, #84]	; (80005f0 <scaleN64Plot+0x7c>)
 800059a:	6800      	ldr	r0, [r0, #0]
 800059c:	2832      	cmp	r0, #50	; 0x32
 800059e:	dd03      	ble.n	80005a8 <scaleN64Plot+0x34>
      plotXGoalStep =  -1 * stepDistance;
 80005a0:	4813      	ldr	r0, [pc, #76]	; (80005f0 <scaleN64Plot+0x7c>)
 80005a2:	f06f 0431 	mvn.w	r4, #49	; 0x31
 80005a6:	6084      	str	r4, [r0, #8]
    if(yval > threshold && plotYStep < (STEP_PER_CM * TRAVEL_Y_CM) - stepDistance)
 80005a8:	4291      	cmp	r1, r2
 80005aa:	dd08      	ble.n	80005be <scaleN64Plot+0x4a>
 80005ac:	4a10      	ldr	r2, [pc, #64]	; (80005f0 <scaleN64Plot+0x7c>)
 80005ae:	6850      	ldr	r0, [r2, #4]
 80005b0:	f240 729d 	movw	r2, #1949	; 0x79d
 80005b4:	4290      	cmp	r0, r2
 80005b6:	dc02      	bgt.n	80005be <scaleN64Plot+0x4a>
      plotYGoalStep =  stepDistance;
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <scaleN64Plot+0x7c>)
 80005ba:	2032      	movs	r0, #50	; 0x32
 80005bc:	60d0      	str	r0, [r2, #12]
    if(yval < -1 * threshold && plotYStep > stepDistance)
 80005be:	428b      	cmp	r3, r1
 80005c0:	dd07      	ble.n	80005d2 <scaleN64Plot+0x5e>
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <scaleN64Plot+0x7c>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	2b32      	cmp	r3, #50	; 0x32
 80005c8:	dd03      	ble.n	80005d2 <scaleN64Plot+0x5e>
      plotYGoalStep =  -1 * stepDistance;
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <scaleN64Plot+0x7c>)
 80005cc:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80005d0:	60da      	str	r2, [r3, #12]
    printf("N64Plot: going to (%d, %d)\n\r", plotXStep+ plotXGoalStep, plotYStep + plotYGoalStep);
 80005d2:	4c07      	ldr	r4, [pc, #28]	; (80005f0 <scaleN64Plot+0x7c>)
 80005d4:	6860      	ldr	r0, [r4, #4]
 80005d6:	68e2      	ldr	r2, [r4, #12]
 80005d8:	6821      	ldr	r1, [r4, #0]
 80005da:	68a3      	ldr	r3, [r4, #8]
 80005dc:	4402      	add	r2, r0
 80005de:	4419      	add	r1, r3
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <scaleN64Plot+0x80>)
 80005e2:	f008 fcaf 	bl	8008f44 <iprintf>
    movePlot(plotXGoalStep, plotYGoalStep);
 80005e6:	68e1      	ldr	r1, [r4, #12]
 80005e8:	68a0      	ldr	r0, [r4, #8]
 80005ea:	f7ff ff9a 	bl	8000522 <movePlot>
}
 80005ee:	bd10      	pop	{r4, pc}
 80005f0:	20000240 	.word	0x20000240
 80005f4:	0800b12c 	.word	0x0800b12c

080005f8 <scaleN64Display>:
{
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	b082      	sub	sp, #8
    displayXGoalStep = displayXStep;
 80005fc:	4b2d      	ldr	r3, [pc, #180]	; (80006b4 <scaleN64Display+0xbc>)
 80005fe:	681d      	ldr	r5, [r3, #0]
 8000600:	605d      	str	r5, [r3, #4]
    displayYGoalStep = displayYStep;
 8000602:	689c      	ldr	r4, [r3, #8]
 8000604:	60dc      	str	r4, [r3, #12]
    if(yval > threshold && displayXStep < HX8357_TFTWIDTH - 20)
 8000606:	4291      	cmp	r1, r2
 8000608:	dd05      	ble.n	8000616 <scaleN64Display+0x1e>
 800060a:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
 800060e:	da02      	bge.n	8000616 <scaleN64Display+0x1e>
        displayXGoalStep =  displayXStep + stepDistance;
 8000610:	1dab      	adds	r3, r5, #6
 8000612:	4e28      	ldr	r6, [pc, #160]	; (80006b4 <scaleN64Display+0xbc>)
 8000614:	6073      	str	r3, [r6, #4]
    if(yval < -1 * threshold && displayXStep > 20)
 8000616:	4253      	negs	r3, r2
 8000618:	4299      	cmp	r1, r3
 800061a:	da04      	bge.n	8000626 <scaleN64Display+0x2e>
 800061c:	2d14      	cmp	r5, #20
 800061e:	dd02      	ble.n	8000626 <scaleN64Display+0x2e>
        displayXGoalStep =  displayXStep - stepDistance;
 8000620:	3d06      	subs	r5, #6
 8000622:	4924      	ldr	r1, [pc, #144]	; (80006b4 <scaleN64Display+0xbc>)
 8000624:	604d      	str	r5, [r1, #4]
    if(xval < -1 * threshold && displayYStep > 20)
 8000626:	4283      	cmp	r3, r0
 8000628:	dd04      	ble.n	8000634 <scaleN64Display+0x3c>
 800062a:	2c14      	cmp	r4, #20
 800062c:	dd02      	ble.n	8000634 <scaleN64Display+0x3c>
        displayYGoalStep =  displayYStep - stepDistance;
 800062e:	1fa3      	subs	r3, r4, #6
 8000630:	4920      	ldr	r1, [pc, #128]	; (80006b4 <scaleN64Display+0xbc>)
 8000632:	60cb      	str	r3, [r1, #12]
    if(xval > threshold &&displayYStep < HX8357_TFTHEIGHT - 20)
 8000634:	4290      	cmp	r0, r2
 8000636:	dd05      	ble.n	8000644 <scaleN64Display+0x4c>
 8000638:	f5b4 7fe6 	cmp.w	r4, #460	; 0x1cc
 800063c:	da02      	bge.n	8000644 <scaleN64Display+0x4c>
        displayYGoalStep =  displayYStep + stepDistance;
 800063e:	3406      	adds	r4, #6
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <scaleN64Display+0xbc>)
 8000642:	60dc      	str	r4, [r3, #12]
    uint16_t XCenter = (plotYStep + plotYGoalStep) * (HX8357_TFTWIDTH) / (STEP_PER_CM * TRAVEL_Y_CM);
 8000644:	491c      	ldr	r1, [pc, #112]	; (80006b8 <scaleN64Display+0xc0>)
 8000646:	684a      	ldr	r2, [r1, #4]
 8000648:	68cb      	ldr	r3, [r1, #12]
 800064a:	441a      	add	r2, r3
 800064c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000650:	0192      	lsls	r2, r2, #6
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <scaleN64Display+0xc4>)
 8000654:	fb83 0402 	smull	r0, r4, r3, r2
 8000658:	17d0      	asrs	r0, r2, #31
 800065a:	ebc0 10e4 	rsb	r0, r0, r4, asr #7
 800065e:	b280      	uxth	r0, r0
	uint16_t YCenter = (plotXStep + plotXGoalStep) * (HX8357_TFTHEIGHT) / (STEP_PER_CM * TRAVEL_X_CM);
 8000660:	680a      	ldr	r2, [r1, #0]
 8000662:	6889      	ldr	r1, [r1, #8]
 8000664:	440a      	add	r2, r1
 8000666:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800066a:	0152      	lsls	r2, r2, #5
 800066c:	fb83 3102 	smull	r3, r1, r3, r2
 8000670:	17d3      	asrs	r3, r2, #31
 8000672:	ebc3 13e1 	rsb	r3, r3, r1, asr #7
 8000676:	b299      	uxth	r1, r3
	  if(XCenter + rectRadius >= HX8357_TFTWIDTH) XCenter -= rectRadius;
 8000678:	f5b0 7f9a 	cmp.w	r0, #308	; 0x134
 800067c:	db01      	blt.n	8000682 <scaleN64Display+0x8a>
 800067e:	380c      	subs	r0, #12
 8000680:	b280      	uxth	r0, r0
	  if(YCenter + rectRadius >= HX8357_TFTHEIGHT) YCenter -= rectRadius;
 8000682:	b29b      	uxth	r3, r3
 8000684:	f5b3 7fea 	cmp.w	r3, #468	; 0x1d4
 8000688:	db01      	blt.n	800068e <scaleN64Display+0x96>
 800068a:	390c      	subs	r1, #12
 800068c:	b289      	uxth	r1, r1
	  LCD_rect(XCenter, YCenter, XCenter + rectRadius, YCenter + rectRadius, drawColor);
 800068e:	f101 030c 	add.w	r3, r1, #12
 8000692:	f100 020c 	add.w	r2, r0, #12
 8000696:	4c08      	ldr	r4, [pc, #32]	; (80006b8 <scaleN64Display+0xc0>)
 8000698:	8a24      	ldrh	r4, [r4, #16]
 800069a:	9400      	str	r4, [sp, #0]
 800069c:	b29b      	uxth	r3, r3
 800069e:	b292      	uxth	r2, r2
 80006a0:	f001 fd62 	bl	8002168 <LCD_rect>
    displayXStep = displayXGoalStep;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <scaleN64Display+0xbc>)
 80006a6:	685a      	ldr	r2, [r3, #4]
 80006a8:	601a      	str	r2, [r3, #0]
    displayYStep = displayYGoalStep;
 80006aa:	68da      	ldr	r2, [r3, #12]
 80006ac:	609a      	str	r2, [r3, #8]
}
 80006ae:	b002      	add	sp, #8
 80006b0:	bd70      	pop	{r4, r5, r6, pc}
 80006b2:	bf00      	nop
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000240 	.word	0x20000240
 80006bc:	10624dd3 	.word	0x10624dd3

080006c0 <scaleIRPlot>:
{
 80006c0:	b538      	push	{r3, r4, r5, lr}
	if(data[0] != 0 && data[1] != 0)
 80006c2:	6803      	ldr	r3, [r0, #0]
 80006c4:	b10b      	cbz	r3, 80006ca <scaleIRPlot+0xa>
 80006c6:	6840      	ldr	r0, [r0, #4]
 80006c8:	b900      	cbnz	r0, 80006cc <scaleIRPlot+0xc>
}
 80006ca:	bd38      	pop	{r3, r4, r5, pc}
		int newX = data[0] * (STEP_PER_CM * TRAVEL_X_CM) / 320;
 80006cc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80006d0:	fb01 f303 	mul.w	r3, r1, r3
 80006d4:	4914      	ldr	r1, [pc, #80]	; (8000728 <scaleIRPlot+0x68>)
 80006d6:	fb81 2103 	smull	r2, r1, r1, r3
 80006da:	17db      	asrs	r3, r3, #31
 80006dc:	ebc3 13e1 	rsb	r3, r3, r1, asr #7
		newX = (STEP_PER_CM * TRAVEL_X_CM) - newX;
 80006e0:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
		int newY = data[1] * (STEP_PER_CM * TRAVEL_Y_CM) / 200;
 80006e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80006e8:	0040      	lsls	r0, r0, #1
		newY = (STEP_PER_CM * TRAVEL_Y_CM) - newY;
 80006ea:	f5c0 60fa 	rsb	r0, r0, #2000	; 0x7d0
		int newXDiff = newX - plotXStep;
 80006ee:	4c0f      	ldr	r4, [pc, #60]	; (800072c <scaleIRPlot+0x6c>)
 80006f0:	6821      	ldr	r1, [r4, #0]
 80006f2:	1a5b      	subs	r3, r3, r1
		int newYDiff = newY - plotYStep;
 80006f4:	6865      	ldr	r5, [r4, #4]
 80006f6:	1b40      	subs	r0, r0, r5
		int total = newXDiff + newYDiff;
 80006f8:	181a      	adds	r2, r3, r0
		plotXGoalStep = newXDiff * stepDistance / total;
 80006fa:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80006fe:	fb0c f303 	mul.w	r3, ip, r3
 8000702:	fb93 f3f2 	sdiv	r3, r3, r2
 8000706:	60a3      	str	r3, [r4, #8]
		plotYGoalStep = newYDiff * stepDistance / total;
 8000708:	fb0c f000 	mul.w	r0, ip, r0
 800070c:	fb90 f2f2 	sdiv	r2, r0, r2
 8000710:	60e2      	str	r2, [r4, #12]
		printf("IRPlot: going to (%d, %d)\n\r", plotXStep+ plotXGoalStep, plotYStep + plotYGoalStep);
 8000712:	442a      	add	r2, r5
 8000714:	4419      	add	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <scaleIRPlot+0x70>)
 8000718:	f008 fc14 	bl	8008f44 <iprintf>
		movePlot(plotXGoalStep, plotYGoalStep);
 800071c:	68e1      	ldr	r1, [r4, #12]
 800071e:	68a0      	ldr	r0, [r4, #8]
 8000720:	f7ff feff 	bl	8000522 <movePlot>
}
 8000724:	e7d1      	b.n	80006ca <scaleIRPlot+0xa>
 8000726:	bf00      	nop
 8000728:	66666667 	.word	0x66666667
 800072c:	20000240 	.word	0x20000240
 8000730:	0800b14c 	.word	0x0800b14c

08000734 <scaleIRDisplay>:
	if(data[0] != 0 && data[1] != 0)
 8000734:	6803      	ldr	r3, [r0, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d054      	beq.n	80007e4 <scaleIRDisplay+0xb0>
 800073a:	6842      	ldr	r2, [r0, #4]
 800073c:	2a00      	cmp	r2, #0
 800073e:	d051      	beq.n	80007e4 <scaleIRDisplay+0xb0>
{
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	b083      	sub	sp, #12
		int newX = data[0] * (STEP_PER_CM * TRAVEL_X_CM) / 320;
 8000744:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000748:	fb01 f303 	mul.w	r3, r1, r3
 800074c:	4926      	ldr	r1, [pc, #152]	; (80007e8 <scaleIRDisplay+0xb4>)
 800074e:	fb81 0103 	smull	r0, r1, r1, r3
 8000752:	17db      	asrs	r3, r3, #31
 8000754:	ebc3 13e1 	rsb	r3, r3, r1, asr #7
		newX = (STEP_PER_CM * TRAVEL_X_CM) - newX;
 8000758:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
		int newY = data[1] * (STEP_PER_CM * TRAVEL_Y_CM) / 200;
 800075c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8000760:	0049      	lsls	r1, r1, #1
		newY = (STEP_PER_CM * TRAVEL_Y_CM) - newY;
 8000762:	f5c1 61fa 	rsb	r1, r1, #2000	; 0x7d0
		int newXDiff = newX - plotXStep;
 8000766:	4d21      	ldr	r5, [pc, #132]	; (80007ec <scaleIRDisplay+0xb8>)
 8000768:	6828      	ldr	r0, [r5, #0]
 800076a:	1a1b      	subs	r3, r3, r0
		int newYDiff = newY - plotYStep;
 800076c:	686c      	ldr	r4, [r5, #4]
 800076e:	1b09      	subs	r1, r1, r4
		int total = newXDiff + newYDiff;
 8000770:	eb03 0c01 	add.w	ip, r3, r1
		plotXGoalStep = newXDiff * stepDistance / total;
 8000774:	2264      	movs	r2, #100	; 0x64
 8000776:	fb02 f303 	mul.w	r3, r2, r3
 800077a:	fb93 f3fc 	sdiv	r3, r3, ip
 800077e:	60ab      	str	r3, [r5, #8]
		plotYGoalStep = newYDiff * stepDistance / total;
 8000780:	fb01 f202 	mul.w	r2, r1, r2
 8000784:	fb92 f2fc 	sdiv	r2, r2, ip
 8000788:	60ea      	str	r2, [r5, #12]
		uint16_t XCenter = (plotXStep + plotXGoalStep) * (HX8357_TFTHEIGHT) / (STEP_PER_CM * TRAVEL_X_CM);
 800078a:	4403      	add	r3, r0
 800078c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000790:	0159      	lsls	r1, r3, #5
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <scaleIRDisplay+0xbc>)
 8000794:	fb83 0501 	smull	r0, r5, r3, r1
 8000798:	17c8      	asrs	r0, r1, #31
 800079a:	ebc0 10e5 	rsb	r0, r0, r5, asr #7
 800079e:	b280      	uxth	r0, r0
		uint16_t YCenter = (plotYStep + plotYGoalStep) * (HX8357_TFTWIDTH) / (STEP_PER_CM * TRAVEL_Y_CM);
 80007a0:	4422      	add	r2, r4
 80007a2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80007a6:	0192      	lsls	r2, r2, #6
 80007a8:	fb83 1302 	smull	r1, r3, r3, r2
 80007ac:	17d2      	asrs	r2, r2, #31
 80007ae:	ebc2 13e3 	rsb	r3, r2, r3, asr #7
 80007b2:	b299      	uxth	r1, r3
	  if(XCenter + rectRadius >= HX8357_TFTWIDTH) XCenter -= rectRadius;
 80007b4:	f5b0 7f9a 	cmp.w	r0, #308	; 0x134
 80007b8:	db01      	blt.n	80007be <scaleIRDisplay+0x8a>
 80007ba:	380c      	subs	r0, #12
 80007bc:	b280      	uxth	r0, r0
	  if(YCenter + rectRadius >= HX8357_TFTHEIGHT) YCenter -= rectRadius;
 80007be:	b29b      	uxth	r3, r3
 80007c0:	f5b3 7fea 	cmp.w	r3, #468	; 0x1d4
 80007c4:	db01      	blt.n	80007ca <scaleIRDisplay+0x96>
 80007c6:	390c      	subs	r1, #12
 80007c8:	b289      	uxth	r1, r1
	  LCD_rect(XCenter, YCenter, XCenter + rectRadius, YCenter + rectRadius, drawColor);
 80007ca:	f101 030c 	add.w	r3, r1, #12
 80007ce:	f100 020c 	add.w	r2, r0, #12
 80007d2:	4c06      	ldr	r4, [pc, #24]	; (80007ec <scaleIRDisplay+0xb8>)
 80007d4:	8a24      	ldrh	r4, [r4, #16]
 80007d6:	9400      	str	r4, [sp, #0]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	b292      	uxth	r2, r2
 80007dc:	f001 fcc4 	bl	8002168 <LCD_rect>
}
 80007e0:	b003      	add	sp, #12
 80007e2:	bd30      	pop	{r4, r5, pc}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	66666667 	.word	0x66666667
 80007ec:	20000240 	.word	0x20000240
 80007f0:	10624dd3 	.word	0x10624dd3

080007f4 <drawPlotBounds>:
void drawPlotBounds(){
 80007f4:	b510      	push	{r4, lr}
	movePlot((int)(STEP_PER_CM * TRAVEL_X_CM), 0);
 80007f6:	2100      	movs	r1, #0
 80007f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007fc:	f7ff fe91 	bl	8000522 <movePlot>
	movePlot(0, (int)(STEP_PER_CM * TRAVEL_Y_CM));
 8000800:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000804:	2000      	movs	r0, #0
 8000806:	f7ff fe8c 	bl	8000522 <movePlot>
	movePlot((int)(-STEP_PER_CM * TRAVEL_X_CM), 0);
 800080a:	4c05      	ldr	r4, [pc, #20]	; (8000820 <drawPlotBounds+0x2c>)
 800080c:	2100      	movs	r1, #0
 800080e:	4620      	mov	r0, r4
 8000810:	f7ff fe87 	bl	8000522 <movePlot>
	movePlot(0, (int)(-STEP_PER_CM * TRAVEL_Y_CM));
 8000814:	4621      	mov	r1, r4
 8000816:	2000      	movs	r0, #0
 8000818:	f7ff fe83 	bl	8000522 <movePlot>
}
 800081c:	bd10      	pop	{r4, pc}
 800081e:	bf00      	nop
 8000820:	fffff830 	.word	0xfffff830

08000824 <reCalibrate>:
	if((vals >> 28) & 0x1)
 8000824:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8000828:	d003      	beq.n	8000832 <reCalibrate+0xe>
		plotXStep = 0;
 800082a:	4b02      	ldr	r3, [pc, #8]	; (8000834 <reCalibrate+0x10>)
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
		plotYStep = 0;
 8000830:	605a      	str	r2, [r3, #4]
}
 8000832:	4770      	bx	lr
 8000834:	20000240 	.word	0x20000240

08000838 <resetAll>:
void resetAll(){
 8000838:	b538      	push	{r3, r4, r5, lr}
	*tim16_ccr1 = SERVO_UP;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <resetAll+0x3c>)
 800083c:	227d      	movs	r2, #125	; 0x7d
 800083e:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
	servoState = 0;
 8000842:	4c0d      	ldr	r4, [pc, #52]	; (8000878 <resetAll+0x40>)
 8000844:	2300      	movs	r3, #0
 8000846:	74a3      	strb	r3, [r4, #18]
	mode = N64;
 8000848:	4d0c      	ldr	r5, [pc, #48]	; (800087c <resetAll+0x44>)
 800084a:	2201      	movs	r2, #1
 800084c:	742a      	strb	r2, [r5, #16]
	drawColor = 0x0000;
 800084e:	8223      	strh	r3, [r4, #16]
	LCD_fill(HX8357_WHITE);
 8000850:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000854:	f001 fcd4 	bl	8002200 <LCD_fill>
	displayXStep = HX8357_TFTWIDTH/2;
 8000858:	23a0      	movs	r3, #160	; 0xa0
 800085a:	602b      	str	r3, [r5, #0]
	displayYStep = HX8357_TFTHEIGHT/2;
 800085c:	23f0      	movs	r3, #240	; 0xf0
 800085e:	60ab      	str	r3, [r5, #8]
	moveTo(100, plotYStep);
 8000860:	6861      	ldr	r1, [r4, #4]
 8000862:	2064      	movs	r0, #100	; 0x64
 8000864:	f7ff fe7a 	bl	800055c <moveTo>
	moveTo(100, 100);
 8000868:	2164      	movs	r1, #100	; 0x64
 800086a:	4608      	mov	r0, r1
 800086c:	f7ff fe76 	bl	800055c <moveTo>
}
 8000870:	bd38      	pop	{r3, r4, r5, pc}
 8000872:	bf00      	nop
 8000874:	40014000 	.word	0x40014000
 8000878:	20000240 	.word	0x20000240
 800087c:	20000000 	.word	0x20000000

08000880 <colorChange>:
	switch(drawColor){
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <colorChange+0x7c>)
 8000882:	8a1b      	ldrh	r3, [r3, #16]
 8000884:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000888:	4293      	cmp	r3, r2
 800088a:	d02c      	beq.n	80008e6 <colorChange+0x66>
 800088c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000890:	d20f      	bcs.n	80008b2 <colorChange+0x32>
 8000892:	2b1f      	cmp	r3, #31
 8000894:	d022      	beq.n	80008dc <colorChange+0x5c>
 8000896:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800089a:	d104      	bne.n	80008a6 <colorChange+0x26>
		drawColor = 0x07FF;
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <colorChange+0x7c>)
 800089e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a2:	821a      	strh	r2, [r3, #16]
		break;
 80008a4:	4770      	bx	lr
	switch(drawColor){
 80008a6:	b91b      	cbnz	r3, 80008b0 <colorChange+0x30>
		drawColor = 0x001F;
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <colorChange+0x7c>)
 80008aa:	221f      	movs	r2, #31
 80008ac:	821a      	strh	r2, [r3, #16]
		break;
 80008ae:	4770      	bx	lr
 80008b0:	4770      	bx	lr
	switch(drawColor){
 80008b2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d01a      	beq.n	80008f0 <colorChange+0x70>
 80008ba:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80008be:	4293      	cmp	r3, r2
 80008c0:	d103      	bne.n	80008ca <colorChange+0x4a>
		drawColor = 0x0000;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <colorChange+0x7c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	821a      	strh	r2, [r3, #16]
}
 80008c8:	4770      	bx	lr
	switch(drawColor){
 80008ca:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 80008ce:	d104      	bne.n	80008da <colorChange+0x5a>
		drawColor = 0x07E0;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <colorChange+0x7c>)
 80008d2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80008d6:	821a      	strh	r2, [r3, #16]
		break;
 80008d8:	4770      	bx	lr
 80008da:	4770      	bx	lr
		drawColor = 0xF800;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <colorChange+0x7c>)
 80008de:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80008e2:	821a      	strh	r2, [r3, #16]
		break;
 80008e4:	4770      	bx	lr
		drawColor = 0xF81F;
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <colorChange+0x7c>)
 80008e8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80008ec:	821a      	strh	r2, [r3, #16]
		break;
 80008ee:	4770      	bx	lr
		drawColor = 0xFFE0;
 80008f0:	4b02      	ldr	r3, [pc, #8]	; (80008fc <colorChange+0x7c>)
 80008f2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80008f6:	821a      	strh	r2, [r3, #16]
		break;
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000240 	.word	0x20000240

08000900 <modeSwap>:
	mode = !mode;
 8000900:	4a03      	ldr	r2, [pc, #12]	; (8000910 <modeSwap+0x10>)
 8000902:	7c13      	ldrb	r3, [r2, #16]
 8000904:	fab3 f383 	clz	r3, r3
 8000908:	095b      	lsrs	r3, r3, #5
 800090a:	7413      	strb	r3, [r2, #16]
}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20000000 	.word	0x20000000

08000914 <settingCheck>:
{
 8000914:	b510      	push	{r4, lr}
    if(aVal) modeSwap();
 8000916:	1e04      	subs	r4, r0, #0
 8000918:	db03      	blt.n	8000922 <settingCheck+0xe>
    if(lBumper) colorChange();
 800091a:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 800091e:	d103      	bne.n	8000928 <settingCheck+0x14>
}
 8000920:	bd10      	pop	{r4, pc}
    if(aVal) modeSwap();
 8000922:	f7ff ffed 	bl	8000900 <modeSwap>
 8000926:	e7f8      	b.n	800091a <settingCheck+0x6>
    if(lBumper) colorChange();
 8000928:	f7ff ffaa 	bl	8000880 <colorChange>
}
 800092c:	e7f8      	b.n	8000920 <settingCheck+0xc>

0800092e <toggleServo>:
	if(servoState){
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <toggleServo+0x26>)
 8000930:	7c9b      	ldrb	r3, [r3, #18]
 8000932:	b13b      	cbz	r3, 8000944 <toggleServo+0x16>
		*tim16_ccr1 = SERVO_UP;
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <toggleServo+0x2a>)
 8000936:	227d      	movs	r2, #125	; 0x7d
 8000938:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
		servoState = 0;
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <toggleServo+0x26>)
 800093e:	2200      	movs	r2, #0
 8000940:	749a      	strb	r2, [r3, #18]
 8000942:	4770      	bx	lr
		*tim16_ccr1 = SERVO_DOWN;
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <toggleServo+0x2a>)
 8000946:	2296      	movs	r2, #150	; 0x96
 8000948:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
		servoState = 1;
 800094c:	4b01      	ldr	r3, [pc, #4]	; (8000954 <toggleServo+0x26>)
 800094e:	2201      	movs	r2, #1
 8000950:	749a      	strb	r2, [r3, #18]
}
 8000952:	4770      	bx	lr
 8000954:	20000240 	.word	0x20000240
 8000958:	40014000 	.word	0x40014000

0800095c <handleServo>:
void handleServo(char ZState){
 800095c:	b510      	push	{r4, lr}
	if(ZState && !ZPrevState){
 800095e:	4604      	mov	r4, r0
 8000960:	b110      	cbz	r0, 8000968 <handleServo+0xc>
 8000962:	4b04      	ldr	r3, [pc, #16]	; (8000974 <handleServo+0x18>)
 8000964:	7cdb      	ldrb	r3, [r3, #19]
 8000966:	b113      	cbz	r3, 800096e <handleServo+0x12>
	ZPrevState = ZState;
 8000968:	4b02      	ldr	r3, [pc, #8]	; (8000974 <handleServo+0x18>)
 800096a:	74dc      	strb	r4, [r3, #19]
}
 800096c:	bd10      	pop	{r4, pc}
		toggleServo();
 800096e:	f7ff ffde 	bl	800092e <toggleServo>
 8000972:	e7f9      	b.n	8000968 <handleServo+0xc>
 8000974:	20000240 	.word	0x20000240

08000978 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000978:	b500      	push	{lr}
 800097a:	b083      	sub	sp, #12
 800097c:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800097e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000982:	2201      	movs	r2, #1
 8000984:	a901      	add	r1, sp, #4
 8000986:	4803      	ldr	r0, [pc, #12]	; (8000994 <__io_putchar+0x1c>)
 8000988:	f006 ffe6 	bl	8007958 <HAL_UART_Transmit>
  return ch;
}
 800098c:	9801      	ldr	r0, [sp, #4]
 800098e:	b003      	add	sp, #12
 8000990:	f85d fb04 	ldr.w	pc, [sp], #4
 8000994:	20000254 	.word	0x20000254

08000998 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099a:	e7fe      	b.n	800099a <Error_Handler+0x2>

0800099c <MX_SPI1_Init>:
{
 800099c:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800099e:	4817      	ldr	r0, [pc, #92]	; (80009fc <MX_SPI1_Init+0x60>)
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <MX_SPI1_Init+0x64>)
 80009a2:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009a6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80009aa:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ae:	2300      	movs	r3, #0
 80009b0:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009b8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009bc:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c0:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c8:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009cc:	2208      	movs	r2, #8
 80009ce:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d2:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d6:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009da:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  hspi1.Init.CRCPolynomial = 7;
 80009de:	2107      	movs	r1, #7
 80009e0:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009e4:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e8:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ec:	30a4      	adds	r0, #164	; 0xa4
 80009ee:	f005 fab1 	bl	8005f54 <HAL_SPI_Init>
 80009f2:	b900      	cbnz	r0, 80009f6 <MX_SPI1_Init+0x5a>
}
 80009f4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80009f6:	f7ff ffcf 	bl	8000998 <Error_Handler>
 80009fa:	bf00      	nop
 80009fc:	20000240 	.word	0x20000240
 8000a00:	40013000 	.word	0x40013000

08000a04 <MX_TIM4_Init>:
{
 8000a04:	b500      	push	{lr}
 8000a06:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a08:	2300      	movs	r3, #0
 8000a0a:	9304      	str	r3, [sp, #16]
 8000a0c:	9305      	str	r3, [sp, #20]
 8000a0e:	9306      	str	r3, [sp, #24]
 8000a10:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	9303      	str	r3, [sp, #12]
  htim4.Instance = TIM4;
 8000a18:	4817      	ldr	r0, [pc, #92]	; (8000a78 <MX_TIM4_Init+0x74>)
 8000a1a:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <MX_TIM4_Init+0x78>)
 8000a1c:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
  htim4.Init.Prescaler = 11;
 8000a20:	220b      	movs	r2, #11
 8000a22:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
  htim4.Init.Period = 0xffff-1;
 8000a2a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000a2e:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a32:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a36:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a3a:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8000a3e:	f005 fdff 	bl	8006640 <HAL_TIM_Base_Init>
 8000a42:	b990      	cbnz	r0, 8000a6a <MX_TIM4_Init+0x66>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a48:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a4a:	a904      	add	r1, sp, #16
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <MX_TIM4_Init+0x7c>)
 8000a4e:	f006 f933 	bl	8006cb8 <HAL_TIM_ConfigClockSource>
 8000a52:	b960      	cbnz	r0, 8000a6e <MX_TIM4_Init+0x6a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a54:	2300      	movs	r3, #0
 8000a56:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a58:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a5a:	a901      	add	r1, sp, #4
 8000a5c:	4808      	ldr	r0, [pc, #32]	; (8000a80 <MX_TIM4_Init+0x7c>)
 8000a5e:	f006 fe25 	bl	80076ac <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	b930      	cbnz	r0, 8000a72 <MX_TIM4_Init+0x6e>
}
 8000a64:	b009      	add	sp, #36	; 0x24
 8000a66:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000a6a:	f7ff ff95 	bl	8000998 <Error_Handler>
    Error_Handler();
 8000a6e:	f7ff ff93 	bl	8000998 <Error_Handler>
    Error_Handler();
 8000a72:	f7ff ff91 	bl	8000998 <Error_Handler>
 8000a76:	bf00      	nop
 8000a78:	20000240 	.word	0x20000240
 8000a7c:	40000800 	.word	0x40000800
 8000a80:	20000348 	.word	0x20000348

08000a84 <MX_LPUART1_UART_Init>:
{
 8000a84:	b508      	push	{r3, lr}
  hlpuart1.Instance = LPUART1;
 8000a86:	4816      	ldr	r0, [pc, #88]	; (8000ae0 <MX_LPUART1_UART_Init+0x5c>)
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_LPUART1_UART_Init+0x60>)
 8000a8a:	6143      	str	r3, [r0, #20]
  hlpuart1.Init.BaudRate = 9600;
 8000a8c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000a90:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61c3      	str	r3, [r0, #28]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a96:	6203      	str	r3, [r0, #32]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a98:	6243      	str	r3, [r0, #36]	; 0x24
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	6282      	str	r2, [r0, #40]	; 0x28
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa0:	6343      	str	r3, [r0, #52]	; 0x34
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aa2:	6383      	str	r3, [r0, #56]	; 0x38
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa4:	63c3      	str	r3, [r0, #60]	; 0x3c
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000aa6:	6783      	str	r3, [r0, #120]	; 0x78
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000aa8:	3014      	adds	r0, #20
 8000aaa:	f006 ff05 	bl	80078b8 <HAL_UART_Init>
 8000aae:	b970      	cbnz	r0, 8000ace <MX_LPUART1_UART_Init+0x4a>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_LPUART1_UART_Init+0x64>)
 8000ab4:	f007 fcd2 	bl	800845c <HAL_UARTEx_SetTxFifoThreshold>
 8000ab8:	b958      	cbnz	r0, 8000ad2 <MX_LPUART1_UART_Init+0x4e>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <MX_LPUART1_UART_Init+0x64>)
 8000abe:	f007 fd0b 	bl	80084d8 <HAL_UARTEx_SetRxFifoThreshold>
 8000ac2:	b940      	cbnz	r0, 8000ad6 <MX_LPUART1_UART_Init+0x52>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ac4:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <MX_LPUART1_UART_Init+0x64>)
 8000ac6:	f007 fc90 	bl	80083ea <HAL_UARTEx_DisableFifoMode>
 8000aca:	b930      	cbnz	r0, 8000ada <MX_LPUART1_UART_Init+0x56>
}
 8000acc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ace:	f7ff ff63 	bl	8000998 <Error_Handler>
    Error_Handler();
 8000ad2:	f7ff ff61 	bl	8000998 <Error_Handler>
    Error_Handler();
 8000ad6:	f7ff ff5f 	bl	8000998 <Error_Handler>
    Error_Handler();
 8000ada:	f7ff ff5d 	bl	8000998 <Error_Handler>
 8000ade:	bf00      	nop
 8000ae0:	20000240 	.word	0x20000240
 8000ae4:	40008000 	.word	0x40008000
 8000ae8:	20000254 	.word	0x20000254

08000aec <MX_TIM2_Init>:
{
 8000aec:	b500      	push	{lr}
 8000aee:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af0:	2300      	movs	r3, #0
 8000af2:	9304      	str	r3, [sp, #16]
 8000af4:	9305      	str	r3, [sp, #20]
 8000af6:	9306      	str	r3, [sp, #24]
 8000af8:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afa:	9301      	str	r3, [sp, #4]
 8000afc:	9302      	str	r3, [sp, #8]
 8000afe:	9303      	str	r3, [sp, #12]
  htim2.Instance = TIM2;
 8000b00:	4819      	ldr	r0, [pc, #100]	; (8000b68 <MX_TIM2_Init+0x7c>)
 8000b02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b06:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
  htim2.Init.Prescaler = 59999;
 8000b0a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000b0e:	f8c0 2158 	str.w	r2, [r0, #344]	; 0x158
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b12:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  htim2.Init.Period = 0xffff-1;
 8000b16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000b1a:	f8c0 2160 	str.w	r2, [r0, #352]	; 0x160
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b22:	f8c0 2164 	str.w	r2, [r0, #356]	; 0x164
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b26:	f8c0 316c 	str.w	r3, [r0, #364]	; 0x16c
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b2a:	f500 70aa 	add.w	r0, r0, #340	; 0x154
 8000b2e:	f005 fd87 	bl	8006640 <HAL_TIM_Base_Init>
 8000b32:	b990      	cbnz	r0, 8000b5a <MX_TIM2_Init+0x6e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b38:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b3a:	a904      	add	r1, sp, #16
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <MX_TIM2_Init+0x80>)
 8000b3e:	f006 f8bb 	bl	8006cb8 <HAL_TIM_ConfigClockSource>
 8000b42:	b960      	cbnz	r0, 8000b5e <MX_TIM2_Init+0x72>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b48:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b4a:	a901      	add	r1, sp, #4
 8000b4c:	4807      	ldr	r0, [pc, #28]	; (8000b6c <MX_TIM2_Init+0x80>)
 8000b4e:	f006 fdad 	bl	80076ac <HAL_TIMEx_MasterConfigSynchronization>
 8000b52:	b930      	cbnz	r0, 8000b62 <MX_TIM2_Init+0x76>
}
 8000b54:	b009      	add	sp, #36	; 0x24
 8000b56:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000b5a:	f7ff ff1d 	bl	8000998 <Error_Handler>
    Error_Handler();
 8000b5e:	f7ff ff1b 	bl	8000998 <Error_Handler>
    Error_Handler();
 8000b62:	f7ff ff19 	bl	8000998 <Error_Handler>
 8000b66:	bf00      	nop
 8000b68:	20000240 	.word	0x20000240
 8000b6c:	20000394 	.word	0x20000394

08000b70 <MX_I2C1_Init>:
{
 8000b70:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8000b72:	4819      	ldr	r0, [pc, #100]	; (8000bd8 <MX_I2C1_Init+0x68>)
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_I2C1_Init+0x6c>)
 8000b76:	f8c0 31a0 	str.w	r3, [r0, #416]	; 0x1a0
  hi2c1.Init.Timing = 0x307075B1;
 8000b7a:	f1a3 6378 	sub.w	r3, r3, #260046848	; 0xf800000
 8000b7e:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 8000b82:	f6a3 634f 	subw	r3, r3, #3663	; 0xe4f
 8000b86:	f8c0 31a4 	str.w	r3, [r0, #420]	; 0x1a4
  hi2c1.Init.OwnAddress1 = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f8c0 31a8 	str.w	r3, [r0, #424]	; 0x1a8
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b90:	2201      	movs	r2, #1
 8000b92:	f8c0 21ac 	str.w	r2, [r0, #428]	; 0x1ac
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b96:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
  hi2c1.Init.OwnAddress2 = 0;
 8000b9a:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b9e:	f8c0 31b8 	str.w	r3, [r0, #440]	; 0x1b8
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba2:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba6:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000baa:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 8000bae:	f003 f8b8 	bl	8003d22 <HAL_I2C_Init>
 8000bb2:	b950      	cbnz	r0, 8000bca <MX_I2C1_Init+0x5a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	480a      	ldr	r0, [pc, #40]	; (8000be0 <MX_I2C1_Init+0x70>)
 8000bb8:	f003 fc70 	bl	800449c <HAL_I2CEx_ConfigAnalogFilter>
 8000bbc:	b938      	cbnz	r0, 8000bce <MX_I2C1_Init+0x5e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4807      	ldr	r0, [pc, #28]	; (8000be0 <MX_I2C1_Init+0x70>)
 8000bc2:	f003 fcb6 	bl	8004532 <HAL_I2CEx_ConfigDigitalFilter>
 8000bc6:	b920      	cbnz	r0, 8000bd2 <MX_I2C1_Init+0x62>
}
 8000bc8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000bca:	f7ff fee5 	bl	8000998 <Error_Handler>
    Error_Handler();
 8000bce:	f7ff fee3 	bl	8000998 <Error_Handler>
    Error_Handler();
 8000bd2:	f7ff fee1 	bl	8000998 <Error_Handler>
 8000bd6:	bf00      	nop
 8000bd8:	20000240 	.word	0x20000240
 8000bdc:	40005400 	.word	0x40005400
 8000be0:	200003e0 	.word	0x200003e0

08000be4 <MX_TIM5_Init>:
{
 8000be4:	b500      	push	{lr}
 8000be6:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be8:	2300      	movs	r3, #0
 8000bea:	9304      	str	r3, [sp, #16]
 8000bec:	9305      	str	r3, [sp, #20]
 8000bee:	9306      	str	r3, [sp, #24]
 8000bf0:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf2:	9301      	str	r3, [sp, #4]
 8000bf4:	9302      	str	r3, [sp, #8]
 8000bf6:	9303      	str	r3, [sp, #12]
  htim5.Instance = TIM5;
 8000bf8:	4817      	ldr	r0, [pc, #92]	; (8000c58 <MX_TIM5_Init+0x74>)
 8000bfa:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <MX_TIM5_Init+0x78>)
 8000bfc:	f8c0 21ec 	str.w	r2, [r0, #492]	; 0x1ec
  htim5.Init.Prescaler = 119;
 8000c00:	2277      	movs	r2, #119	; 0x77
 8000c02:	f8c0 21f0 	str.w	r2, [r0, #496]	; 0x1f0
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  htim5.Init.Period = 4294967295;
 8000c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0e:	f8c0 21f8 	str.w	r2, [r0, #504]	; 0x1f8
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c12:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c16:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c1a:	f500 70f6 	add.w	r0, r0, #492	; 0x1ec
 8000c1e:	f005 fd0f 	bl	8006640 <HAL_TIM_Base_Init>
 8000c22:	b990      	cbnz	r0, 8000c4a <MX_TIM5_Init+0x66>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c28:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c2a:	a904      	add	r1, sp, #16
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <MX_TIM5_Init+0x7c>)
 8000c2e:	f006 f843 	bl	8006cb8 <HAL_TIM_ConfigClockSource>
 8000c32:	b960      	cbnz	r0, 8000c4e <MX_TIM5_Init+0x6a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c38:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c3a:	a901      	add	r1, sp, #4
 8000c3c:	4808      	ldr	r0, [pc, #32]	; (8000c60 <MX_TIM5_Init+0x7c>)
 8000c3e:	f006 fd35 	bl	80076ac <HAL_TIMEx_MasterConfigSynchronization>
 8000c42:	b930      	cbnz	r0, 8000c52 <MX_TIM5_Init+0x6e>
}
 8000c44:	b009      	add	sp, #36	; 0x24
 8000c46:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c4a:	f7ff fea5 	bl	8000998 <Error_Handler>
    Error_Handler();
 8000c4e:	f7ff fea3 	bl	8000998 <Error_Handler>
    Error_Handler();
 8000c52:	f7ff fea1 	bl	8000998 <Error_Handler>
 8000c56:	bf00      	nop
 8000c58:	20000240 	.word	0x20000240
 8000c5c:	40000c00 	.word	0x40000c00
 8000c60:	2000042c 	.word	0x2000042c

08000c64 <MX_TIM16_Init>:
{
 8000c64:	b510      	push	{r4, lr}
 8000c66:	b092      	sub	sp, #72	; 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c68:	2400      	movs	r4, #0
 8000c6a:	940b      	str	r4, [sp, #44]	; 0x2c
 8000c6c:	940c      	str	r4, [sp, #48]	; 0x30
 8000c6e:	940d      	str	r4, [sp, #52]	; 0x34
 8000c70:	940e      	str	r4, [sp, #56]	; 0x38
 8000c72:	940f      	str	r4, [sp, #60]	; 0x3c
 8000c74:	9410      	str	r4, [sp, #64]	; 0x40
 8000c76:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c78:	222c      	movs	r2, #44	; 0x2c
 8000c7a:	4621      	mov	r1, r4
 8000c7c:	4668      	mov	r0, sp
 8000c7e:	f007 fcef 	bl	8008660 <memset>
  htim16.Instance = TIM16;
 8000c82:	4824      	ldr	r0, [pc, #144]	; (8000d14 <MX_TIM16_Init+0xb0>)
 8000c84:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <MX_TIM16_Init+0xb4>)
 8000c86:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
  htim16.Init.Prescaler = 1199;
 8000c8a:	f240 43af 	movw	r3, #1199	; 0x4af
 8000c8e:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c92:	f8c0 4240 	str.w	r4, [r0, #576]	; 0x240
  htim16.Init.Period = 1999;
 8000c96:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8000c9a:	f8c0 3244 	str.w	r3, [r0, #580]	; 0x244
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9e:	f8c0 4248 	str.w	r4, [r0, #584]	; 0x248
  htim16.Init.RepetitionCounter = 0;
 8000ca2:	f8c0 424c 	str.w	r4, [r0, #588]	; 0x24c
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	f8c0 3250 	str.w	r3, [r0, #592]	; 0x250
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000cac:	f500 700e 	add.w	r0, r0, #568	; 0x238
 8000cb0:	f005 fcc6 	bl	8006640 <HAL_TIM_Base_Init>
 8000cb4:	bb28      	cbnz	r0, 8000d02 <MX_TIM16_Init+0x9e>
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000cb6:	4819      	ldr	r0, [pc, #100]	; (8000d1c <MX_TIM16_Init+0xb8>)
 8000cb8:	f005 fd82 	bl	80067c0 <HAL_TIM_PWM_Init>
 8000cbc:	bb18      	cbnz	r0, 8000d06 <MX_TIM16_Init+0xa2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cbe:	2360      	movs	r3, #96	; 0x60
 8000cc0:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc6:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cc8:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cca:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ccc:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cce:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd0:	a90b      	add	r1, sp, #44	; 0x2c
 8000cd2:	4812      	ldr	r0, [pc, #72]	; (8000d1c <MX_TIM16_Init+0xb8>)
 8000cd4:	f005 fedc 	bl	8006a90 <HAL_TIM_PWM_ConfigChannel>
 8000cd8:	b9b8      	cbnz	r0, 8000d0a <MX_TIM16_Init+0xa6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	9300      	str	r3, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cde:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ce0:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ce2:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ce4:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cea:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cec:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000cee:	4669      	mov	r1, sp
 8000cf0:	480a      	ldr	r0, [pc, #40]	; (8000d1c <MX_TIM16_Init+0xb8>)
 8000cf2:	f006 fd63 	bl	80077bc <HAL_TIMEx_ConfigBreakDeadTime>
 8000cf6:	b950      	cbnz	r0, 8000d0e <MX_TIM16_Init+0xaa>
  HAL_TIM_MspPostInit(&htim16);
 8000cf8:	4808      	ldr	r0, [pc, #32]	; (8000d1c <MX_TIM16_Init+0xb8>)
 8000cfa:	f002 fb25 	bl	8003348 <HAL_TIM_MspPostInit>
}
 8000cfe:	b012      	add	sp, #72	; 0x48
 8000d00:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d02:	f7ff fe49 	bl	8000998 <Error_Handler>
    Error_Handler();
 8000d06:	f7ff fe47 	bl	8000998 <Error_Handler>
    Error_Handler();
 8000d0a:	f7ff fe45 	bl	8000998 <Error_Handler>
    Error_Handler();
 8000d0e:	f7ff fe43 	bl	8000998 <Error_Handler>
 8000d12:	bf00      	nop
 8000d14:	20000240 	.word	0x20000240
 8000d18:	40014400 	.word	0x40014400
 8000d1c:	20000478 	.word	0x20000478

08000d20 <SystemClock_Config>:
{
 8000d20:	b500      	push	{lr}
 8000d22:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d24:	2244      	movs	r2, #68	; 0x44
 8000d26:	2100      	movs	r1, #0
 8000d28:	a805      	add	r0, sp, #20
 8000d2a:	f007 fc99 	bl	8008660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2e:	2000      	movs	r0, #0
 8000d30:	9000      	str	r0, [sp, #0]
 8000d32:	9001      	str	r0, [sp, #4]
 8000d34:	9002      	str	r0, [sp, #8]
 8000d36:	9003      	str	r0, [sp, #12]
 8000d38:	9004      	str	r0, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000d3a:	f003 fc67 	bl	800460c <HAL_PWREx_ControlVoltageScaling>
 8000d3e:	bb48      	cbnz	r0, 8000d94 <SystemClock_Config+0x74>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000d40:	2312      	movs	r3, #18
 8000d42:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d48:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d4a:	2340      	movs	r3, #64	; 0x40
 8000d4c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d4e:	2201      	movs	r2, #1
 8000d50:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d56:	2360      	movs	r3, #96	; 0x60
 8000d58:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d5e:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d60:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000d62:	223c      	movs	r2, #60	; 0x3c
 8000d64:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d66:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d68:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d6a:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6c:	a805      	add	r0, sp, #20
 8000d6e:	f003 fd01 	bl	8004774 <HAL_RCC_OscConfig>
 8000d72:	b988      	cbnz	r0, 8000d98 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d74:	230f      	movs	r3, #15
 8000d76:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d80:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d82:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d84:	2105      	movs	r1, #5
 8000d86:	4668      	mov	r0, sp
 8000d88:	f004 f91a 	bl	8004fc0 <HAL_RCC_ClockConfig>
 8000d8c:	b930      	cbnz	r0, 8000d9c <SystemClock_Config+0x7c>
}
 8000d8e:	b017      	add	sp, #92	; 0x5c
 8000d90:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000d94:	f7ff fe00 	bl	8000998 <Error_Handler>
    Error_Handler();
 8000d98:	f7ff fdfe 	bl	8000998 <Error_Handler>
    Error_Handler();
 8000d9c:	f7ff fdfc 	bl	8000998 <Error_Handler>

08000da0 <main>:
{
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	b090      	sub	sp, #64	; 0x40
  HAL_Init();
 8000da4:	f002 fc45 	bl	8003632 <HAL_Init>
  SystemClock_Config();
 8000da8:	f7ff ffba 	bl	8000d20 <SystemClock_Config>
  MX_GPIO_Init();
 8000dac:	f7ff fa28 	bl	8000200 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000db0:	f7ff fdf4 	bl	800099c <MX_SPI1_Init>
  MX_TIM4_Init();
 8000db4:	f7ff fe26 	bl	8000a04 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 8000db8:	f7ff fe64 	bl	8000a84 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000dbc:	f7ff fe96 	bl	8000aec <MX_TIM2_Init>
  MX_I2C1_Init();
 8000dc0:	f7ff fed6 	bl	8000b70 <MX_I2C1_Init>
  MX_TIM5_Init();
 8000dc4:	f7ff ff0e 	bl	8000be4 <MX_TIM5_Init>
  MX_TIM16_Init();
 8000dc8:	f7ff ff4c 	bl	8000c64 <MX_TIM16_Init>
  printf("Initing...\n\r");
 8000dcc:	4850      	ldr	r0, [pc, #320]	; (8000f10 <main+0x170>)
 8000dce:	f008 f8b9 	bl	8008f44 <iprintf>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000dd2:	4d50      	ldr	r5, [pc, #320]	; (8000f14 <main+0x174>)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	f505 700e 	add.w	r0, r5, #568	; 0x238
 8000dda:	f005 fd53 	bl	8006884 <HAL_TIM_PWM_Start>
  *tim16_ccr1 = SERVO_UP;
 8000dde:	4b4e      	ldr	r3, [pc, #312]	; (8000f18 <main+0x178>)
 8000de0:	227d      	movs	r2, #125	; 0x7d
 8000de2:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  step_init(&htim2, 1, A0_GPIO, A0_PIN, A1_GPIO, A1_PIN, A2_GPIO, A2_PIN, A3_GPIO, A3_PIN, B0_GPIO, B0_PIN, B1_GPIO, B1_PIN, B2_GPIO, B2_PIN, B3_GPIO, B3_PIN);
 8000de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dea:	930d      	str	r3, [sp, #52]	; 0x34
 8000dec:	4b4b      	ldr	r3, [pc, #300]	; (8000f1c <main+0x17c>)
 8000dee:	930c      	str	r3, [sp, #48]	; 0x30
 8000df0:	2280      	movs	r2, #128	; 0x80
 8000df2:	920b      	str	r2, [sp, #44]	; 0x2c
 8000df4:	930a      	str	r3, [sp, #40]	; 0x28
 8000df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dfa:	9209      	str	r2, [sp, #36]	; 0x24
 8000dfc:	9308      	str	r3, [sp, #32]
 8000dfe:	2302      	movs	r3, #2
 8000e00:	9307      	str	r3, [sp, #28]
 8000e02:	4b47      	ldr	r3, [pc, #284]	; (8000f20 <main+0x180>)
 8000e04:	9306      	str	r3, [sp, #24]
 8000e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0a:	9305      	str	r3, [sp, #20]
 8000e0c:	f103 4390 	add.w	r3, r3, #1207959552	; 0x48000000
 8000e10:	9304      	str	r3, [sp, #16]
 8000e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e16:	9203      	str	r2, [sp, #12]
 8000e18:	9302      	str	r3, [sp, #8]
 8000e1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e1e:	9201      	str	r2, [sp, #4]
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e26:	4a3f      	ldr	r2, [pc, #252]	; (8000f24 <main+0x184>)
 8000e28:	2101      	movs	r1, #1
 8000e2a:	f505 70aa 	add.w	r0, r5, #340	; 0x154
 8000e2e:	f001 fb53 	bl	80024d8 <step_init>
  setSpeed(300); //yes 300, not above incl. 325
 8000e32:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e36:	f001 fbb9 	bl	80025ac <setSpeed>
  N64_init(&htim4, &htim5, n64_GPIO, n64_PIN, n64_DEBUG_GPIO, n64_DEBUG_PIN, n64_INT_GPIO, n64_INT_PIN);
 8000e3a:	4c3b      	ldr	r4, [pc, #236]	; (8000f28 <main+0x188>)
 8000e3c:	8b23      	ldrh	r3, [r4, #24]
 8000e3e:	9303      	str	r3, [sp, #12]
 8000e40:	69e3      	ldr	r3, [r4, #28]
 8000e42:	9302      	str	r3, [sp, #8]
 8000e44:	8c23      	ldrh	r3, [r4, #32]
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	8a63      	ldrh	r3, [r4, #18]
 8000e4e:	6962      	ldr	r2, [r4, #20]
 8000e50:	f505 71f6 	add.w	r1, r5, #492	; 0x1ec
 8000e54:	f505 7084 	add.w	r0, r5, #264	; 0x108
 8000e58:	f001 fb00 	bl	800245c <N64_init>
  LCD_init(&hspi1, tftCS_GPIO, tftCS_PIN, tftDC_GPIO, tftDC_PIN, tftRESET_GPIO, tftRESET_PIN);
 8000e5c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8000e5e:	9302      	str	r3, [sp, #8]
 8000e60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e6a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8000e6c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000e6e:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8000e72:	f001 f827 	bl	8001ec4 <LCD_init>
  HAL_Delay(200);
 8000e76:	20c8      	movs	r0, #200	; 0xc8
 8000e78:	f002 fc50 	bl	800371c <HAL_Delay>
  LCD_fill(HX8357_WHITE);
 8000e7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e80:	f001 f9be 	bl	8002200 <LCD_fill>
  movePlot((TRAVEL_X_CM * STEP_PER_CM / 2),(TRAVEL_Y_CM * STEP_PER_CM / 2));
 8000e84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e88:	4608      	mov	r0, r1
 8000e8a:	f7ff fb4a 	bl	8000522 <movePlot>
  printf("Starting...\n\r");
 8000e8e:	4827      	ldr	r0, [pc, #156]	; (8000f2c <main+0x18c>)
 8000e90:	f008 f858 	bl	8008f44 <iprintf>
  uint32_t vals = 0;
 8000e94:	2400      	movs	r4, #0
 8000e96:	e01e      	b.n	8000ed6 <main+0x136>
      vals = intRead(); // intRead();
 8000e98:	f001 fa46 	bl	8002328 <intRead>
 8000e9c:	4604      	mov	r4, r0
      settingCheck(vals);
 8000e9e:	f7ff fd39 	bl	8000914 <settingCheck>
      signed char xval = (vals >> 8) & 0xff; //both were signed
 8000ea2:	f344 2507 	sbfx	r5, r4, #8, #8
      signed char yval = vals & 0xff;
 8000ea6:	b266      	sxtb	r6, r4
      printf("N64 read X: %d,Y: %d\n\r", xval, yval);
 8000ea8:	4632      	mov	r2, r6
 8000eaa:	4629      	mov	r1, r5
 8000eac:	4820      	ldr	r0, [pc, #128]	; (8000f30 <main+0x190>)
 8000eae:	f008 f849 	bl	8008f44 <iprintf>
      scaleN64Display(xval, yval, 45);
 8000eb2:	222d      	movs	r2, #45	; 0x2d
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	4628      	mov	r0, r5
 8000eb8:	f7ff fb9e 	bl	80005f8 <scaleN64Display>
      scaleN64Plot(xval, yval, 45);
 8000ebc:	222d      	movs	r2, #45	; 0x2d
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	f7ff fb57 	bl	8000574 <scaleN64Plot>
	  handleServo((vals >> 29) & 1);
 8000ec6:	f3c4 7040 	ubfx	r0, r4, #29, #1
 8000eca:	f7ff fd47 	bl	800095c <handleServo>
	  HAL_Delay(500);
 8000ece:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ed2:	f002 fc23 	bl	800371c <HAL_Delay>
    if(mode == N64)
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <main+0x188>)
 8000ed8:	7c1b      	ldrb	r3, [r3, #16]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d0dc      	beq.n	8000e98 <main+0xf8>
    else if(mode == IR)
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f1      	bne.n	8000ec6 <main+0x126>
        vals = intRead(); // intRead();
 8000ee2:	f001 fa21 	bl	8002328 <intRead>
 8000ee6:	4604      	mov	r4, r0
        settingCheck(vals);
 8000ee8:	f7ff fd14 	bl	8000914 <settingCheck>
      getBlocks(&hi2c1, &ir_buf[0]);
 8000eec:	a90e      	add	r1, sp, #56	; 0x38
 8000eee:	4811      	ldr	r0, [pc, #68]	; (8000f34 <main+0x194>)
 8000ef0:	f000 ff18 	bl	8001d24 <getBlocks>
      printf("IR read X: %d,Y: %d\n\r", ir_buf[0], ir_buf[1]);
 8000ef4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000ef6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000ef8:	480f      	ldr	r0, [pc, #60]	; (8000f38 <main+0x198>)
 8000efa:	f008 f823 	bl	8008f44 <iprintf>
      scaleIRDisplay(&ir_buf[0], 10);
 8000efe:	210a      	movs	r1, #10
 8000f00:	a80e      	add	r0, sp, #56	; 0x38
 8000f02:	f7ff fc17 	bl	8000734 <scaleIRDisplay>
      scaleIRPlot(&ir_buf[0], 10);
 8000f06:	210a      	movs	r1, #10
 8000f08:	a80e      	add	r0, sp, #56	; 0x38
 8000f0a:	f7ff fbd9 	bl	80006c0 <scaleIRPlot>
 8000f0e:	e7da      	b.n	8000ec6 <main+0x126>
 8000f10:	0800b168 	.word	0x0800b168
 8000f14:	20000240 	.word	0x20000240
 8000f18:	40014000 	.word	0x40014000
 8000f1c:	48001400 	.word	0x48001400
 8000f20:	48001800 	.word	0x48001800
 8000f24:	48000400 	.word	0x48000400
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	0800b178 	.word	0x0800b178
 8000f30:	0800b188 	.word	0x0800b188
 8000f34:	200003e0 	.word	0x200003e0
 8000f38:	0800b1a0 	.word	0x0800b1a0

08000f3c <strlen>:
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	d1fb      	bne.n	8000f3e <strlen+0x2>
 8000f46:	1a18      	subs	r0, r3, r0
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4770      	bx	lr
 8000f4c:	0000      	movs	r0, r0
	...

08000f50 <memchr>:
 8000f50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000f54:	2a10      	cmp	r2, #16
 8000f56:	db2b      	blt.n	8000fb0 <memchr+0x60>
 8000f58:	f010 0f07 	tst.w	r0, #7
 8000f5c:	d008      	beq.n	8000f70 <memchr+0x20>
 8000f5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000f62:	3a01      	subs	r2, #1
 8000f64:	428b      	cmp	r3, r1
 8000f66:	d02d      	beq.n	8000fc4 <memchr+0x74>
 8000f68:	f010 0f07 	tst.w	r0, #7
 8000f6c:	b342      	cbz	r2, 8000fc0 <memchr+0x70>
 8000f6e:	d1f6      	bne.n	8000f5e <memchr+0xe>
 8000f70:	b4f0      	push	{r4, r5, r6, r7}
 8000f72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000f76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000f7a:	f022 0407 	bic.w	r4, r2, #7
 8000f7e:	f07f 0700 	mvns.w	r7, #0
 8000f82:	2300      	movs	r3, #0
 8000f84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000f88:	3c08      	subs	r4, #8
 8000f8a:	ea85 0501 	eor.w	r5, r5, r1
 8000f8e:	ea86 0601 	eor.w	r6, r6, r1
 8000f92:	fa85 f547 	uadd8	r5, r5, r7
 8000f96:	faa3 f587 	sel	r5, r3, r7
 8000f9a:	fa86 f647 	uadd8	r6, r6, r7
 8000f9e:	faa5 f687 	sel	r6, r5, r7
 8000fa2:	b98e      	cbnz	r6, 8000fc8 <memchr+0x78>
 8000fa4:	d1ee      	bne.n	8000f84 <memchr+0x34>
 8000fa6:	bcf0      	pop	{r4, r5, r6, r7}
 8000fa8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000fac:	f002 0207 	and.w	r2, r2, #7
 8000fb0:	b132      	cbz	r2, 8000fc0 <memchr+0x70>
 8000fb2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	ea83 0301 	eor.w	r3, r3, r1
 8000fbc:	b113      	cbz	r3, 8000fc4 <memchr+0x74>
 8000fbe:	d1f8      	bne.n	8000fb2 <memchr+0x62>
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	4770      	bx	lr
 8000fc4:	3801      	subs	r0, #1
 8000fc6:	4770      	bx	lr
 8000fc8:	2d00      	cmp	r5, #0
 8000fca:	bf06      	itte	eq
 8000fcc:	4635      	moveq	r5, r6
 8000fce:	3803      	subeq	r0, #3
 8000fd0:	3807      	subne	r0, #7
 8000fd2:	f015 0f01 	tst.w	r5, #1
 8000fd6:	d107      	bne.n	8000fe8 <memchr+0x98>
 8000fd8:	3001      	adds	r0, #1
 8000fda:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000fde:	bf02      	ittt	eq
 8000fe0:	3001      	addeq	r0, #1
 8000fe2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000fe6:	3001      	addeq	r0, #1
 8000fe8:	bcf0      	pop	{r4, r5, r6, r7}
 8000fea:	3801      	subs	r0, #1
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__aeabi_drsub>:
 8000ff0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000ff4:	e002      	b.n	8000ffc <__adddf3>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_dsub>:
 8000ff8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000ffc <__adddf3>:
 8000ffc:	b530      	push	{r4, r5, lr}
 8000ffe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8001002:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8001006:	ea94 0f05 	teq	r4, r5
 800100a:	bf08      	it	eq
 800100c:	ea90 0f02 	teqeq	r0, r2
 8001010:	bf1f      	itttt	ne
 8001012:	ea54 0c00 	orrsne.w	ip, r4, r0
 8001016:	ea55 0c02 	orrsne.w	ip, r5, r2
 800101a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800101e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001022:	f000 80e2 	beq.w	80011ea <__adddf3+0x1ee>
 8001026:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800102a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800102e:	bfb8      	it	lt
 8001030:	426d      	neglt	r5, r5
 8001032:	dd0c      	ble.n	800104e <__adddf3+0x52>
 8001034:	442c      	add	r4, r5
 8001036:	ea80 0202 	eor.w	r2, r0, r2
 800103a:	ea81 0303 	eor.w	r3, r1, r3
 800103e:	ea82 0000 	eor.w	r0, r2, r0
 8001042:	ea83 0101 	eor.w	r1, r3, r1
 8001046:	ea80 0202 	eor.w	r2, r0, r2
 800104a:	ea81 0303 	eor.w	r3, r1, r3
 800104e:	2d36      	cmp	r5, #54	; 0x36
 8001050:	bf88      	it	hi
 8001052:	bd30      	pophi	{r4, r5, pc}
 8001054:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001058:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800105c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8001060:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8001064:	d002      	beq.n	800106c <__adddf3+0x70>
 8001066:	4240      	negs	r0, r0
 8001068:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800106c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8001070:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001074:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8001078:	d002      	beq.n	8001080 <__adddf3+0x84>
 800107a:	4252      	negs	r2, r2
 800107c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001080:	ea94 0f05 	teq	r4, r5
 8001084:	f000 80a7 	beq.w	80011d6 <__adddf3+0x1da>
 8001088:	f1a4 0401 	sub.w	r4, r4, #1
 800108c:	f1d5 0e20 	rsbs	lr, r5, #32
 8001090:	db0d      	blt.n	80010ae <__adddf3+0xb2>
 8001092:	fa02 fc0e 	lsl.w	ip, r2, lr
 8001096:	fa22 f205 	lsr.w	r2, r2, r5
 800109a:	1880      	adds	r0, r0, r2
 800109c:	f141 0100 	adc.w	r1, r1, #0
 80010a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80010a4:	1880      	adds	r0, r0, r2
 80010a6:	fa43 f305 	asr.w	r3, r3, r5
 80010aa:	4159      	adcs	r1, r3
 80010ac:	e00e      	b.n	80010cc <__adddf3+0xd0>
 80010ae:	f1a5 0520 	sub.w	r5, r5, #32
 80010b2:	f10e 0e20 	add.w	lr, lr, #32
 80010b6:	2a01      	cmp	r2, #1
 80010b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80010bc:	bf28      	it	cs
 80010be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80010c2:	fa43 f305 	asr.w	r3, r3, r5
 80010c6:	18c0      	adds	r0, r0, r3
 80010c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80010cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80010d0:	d507      	bpl.n	80010e2 <__adddf3+0xe6>
 80010d2:	f04f 0e00 	mov.w	lr, #0
 80010d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80010da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80010de:	eb6e 0101 	sbc.w	r1, lr, r1
 80010e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80010e6:	d31b      	bcc.n	8001120 <__adddf3+0x124>
 80010e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80010ec:	d30c      	bcc.n	8001108 <__adddf3+0x10c>
 80010ee:	0849      	lsrs	r1, r1, #1
 80010f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80010f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80010f8:	f104 0401 	add.w	r4, r4, #1
 80010fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8001100:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8001104:	f080 809a 	bcs.w	800123c <__adddf3+0x240>
 8001108:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800110c:	bf08      	it	eq
 800110e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001112:	f150 0000 	adcs.w	r0, r0, #0
 8001116:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800111a:	ea41 0105 	orr.w	r1, r1, r5
 800111e:	bd30      	pop	{r4, r5, pc}
 8001120:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8001124:	4140      	adcs	r0, r0
 8001126:	eb41 0101 	adc.w	r1, r1, r1
 800112a:	3c01      	subs	r4, #1
 800112c:	bf28      	it	cs
 800112e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8001132:	d2e9      	bcs.n	8001108 <__adddf3+0x10c>
 8001134:	f091 0f00 	teq	r1, #0
 8001138:	bf04      	itt	eq
 800113a:	4601      	moveq	r1, r0
 800113c:	2000      	moveq	r0, #0
 800113e:	fab1 f381 	clz	r3, r1
 8001142:	bf08      	it	eq
 8001144:	3320      	addeq	r3, #32
 8001146:	f1a3 030b 	sub.w	r3, r3, #11
 800114a:	f1b3 0220 	subs.w	r2, r3, #32
 800114e:	da0c      	bge.n	800116a <__adddf3+0x16e>
 8001150:	320c      	adds	r2, #12
 8001152:	dd08      	ble.n	8001166 <__adddf3+0x16a>
 8001154:	f102 0c14 	add.w	ip, r2, #20
 8001158:	f1c2 020c 	rsb	r2, r2, #12
 800115c:	fa01 f00c 	lsl.w	r0, r1, ip
 8001160:	fa21 f102 	lsr.w	r1, r1, r2
 8001164:	e00c      	b.n	8001180 <__adddf3+0x184>
 8001166:	f102 0214 	add.w	r2, r2, #20
 800116a:	bfd8      	it	le
 800116c:	f1c2 0c20 	rsble	ip, r2, #32
 8001170:	fa01 f102 	lsl.w	r1, r1, r2
 8001174:	fa20 fc0c 	lsr.w	ip, r0, ip
 8001178:	bfdc      	itt	le
 800117a:	ea41 010c 	orrle.w	r1, r1, ip
 800117e:	4090      	lslle	r0, r2
 8001180:	1ae4      	subs	r4, r4, r3
 8001182:	bfa2      	ittt	ge
 8001184:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8001188:	4329      	orrge	r1, r5
 800118a:	bd30      	popge	{r4, r5, pc}
 800118c:	ea6f 0404 	mvn.w	r4, r4
 8001190:	3c1f      	subs	r4, #31
 8001192:	da1c      	bge.n	80011ce <__adddf3+0x1d2>
 8001194:	340c      	adds	r4, #12
 8001196:	dc0e      	bgt.n	80011b6 <__adddf3+0x1ba>
 8001198:	f104 0414 	add.w	r4, r4, #20
 800119c:	f1c4 0220 	rsb	r2, r4, #32
 80011a0:	fa20 f004 	lsr.w	r0, r0, r4
 80011a4:	fa01 f302 	lsl.w	r3, r1, r2
 80011a8:	ea40 0003 	orr.w	r0, r0, r3
 80011ac:	fa21 f304 	lsr.w	r3, r1, r4
 80011b0:	ea45 0103 	orr.w	r1, r5, r3
 80011b4:	bd30      	pop	{r4, r5, pc}
 80011b6:	f1c4 040c 	rsb	r4, r4, #12
 80011ba:	f1c4 0220 	rsb	r2, r4, #32
 80011be:	fa20 f002 	lsr.w	r0, r0, r2
 80011c2:	fa01 f304 	lsl.w	r3, r1, r4
 80011c6:	ea40 0003 	orr.w	r0, r0, r3
 80011ca:	4629      	mov	r1, r5
 80011cc:	bd30      	pop	{r4, r5, pc}
 80011ce:	fa21 f004 	lsr.w	r0, r1, r4
 80011d2:	4629      	mov	r1, r5
 80011d4:	bd30      	pop	{r4, r5, pc}
 80011d6:	f094 0f00 	teq	r4, #0
 80011da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80011de:	bf06      	itte	eq
 80011e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80011e4:	3401      	addeq	r4, #1
 80011e6:	3d01      	subne	r5, #1
 80011e8:	e74e      	b.n	8001088 <__adddf3+0x8c>
 80011ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80011ee:	bf18      	it	ne
 80011f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80011f4:	d029      	beq.n	800124a <__adddf3+0x24e>
 80011f6:	ea94 0f05 	teq	r4, r5
 80011fa:	bf08      	it	eq
 80011fc:	ea90 0f02 	teqeq	r0, r2
 8001200:	d005      	beq.n	800120e <__adddf3+0x212>
 8001202:	ea54 0c00 	orrs.w	ip, r4, r0
 8001206:	bf04      	itt	eq
 8001208:	4619      	moveq	r1, r3
 800120a:	4610      	moveq	r0, r2
 800120c:	bd30      	pop	{r4, r5, pc}
 800120e:	ea91 0f03 	teq	r1, r3
 8001212:	bf1e      	ittt	ne
 8001214:	2100      	movne	r1, #0
 8001216:	2000      	movne	r0, #0
 8001218:	bd30      	popne	{r4, r5, pc}
 800121a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800121e:	d105      	bne.n	800122c <__adddf3+0x230>
 8001220:	0040      	lsls	r0, r0, #1
 8001222:	4149      	adcs	r1, r1
 8001224:	bf28      	it	cs
 8001226:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800122a:	bd30      	pop	{r4, r5, pc}
 800122c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8001230:	bf3c      	itt	cc
 8001232:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8001236:	bd30      	popcc	{r4, r5, pc}
 8001238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800123c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8001240:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001244:	f04f 0000 	mov.w	r0, #0
 8001248:	bd30      	pop	{r4, r5, pc}
 800124a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800124e:	bf1a      	itte	ne
 8001250:	4619      	movne	r1, r3
 8001252:	4610      	movne	r0, r2
 8001254:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8001258:	bf1c      	itt	ne
 800125a:	460b      	movne	r3, r1
 800125c:	4602      	movne	r2, r0
 800125e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001262:	bf06      	itte	eq
 8001264:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8001268:	ea91 0f03 	teqeq	r1, r3
 800126c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8001270:	bd30      	pop	{r4, r5, pc}
 8001272:	bf00      	nop

08001274 <__aeabi_ui2d>:
 8001274:	f090 0f00 	teq	r0, #0
 8001278:	bf04      	itt	eq
 800127a:	2100      	moveq	r1, #0
 800127c:	4770      	bxeq	lr
 800127e:	b530      	push	{r4, r5, lr}
 8001280:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001284:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001288:	f04f 0500 	mov.w	r5, #0
 800128c:	f04f 0100 	mov.w	r1, #0
 8001290:	e750      	b.n	8001134 <__adddf3+0x138>
 8001292:	bf00      	nop

08001294 <__aeabi_i2d>:
 8001294:	f090 0f00 	teq	r0, #0
 8001298:	bf04      	itt	eq
 800129a:	2100      	moveq	r1, #0
 800129c:	4770      	bxeq	lr
 800129e:	b530      	push	{r4, r5, lr}
 80012a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80012a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80012a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80012ac:	bf48      	it	mi
 80012ae:	4240      	negmi	r0, r0
 80012b0:	f04f 0100 	mov.w	r1, #0
 80012b4:	e73e      	b.n	8001134 <__adddf3+0x138>
 80012b6:	bf00      	nop

080012b8 <__aeabi_f2d>:
 80012b8:	0042      	lsls	r2, r0, #1
 80012ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80012be:	ea4f 0131 	mov.w	r1, r1, rrx
 80012c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80012c6:	bf1f      	itttt	ne
 80012c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80012cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80012d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80012d4:	4770      	bxne	lr
 80012d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80012da:	bf08      	it	eq
 80012dc:	4770      	bxeq	lr
 80012de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80012e2:	bf04      	itt	eq
 80012e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80012e8:	4770      	bxeq	lr
 80012ea:	b530      	push	{r4, r5, lr}
 80012ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80012f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80012f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80012f8:	e71c      	b.n	8001134 <__adddf3+0x138>
 80012fa:	bf00      	nop

080012fc <__aeabi_ul2d>:
 80012fc:	ea50 0201 	orrs.w	r2, r0, r1
 8001300:	bf08      	it	eq
 8001302:	4770      	bxeq	lr
 8001304:	b530      	push	{r4, r5, lr}
 8001306:	f04f 0500 	mov.w	r5, #0
 800130a:	e00a      	b.n	8001322 <__aeabi_l2d+0x16>

0800130c <__aeabi_l2d>:
 800130c:	ea50 0201 	orrs.w	r2, r0, r1
 8001310:	bf08      	it	eq
 8001312:	4770      	bxeq	lr
 8001314:	b530      	push	{r4, r5, lr}
 8001316:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800131a:	d502      	bpl.n	8001322 <__aeabi_l2d+0x16>
 800131c:	4240      	negs	r0, r0
 800131e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001322:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001326:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800132a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800132e:	f43f aed8 	beq.w	80010e2 <__adddf3+0xe6>
 8001332:	f04f 0203 	mov.w	r2, #3
 8001336:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800133a:	bf18      	it	ne
 800133c:	3203      	addne	r2, #3
 800133e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001342:	bf18      	it	ne
 8001344:	3203      	addne	r2, #3
 8001346:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800134a:	f1c2 0320 	rsb	r3, r2, #32
 800134e:	fa00 fc03 	lsl.w	ip, r0, r3
 8001352:	fa20 f002 	lsr.w	r0, r0, r2
 8001356:	fa01 fe03 	lsl.w	lr, r1, r3
 800135a:	ea40 000e 	orr.w	r0, r0, lr
 800135e:	fa21 f102 	lsr.w	r1, r1, r2
 8001362:	4414      	add	r4, r2
 8001364:	e6bd      	b.n	80010e2 <__adddf3+0xe6>
 8001366:	bf00      	nop

08001368 <__aeabi_dmul>:
 8001368:	b570      	push	{r4, r5, r6, lr}
 800136a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800136e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001372:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001376:	bf1d      	ittte	ne
 8001378:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800137c:	ea94 0f0c 	teqne	r4, ip
 8001380:	ea95 0f0c 	teqne	r5, ip
 8001384:	f000 f8de 	bleq	8001544 <__aeabi_dmul+0x1dc>
 8001388:	442c      	add	r4, r5
 800138a:	ea81 0603 	eor.w	r6, r1, r3
 800138e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8001392:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8001396:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800139a:	bf18      	it	ne
 800139c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80013a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80013a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013a8:	d038      	beq.n	800141c <__aeabi_dmul+0xb4>
 80013aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80013ae:	f04f 0500 	mov.w	r5, #0
 80013b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80013b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80013ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80013be:	f04f 0600 	mov.w	r6, #0
 80013c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80013c6:	f09c 0f00 	teq	ip, #0
 80013ca:	bf18      	it	ne
 80013cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80013d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80013d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80013d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80013dc:	d204      	bcs.n	80013e8 <__aeabi_dmul+0x80>
 80013de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80013e2:	416d      	adcs	r5, r5
 80013e4:	eb46 0606 	adc.w	r6, r6, r6
 80013e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80013ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80013f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80013f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80013f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80013fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8001400:	bf88      	it	hi
 8001402:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001406:	d81e      	bhi.n	8001446 <__aeabi_dmul+0xde>
 8001408:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800140c:	bf08      	it	eq
 800140e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8001412:	f150 0000 	adcs.w	r0, r0, #0
 8001416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800141a:	bd70      	pop	{r4, r5, r6, pc}
 800141c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8001420:	ea46 0101 	orr.w	r1, r6, r1
 8001424:	ea40 0002 	orr.w	r0, r0, r2
 8001428:	ea81 0103 	eor.w	r1, r1, r3
 800142c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8001430:	bfc2      	ittt	gt
 8001432:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001436:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800143a:	bd70      	popgt	{r4, r5, r6, pc}
 800143c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001440:	f04f 0e00 	mov.w	lr, #0
 8001444:	3c01      	subs	r4, #1
 8001446:	f300 80ab 	bgt.w	80015a0 <__aeabi_dmul+0x238>
 800144a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800144e:	bfde      	ittt	le
 8001450:	2000      	movle	r0, #0
 8001452:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8001456:	bd70      	pople	{r4, r5, r6, pc}
 8001458:	f1c4 0400 	rsb	r4, r4, #0
 800145c:	3c20      	subs	r4, #32
 800145e:	da35      	bge.n	80014cc <__aeabi_dmul+0x164>
 8001460:	340c      	adds	r4, #12
 8001462:	dc1b      	bgt.n	800149c <__aeabi_dmul+0x134>
 8001464:	f104 0414 	add.w	r4, r4, #20
 8001468:	f1c4 0520 	rsb	r5, r4, #32
 800146c:	fa00 f305 	lsl.w	r3, r0, r5
 8001470:	fa20 f004 	lsr.w	r0, r0, r4
 8001474:	fa01 f205 	lsl.w	r2, r1, r5
 8001478:	ea40 0002 	orr.w	r0, r0, r2
 800147c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8001480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001484:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001488:	fa21 f604 	lsr.w	r6, r1, r4
 800148c:	eb42 0106 	adc.w	r1, r2, r6
 8001490:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001494:	bf08      	it	eq
 8001496:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800149a:	bd70      	pop	{r4, r5, r6, pc}
 800149c:	f1c4 040c 	rsb	r4, r4, #12
 80014a0:	f1c4 0520 	rsb	r5, r4, #32
 80014a4:	fa00 f304 	lsl.w	r3, r0, r4
 80014a8:	fa20 f005 	lsr.w	r0, r0, r5
 80014ac:	fa01 f204 	lsl.w	r2, r1, r4
 80014b0:	ea40 0002 	orr.w	r0, r0, r2
 80014b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80014b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80014bc:	f141 0100 	adc.w	r1, r1, #0
 80014c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80014c4:	bf08      	it	eq
 80014c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80014ca:	bd70      	pop	{r4, r5, r6, pc}
 80014cc:	f1c4 0520 	rsb	r5, r4, #32
 80014d0:	fa00 f205 	lsl.w	r2, r0, r5
 80014d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80014d8:	fa20 f304 	lsr.w	r3, r0, r4
 80014dc:	fa01 f205 	lsl.w	r2, r1, r5
 80014e0:	ea43 0302 	orr.w	r3, r3, r2
 80014e4:	fa21 f004 	lsr.w	r0, r1, r4
 80014e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80014ec:	fa21 f204 	lsr.w	r2, r1, r4
 80014f0:	ea20 0002 	bic.w	r0, r0, r2
 80014f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80014f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80014fc:	bf08      	it	eq
 80014fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001502:	bd70      	pop	{r4, r5, r6, pc}
 8001504:	f094 0f00 	teq	r4, #0
 8001508:	d10f      	bne.n	800152a <__aeabi_dmul+0x1c2>
 800150a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800150e:	0040      	lsls	r0, r0, #1
 8001510:	eb41 0101 	adc.w	r1, r1, r1
 8001514:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001518:	bf08      	it	eq
 800151a:	3c01      	subeq	r4, #1
 800151c:	d0f7      	beq.n	800150e <__aeabi_dmul+0x1a6>
 800151e:	ea41 0106 	orr.w	r1, r1, r6
 8001522:	f095 0f00 	teq	r5, #0
 8001526:	bf18      	it	ne
 8001528:	4770      	bxne	lr
 800152a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800152e:	0052      	lsls	r2, r2, #1
 8001530:	eb43 0303 	adc.w	r3, r3, r3
 8001534:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001538:	bf08      	it	eq
 800153a:	3d01      	subeq	r5, #1
 800153c:	d0f7      	beq.n	800152e <__aeabi_dmul+0x1c6>
 800153e:	ea43 0306 	orr.w	r3, r3, r6
 8001542:	4770      	bx	lr
 8001544:	ea94 0f0c 	teq	r4, ip
 8001548:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800154c:	bf18      	it	ne
 800154e:	ea95 0f0c 	teqne	r5, ip
 8001552:	d00c      	beq.n	800156e <__aeabi_dmul+0x206>
 8001554:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001558:	bf18      	it	ne
 800155a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800155e:	d1d1      	bne.n	8001504 <__aeabi_dmul+0x19c>
 8001560:	ea81 0103 	eor.w	r1, r1, r3
 8001564:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001568:	f04f 0000 	mov.w	r0, #0
 800156c:	bd70      	pop	{r4, r5, r6, pc}
 800156e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001572:	bf06      	itte	eq
 8001574:	4610      	moveq	r0, r2
 8001576:	4619      	moveq	r1, r3
 8001578:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800157c:	d019      	beq.n	80015b2 <__aeabi_dmul+0x24a>
 800157e:	ea94 0f0c 	teq	r4, ip
 8001582:	d102      	bne.n	800158a <__aeabi_dmul+0x222>
 8001584:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8001588:	d113      	bne.n	80015b2 <__aeabi_dmul+0x24a>
 800158a:	ea95 0f0c 	teq	r5, ip
 800158e:	d105      	bne.n	800159c <__aeabi_dmul+0x234>
 8001590:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001594:	bf1c      	itt	ne
 8001596:	4610      	movne	r0, r2
 8001598:	4619      	movne	r1, r3
 800159a:	d10a      	bne.n	80015b2 <__aeabi_dmul+0x24a>
 800159c:	ea81 0103 	eor.w	r1, r1, r3
 80015a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80015a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80015a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80015ac:	f04f 0000 	mov.w	r0, #0
 80015b0:	bd70      	pop	{r4, r5, r6, pc}
 80015b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80015b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80015ba:	bd70      	pop	{r4, r5, r6, pc}

080015bc <__aeabi_ddiv>:
 80015bc:	b570      	push	{r4, r5, r6, lr}
 80015be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80015c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80015c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80015ca:	bf1d      	ittte	ne
 80015cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80015d0:	ea94 0f0c 	teqne	r4, ip
 80015d4:	ea95 0f0c 	teqne	r5, ip
 80015d8:	f000 f8a7 	bleq	800172a <__aeabi_ddiv+0x16e>
 80015dc:	eba4 0405 	sub.w	r4, r4, r5
 80015e0:	ea81 0e03 	eor.w	lr, r1, r3
 80015e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80015e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80015ec:	f000 8088 	beq.w	8001700 <__aeabi_ddiv+0x144>
 80015f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80015f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80015f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80015fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8001600:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8001604:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8001608:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800160c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8001610:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8001614:	429d      	cmp	r5, r3
 8001616:	bf08      	it	eq
 8001618:	4296      	cmpeq	r6, r2
 800161a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800161e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8001622:	d202      	bcs.n	800162a <__aeabi_ddiv+0x6e>
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	ea4f 0232 	mov.w	r2, r2, rrx
 800162a:	1ab6      	subs	r6, r6, r2
 800162c:	eb65 0503 	sbc.w	r5, r5, r3
 8001630:	085b      	lsrs	r3, r3, #1
 8001632:	ea4f 0232 	mov.w	r2, r2, rrx
 8001636:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800163a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800163e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001642:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001646:	bf22      	ittt	cs
 8001648:	1ab6      	subcs	r6, r6, r2
 800164a:	4675      	movcs	r5, lr
 800164c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001650:	085b      	lsrs	r3, r3, #1
 8001652:	ea4f 0232 	mov.w	r2, r2, rrx
 8001656:	ebb6 0e02 	subs.w	lr, r6, r2
 800165a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800165e:	bf22      	ittt	cs
 8001660:	1ab6      	subcs	r6, r6, r2
 8001662:	4675      	movcs	r5, lr
 8001664:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001668:	085b      	lsrs	r3, r3, #1
 800166a:	ea4f 0232 	mov.w	r2, r2, rrx
 800166e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001672:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001676:	bf22      	ittt	cs
 8001678:	1ab6      	subcs	r6, r6, r2
 800167a:	4675      	movcs	r5, lr
 800167c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	ea4f 0232 	mov.w	r2, r2, rrx
 8001686:	ebb6 0e02 	subs.w	lr, r6, r2
 800168a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800168e:	bf22      	ittt	cs
 8001690:	1ab6      	subcs	r6, r6, r2
 8001692:	4675      	movcs	r5, lr
 8001694:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001698:	ea55 0e06 	orrs.w	lr, r5, r6
 800169c:	d018      	beq.n	80016d0 <__aeabi_ddiv+0x114>
 800169e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80016a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80016a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80016aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80016ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80016b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80016b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80016ba:	d1c0      	bne.n	800163e <__aeabi_ddiv+0x82>
 80016bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80016c0:	d10b      	bne.n	80016da <__aeabi_ddiv+0x11e>
 80016c2:	ea41 0100 	orr.w	r1, r1, r0
 80016c6:	f04f 0000 	mov.w	r0, #0
 80016ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80016ce:	e7b6      	b.n	800163e <__aeabi_ddiv+0x82>
 80016d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80016d4:	bf04      	itt	eq
 80016d6:	4301      	orreq	r1, r0
 80016d8:	2000      	moveq	r0, #0
 80016da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80016de:	bf88      	it	hi
 80016e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80016e4:	f63f aeaf 	bhi.w	8001446 <__aeabi_dmul+0xde>
 80016e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80016ec:	bf04      	itt	eq
 80016ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80016f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80016f6:	f150 0000 	adcs.w	r0, r0, #0
 80016fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80016fe:	bd70      	pop	{r4, r5, r6, pc}
 8001700:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8001704:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8001708:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800170c:	bfc2      	ittt	gt
 800170e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001712:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001716:	bd70      	popgt	{r4, r5, r6, pc}
 8001718:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800171c:	f04f 0e00 	mov.w	lr, #0
 8001720:	3c01      	subs	r4, #1
 8001722:	e690      	b.n	8001446 <__aeabi_dmul+0xde>
 8001724:	ea45 0e06 	orr.w	lr, r5, r6
 8001728:	e68d      	b.n	8001446 <__aeabi_dmul+0xde>
 800172a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800172e:	ea94 0f0c 	teq	r4, ip
 8001732:	bf08      	it	eq
 8001734:	ea95 0f0c 	teqeq	r5, ip
 8001738:	f43f af3b 	beq.w	80015b2 <__aeabi_dmul+0x24a>
 800173c:	ea94 0f0c 	teq	r4, ip
 8001740:	d10a      	bne.n	8001758 <__aeabi_ddiv+0x19c>
 8001742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001746:	f47f af34 	bne.w	80015b2 <__aeabi_dmul+0x24a>
 800174a:	ea95 0f0c 	teq	r5, ip
 800174e:	f47f af25 	bne.w	800159c <__aeabi_dmul+0x234>
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	e72c      	b.n	80015b2 <__aeabi_dmul+0x24a>
 8001758:	ea95 0f0c 	teq	r5, ip
 800175c:	d106      	bne.n	800176c <__aeabi_ddiv+0x1b0>
 800175e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001762:	f43f aefd 	beq.w	8001560 <__aeabi_dmul+0x1f8>
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	e722      	b.n	80015b2 <__aeabi_dmul+0x24a>
 800176c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001770:	bf18      	it	ne
 8001772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001776:	f47f aec5 	bne.w	8001504 <__aeabi_dmul+0x19c>
 800177a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800177e:	f47f af0d 	bne.w	800159c <__aeabi_dmul+0x234>
 8001782:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001786:	f47f aeeb 	bne.w	8001560 <__aeabi_dmul+0x1f8>
 800178a:	e712      	b.n	80015b2 <__aeabi_dmul+0x24a>

0800178c <__gedf2>:
 800178c:	f04f 3cff 	mov.w	ip, #4294967295
 8001790:	e006      	b.n	80017a0 <__cmpdf2+0x4>
 8001792:	bf00      	nop

08001794 <__ledf2>:
 8001794:	f04f 0c01 	mov.w	ip, #1
 8001798:	e002      	b.n	80017a0 <__cmpdf2+0x4>
 800179a:	bf00      	nop

0800179c <__cmpdf2>:
 800179c:	f04f 0c01 	mov.w	ip, #1
 80017a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80017a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80017a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80017ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80017b0:	bf18      	it	ne
 80017b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80017b6:	d01b      	beq.n	80017f0 <__cmpdf2+0x54>
 80017b8:	b001      	add	sp, #4
 80017ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80017be:	bf0c      	ite	eq
 80017c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80017c4:	ea91 0f03 	teqne	r1, r3
 80017c8:	bf02      	ittt	eq
 80017ca:	ea90 0f02 	teqeq	r0, r2
 80017ce:	2000      	moveq	r0, #0
 80017d0:	4770      	bxeq	lr
 80017d2:	f110 0f00 	cmn.w	r0, #0
 80017d6:	ea91 0f03 	teq	r1, r3
 80017da:	bf58      	it	pl
 80017dc:	4299      	cmppl	r1, r3
 80017de:	bf08      	it	eq
 80017e0:	4290      	cmpeq	r0, r2
 80017e2:	bf2c      	ite	cs
 80017e4:	17d8      	asrcs	r0, r3, #31
 80017e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80017ea:	f040 0001 	orr.w	r0, r0, #1
 80017ee:	4770      	bx	lr
 80017f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80017f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80017f8:	d102      	bne.n	8001800 <__cmpdf2+0x64>
 80017fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80017fe:	d107      	bne.n	8001810 <__cmpdf2+0x74>
 8001800:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001804:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001808:	d1d6      	bne.n	80017b8 <__cmpdf2+0x1c>
 800180a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800180e:	d0d3      	beq.n	80017b8 <__cmpdf2+0x1c>
 8001810:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop

08001818 <__aeabi_cdrcmple>:
 8001818:	4684      	mov	ip, r0
 800181a:	4610      	mov	r0, r2
 800181c:	4662      	mov	r2, ip
 800181e:	468c      	mov	ip, r1
 8001820:	4619      	mov	r1, r3
 8001822:	4663      	mov	r3, ip
 8001824:	e000      	b.n	8001828 <__aeabi_cdcmpeq>
 8001826:	bf00      	nop

08001828 <__aeabi_cdcmpeq>:
 8001828:	b501      	push	{r0, lr}
 800182a:	f7ff ffb7 	bl	800179c <__cmpdf2>
 800182e:	2800      	cmp	r0, #0
 8001830:	bf48      	it	mi
 8001832:	f110 0f00 	cmnmi.w	r0, #0
 8001836:	bd01      	pop	{r0, pc}

08001838 <__aeabi_dcmpeq>:
 8001838:	f84d ed08 	str.w	lr, [sp, #-8]!
 800183c:	f7ff fff4 	bl	8001828 <__aeabi_cdcmpeq>
 8001840:	bf0c      	ite	eq
 8001842:	2001      	moveq	r0, #1
 8001844:	2000      	movne	r0, #0
 8001846:	f85d fb08 	ldr.w	pc, [sp], #8
 800184a:	bf00      	nop

0800184c <__aeabi_dcmplt>:
 800184c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001850:	f7ff ffea 	bl	8001828 <__aeabi_cdcmpeq>
 8001854:	bf34      	ite	cc
 8001856:	2001      	movcc	r0, #1
 8001858:	2000      	movcs	r0, #0
 800185a:	f85d fb08 	ldr.w	pc, [sp], #8
 800185e:	bf00      	nop

08001860 <__aeabi_dcmple>:
 8001860:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001864:	f7ff ffe0 	bl	8001828 <__aeabi_cdcmpeq>
 8001868:	bf94      	ite	ls
 800186a:	2001      	movls	r0, #1
 800186c:	2000      	movhi	r0, #0
 800186e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001872:	bf00      	nop

08001874 <__aeabi_dcmpge>:
 8001874:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001878:	f7ff ffce 	bl	8001818 <__aeabi_cdrcmple>
 800187c:	bf94      	ite	ls
 800187e:	2001      	movls	r0, #1
 8001880:	2000      	movhi	r0, #0
 8001882:	f85d fb08 	ldr.w	pc, [sp], #8
 8001886:	bf00      	nop

08001888 <__aeabi_dcmpgt>:
 8001888:	f84d ed08 	str.w	lr, [sp, #-8]!
 800188c:	f7ff ffc4 	bl	8001818 <__aeabi_cdrcmple>
 8001890:	bf34      	ite	cc
 8001892:	2001      	movcc	r0, #1
 8001894:	2000      	movcs	r0, #0
 8001896:	f85d fb08 	ldr.w	pc, [sp], #8
 800189a:	bf00      	nop

0800189c <__aeabi_dcmpun>:
 800189c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80018a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80018a4:	d102      	bne.n	80018ac <__aeabi_dcmpun+0x10>
 80018a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80018aa:	d10a      	bne.n	80018c2 <__aeabi_dcmpun+0x26>
 80018ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80018b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80018b4:	d102      	bne.n	80018bc <__aeabi_dcmpun+0x20>
 80018b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80018ba:	d102      	bne.n	80018c2 <__aeabi_dcmpun+0x26>
 80018bc:	f04f 0000 	mov.w	r0, #0
 80018c0:	4770      	bx	lr
 80018c2:	f04f 0001 	mov.w	r0, #1
 80018c6:	4770      	bx	lr

080018c8 <__aeabi_d2iz>:
 80018c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80018cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80018d0:	d215      	bcs.n	80018fe <__aeabi_d2iz+0x36>
 80018d2:	d511      	bpl.n	80018f8 <__aeabi_d2iz+0x30>
 80018d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80018d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80018dc:	d912      	bls.n	8001904 <__aeabi_d2iz+0x3c>
 80018de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80018e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80018ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80018ee:	fa23 f002 	lsr.w	r0, r3, r2
 80018f2:	bf18      	it	ne
 80018f4:	4240      	negne	r0, r0
 80018f6:	4770      	bx	lr
 80018f8:	f04f 0000 	mov.w	r0, #0
 80018fc:	4770      	bx	lr
 80018fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001902:	d105      	bne.n	8001910 <__aeabi_d2iz+0x48>
 8001904:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001908:	bf08      	it	eq
 800190a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800190e:	4770      	bx	lr
 8001910:	f04f 0000 	mov.w	r0, #0
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop

08001918 <__aeabi_uldivmod>:
 8001918:	b953      	cbnz	r3, 8001930 <__aeabi_uldivmod+0x18>
 800191a:	b94a      	cbnz	r2, 8001930 <__aeabi_uldivmod+0x18>
 800191c:	2900      	cmp	r1, #0
 800191e:	bf08      	it	eq
 8001920:	2800      	cmpeq	r0, #0
 8001922:	bf1c      	itt	ne
 8001924:	f04f 31ff 	movne.w	r1, #4294967295
 8001928:	f04f 30ff 	movne.w	r0, #4294967295
 800192c:	f000 b974 	b.w	8001c18 <__aeabi_idiv0>
 8001930:	f1ad 0c08 	sub.w	ip, sp, #8
 8001934:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001938:	f000 f806 	bl	8001948 <__udivmoddi4>
 800193c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001944:	b004      	add	sp, #16
 8001946:	4770      	bx	lr

08001948 <__udivmoddi4>:
 8001948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800194c:	9d08      	ldr	r5, [sp, #32]
 800194e:	4604      	mov	r4, r0
 8001950:	468e      	mov	lr, r1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d14d      	bne.n	80019f2 <__udivmoddi4+0xaa>
 8001956:	428a      	cmp	r2, r1
 8001958:	4694      	mov	ip, r2
 800195a:	d969      	bls.n	8001a30 <__udivmoddi4+0xe8>
 800195c:	fab2 f282 	clz	r2, r2
 8001960:	b152      	cbz	r2, 8001978 <__udivmoddi4+0x30>
 8001962:	fa01 f302 	lsl.w	r3, r1, r2
 8001966:	f1c2 0120 	rsb	r1, r2, #32
 800196a:	fa20 f101 	lsr.w	r1, r0, r1
 800196e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001972:	ea41 0e03 	orr.w	lr, r1, r3
 8001976:	4094      	lsls	r4, r2
 8001978:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800197c:	0c21      	lsrs	r1, r4, #16
 800197e:	fbbe f6f8 	udiv	r6, lr, r8
 8001982:	fa1f f78c 	uxth.w	r7, ip
 8001986:	fb08 e316 	mls	r3, r8, r6, lr
 800198a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800198e:	fb06 f107 	mul.w	r1, r6, r7
 8001992:	4299      	cmp	r1, r3
 8001994:	d90a      	bls.n	80019ac <__udivmoddi4+0x64>
 8001996:	eb1c 0303 	adds.w	r3, ip, r3
 800199a:	f106 30ff 	add.w	r0, r6, #4294967295
 800199e:	f080 811f 	bcs.w	8001be0 <__udivmoddi4+0x298>
 80019a2:	4299      	cmp	r1, r3
 80019a4:	f240 811c 	bls.w	8001be0 <__udivmoddi4+0x298>
 80019a8:	3e02      	subs	r6, #2
 80019aa:	4463      	add	r3, ip
 80019ac:	1a5b      	subs	r3, r3, r1
 80019ae:	b2a4      	uxth	r4, r4
 80019b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80019b4:	fb08 3310 	mls	r3, r8, r0, r3
 80019b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80019bc:	fb00 f707 	mul.w	r7, r0, r7
 80019c0:	42a7      	cmp	r7, r4
 80019c2:	d90a      	bls.n	80019da <__udivmoddi4+0x92>
 80019c4:	eb1c 0404 	adds.w	r4, ip, r4
 80019c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80019cc:	f080 810a 	bcs.w	8001be4 <__udivmoddi4+0x29c>
 80019d0:	42a7      	cmp	r7, r4
 80019d2:	f240 8107 	bls.w	8001be4 <__udivmoddi4+0x29c>
 80019d6:	4464      	add	r4, ip
 80019d8:	3802      	subs	r0, #2
 80019da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80019de:	1be4      	subs	r4, r4, r7
 80019e0:	2600      	movs	r6, #0
 80019e2:	b11d      	cbz	r5, 80019ec <__udivmoddi4+0xa4>
 80019e4:	40d4      	lsrs	r4, r2
 80019e6:	2300      	movs	r3, #0
 80019e8:	e9c5 4300 	strd	r4, r3, [r5]
 80019ec:	4631      	mov	r1, r6
 80019ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019f2:	428b      	cmp	r3, r1
 80019f4:	d909      	bls.n	8001a0a <__udivmoddi4+0xc2>
 80019f6:	2d00      	cmp	r5, #0
 80019f8:	f000 80ef 	beq.w	8001bda <__udivmoddi4+0x292>
 80019fc:	2600      	movs	r6, #0
 80019fe:	e9c5 0100 	strd	r0, r1, [r5]
 8001a02:	4630      	mov	r0, r6
 8001a04:	4631      	mov	r1, r6
 8001a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a0a:	fab3 f683 	clz	r6, r3
 8001a0e:	2e00      	cmp	r6, #0
 8001a10:	d14a      	bne.n	8001aa8 <__udivmoddi4+0x160>
 8001a12:	428b      	cmp	r3, r1
 8001a14:	d302      	bcc.n	8001a1c <__udivmoddi4+0xd4>
 8001a16:	4282      	cmp	r2, r0
 8001a18:	f200 80f9 	bhi.w	8001c0e <__udivmoddi4+0x2c6>
 8001a1c:	1a84      	subs	r4, r0, r2
 8001a1e:	eb61 0303 	sbc.w	r3, r1, r3
 8001a22:	2001      	movs	r0, #1
 8001a24:	469e      	mov	lr, r3
 8001a26:	2d00      	cmp	r5, #0
 8001a28:	d0e0      	beq.n	80019ec <__udivmoddi4+0xa4>
 8001a2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8001a2e:	e7dd      	b.n	80019ec <__udivmoddi4+0xa4>
 8001a30:	b902      	cbnz	r2, 8001a34 <__udivmoddi4+0xec>
 8001a32:	deff      	udf	#255	; 0xff
 8001a34:	fab2 f282 	clz	r2, r2
 8001a38:	2a00      	cmp	r2, #0
 8001a3a:	f040 8092 	bne.w	8001b62 <__udivmoddi4+0x21a>
 8001a3e:	eba1 010c 	sub.w	r1, r1, ip
 8001a42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001a46:	fa1f fe8c 	uxth.w	lr, ip
 8001a4a:	2601      	movs	r6, #1
 8001a4c:	0c20      	lsrs	r0, r4, #16
 8001a4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8001a52:	fb07 1113 	mls	r1, r7, r3, r1
 8001a56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001a5a:	fb0e f003 	mul.w	r0, lr, r3
 8001a5e:	4288      	cmp	r0, r1
 8001a60:	d908      	bls.n	8001a74 <__udivmoddi4+0x12c>
 8001a62:	eb1c 0101 	adds.w	r1, ip, r1
 8001a66:	f103 38ff 	add.w	r8, r3, #4294967295
 8001a6a:	d202      	bcs.n	8001a72 <__udivmoddi4+0x12a>
 8001a6c:	4288      	cmp	r0, r1
 8001a6e:	f200 80cb 	bhi.w	8001c08 <__udivmoddi4+0x2c0>
 8001a72:	4643      	mov	r3, r8
 8001a74:	1a09      	subs	r1, r1, r0
 8001a76:	b2a4      	uxth	r4, r4
 8001a78:	fbb1 f0f7 	udiv	r0, r1, r7
 8001a7c:	fb07 1110 	mls	r1, r7, r0, r1
 8001a80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001a84:	fb0e fe00 	mul.w	lr, lr, r0
 8001a88:	45a6      	cmp	lr, r4
 8001a8a:	d908      	bls.n	8001a9e <__udivmoddi4+0x156>
 8001a8c:	eb1c 0404 	adds.w	r4, ip, r4
 8001a90:	f100 31ff 	add.w	r1, r0, #4294967295
 8001a94:	d202      	bcs.n	8001a9c <__udivmoddi4+0x154>
 8001a96:	45a6      	cmp	lr, r4
 8001a98:	f200 80bb 	bhi.w	8001c12 <__udivmoddi4+0x2ca>
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	eba4 040e 	sub.w	r4, r4, lr
 8001aa2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001aa6:	e79c      	b.n	80019e2 <__udivmoddi4+0x9a>
 8001aa8:	f1c6 0720 	rsb	r7, r6, #32
 8001aac:	40b3      	lsls	r3, r6
 8001aae:	fa22 fc07 	lsr.w	ip, r2, r7
 8001ab2:	ea4c 0c03 	orr.w	ip, ip, r3
 8001ab6:	fa20 f407 	lsr.w	r4, r0, r7
 8001aba:	fa01 f306 	lsl.w	r3, r1, r6
 8001abe:	431c      	orrs	r4, r3
 8001ac0:	40f9      	lsrs	r1, r7
 8001ac2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001ac6:	fa00 f306 	lsl.w	r3, r0, r6
 8001aca:	fbb1 f8f9 	udiv	r8, r1, r9
 8001ace:	0c20      	lsrs	r0, r4, #16
 8001ad0:	fa1f fe8c 	uxth.w	lr, ip
 8001ad4:	fb09 1118 	mls	r1, r9, r8, r1
 8001ad8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001adc:	fb08 f00e 	mul.w	r0, r8, lr
 8001ae0:	4288      	cmp	r0, r1
 8001ae2:	fa02 f206 	lsl.w	r2, r2, r6
 8001ae6:	d90b      	bls.n	8001b00 <__udivmoddi4+0x1b8>
 8001ae8:	eb1c 0101 	adds.w	r1, ip, r1
 8001aec:	f108 3aff 	add.w	sl, r8, #4294967295
 8001af0:	f080 8088 	bcs.w	8001c04 <__udivmoddi4+0x2bc>
 8001af4:	4288      	cmp	r0, r1
 8001af6:	f240 8085 	bls.w	8001c04 <__udivmoddi4+0x2bc>
 8001afa:	f1a8 0802 	sub.w	r8, r8, #2
 8001afe:	4461      	add	r1, ip
 8001b00:	1a09      	subs	r1, r1, r0
 8001b02:	b2a4      	uxth	r4, r4
 8001b04:	fbb1 f0f9 	udiv	r0, r1, r9
 8001b08:	fb09 1110 	mls	r1, r9, r0, r1
 8001b0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001b10:	fb00 fe0e 	mul.w	lr, r0, lr
 8001b14:	458e      	cmp	lr, r1
 8001b16:	d908      	bls.n	8001b2a <__udivmoddi4+0x1e2>
 8001b18:	eb1c 0101 	adds.w	r1, ip, r1
 8001b1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8001b20:	d26c      	bcs.n	8001bfc <__udivmoddi4+0x2b4>
 8001b22:	458e      	cmp	lr, r1
 8001b24:	d96a      	bls.n	8001bfc <__udivmoddi4+0x2b4>
 8001b26:	3802      	subs	r0, #2
 8001b28:	4461      	add	r1, ip
 8001b2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001b2e:	fba0 9402 	umull	r9, r4, r0, r2
 8001b32:	eba1 010e 	sub.w	r1, r1, lr
 8001b36:	42a1      	cmp	r1, r4
 8001b38:	46c8      	mov	r8, r9
 8001b3a:	46a6      	mov	lr, r4
 8001b3c:	d356      	bcc.n	8001bec <__udivmoddi4+0x2a4>
 8001b3e:	d053      	beq.n	8001be8 <__udivmoddi4+0x2a0>
 8001b40:	b15d      	cbz	r5, 8001b5a <__udivmoddi4+0x212>
 8001b42:	ebb3 0208 	subs.w	r2, r3, r8
 8001b46:	eb61 010e 	sbc.w	r1, r1, lr
 8001b4a:	fa01 f707 	lsl.w	r7, r1, r7
 8001b4e:	fa22 f306 	lsr.w	r3, r2, r6
 8001b52:	40f1      	lsrs	r1, r6
 8001b54:	431f      	orrs	r7, r3
 8001b56:	e9c5 7100 	strd	r7, r1, [r5]
 8001b5a:	2600      	movs	r6, #0
 8001b5c:	4631      	mov	r1, r6
 8001b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b62:	f1c2 0320 	rsb	r3, r2, #32
 8001b66:	40d8      	lsrs	r0, r3
 8001b68:	fa0c fc02 	lsl.w	ip, ip, r2
 8001b6c:	fa21 f303 	lsr.w	r3, r1, r3
 8001b70:	4091      	lsls	r1, r2
 8001b72:	4301      	orrs	r1, r0
 8001b74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001b78:	fa1f fe8c 	uxth.w	lr, ip
 8001b7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001b80:	fb07 3610 	mls	r6, r7, r0, r3
 8001b84:	0c0b      	lsrs	r3, r1, #16
 8001b86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001b8a:	fb00 f60e 	mul.w	r6, r0, lr
 8001b8e:	429e      	cmp	r6, r3
 8001b90:	fa04 f402 	lsl.w	r4, r4, r2
 8001b94:	d908      	bls.n	8001ba8 <__udivmoddi4+0x260>
 8001b96:	eb1c 0303 	adds.w	r3, ip, r3
 8001b9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8001b9e:	d22f      	bcs.n	8001c00 <__udivmoddi4+0x2b8>
 8001ba0:	429e      	cmp	r6, r3
 8001ba2:	d92d      	bls.n	8001c00 <__udivmoddi4+0x2b8>
 8001ba4:	3802      	subs	r0, #2
 8001ba6:	4463      	add	r3, ip
 8001ba8:	1b9b      	subs	r3, r3, r6
 8001baa:	b289      	uxth	r1, r1
 8001bac:	fbb3 f6f7 	udiv	r6, r3, r7
 8001bb0:	fb07 3316 	mls	r3, r7, r6, r3
 8001bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001bb8:	fb06 f30e 	mul.w	r3, r6, lr
 8001bbc:	428b      	cmp	r3, r1
 8001bbe:	d908      	bls.n	8001bd2 <__udivmoddi4+0x28a>
 8001bc0:	eb1c 0101 	adds.w	r1, ip, r1
 8001bc4:	f106 38ff 	add.w	r8, r6, #4294967295
 8001bc8:	d216      	bcs.n	8001bf8 <__udivmoddi4+0x2b0>
 8001bca:	428b      	cmp	r3, r1
 8001bcc:	d914      	bls.n	8001bf8 <__udivmoddi4+0x2b0>
 8001bce:	3e02      	subs	r6, #2
 8001bd0:	4461      	add	r1, ip
 8001bd2:	1ac9      	subs	r1, r1, r3
 8001bd4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001bd8:	e738      	b.n	8001a4c <__udivmoddi4+0x104>
 8001bda:	462e      	mov	r6, r5
 8001bdc:	4628      	mov	r0, r5
 8001bde:	e705      	b.n	80019ec <__udivmoddi4+0xa4>
 8001be0:	4606      	mov	r6, r0
 8001be2:	e6e3      	b.n	80019ac <__udivmoddi4+0x64>
 8001be4:	4618      	mov	r0, r3
 8001be6:	e6f8      	b.n	80019da <__udivmoddi4+0x92>
 8001be8:	454b      	cmp	r3, r9
 8001bea:	d2a9      	bcs.n	8001b40 <__udivmoddi4+0x1f8>
 8001bec:	ebb9 0802 	subs.w	r8, r9, r2
 8001bf0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001bf4:	3801      	subs	r0, #1
 8001bf6:	e7a3      	b.n	8001b40 <__udivmoddi4+0x1f8>
 8001bf8:	4646      	mov	r6, r8
 8001bfa:	e7ea      	b.n	8001bd2 <__udivmoddi4+0x28a>
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	e794      	b.n	8001b2a <__udivmoddi4+0x1e2>
 8001c00:	4640      	mov	r0, r8
 8001c02:	e7d1      	b.n	8001ba8 <__udivmoddi4+0x260>
 8001c04:	46d0      	mov	r8, sl
 8001c06:	e77b      	b.n	8001b00 <__udivmoddi4+0x1b8>
 8001c08:	3b02      	subs	r3, #2
 8001c0a:	4461      	add	r1, ip
 8001c0c:	e732      	b.n	8001a74 <__udivmoddi4+0x12c>
 8001c0e:	4630      	mov	r0, r6
 8001c10:	e709      	b.n	8001a26 <__udivmoddi4+0xde>
 8001c12:	4464      	add	r4, ip
 8001c14:	3802      	subs	r0, #2
 8001c16:	e742      	b.n	8001a9e <__udivmoddi4+0x156>

08001c18 <__aeabi_idiv0>:
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop

08001c1c <recv>:
{
	uint32_t ret = HAL_I2C_Master_Transmit(i2c, addr, data, len, 1000);
	return ret;
}
uint8_t recv(I2C_HandleTypeDef *i2c, uint8_t addr, uint8_t *data, uint8_t len)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af02      	add	r7, sp, #8
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	461a      	mov	r2, r3
 8001c28:	460b      	mov	r3, r1
 8001c2a:	72fb      	strb	r3, [r7, #11]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	72bb      	strb	r3, [r7, #10]
	uint32_t ret = HAL_I2C_Master_Receive(i2c, addr, data, len, 1000);
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	b299      	uxth	r1, r3
 8001c34:	7abb      	ldrb	r3, [r7, #10]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c3c:	9200      	str	r2, [sp, #0]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f002 f8fd 	bl	8003e40 <HAL_I2C_Master_Receive>
 8001c46:	4603      	mov	r3, r0
 8001c48:	617b      	str	r3, [r7, #20]
	return ret;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	b2db      	uxtb	r3, r3
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <getWord>:

uint16_t getWord(I2C_HandleTypeDef *i2c)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
	  uint8_t buf[2];
	  uint16_t r;
	  recv(i2c, I2C_READ, &buf[0], 1);
 8001c5e:	f107 020c 	add.w	r2, r7, #12
 8001c62:	2301      	movs	r3, #1
 8001c64:	21a9      	movs	r1, #169	; 0xa9
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ffd8 	bl	8001c1c <recv>
	  recv(i2c, I2C_READ, &buf[1], 1);
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	2301      	movs	r3, #1
 8001c74:	21a9      	movs	r1, #169	; 0xa9
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffd0 	bl	8001c1c <recv>
	  r = buf[1] << 8;
 8001c7c:	7b7b      	ldrb	r3, [r7, #13]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	81fb      	strh	r3, [r7, #14]
	  r |= buf[0];
 8001c84:	7b3b      	ldrb	r3, [r7, #12]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	89fb      	ldrh	r3, [r7, #14]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	81fb      	strh	r3, [r7, #14]
	  return r;
 8001c8e:	89fb      	ldrh	r3, [r7, #14]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <getStart>:
enum BlockType getStart(I2C_HandleTypeDef *i2c)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	uint16_t w, lw = 0xffff;
 8001ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca4:	81fb      	strh	r3, [r7, #14]
	while(1)
	{
		w = getWord(i2c);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ffd5 	bl	8001c56 <getWord>
 8001cac:	4603      	mov	r3, r0
 8001cae:	81bb      	strh	r3, [r7, #12]
		if(w == 0 && lw == 0)
 8001cb0:	89bb      	ldrh	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d104      	bne.n	8001cc0 <getStart+0x28>
 8001cb6:	89fb      	ldrh	r3, [r7, #14]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <getStart+0x28>
		{
			return NOTFOUND;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e02d      	b.n	8001d1c <getStart+0x84>
		}
		if(w == 0 && lw == 0) // No data found
 8001cc0:	89bb      	ldrh	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d104      	bne.n	8001cd0 <getStart+0x38>
 8001cc6:	89fb      	ldrh	r3, [r7, #14]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <getStart+0x38>
		{
			return NOTFOUND;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e025      	b.n	8001d1c <getStart+0x84>
		}
	    else if (w == SYNC_START && lw == SYNC_START)
 8001cd0:	89bb      	ldrh	r3, [r7, #12]
 8001cd2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d106      	bne.n	8001ce8 <getStart+0x50>
 8001cda:	89fb      	ldrh	r3, [r7, #14]
 8001cdc:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d101      	bne.n	8001ce8 <getStart+0x50>
	    {
	    	return NORMAL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e019      	b.n	8001d1c <getStart+0x84>
	    }
	    else if (w == SYNC_START_CC && lw == SYNC_START)
 8001ce8:	89bb      	ldrh	r3, [r7, #12]
 8001cea:	f64a 2256 	movw	r2, #43606	; 0xaa56
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d106      	bne.n	8001d00 <getStart+0x68>
 8001cf2:	89fb      	ldrh	r3, [r7, #14]
 8001cf4:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d101      	bne.n	8001d00 <getStart+0x68>
	    {
	    	return COLOR; // code found!
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e00d      	b.n	8001d1c <getStart+0x84>
	    }
	    else if (w == SYNC_X) // this is important, we might be juxtaposed
 8001d00:	89bb      	ldrh	r3, [r7, #12]
 8001d02:	f245 52aa 	movw	r2, #21930	; 0x55aa
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d105      	bne.n	8001d16 <getStart+0x7e>
	      recv(i2c, I2C_READ, NULL, 1);
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	21a9      	movs	r1, #169	; 0xa9
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff ff83 	bl	8001c1c <recv>

	    lw = w; // save
 8001d16:	89bb      	ldrh	r3, [r7, #12]
 8001d18:	81fb      	strh	r3, [r7, #14]
		w = getWord(i2c);
 8001d1a:	e7c4      	b.n	8001ca6 <getStart+0xe>
	}
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <getBlocks>:

void getBlocks(I2C_HandleTypeDef *i2c, int* buf) //X is 0, Y is 2, none others
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
	// Pixy
	  while(getStart(i2c) == NOTFOUND); //Finds start of frame
 8001d2e:	bf00      	nop
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ffb1 	bl	8001c98 <getStart>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d0f9      	beq.n	8001d30 <getBlocks+0xc>
	  getWord(i2c); // Checksum word
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff8a 	bl	8001c56 <getWord>
	  uint16_t signature = getWord(i2c);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ff87 	bl	8001c56 <getWord>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	81fb      	strh	r3, [r7, #14]
	  uint16_t x_center = getWord(i2c);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ff82 	bl	8001c56 <getWord>
 8001d52:	4603      	mov	r3, r0
 8001d54:	81bb      	strh	r3, [r7, #12]
	  uint16_t y_center = getWord(i2c);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ff7d 	bl	8001c56 <getWord>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	817b      	strh	r3, [r7, #10]
	  // Width/height words come here if needed
	  buf[0] = x_center;
 8001d60:	89ba      	ldrh	r2, [r7, #12]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	601a      	str	r2, [r3, #0]
	  buf[1] = y_center;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	897a      	ldrh	r2, [r7, #10]
 8001d6c:	601a      	str	r2, [r3, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <LCD_sendCommand>:





void LCD_sendCommand(uint8_t com){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
    uint8_t tmpCmd = com;
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 0);
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <LCD_sendCommand+0x54>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <LCD_sendCommand+0x58>)
 8001d8c:	8811      	ldrh	r1, [r2, #0]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f001 ff8b 	bl	8003cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <LCD_sendCommand+0x5c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <LCD_sendCommand+0x60>)
 8001d9c:	8811      	ldrh	r1, [r2, #0]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 ff83 	bl	8003cac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 1);
 8001da6:	f107 010f 	add.w	r1, r7, #15
 8001daa:	2301      	movs	r3, #1
 8001dac:	2201      	movs	r2, #1
 8001dae:	480b      	ldr	r0, [pc, #44]	; (8001ddc <LCD_sendCommand+0x64>)
 8001db0:	f004 f973 	bl	800609a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <LCD_sendCommand+0x5c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a07      	ldr	r2, [pc, #28]	; (8001dd8 <LCD_sendCommand+0x60>)
 8001dba:	8811      	ldrh	r1, [r2, #0]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 ff74 	bl	8003cac <HAL_GPIO_WritePin>
}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000530 	.word	0x20000530
 8001dd0:	20000534 	.word	0x20000534
 8001dd4:	20000528 	.word	0x20000528
 8001dd8:	2000052c 	.word	0x2000052c
 8001ddc:	200004c4 	.word	0x200004c4

08001de0 <LCD_sendData_NoCS>:
    uint8_t tmpCmd = com;
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 0);
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 1);
}

void LCD_sendData_NoCS(uint8_t data){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmpDat = data;
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 1);
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <LCD_sendData_NoCS+0x34>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <LCD_sendData_NoCS+0x38>)
 8001df4:	8811      	ldrh	r1, [r2, #0]
 8001df6:	2201      	movs	r2, #1
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f001 ff57 	bl	8003cac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpDat, 1, 1);
 8001dfe:	f107 010f 	add.w	r1, r7, #15
 8001e02:	2301      	movs	r3, #1
 8001e04:	2201      	movs	r2, #1
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <LCD_sendData_NoCS+0x3c>)
 8001e08:	f004 f947 	bl	800609a <HAL_SPI_Transmit>
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000530 	.word	0x20000530
 8001e18:	20000534 	.word	0x20000534
 8001e1c:	200004c4 	.word	0x200004c4

08001e20 <LCD_sendCommandArg>:

void LCD_sendCommandArg(uint8_t command, uint8_t *dataBytes, uint8_t dataLen){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	71fb      	strb	r3, [r7, #7]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 8001e30:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <LCD_sendCommandArg+0x90>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <LCD_sendCommandArg+0x94>)
 8001e36:	8811      	ldrh	r1, [r2, #0]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f001 ff36 	bl	8003cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 0); //0 for command
 8001e40:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <LCD_sendCommandArg+0x98>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1d      	ldr	r2, [pc, #116]	; (8001ebc <LCD_sendCommandArg+0x9c>)
 8001e46:	8811      	ldrh	r1, [r2, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f001 ff2e 	bl	8003cac <HAL_GPIO_WritePin>
    uint8_t buf = command;
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&lcdSPIhandle, &buf, 1, 1);
 8001e54:	f107 010b 	add.w	r1, r7, #11
 8001e58:	2301      	movs	r3, #1
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4818      	ldr	r0, [pc, #96]	; (8001ec0 <LCD_sendCommandArg+0xa0>)
 8001e5e:	f004 f91c 	bl	800609a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 1); //start writing args
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <LCD_sendCommandArg+0x98>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a15      	ldr	r2, [pc, #84]	; (8001ebc <LCD_sendCommandArg+0x9c>)
 8001e68:	8811      	ldrh	r1, [r2, #0]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f001 ff1d 	bl	8003cac <HAL_GPIO_WritePin>
    for(int i = 0; i < dataLen; ++i){
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	e00b      	b.n	8001e90 <LCD_sendCommandArg+0x70>
        HAL_SPI_Transmit(&lcdSPIhandle, dataBytes, 1, 1);
 8001e78:	2301      	movs	r3, #1
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	6839      	ldr	r1, [r7, #0]
 8001e7e:	4810      	ldr	r0, [pc, #64]	; (8001ec0 <LCD_sendCommandArg+0xa0>)
 8001e80:	f004 f90b 	bl	800609a <HAL_SPI_Transmit>
        dataBytes++;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	3301      	adds	r3, #1
 8001e88:	603b      	str	r3, [r7, #0]
    for(int i = 0; i < dataLen; ++i){
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	79bb      	ldrb	r3, [r7, #6]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	dbef      	blt.n	8001e78 <LCD_sendCommandArg+0x58>
    }  
    HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <LCD_sendCommandArg+0x90>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <LCD_sendCommandArg+0x94>)
 8001e9e:	8811      	ldrh	r1, [r2, #0]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f001 ff02 	bl	8003cac <HAL_GPIO_WritePin>
}
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000528 	.word	0x20000528
 8001eb4:	2000052c 	.word	0x2000052c
 8001eb8:	20000530 	.word	0x20000530
 8001ebc:	20000534 	.word	0x20000534
 8001ec0:	200004c4 	.word	0x200004c4

08001ec4 <LCD_init>:

void LCD_init(SPI_HandleTypeDef *spiLcdHandle,
                    GPIO_TypeDef *csPORT, uint16_t csPIN, 
                    GPIO_TypeDef *dcPORT, uint16_t dcPIN, 
                    GPIO_TypeDef *resetPORT, uint16_t resetPIN){
 8001ec4:	b5b0      	push	{r4, r5, r7, lr}
 8001ec6:	b098      	sub	sp, #96	; 0x60
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	80fb      	strh	r3, [r7, #6]
    //Set pins and ports---------------------------------------------
    //Copy SPI settings
    memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8001ed4:	2264      	movs	r2, #100	; 0x64
 8001ed6:	68f9      	ldr	r1, [r7, #12]
 8001ed8:	4874      	ldr	r0, [pc, #464]	; (80020ac <LCD_init+0x1e8>)
 8001eda:	f006 fbb3 	bl	8008644 <memcpy>
    //CS pin
    tftCS_GPIO = csPORT;
 8001ede:	4a74      	ldr	r2, [pc, #464]	; (80020b0 <LCD_init+0x1ec>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	6013      	str	r3, [r2, #0]
    tftCS_PIN = csPIN;
 8001ee4:	4a73      	ldr	r2, [pc, #460]	; (80020b4 <LCD_init+0x1f0>)
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	8013      	strh	r3, [r2, #0]
    HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 8001eea:	4b71      	ldr	r3, [pc, #452]	; (80020b0 <LCD_init+0x1ec>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a71      	ldr	r2, [pc, #452]	; (80020b4 <LCD_init+0x1f0>)
 8001ef0:	8811      	ldrh	r1, [r2, #0]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f001 fed9 	bl	8003cac <HAL_GPIO_WritePin>
    //DC pin
    tftDC_GPIO = dcPORT;
 8001efa:	4a6f      	ldr	r2, [pc, #444]	; (80020b8 <LCD_init+0x1f4>)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6013      	str	r3, [r2, #0]
    tftDC_PIN = dcPIN;
 8001f00:	4a6e      	ldr	r2, [pc, #440]	; (80020bc <LCD_init+0x1f8>)
 8001f02:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001f06:	8013      	strh	r3, [r2, #0]
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 1);
 8001f08:	4b6b      	ldr	r3, [pc, #428]	; (80020b8 <LCD_init+0x1f4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a6b      	ldr	r2, [pc, #428]	; (80020bc <LCD_init+0x1f8>)
 8001f0e:	8811      	ldrh	r1, [r2, #0]
 8001f10:	2201      	movs	r2, #1
 8001f12:	4618      	mov	r0, r3
 8001f14:	f001 feca 	bl	8003cac <HAL_GPIO_WritePin>
    //RESET pin
    tftRESET_GPIO = resetPORT;
 8001f18:	4a69      	ldr	r2, [pc, #420]	; (80020c0 <LCD_init+0x1fc>)
 8001f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f1c:	6013      	str	r3, [r2, #0]
    tftRESET_PIN = resetPIN;
 8001f1e:	4a69      	ldr	r2, [pc, #420]	; (80020c4 <LCD_init+0x200>)
 8001f20:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001f24:	8013      	strh	r3, [r2, #0]
    HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, 1);
 8001f26:	4b66      	ldr	r3, [pc, #408]	; (80020c0 <LCD_init+0x1fc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a66      	ldr	r2, [pc, #408]	; (80020c4 <LCD_init+0x200>)
 8001f2c:	8811      	ldrh	r1, [r2, #0]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	4618      	mov	r0, r3
 8001f32:	f001 febb 	bl	8003cac <HAL_GPIO_WritePin>
   


    //init commands---------------------------------------------------
    //Soft Reset
    HAL_Delay(10);
 8001f36:	200a      	movs	r0, #10
 8001f38:	f001 fbf0 	bl	800371c <HAL_Delay>
    LCD_sendCommand(HX8357_SWRESET);
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f7ff ff1b 	bl	8001d78 <LCD_sendCommand>
    HAL_Delay(10);
 8001f42:	200a      	movs	r0, #10
 8001f44:	f001 fbea 	bl	800371c <HAL_Delay>

    //Misc display values
    uint8_t setC[] = {0xFF, 0x83, 0x57};
 8001f48:	4a5f      	ldr	r2, [pc, #380]	; (80020c8 <LCD_init+0x204>)
 8001f4a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	4611      	mov	r1, r2
 8001f52:	8019      	strh	r1, [r3, #0]
 8001f54:	3302      	adds	r3, #2
 8001f56:	0c12      	lsrs	r2, r2, #16
 8001f58:	701a      	strb	r2, [r3, #0]
    LCD_sendCommandArg(HX8357D_SETC, setC, 3);
 8001f5a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f5e:	2203      	movs	r2, #3
 8001f60:	4619      	mov	r1, r3
 8001f62:	20b9      	movs	r0, #185	; 0xb9
 8001f64:	f7ff ff5c 	bl	8001e20 <LCD_sendCommandArg>
    HAL_Delay(500);
 8001f68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f6c:	f001 fbd6 	bl	800371c <HAL_Delay>
    uint8_t setRGB[] = {0x80, 0x00, 0x06, 0x06};
 8001f70:	4b56      	ldr	r3, [pc, #344]	; (80020cc <LCD_init+0x208>)
 8001f72:	65bb      	str	r3, [r7, #88]	; 0x58
    LCD_sendCommandArg(HX8357_SETRGB, setRGB, 4);
 8001f74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f78:	2204      	movs	r2, #4
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	20b3      	movs	r0, #179	; 0xb3
 8001f7e:	f7ff ff4f 	bl	8001e20 <LCD_sendCommandArg>
    uint8_t setCOM = 0x25;
 8001f82:	2325      	movs	r3, #37	; 0x25
 8001f84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    LCD_sendCommandArg(HX8357D_SETCOM, &setCOM, 1);
 8001f88:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4619      	mov	r1, r3
 8001f90:	20b6      	movs	r0, #182	; 0xb6
 8001f92:	f7ff ff45 	bl	8001e20 <LCD_sendCommandArg>
    uint8_t setOSC = 0x68;
 8001f96:	2368      	movs	r3, #104	; 0x68
 8001f98:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    LCD_sendCommandArg(HX8357_SETOSC, &setOSC, 1);
 8001f9c:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	20b0      	movs	r0, #176	; 0xb0
 8001fa6:	f7ff ff3b 	bl	8001e20 <LCD_sendCommandArg>
    uint8_t setPANEL = 0x05;
 8001faa:	2305      	movs	r3, #5
 8001fac:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    LCD_sendCommandArg(HX8357_SETPANEL, &setPANEL, 1);
 8001fb0:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	20cc      	movs	r0, #204	; 0xcc
 8001fba:	f7ff ff31 	bl	8001e20 <LCD_sendCommandArg>
    uint8_t setPWR1[] = {0x00, 0x15, 0x1C, 0x1C, 0x83, 0xAA};
 8001fbe:	4a44      	ldr	r2, [pc, #272]	; (80020d0 <LCD_init+0x20c>)
 8001fc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fc8:	6018      	str	r0, [r3, #0]
 8001fca:	3304      	adds	r3, #4
 8001fcc:	8019      	strh	r1, [r3, #0]
    LCD_sendCommandArg(HX8357_SETPWR1, setPWR1, 6);
 8001fce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fd2:	2206      	movs	r2, #6
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	20b1      	movs	r0, #177	; 0xb1
 8001fd8:	f7ff ff22 	bl	8001e20 <LCD_sendCommandArg>
    uint8_t setSTBA[] = {0x50, 0x50, 0x01, 0x3C, 0x1E, 0x08};
 8001fdc:	4a3d      	ldr	r2, [pc, #244]	; (80020d4 <LCD_init+0x210>)
 8001fde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fe6:	6018      	str	r0, [r3, #0]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	8019      	strh	r1, [r3, #0]
    LCD_sendCommandArg(HX8357D_SETSTBA, setSTBA, 6);
 8001fec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ff0:	2206      	movs	r2, #6
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	20c0      	movs	r0, #192	; 0xc0
 8001ff6:	f7ff ff13 	bl	8001e20 <LCD_sendCommandArg>
    uint8_t setCYC[] = {0x02, 0x40, 0x00, 0x2A, 0x2A, 0x0D, 0x78};
 8001ffa:	4a37      	ldr	r2, [pc, #220]	; (80020d8 <LCD_init+0x214>)
 8001ffc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002000:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002004:	6018      	str	r0, [r3, #0]
 8002006:	3304      	adds	r3, #4
 8002008:	8019      	strh	r1, [r3, #0]
 800200a:	3302      	adds	r3, #2
 800200c:	0c0a      	lsrs	r2, r1, #16
 800200e:	701a      	strb	r2, [r3, #0]
    LCD_sendCommandArg(HX8357D_SETCYC, setCYC, 7);
 8002010:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002014:	2207      	movs	r2, #7
 8002016:	4619      	mov	r1, r3
 8002018:	20b4      	movs	r0, #180	; 0xb4
 800201a:	f7ff ff01 	bl	8001e20 <LCD_sendCommandArg>
    uint8_t setGAMMA[] = {0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B,
 800201e:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <LCD_init+0x218>)
 8002020:	f107 0418 	add.w	r4, r7, #24
 8002024:	461d      	mov	r5, r3
 8002026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800202a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800202c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800202e:	682b      	ldr	r3, [r5, #0]
 8002030:	8023      	strh	r3, [r4, #0]
                        0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03,
                        0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B,
                        0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03,
                        0x00, 0x01};
    LCD_sendCommandArg(HX8357D_SETGAMMA, setGAMMA, 34);
 8002032:	f107 0318 	add.w	r3, r7, #24
 8002036:	2222      	movs	r2, #34	; 0x22
 8002038:	4619      	mov	r1, r3
 800203a:	20e0      	movs	r0, #224	; 0xe0
 800203c:	f7ff fef0 	bl	8001e20 <LCD_sendCommandArg>
    uint8_t setCOLMOD = 0x55;
 8002040:	2355      	movs	r3, #85	; 0x55
 8002042:	75fb      	strb	r3, [r7, #23]
    LCD_sendCommandArg(HX8357_COLMOD, &setCOLMOD, 1);
 8002044:	f107 0317 	add.w	r3, r7, #23
 8002048:	2201      	movs	r2, #1
 800204a:	4619      	mov	r1, r3
 800204c:	203a      	movs	r0, #58	; 0x3a
 800204e:	f7ff fee7 	bl	8001e20 <LCD_sendCommandArg>
    uint8_t setMADCTL = 0xC0;
 8002052:	23c0      	movs	r3, #192	; 0xc0
 8002054:	75bb      	strb	r3, [r7, #22]
    LCD_sendCommandArg(HX8357_MADCTL, &setMADCTL, 1);
 8002056:	f107 0316 	add.w	r3, r7, #22
 800205a:	2201      	movs	r2, #1
 800205c:	4619      	mov	r1, r3
 800205e:	2036      	movs	r0, #54	; 0x36
 8002060:	f7ff fede 	bl	8001e20 <LCD_sendCommandArg>
    uint8_t setTEON = 0x00;
 8002064:	2300      	movs	r3, #0
 8002066:	757b      	strb	r3, [r7, #21]
    LCD_sendCommandArg(HX8357_TEON, &setTEON, 1);
 8002068:	f107 0315 	add.w	r3, r7, #21
 800206c:	2201      	movs	r2, #1
 800206e:	4619      	mov	r1, r3
 8002070:	2035      	movs	r0, #53	; 0x35
 8002072:	f7ff fed5 	bl	8001e20 <LCD_sendCommandArg>
    uint8_t setTEARLINE[] = {0x00, 0x02};
 8002076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207a:	823b      	strh	r3, [r7, #16]
    LCD_sendCommandArg(HX8357_TEARLINE, setTEARLINE, 2);
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	2202      	movs	r2, #2
 8002082:	4619      	mov	r1, r3
 8002084:	2044      	movs	r0, #68	; 0x44
 8002086:	f7ff fecb 	bl	8001e20 <LCD_sendCommandArg>

    //Display on
    LCD_sendCommand(HX8357_SLPOUT);
 800208a:	2011      	movs	r0, #17
 800208c:	f7ff fe74 	bl	8001d78 <LCD_sendCommand>
    HAL_Delay(150);
 8002090:	2096      	movs	r0, #150	; 0x96
 8002092:	f001 fb43 	bl	800371c <HAL_Delay>
    LCD_sendCommand(HX8357_DISPON);
 8002096:	2029      	movs	r0, #41	; 0x29
 8002098:	f7ff fe6e 	bl	8001d78 <LCD_sendCommand>
    HAL_Delay(50);
 800209c:	2032      	movs	r0, #50	; 0x32
 800209e:	f001 fb3d 	bl	800371c <HAL_Delay>
}
 80020a2:	bf00      	nop
 80020a4:	3760      	adds	r7, #96	; 0x60
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bdb0      	pop	{r4, r5, r7, pc}
 80020aa:	bf00      	nop
 80020ac:	200004c4 	.word	0x200004c4
 80020b0:	20000528 	.word	0x20000528
 80020b4:	2000052c 	.word	0x2000052c
 80020b8:	20000530 	.word	0x20000530
 80020bc:	20000534 	.word	0x20000534
 80020c0:	20000538 	.word	0x20000538
 80020c4:	2000053c 	.word	0x2000053c
 80020c8:	0800b0d0 	.word	0x0800b0d0
 80020cc:	06060080 	.word	0x06060080
 80020d0:	0800b0d4 	.word	0x0800b0d4
 80020d4:	0800b0dc 	.word	0x0800b0dc
 80020d8:	0800b0e4 	.word	0x0800b0e4
 80020dc:	0800b0ec 	.word	0x0800b0ec

080020e0 <LCD_setCursorPosition>:

//Graphics function prototypes
void LCD_setCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4604      	mov	r4, r0
 80020e8:	4608      	mov	r0, r1
 80020ea:	4611      	mov	r1, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	4623      	mov	r3, r4
 80020f0:	80fb      	strh	r3, [r7, #6]
 80020f2:	4603      	mov	r3, r0
 80020f4:	80bb      	strh	r3, [r7, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	807b      	strh	r3, [r7, #2]
 80020fa:	4613      	mov	r3, r2
 80020fc:	803b      	strh	r3, [r7, #0]
  uint8_t setCASET[] = {x1 >> 8, x1 & 0xFF, x2 >> 8, x2 & 0xFF};
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	b29b      	uxth	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	733b      	strb	r3, [r7, #12]
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	737b      	strb	r3, [r7, #13]
 800210e:	887b      	ldrh	r3, [r7, #2]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	b29b      	uxth	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	73bb      	strb	r3, [r7, #14]
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	73fb      	strb	r3, [r7, #15]
  LCD_sendCommandArg(HX8357_CASET, setCASET, 4);
 800211e:	f107 030c 	add.w	r3, r7, #12
 8002122:	2204      	movs	r2, #4
 8002124:	4619      	mov	r1, r3
 8002126:	202a      	movs	r0, #42	; 0x2a
 8002128:	f7ff fe7a 	bl	8001e20 <LCD_sendCommandArg>
  uint8_t setPASET[] = {y1 >> 8, y1 & 0xFF, y2 >> 8, y2 & 0xFF};
 800212c:	88bb      	ldrh	r3, [r7, #4]
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	b29b      	uxth	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	723b      	strb	r3, [r7, #8]
 8002136:	88bb      	ldrh	r3, [r7, #4]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	727b      	strb	r3, [r7, #9]
 800213c:	883b      	ldrh	r3, [r7, #0]
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	b29b      	uxth	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	72bb      	strb	r3, [r7, #10]
 8002146:	883b      	ldrh	r3, [r7, #0]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	72fb      	strb	r3, [r7, #11]
  LCD_sendCommandArg(HX8357_PASET, setPASET, 4);
 800214c:	f107 0308 	add.w	r3, r7, #8
 8002150:	2204      	movs	r2, #4
 8002152:	4619      	mov	r1, r3
 8002154:	202b      	movs	r0, #43	; 0x2b
 8002156:	f7ff fe63 	bl	8001e20 <LCD_sendCommandArg>
  LCD_sendCommand(HX8357_RAMWR);
 800215a:	202c      	movs	r0, #44	; 0x2c
 800215c:	f7ff fe0c 	bl	8001d78 <LCD_sendCommand>
  //TODO needs write immediately after (RAMWR)
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	bd90      	pop	{r4, r7, pc}

08002168 <LCD_rect>:
  LCD_setCursorPosition(x, y, x, y);
  uint8_t setRAMWR[] = {color >> 8, color & 0xFF};
  LCD_sendCommandArg(HX8357_RAMWR, setRAMWR, 2);
}

void LCD_rect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	4604      	mov	r4, r0
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4623      	mov	r3, r4
 8002178:	80fb      	strh	r3, [r7, #6]
 800217a:	4603      	mov	r3, r0
 800217c:	80bb      	strh	r3, [r7, #4]
 800217e:	460b      	mov	r3, r1
 8002180:	807b      	strh	r3, [r7, #2]
 8002182:	4613      	mov	r3, r2
 8002184:	803b      	strh	r3, [r7, #0]
	uint32_t n = (x2 - x1 + 1) * (y2 - y1 + 1);
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	3301      	adds	r3, #1
 800218e:	8839      	ldrh	r1, [r7, #0]
 8002190:	88ba      	ldrh	r2, [r7, #4]
 8002192:	1a8a      	subs	r2, r1, r2
 8002194:	3201      	adds	r2, #1
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	60fb      	str	r3, [r7, #12]
	LCD_setCursorPosition(x1, y1, x2, y2);
 800219c:	883b      	ldrh	r3, [r7, #0]
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	88b9      	ldrh	r1, [r7, #4]
 80021a2:	88f8      	ldrh	r0, [r7, #6]
 80021a4:	f7ff ff9c 	bl	80020e0 <LCD_setCursorPosition>

	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <LCD_rect+0x90>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a13      	ldr	r2, [pc, #76]	; (80021fc <LCD_rect+0x94>)
 80021ae:	8811      	ldrh	r1, [r2, #0]
 80021b0:	2200      	movs	r2, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f001 fd7a 	bl	8003cac <HAL_GPIO_WritePin>
	while (n) {
 80021b8:	e00e      	b.n	80021d8 <LCD_rect+0x70>
		n--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	3b01      	subs	r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
		LCD_sendData_NoCS(color>>8);
 80021c0:	8c3b      	ldrh	r3, [r7, #32]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fe09 	bl	8001de0 <LCD_sendData_NoCS>
		LCD_sendData_NoCS(color&0xff);
 80021ce:	8c3b      	ldrh	r3, [r7, #32]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fe04 	bl	8001de0 <LCD_sendData_NoCS>
	while (n) {
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1ed      	bne.n	80021ba <LCD_rect+0x52>
	}
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <LCD_rect+0x90>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a06      	ldr	r2, [pc, #24]	; (80021fc <LCD_rect+0x94>)
 80021e4:	8811      	ldrh	r1, [r2, #0]
 80021e6:	2201      	movs	r2, #1
 80021e8:	4618      	mov	r0, r3
 80021ea:	f001 fd5f 	bl	8003cac <HAL_GPIO_WritePin>
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd90      	pop	{r4, r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000528 	.word	0x20000528
 80021fc:	2000052c 	.word	0x2000052c

08002200 <LCD_fill>:
void LCD_fill(uint16_t color){
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	80fb      	strh	r3, [r7, #6]
	uint32_t n = LCD_PIXEL_COUNT;
 800220a:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 800220e:	60fb      	str	r3, [r7, #12]
	LCD_setCursorPosition(0, 0, HX8357_TFTWIDTH-1, HX8357_TFTHEIGHT-1);
 8002210:	f240 13df 	movw	r3, #479	; 0x1df
 8002214:	f240 123f 	movw	r2, #319	; 0x13f
 8002218:	2100      	movs	r1, #0
 800221a:	2000      	movs	r0, #0
 800221c:	f7ff ff60 	bl	80020e0 <LCD_setCursorPosition>

	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <LCD_fill+0x70>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a13      	ldr	r2, [pc, #76]	; (8002274 <LCD_fill+0x74>)
 8002226:	8811      	ldrh	r1, [r2, #0]
 8002228:	2200      	movs	r2, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f001 fd3e 	bl	8003cac <HAL_GPIO_WritePin>
	while (n) {
 8002230:	e00e      	b.n	8002250 <LCD_fill+0x50>
		n--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3b01      	subs	r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
		LCD_sendData_NoCS(color>>8);
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	b29b      	uxth	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fdcd 	bl	8001de0 <LCD_sendData_NoCS>
		LCD_sendData_NoCS(color&0xff);
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fdc8 	bl	8001de0 <LCD_sendData_NoCS>
	while (n) {
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1ed      	bne.n	8002232 <LCD_fill+0x32>
	}
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <LCD_fill+0x70>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a06      	ldr	r2, [pc, #24]	; (8002274 <LCD_fill+0x74>)
 800225c:	8811      	ldrh	r1, [r2, #0]
 800225e:	2201      	movs	r2, #1
 8002260:	4618      	mov	r0, r3
 8002262:	f001 fd23 	bl	8003cac <HAL_GPIO_WritePin>
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000528 	.word	0x20000528
 8002274:	2000052c 	.word	0x2000052c

08002278 <delay_us_div10>:
//For interrupts
static uint32_t currentRead;
static uint8_t numRead;
static int shouldRead = 0;
void delay_us_div10(uint16_t us) // blocking delay
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(countTim, 0); // set the counter value a 0
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <delay_us_div10+0x34>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2200      	movs	r2, #0
 800228a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(countTim) < us); // wait for the counter to reach the us input in the parameter
 800228c:	bf00      	nop
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <delay_us_div10+0x34>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	429a      	cmp	r2, r3
 800229a:	d3f8      	bcc.n	800228e <delay_us_div10+0x16>
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20000540 	.word	0x20000540

080022b0 <writeOne>:

void writeOne()
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
	uint32_t *writeAdd = (uint32_t *)(GPIOC_ADDR + ODR_OFFSET);
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <writeOne+0x38>)
 80022b8:	607b      	str	r3, [r7, #4]
	*writeAdd &= ~(1 << 6);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	601a      	str	r2, [r3, #0]
	delay_us_div10(8);
 80022c6:	2008      	movs	r0, #8
 80022c8:	f7ff ffd6 	bl	8002278 <delay_us_div10>
	*writeAdd |= (1 << 6);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	601a      	str	r2, [r3, #0]
	delay_us_div10(24);
 80022d8:	2018      	movs	r0, #24
 80022da:	f7ff ffcd 	bl	8002278 <delay_us_div10>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	48000814 	.word	0x48000814

080022ec <writeZero>:

void writeZero()
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
	uint32_t *writeAdd = (uint32_t *)(GPIOC_ADDR + ODR_OFFSET);
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <writeZero+0x38>)
 80022f4:	607b      	str	r3, [r7, #4]
	*writeAdd &= ~(1 << 6);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	601a      	str	r2, [r3, #0]
	// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
	delay_us_div10(24); // 3.125
 8002302:	2018      	movs	r0, #24
 8002304:	f7ff ffb8 	bl	8002278 <delay_us_div10>
	*writeAdd |= (1 << 6);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	601a      	str	r2, [r3, #0]
	// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
	delay_us_div10(8); // 1.375
 8002314:	2008      	movs	r0, #8
 8002316:	f7ff ffaf 	bl	8002278 <delay_us_div10>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	48000814 	.word	0x48000814

08002328 <intRead>:
//	buttonVals |= (*readAdd >> 6) & 1;
//	delay_us_div10(15);
//	return buttonVals;
//}

uint32_t intRead(){
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
	currentRead = 0;
 800232e:	4b27      	ldr	r3, [pc, #156]	; (80023cc <intRead+0xa4>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
	numRead = 0;
 8002334:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <intRead+0xa8>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
	shouldRead = 0;
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <intRead+0xac>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
	writeZero();
 8002340:	f7ff ffd4 	bl	80022ec <writeZero>
	writeZero();
 8002344:	f7ff ffd2 	bl	80022ec <writeZero>
	writeZero();
 8002348:	f7ff ffd0 	bl	80022ec <writeZero>
	writeZero();
 800234c:	f7ff ffce 	bl	80022ec <writeZero>
	writeZero();
 8002350:	f7ff ffcc 	bl	80022ec <writeZero>
	writeZero();
 8002354:	f7ff ffca 	bl	80022ec <writeZero>
	writeZero();
 8002358:	f7ff ffc8 	bl	80022ec <writeZero>
	writeOne();
 800235c:	f7ff ffa8 	bl	80022b0 <writeOne>
	uint32_t *writeAdd = (uint32_t *)(GPIOC_ADDR + ODR_OFFSET);
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <intRead+0xb0>)
 8002362:	607b      	str	r3, [r7, #4]
	*writeAdd &= ~(1 << 6);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	601a      	str	r2, [r3, #0]


	delay_us_div10(8);
 8002370:	2008      	movs	r0, #8
 8002372:	f7ff ff81 	bl	8002278 <delay_us_div10>
	*writeAdd |= (1 << 6);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	601a      	str	r2, [r3, #0]
	shouldRead = 1;
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <intRead+0xac>)
 8002384:	2201      	movs	r2, #1
 8002386:	601a      	str	r2, [r3, #0]
	delay_us_div10(24);
 8002388:	2018      	movs	r0, #24
 800238a:	f7ff ff75 	bl	8002278 <delay_us_div10>


	__HAL_TIM_SET_COUNTER(watchdogTim, 0); // 1MHz timer
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <intRead+0xb4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2200      	movs	r2, #0
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
	while (numRead < 32 && __HAL_TIM_GET_COUNTER(watchdogTim) < 130); //watchDog timeout
 8002398:	bf00      	nop
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <intRead+0xa8>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b1f      	cmp	r3, #31
 80023a0:	d805      	bhi.n	80023ae <intRead+0x86>
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <intRead+0xb4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	2b81      	cmp	r3, #129	; 0x81
 80023ac:	d9f5      	bls.n	800239a <intRead+0x72>
	if(numRead < 32){
 80023ae:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <intRead+0xa8>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b1f      	cmp	r3, #31
 80023b4:	d804      	bhi.n	80023c0 <intRead+0x98>
		HAL_Delay(50);
 80023b6:	2032      	movs	r0, #50	; 0x32
 80023b8:	f001 f9b0 	bl	800371c <HAL_Delay>
		intRead();
 80023bc:	f7ff ffb4 	bl	8002328 <intRead>
	}
	return currentRead;
 80023c0:	4b02      	ldr	r3, [pc, #8]	; (80023cc <intRead+0xa4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000560 	.word	0x20000560
 80023d0:	20000564 	.word	0x20000564
 80023d4:	20000568 	.word	0x20000568
 80023d8:	48000814 	.word	0x48000814
 80023dc:	20000544 	.word	0x20000544

080023e0 <N64_readSingle>:

void N64_readSingle(){
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
	//used by n64 intRead()
	//Falling edge trigger. delay 1.7us then read into static var
	  volatile uint32_t *readAdd = (uint32_t *)(GPIOC_ADDR + IDR_OFFSET);
 80023e6:	4b17      	ldr	r3, [pc, #92]	; (8002444 <N64_readSingle+0x64>)
 80023e8:	607b      	str	r3, [r7, #4]

	if(shouldRead){
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <N64_readSingle+0x68>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d023      	beq.n	800243a <N64_readSingle+0x5a>
	  delay_us_div10(10); //??
 80023f2:	200a      	movs	r0, #10
 80023f4:	f7ff ff40 	bl	8002278 <delay_us_div10>
	  numRead++;
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <N64_readSingle+0x6c>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	3301      	adds	r3, #1
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <N64_readSingle+0x6c>)
 8002402:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(n64_DEBUG_GPIO, n64_DEBUG_PIN, 1);
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <N64_readSingle+0x70>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a12      	ldr	r2, [pc, #72]	; (8002454 <N64_readSingle+0x74>)
 800240a:	8811      	ldrh	r1, [r2, #0]
 800240c:	2201      	movs	r2, #1
 800240e:	4618      	mov	r0, r3
 8002410:	f001 fc4c 	bl	8003cac <HAL_GPIO_WritePin>
	  currentRead = (currentRead << 1) | ((*readAdd >> 6) & 1);
 8002414:	4b10      	ldr	r3, [pc, #64]	; (8002458 <N64_readSingle+0x78>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	005a      	lsls	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	099b      	lsrs	r3, r3, #6
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	4313      	orrs	r3, r2
 8002426:	4a0c      	ldr	r2, [pc, #48]	; (8002458 <N64_readSingle+0x78>)
 8002428:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(n64_DEBUG_GPIO, n64_DEBUG_PIN, 0);
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <N64_readSingle+0x70>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <N64_readSingle+0x74>)
 8002430:	8811      	ldrh	r1, [r2, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f001 fc39 	bl	8003cac <HAL_GPIO_WritePin>
	}
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	48000810 	.word	0x48000810
 8002448:	20000568 	.word	0x20000568
 800244c:	20000564 	.word	0x20000564
 8002450:	20000550 	.word	0x20000550
 8002454:	20000554 	.word	0x20000554
 8002458:	20000560 	.word	0x20000560

0800245c <N64_init>:

void N64_init(TIM_HandleTypeDef *countTimer, TIM_HandleTypeDef *watchdogTimer, GPIO_TypeDef *Data_GPIO, uint16_t Data_PIN, GPIO_TypeDef *Debug_GPIO, uint16_t Debug_PIN, GPIO_TypeDef *Int_GPIO, uint16_t Int_PIN)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	807b      	strh	r3, [r7, #2]
	countTim = countTimer;
 800246a:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <N64_init+0x5c>)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6013      	str	r3, [r2, #0]
	watchdogTim = watchdogTimer;
 8002470:	4a12      	ldr	r2, [pc, #72]	; (80024bc <N64_init+0x60>)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	6013      	str	r3, [r2, #0]
	n64_GPIO = Data_GPIO; // due to nature of making C6 inout by registers, this pin assignment does not matter
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <N64_init+0x64>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6013      	str	r3, [r2, #0]
	n64_PIN = Data_PIN;
 800247c:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <N64_init+0x68>)
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	8013      	strh	r3, [r2, #0]
	n64_DEBUG_GPIO = Debug_GPIO;
 8002482:	4a11      	ldr	r2, [pc, #68]	; (80024c8 <N64_init+0x6c>)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	6013      	str	r3, [r2, #0]
	n64_DEBUG_PIN = Debug_PIN;
 8002488:	4a10      	ldr	r2, [pc, #64]	; (80024cc <N64_init+0x70>)
 800248a:	8bbb      	ldrh	r3, [r7, #28]
 800248c:	8013      	strh	r3, [r2, #0]
	n64_INT_GPIO = Int_GPIO;
 800248e:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <N64_init+0x74>)
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	6013      	str	r3, [r2, #0]
	n64_INT_PIN = Int_PIN;
 8002494:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <N64_init+0x78>)
 8002496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002498:	8013      	strh	r3, [r2, #0]
	HAL_TIM_Base_Start(countTim);
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <N64_init+0x5c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f004 f926 	bl	80066f0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(watchdogTim);
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <N64_init+0x60>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f004 f921 	bl	80066f0 <HAL_TIM_Base_Start>
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000540 	.word	0x20000540
 80024bc:	20000544 	.word	0x20000544
 80024c0:	20000548 	.word	0x20000548
 80024c4:	2000054c 	.word	0x2000054c
 80024c8:	20000550 	.word	0x20000550
 80024cc:	20000554 	.word	0x20000554
 80024d0:	20000558 	.word	0x20000558
 80024d4:	2000055c 	.word	0x2000055c

080024d8 <step_init>:
void step_init(TIM_HandleTypeDef *countTimer, int mode, 
GPIO_TypeDef *A0GPIO, uint16_t A0PIN,GPIO_TypeDef *A1GPIO, uint16_t A1PIN,
GPIO_TypeDef *A2GPIO, uint16_t A2PIN,GPIO_TypeDef *A3GPIO, uint16_t A3PIN,
GPIO_TypeDef *B0GPIO, uint16_t B0PIN,GPIO_TypeDef *B1GPIO, uint16_t B1PIN,
GPIO_TypeDef *B2GPIO, uint16_t B2PIN,GPIO_TypeDef *B3GPIO, uint16_t B3PIN)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	807b      	strh	r3, [r7, #2]
	countTim = countTimer;
 80024e6:	4a1f      	ldr	r2, [pc, #124]	; (8002564 <step_init+0x8c>)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6013      	str	r3, [r2, #0]
	stepMode = mode;
 80024ec:	4a1e      	ldr	r2, [pc, #120]	; (8002568 <step_init+0x90>)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	6013      	str	r3, [r2, #0]
	A0_GPIO = A0GPIO;
 80024f2:	4a1e      	ldr	r2, [pc, #120]	; (800256c <step_init+0x94>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6013      	str	r3, [r2, #0]
	A0_PIN = A0PIN;
 80024f8:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <step_init+0x98>)
 80024fa:	887b      	ldrh	r3, [r7, #2]
 80024fc:	8013      	strh	r3, [r2, #0]
	A1_GPIO = A1GPIO;
 80024fe:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <step_init+0x9c>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6013      	str	r3, [r2, #0]
	A1_PIN = A1PIN;
 8002504:	4a1c      	ldr	r2, [pc, #112]	; (8002578 <step_init+0xa0>)
 8002506:	8bbb      	ldrh	r3, [r7, #28]
 8002508:	8013      	strh	r3, [r2, #0]
	A2_GPIO = A2GPIO;
 800250a:	4a1c      	ldr	r2, [pc, #112]	; (800257c <step_init+0xa4>)
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	6013      	str	r3, [r2, #0]
	A2_PIN = A2PIN;
 8002510:	4a1b      	ldr	r2, [pc, #108]	; (8002580 <step_init+0xa8>)
 8002512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002514:	8013      	strh	r3, [r2, #0]
	A3_GPIO = A3GPIO;
 8002516:	4a1b      	ldr	r2, [pc, #108]	; (8002584 <step_init+0xac>)
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	6013      	str	r3, [r2, #0]
	A3_PIN = A3PIN;
 800251c:	4a1a      	ldr	r2, [pc, #104]	; (8002588 <step_init+0xb0>)
 800251e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002520:	8013      	strh	r3, [r2, #0]
	B0_GPIO = B0GPIO;
 8002522:	4a1a      	ldr	r2, [pc, #104]	; (800258c <step_init+0xb4>)
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	6013      	str	r3, [r2, #0]
	B0_PIN = B0PIN;
 8002528:	4a19      	ldr	r2, [pc, #100]	; (8002590 <step_init+0xb8>)
 800252a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800252c:	8013      	strh	r3, [r2, #0]
	B1_GPIO = B1GPIO;
 800252e:	4a19      	ldr	r2, [pc, #100]	; (8002594 <step_init+0xbc>)
 8002530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002532:	6013      	str	r3, [r2, #0]
	B1_PIN = B1PIN;
 8002534:	4a18      	ldr	r2, [pc, #96]	; (8002598 <step_init+0xc0>)
 8002536:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002538:	8013      	strh	r3, [r2, #0]
	B2_GPIO = B2GPIO;
 800253a:	4a18      	ldr	r2, [pc, #96]	; (800259c <step_init+0xc4>)
 800253c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800253e:	6013      	str	r3, [r2, #0]
	B2_PIN = B2PIN;
 8002540:	4a17      	ldr	r2, [pc, #92]	; (80025a0 <step_init+0xc8>)
 8002542:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002546:	8013      	strh	r3, [r2, #0]
	B3_GPIO = B3GPIO;
 8002548:	4a16      	ldr	r2, [pc, #88]	; (80025a4 <step_init+0xcc>)
 800254a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800254c:	6013      	str	r3, [r2, #0]
	B3_PIN = B3PIN;
 800254e:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <step_init+0xd0>)
 8002550:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002554:	8013      	strh	r3, [r2, #0]
	
	HAL_TIM_Base_Start(countTimer);
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f004 f8ca 	bl	80066f0 <HAL_TIM_Base_Start>
}
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	2000056c 	.word	0x2000056c
 8002568:	20000044 	.word	0x20000044
 800256c:	20000588 	.word	0x20000588
 8002570:	2000058c 	.word	0x2000058c
 8002574:	20000590 	.word	0x20000590
 8002578:	20000594 	.word	0x20000594
 800257c:	20000598 	.word	0x20000598
 8002580:	2000059c 	.word	0x2000059c
 8002584:	200005a0 	.word	0x200005a0
 8002588:	200005a4 	.word	0x200005a4
 800258c:	200005a8 	.word	0x200005a8
 8002590:	200005ac 	.word	0x200005ac
 8002594:	200005b0 	.word	0x200005b0
 8002598:	200005b4 	.word	0x200005b4
 800259c:	200005b8 	.word	0x200005b8
 80025a0:	200005bc 	.word	0x200005bc
 80025a4:	200005c0 	.word	0x200005c0
 80025a8:	200005c4 	.word	0x200005c4

080025ac <setSpeed>:

void setSpeed(long whatSpeed)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	step_delay = (long)60 * 2 * (long)1000 / number_of_steps / whatSpeed;
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <setSpeed+0x2c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a08      	ldr	r2, [pc, #32]	; (80025dc <setSpeed+0x30>)
 80025ba:	fb92 f2f3 	sdiv	r2, r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <setSpeed+0x34>)
 80025c8:	601a      	str	r2, [r3, #0]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000040 	.word	0x20000040
 80025dc:	0001d4c0 	.word	0x0001d4c0
 80025e0:	20000570 	.word	0x20000570

080025e4 <stopStep>:
{
	stepMode = mode;
}

void stopStep(int axis)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	if (!axis)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d120      	bne.n	8002634 <stopStep+0x50>
	{
		HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 0); // d
 80025f2:	4b22      	ldr	r3, [pc, #136]	; (800267c <stopStep+0x98>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a22      	ldr	r2, [pc, #136]	; (8002680 <stopStep+0x9c>)
 80025f8:	8811      	ldrh	r1, [r2, #0]
 80025fa:	2200      	movs	r2, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f001 fb55 	bl	8003cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 0); // b
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <stopStep+0xa0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a20      	ldr	r2, [pc, #128]	; (8002688 <stopStep+0xa4>)
 8002608:	8811      	ldrh	r1, [r2, #0]
 800260a:	2200      	movs	r2, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f001 fb4d 	bl	8003cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 0); // a
 8002612:	4b1e      	ldr	r3, [pc, #120]	; (800268c <stopStep+0xa8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a1e      	ldr	r2, [pc, #120]	; (8002690 <stopStep+0xac>)
 8002618:	8811      	ldrh	r1, [r2, #0]
 800261a:	2200      	movs	r2, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f001 fb45 	bl	8003cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 0); // c
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <stopStep+0xb0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1c      	ldr	r2, [pc, #112]	; (8002698 <stopStep+0xb4>)
 8002628:	8811      	ldrh	r1, [r2, #0]
 800262a:	2200      	movs	r2, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f001 fb3d 	bl	8003cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
		HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
		HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
		HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
	}
}
 8002632:	e01f      	b.n	8002674 <stopStep+0x90>
		HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
 8002634:	4b19      	ldr	r3, [pc, #100]	; (800269c <stopStep+0xb8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a19      	ldr	r2, [pc, #100]	; (80026a0 <stopStep+0xbc>)
 800263a:	8811      	ldrh	r1, [r2, #0]
 800263c:	2200      	movs	r2, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f001 fb34 	bl	8003cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
 8002644:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <stopStep+0xc0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a17      	ldr	r2, [pc, #92]	; (80026a8 <stopStep+0xc4>)
 800264a:	8811      	ldrh	r1, [r2, #0]
 800264c:	2200      	movs	r2, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f001 fb2c 	bl	8003cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
 8002654:	4b15      	ldr	r3, [pc, #84]	; (80026ac <stopStep+0xc8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <stopStep+0xcc>)
 800265a:	8811      	ldrh	r1, [r2, #0]
 800265c:	2200      	movs	r2, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f001 fb24 	bl	8003cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <stopStep+0xd0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a13      	ldr	r2, [pc, #76]	; (80026b8 <stopStep+0xd4>)
 800266a:	8811      	ldrh	r1, [r2, #0]
 800266c:	2200      	movs	r2, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f001 fb1c 	bl	8003cac <HAL_GPIO_WritePin>
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000588 	.word	0x20000588
 8002680:	2000058c 	.word	0x2000058c
 8002684:	20000590 	.word	0x20000590
 8002688:	20000594 	.word	0x20000594
 800268c:	20000598 	.word	0x20000598
 8002690:	2000059c 	.word	0x2000059c
 8002694:	200005a0 	.word	0x200005a0
 8002698:	200005a4 	.word	0x200005a4
 800269c:	200005a8 	.word	0x200005a8
 80026a0:	200005ac 	.word	0x200005ac
 80026a4:	200005b0 	.word	0x200005b0
 80026a8:	200005b4 	.word	0x200005b4
 80026ac:	200005b8 	.word	0x200005b8
 80026b0:	200005bc 	.word	0x200005bc
 80026b4:	200005c0 	.word	0x200005c0
 80026b8:	200005c4 	.word	0x200005c4

080026bc <stepDiag>:

void stepDiag(int x_steps_to_move, int y_steps_to_move)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
	int lastMov = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]

	int x_steps_left = abs(x_steps_to_move);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bfb8      	it	lt
 80026d0:	425b      	neglt	r3, r3
 80026d2:	613b      	str	r3, [r7, #16]
	int y_steps_left = abs(y_steps_to_move);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bfb8      	it	lt
 80026da:	425b      	neglt	r3, r3
 80026dc:	60fb      	str	r3, [r7, #12]
	if (x_steps_to_move > 0)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	dd02      	ble.n	80026ea <stepDiag+0x2e>
	{
		xdirection = 1;
 80026e4:	4b6d      	ldr	r3, [pc, #436]	; (800289c <stepDiag+0x1e0>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
	}
	if (x_steps_to_move < 0)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	da02      	bge.n	80026f6 <stepDiag+0x3a>
	{
		xdirection = 0;
 80026f0:	4b6a      	ldr	r3, [pc, #424]	; (800289c <stepDiag+0x1e0>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
	}
	if (y_steps_to_move > 0)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	dd02      	ble.n	8002702 <stepDiag+0x46>
	{
		ydirection = 1;
 80026fc:	4b68      	ldr	r3, [pc, #416]	; (80028a0 <stepDiag+0x1e4>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]
	}
	if (y_steps_to_move < 0)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	f280 80bb 	bge.w	8002880 <stepDiag+0x1c4>
	{
		ydirection = 0;
 800270a:	4b65      	ldr	r3, [pc, #404]	; (80028a0 <stepDiag+0x1e4>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
	}
	while (x_steps_left > 0 || y_steps_left > 0)
 8002710:	e0b6      	b.n	8002880 <stepDiag+0x1c4>
	{
		unsigned long now = __HAL_TIM_GET_COUNTER(countTim);
 8002712:	4b64      	ldr	r3, [pc, #400]	; (80028a4 <stepDiag+0x1e8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	60bb      	str	r3, [r7, #8]
		if (now - last_step_time >= step_delay)
 800271c:	4b62      	ldr	r3, [pc, #392]	; (80028a8 <stepDiag+0x1ec>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	1ad2      	subs	r2, r2, r3
 8002724:	4b61      	ldr	r3, [pc, #388]	; (80028ac <stepDiag+0x1f0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	f0c0 80a9 	bcc.w	8002880 <stepDiag+0x1c4>
		{
			last_step_time = now;
 800272e:	4a5e      	ldr	r2, [pc, #376]	; (80028a8 <stepDiag+0x1ec>)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	6013      	str	r3, [r2, #0]
			if ((!lastMov || y_steps_left == 0) && x_steps_left > 0)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <stepDiag+0x84>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d146      	bne.n	80027ce <stepDiag+0x112>
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	dd43      	ble.n	80027ce <stepDiag+0x112>
			{
				lastMov = 1;
 8002746:	2301      	movs	r3, #1
 8002748:	617b      	str	r3, [r7, #20]
				if (xdirection == 1)
 800274a:	4b54      	ldr	r3, [pc, #336]	; (800289c <stepDiag+0x1e0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d10e      	bne.n	8002770 <stepDiag+0xb4>
				{
					x_step_number++;
 8002752:	4b57      	ldr	r3, [pc, #348]	; (80028b0 <stepDiag+0x1f4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3301      	adds	r3, #1
 8002758:	4a55      	ldr	r2, [pc, #340]	; (80028b0 <stepDiag+0x1f4>)
 800275a:	6013      	str	r3, [r2, #0]
					if (x_step_number == number_of_steps)
 800275c:	4b54      	ldr	r3, [pc, #336]	; (80028b0 <stepDiag+0x1f4>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b54      	ldr	r3, [pc, #336]	; (80028b4 <stepDiag+0x1f8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d110      	bne.n	800278a <stepDiag+0xce>
					{
						x_step_number = 0;
 8002768:	4b51      	ldr	r3, [pc, #324]	; (80028b0 <stepDiag+0x1f4>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	e00c      	b.n	800278a <stepDiag+0xce>
					}
				}
				else
				{
					if (x_step_number == 0)
 8002770:	4b4f      	ldr	r3, [pc, #316]	; (80028b0 <stepDiag+0x1f4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d103      	bne.n	8002780 <stepDiag+0xc4>
					{
						x_step_number = number_of_steps;
 8002778:	4b4e      	ldr	r3, [pc, #312]	; (80028b4 <stepDiag+0x1f8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a4c      	ldr	r2, [pc, #304]	; (80028b0 <stepDiag+0x1f4>)
 800277e:	6013      	str	r3, [r2, #0]
					}
					x_step_number--;
 8002780:	4b4b      	ldr	r3, [pc, #300]	; (80028b0 <stepDiag+0x1f4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3b01      	subs	r3, #1
 8002786:	4a4a      	ldr	r2, [pc, #296]	; (80028b0 <stepDiag+0x1f4>)
 8002788:	6013      	str	r3, [r2, #0]
				}
				x_steps_left--;
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	3b01      	subs	r3, #1
 800278e:	613b      	str	r3, [r7, #16]
				if (stepMode)
 8002790:	4b49      	ldr	r3, [pc, #292]	; (80028b8 <stepDiag+0x1fc>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00d      	beq.n	80027b4 <stepDiag+0xf8>
				{
					stepMotor(x_step_number % 4, 0);
 8002798:	4b45      	ldr	r3, [pc, #276]	; (80028b0 <stepDiag+0x1f4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	425a      	negs	r2, r3
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	f002 0203 	and.w	r2, r2, #3
 80027a6:	bf58      	it	pl
 80027a8:	4253      	negpl	r3, r2
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 f887 	bl	80028c0 <stepMotor>
 80027b2:	e00c      	b.n	80027ce <stepDiag+0x112>
				}
				else
				{
					stepMotor(x_step_number % 8, 0);
 80027b4:	4b3e      	ldr	r3, [pc, #248]	; (80028b0 <stepDiag+0x1f4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	425a      	negs	r2, r3
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	f002 0207 	and.w	r2, r2, #7
 80027c2:	bf58      	it	pl
 80027c4:	4253      	negpl	r3, r2
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 f879 	bl	80028c0 <stepMotor>
				}
			}
			if ((lastMov || x_steps_left == 0) && y_steps_left > 0)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d102      	bne.n	80027da <stepDiag+0x11e>
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d146      	bne.n	8002868 <stepDiag+0x1ac>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	dd43      	ble.n	8002868 <stepDiag+0x1ac>
			{
				lastMov = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
				if (ydirection == 1)
 80027e4:	4b2e      	ldr	r3, [pc, #184]	; (80028a0 <stepDiag+0x1e4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d10e      	bne.n	800280a <stepDiag+0x14e>
				{
					y_step_number++;
 80027ec:	4b33      	ldr	r3, [pc, #204]	; (80028bc <stepDiag+0x200>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3301      	adds	r3, #1
 80027f2:	4a32      	ldr	r2, [pc, #200]	; (80028bc <stepDiag+0x200>)
 80027f4:	6013      	str	r3, [r2, #0]
					if (y_step_number == number_of_steps)
 80027f6:	4b31      	ldr	r3, [pc, #196]	; (80028bc <stepDiag+0x200>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <stepDiag+0x1f8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d110      	bne.n	8002824 <stepDiag+0x168>
					{
						y_step_number = 0;
 8002802:	4b2e      	ldr	r3, [pc, #184]	; (80028bc <stepDiag+0x200>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e00c      	b.n	8002824 <stepDiag+0x168>
					}
				}
				else
				{
					if (y_step_number == 0)
 800280a:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <stepDiag+0x200>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d103      	bne.n	800281a <stepDiag+0x15e>
					{
						y_step_number = number_of_steps;
 8002812:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <stepDiag+0x1f8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a29      	ldr	r2, [pc, #164]	; (80028bc <stepDiag+0x200>)
 8002818:	6013      	str	r3, [r2, #0]
					}
					y_step_number--;
 800281a:	4b28      	ldr	r3, [pc, #160]	; (80028bc <stepDiag+0x200>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3b01      	subs	r3, #1
 8002820:	4a26      	ldr	r2, [pc, #152]	; (80028bc <stepDiag+0x200>)
 8002822:	6013      	str	r3, [r2, #0]
				}
				y_steps_left--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3b01      	subs	r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
				if (stepMode)
 800282a:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <stepDiag+0x1fc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00d      	beq.n	800284e <stepDiag+0x192>
				{
					stepMotor(y_step_number % 4, 1);
 8002832:	4b22      	ldr	r3, [pc, #136]	; (80028bc <stepDiag+0x200>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	425a      	negs	r2, r3
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	f002 0203 	and.w	r2, r2, #3
 8002840:	bf58      	it	pl
 8002842:	4253      	negpl	r3, r2
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f83a 	bl	80028c0 <stepMotor>
 800284c:	e00c      	b.n	8002868 <stepDiag+0x1ac>
				}
				else
				{
					stepMotor(y_step_number % 8, 1);
 800284e:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <stepDiag+0x200>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	425a      	negs	r2, r3
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	f002 0207 	and.w	r2, r2, #7
 800285c:	bf58      	it	pl
 800285e:	4253      	negpl	r3, r2
 8002860:	2101      	movs	r1, #1
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f82c 	bl	80028c0 <stepMotor>
				}
			}
			if (x_steps_left == 0)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d102      	bne.n	8002874 <stepDiag+0x1b8>
			{
				stopStep(0);
 800286e:	2000      	movs	r0, #0
 8002870:	f7ff feb8 	bl	80025e4 <stopStep>
			}
			if (y_steps_left == 0)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <stepDiag+0x1c4>
			{
				stopStep(1);
 800287a:	2001      	movs	r0, #1
 800287c:	f7ff feb2 	bl	80025e4 <stopStep>
	while (x_steps_left > 0 || y_steps_left > 0)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f73f af45 	bgt.w	8002712 <stepDiag+0x56>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f73f af41 	bgt.w	8002712 <stepDiag+0x56>
			}
		}
	}
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000578 	.word	0x20000578
 80028a0:	2000057c 	.word	0x2000057c
 80028a4:	2000056c 	.word	0x2000056c
 80028a8:	20000574 	.word	0x20000574
 80028ac:	20000570 	.word	0x20000570
 80028b0:	20000580 	.word	0x20000580
 80028b4:	20000040 	.word	0x20000040
 80028b8:	20000044 	.word	0x20000044
 80028bc:	20000584 	.word	0x20000584

080028c0 <stepMotor>:
	step(steps, axis); // doesn't work either
	stopStep(axis);
}

void stepMotor(int thisStep, int axis)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
	if (!axis)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f040 81cc 	bne.w	8002c6a <stepMotor+0x3aa>
	{
		if (stepMode)
 80028d2:	4bab      	ldr	r3, [pc, #684]	; (8002b80 <stepMotor+0x2c0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8094 	beq.w	8002a04 <stepMotor+0x144>
		{
			// lettering is notationaly consistant with http://www.idc-online.com/technical_references/pdfs/electrical_engineering/Step_Sequence_of_Stepper_Motor.pdf
			switch (thisStep)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b03      	cmp	r3, #3
 80028e0:	f200 839e 	bhi.w	8003020 <stepMotor+0x760>
 80028e4:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <stepMotor+0x2c>)
 80028e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ea:	bf00      	nop
 80028ec:	080028fd 	.word	0x080028fd
 80028f0:	0800293f 	.word	0x0800293f
 80028f4:	08002981 	.word	0x08002981
 80028f8:	080029c3 	.word	0x080029c3
			{
			case 0:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 1); // d
 80028fc:	4ba1      	ldr	r3, [pc, #644]	; (8002b84 <stepMotor+0x2c4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4aa1      	ldr	r2, [pc, #644]	; (8002b88 <stepMotor+0x2c8>)
 8002902:	8811      	ldrh	r1, [r2, #0]
 8002904:	2201      	movs	r2, #1
 8002906:	4618      	mov	r0, r3
 8002908:	f001 f9d0 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 0); // b
 800290c:	4b9f      	ldr	r3, [pc, #636]	; (8002b8c <stepMotor+0x2cc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a9f      	ldr	r2, [pc, #636]	; (8002b90 <stepMotor+0x2d0>)
 8002912:	8811      	ldrh	r1, [r2, #0]
 8002914:	2200      	movs	r2, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f001 f9c8 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 1); // a
 800291c:	4b9d      	ldr	r3, [pc, #628]	; (8002b94 <stepMotor+0x2d4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a9d      	ldr	r2, [pc, #628]	; (8002b98 <stepMotor+0x2d8>)
 8002922:	8811      	ldrh	r1, [r2, #0]
 8002924:	2201      	movs	r2, #1
 8002926:	4618      	mov	r0, r3
 8002928:	f001 f9c0 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 0); // c
 800292c:	4b9b      	ldr	r3, [pc, #620]	; (8002b9c <stepMotor+0x2dc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a9b      	ldr	r2, [pc, #620]	; (8002ba0 <stepMotor+0x2e0>)
 8002932:	8811      	ldrh	r1, [r2, #0]
 8002934:	2200      	movs	r2, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f001 f9b8 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 800293c:	e370      	b.n	8003020 <stepMotor+0x760>

			case 1:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 0); // d
 800293e:	4b91      	ldr	r3, [pc, #580]	; (8002b84 <stepMotor+0x2c4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a91      	ldr	r2, [pc, #580]	; (8002b88 <stepMotor+0x2c8>)
 8002944:	8811      	ldrh	r1, [r2, #0]
 8002946:	2200      	movs	r2, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f001 f9af 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 1); // b
 800294e:	4b8f      	ldr	r3, [pc, #572]	; (8002b8c <stepMotor+0x2cc>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a8f      	ldr	r2, [pc, #572]	; (8002b90 <stepMotor+0x2d0>)
 8002954:	8811      	ldrh	r1, [r2, #0]
 8002956:	2201      	movs	r2, #1
 8002958:	4618      	mov	r0, r3
 800295a:	f001 f9a7 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 1); // a
 800295e:	4b8d      	ldr	r3, [pc, #564]	; (8002b94 <stepMotor+0x2d4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a8d      	ldr	r2, [pc, #564]	; (8002b98 <stepMotor+0x2d8>)
 8002964:	8811      	ldrh	r1, [r2, #0]
 8002966:	2201      	movs	r2, #1
 8002968:	4618      	mov	r0, r3
 800296a:	f001 f99f 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 0); // c
 800296e:	4b8b      	ldr	r3, [pc, #556]	; (8002b9c <stepMotor+0x2dc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a8b      	ldr	r2, [pc, #556]	; (8002ba0 <stepMotor+0x2e0>)
 8002974:	8811      	ldrh	r1, [r2, #0]
 8002976:	2200      	movs	r2, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f001 f997 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 800297e:	e34f      	b.n	8003020 <stepMotor+0x760>

			case 2:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 0); // d
 8002980:	4b80      	ldr	r3, [pc, #512]	; (8002b84 <stepMotor+0x2c4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a80      	ldr	r2, [pc, #512]	; (8002b88 <stepMotor+0x2c8>)
 8002986:	8811      	ldrh	r1, [r2, #0]
 8002988:	2200      	movs	r2, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f001 f98e 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 1); // b
 8002990:	4b7e      	ldr	r3, [pc, #504]	; (8002b8c <stepMotor+0x2cc>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a7e      	ldr	r2, [pc, #504]	; (8002b90 <stepMotor+0x2d0>)
 8002996:	8811      	ldrh	r1, [r2, #0]
 8002998:	2201      	movs	r2, #1
 800299a:	4618      	mov	r0, r3
 800299c:	f001 f986 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 0); // a
 80029a0:	4b7c      	ldr	r3, [pc, #496]	; (8002b94 <stepMotor+0x2d4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a7c      	ldr	r2, [pc, #496]	; (8002b98 <stepMotor+0x2d8>)
 80029a6:	8811      	ldrh	r1, [r2, #0]
 80029a8:	2200      	movs	r2, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 f97e 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 1); // c
 80029b0:	4b7a      	ldr	r3, [pc, #488]	; (8002b9c <stepMotor+0x2dc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a7a      	ldr	r2, [pc, #488]	; (8002ba0 <stepMotor+0x2e0>)
 80029b6:	8811      	ldrh	r1, [r2, #0]
 80029b8:	2201      	movs	r2, #1
 80029ba:	4618      	mov	r0, r3
 80029bc:	f001 f976 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 80029c0:	e32e      	b.n	8003020 <stepMotor+0x760>

			case 3:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 1); // d
 80029c2:	4b70      	ldr	r3, [pc, #448]	; (8002b84 <stepMotor+0x2c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a70      	ldr	r2, [pc, #448]	; (8002b88 <stepMotor+0x2c8>)
 80029c8:	8811      	ldrh	r1, [r2, #0]
 80029ca:	2201      	movs	r2, #1
 80029cc:	4618      	mov	r0, r3
 80029ce:	f001 f96d 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 0); // b
 80029d2:	4b6e      	ldr	r3, [pc, #440]	; (8002b8c <stepMotor+0x2cc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a6e      	ldr	r2, [pc, #440]	; (8002b90 <stepMotor+0x2d0>)
 80029d8:	8811      	ldrh	r1, [r2, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f001 f965 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 0); // a
 80029e2:	4b6c      	ldr	r3, [pc, #432]	; (8002b94 <stepMotor+0x2d4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a6c      	ldr	r2, [pc, #432]	; (8002b98 <stepMotor+0x2d8>)
 80029e8:	8811      	ldrh	r1, [r2, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f001 f95d 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 1); // c
 80029f2:	4b6a      	ldr	r3, [pc, #424]	; (8002b9c <stepMotor+0x2dc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a6a      	ldr	r2, [pc, #424]	; (8002ba0 <stepMotor+0x2e0>)
 80029f8:	8811      	ldrh	r1, [r2, #0]
 80029fa:	2201      	movs	r2, #1
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 f955 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002a02:	e30d      	b.n	8003020 <stepMotor+0x760>
			}
		}
		else
		{
			switch (thisStep)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b07      	cmp	r3, #7
 8002a08:	f200 830a 	bhi.w	8003020 <stepMotor+0x760>
 8002a0c:	a201      	add	r2, pc, #4	; (adr r2, 8002a14 <stepMotor+0x154>)
 8002a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a12:	bf00      	nop
 8002a14:	08002a35 	.word	0x08002a35
 8002a18:	08002a77 	.word	0x08002a77
 8002a1c:	08002ab9 	.word	0x08002ab9
 8002a20:	08002afb 	.word	0x08002afb
 8002a24:	08002b3d 	.word	0x08002b3d
 8002a28:	08002ba5 	.word	0x08002ba5
 8002a2c:	08002be7 	.word	0x08002be7
 8002a30:	08002c29 	.word	0x08002c29
			{
			case 0:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 1); // d
 8002a34:	4b53      	ldr	r3, [pc, #332]	; (8002b84 <stepMotor+0x2c4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a53      	ldr	r2, [pc, #332]	; (8002b88 <stepMotor+0x2c8>)
 8002a3a:	8811      	ldrh	r1, [r2, #0]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f001 f934 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 0); // b
 8002a44:	4b51      	ldr	r3, [pc, #324]	; (8002b8c <stepMotor+0x2cc>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a51      	ldr	r2, [pc, #324]	; (8002b90 <stepMotor+0x2d0>)
 8002a4a:	8811      	ldrh	r1, [r2, #0]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f001 f92c 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 1); // a
 8002a54:	4b4f      	ldr	r3, [pc, #316]	; (8002b94 <stepMotor+0x2d4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a4f      	ldr	r2, [pc, #316]	; (8002b98 <stepMotor+0x2d8>)
 8002a5a:	8811      	ldrh	r1, [r2, #0]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f001 f924 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 0); // c
 8002a64:	4b4d      	ldr	r3, [pc, #308]	; (8002b9c <stepMotor+0x2dc>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a4d      	ldr	r2, [pc, #308]	; (8002ba0 <stepMotor+0x2e0>)
 8002a6a:	8811      	ldrh	r1, [r2, #0]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f001 f91c 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002a74:	e2d4      	b.n	8003020 <stepMotor+0x760>

			case 1:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 0); // d
 8002a76:	4b43      	ldr	r3, [pc, #268]	; (8002b84 <stepMotor+0x2c4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a43      	ldr	r2, [pc, #268]	; (8002b88 <stepMotor+0x2c8>)
 8002a7c:	8811      	ldrh	r1, [r2, #0]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f001 f913 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 0); // b
 8002a86:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <stepMotor+0x2cc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a41      	ldr	r2, [pc, #260]	; (8002b90 <stepMotor+0x2d0>)
 8002a8c:	8811      	ldrh	r1, [r2, #0]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f001 f90b 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 1); // a
 8002a96:	4b3f      	ldr	r3, [pc, #252]	; (8002b94 <stepMotor+0x2d4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a3f      	ldr	r2, [pc, #252]	; (8002b98 <stepMotor+0x2d8>)
 8002a9c:	8811      	ldrh	r1, [r2, #0]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 f903 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 0); // c
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <stepMotor+0x2dc>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a3d      	ldr	r2, [pc, #244]	; (8002ba0 <stepMotor+0x2e0>)
 8002aac:	8811      	ldrh	r1, [r2, #0]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f001 f8fb 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002ab6:	e2b3      	b.n	8003020 <stepMotor+0x760>

			case 2:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 0); // d
 8002ab8:	4b32      	ldr	r3, [pc, #200]	; (8002b84 <stepMotor+0x2c4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a32      	ldr	r2, [pc, #200]	; (8002b88 <stepMotor+0x2c8>)
 8002abe:	8811      	ldrh	r1, [r2, #0]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f001 f8f2 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 1); // b
 8002ac8:	4b30      	ldr	r3, [pc, #192]	; (8002b8c <stepMotor+0x2cc>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a30      	ldr	r2, [pc, #192]	; (8002b90 <stepMotor+0x2d0>)
 8002ace:	8811      	ldrh	r1, [r2, #0]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f001 f8ea 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 1); // a
 8002ad8:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <stepMotor+0x2d4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a2e      	ldr	r2, [pc, #184]	; (8002b98 <stepMotor+0x2d8>)
 8002ade:	8811      	ldrh	r1, [r2, #0]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f001 f8e2 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 0); // c
 8002ae8:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <stepMotor+0x2dc>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a2c      	ldr	r2, [pc, #176]	; (8002ba0 <stepMotor+0x2e0>)
 8002aee:	8811      	ldrh	r1, [r2, #0]
 8002af0:	2200      	movs	r2, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f001 f8da 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002af8:	e292      	b.n	8003020 <stepMotor+0x760>

			case 3:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 0); // d
 8002afa:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <stepMotor+0x2c4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a22      	ldr	r2, [pc, #136]	; (8002b88 <stepMotor+0x2c8>)
 8002b00:	8811      	ldrh	r1, [r2, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f001 f8d1 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 1); // b
 8002b0a:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <stepMotor+0x2cc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a20      	ldr	r2, [pc, #128]	; (8002b90 <stepMotor+0x2d0>)
 8002b10:	8811      	ldrh	r1, [r2, #0]
 8002b12:	2201      	movs	r2, #1
 8002b14:	4618      	mov	r0, r3
 8002b16:	f001 f8c9 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 0); // a
 8002b1a:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <stepMotor+0x2d4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1e      	ldr	r2, [pc, #120]	; (8002b98 <stepMotor+0x2d8>)
 8002b20:	8811      	ldrh	r1, [r2, #0]
 8002b22:	2200      	movs	r2, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 f8c1 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 0); // c
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <stepMotor+0x2dc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ba0 <stepMotor+0x2e0>)
 8002b30:	8811      	ldrh	r1, [r2, #0]
 8002b32:	2200      	movs	r2, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f001 f8b9 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002b3a:	e271      	b.n	8003020 <stepMotor+0x760>
			case 4:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 0); // d
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <stepMotor+0x2c4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <stepMotor+0x2c8>)
 8002b42:	8811      	ldrh	r1, [r2, #0]
 8002b44:	2200      	movs	r2, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 f8b0 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 1); // b
 8002b4c:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <stepMotor+0x2cc>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0f      	ldr	r2, [pc, #60]	; (8002b90 <stepMotor+0x2d0>)
 8002b52:	8811      	ldrh	r1, [r2, #0]
 8002b54:	2201      	movs	r2, #1
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 f8a8 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 0); // a
 8002b5c:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <stepMotor+0x2d4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0d      	ldr	r2, [pc, #52]	; (8002b98 <stepMotor+0x2d8>)
 8002b62:	8811      	ldrh	r1, [r2, #0]
 8002b64:	2200      	movs	r2, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 f8a0 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 1); // c
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <stepMotor+0x2dc>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <stepMotor+0x2e0>)
 8002b72:	8811      	ldrh	r1, [r2, #0]
 8002b74:	2201      	movs	r2, #1
 8002b76:	4618      	mov	r0, r3
 8002b78:	f001 f898 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002b7c:	e250      	b.n	8003020 <stepMotor+0x760>
 8002b7e:	bf00      	nop
 8002b80:	20000044 	.word	0x20000044
 8002b84:	20000588 	.word	0x20000588
 8002b88:	2000058c 	.word	0x2000058c
 8002b8c:	20000590 	.word	0x20000590
 8002b90:	20000594 	.word	0x20000594
 8002b94:	20000598 	.word	0x20000598
 8002b98:	2000059c 	.word	0x2000059c
 8002b9c:	200005a0 	.word	0x200005a0
 8002ba0:	200005a4 	.word	0x200005a4
			case 5:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 0); // d
 8002ba4:	4baa      	ldr	r3, [pc, #680]	; (8002e50 <stepMotor+0x590>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4aaa      	ldr	r2, [pc, #680]	; (8002e54 <stepMotor+0x594>)
 8002baa:	8811      	ldrh	r1, [r2, #0]
 8002bac:	2200      	movs	r2, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f001 f87c 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 0); // b
 8002bb4:	4ba8      	ldr	r3, [pc, #672]	; (8002e58 <stepMotor+0x598>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4aa8      	ldr	r2, [pc, #672]	; (8002e5c <stepMotor+0x59c>)
 8002bba:	8811      	ldrh	r1, [r2, #0]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f001 f874 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 0); // a
 8002bc4:	4ba6      	ldr	r3, [pc, #664]	; (8002e60 <stepMotor+0x5a0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4aa6      	ldr	r2, [pc, #664]	; (8002e64 <stepMotor+0x5a4>)
 8002bca:	8811      	ldrh	r1, [r2, #0]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f001 f86c 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 1); // c
 8002bd4:	4ba4      	ldr	r3, [pc, #656]	; (8002e68 <stepMotor+0x5a8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4aa4      	ldr	r2, [pc, #656]	; (8002e6c <stepMotor+0x5ac>)
 8002bda:	8811      	ldrh	r1, [r2, #0]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	4618      	mov	r0, r3
 8002be0:	f001 f864 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002be4:	e21c      	b.n	8003020 <stepMotor+0x760>
			case 6:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 1); // d
 8002be6:	4b9a      	ldr	r3, [pc, #616]	; (8002e50 <stepMotor+0x590>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a9a      	ldr	r2, [pc, #616]	; (8002e54 <stepMotor+0x594>)
 8002bec:	8811      	ldrh	r1, [r2, #0]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 f85b 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 0); // b
 8002bf6:	4b98      	ldr	r3, [pc, #608]	; (8002e58 <stepMotor+0x598>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a98      	ldr	r2, [pc, #608]	; (8002e5c <stepMotor+0x59c>)
 8002bfc:	8811      	ldrh	r1, [r2, #0]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f001 f853 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 0); // a
 8002c06:	4b96      	ldr	r3, [pc, #600]	; (8002e60 <stepMotor+0x5a0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a96      	ldr	r2, [pc, #600]	; (8002e64 <stepMotor+0x5a4>)
 8002c0c:	8811      	ldrh	r1, [r2, #0]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 f84b 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 1); // c
 8002c16:	4b94      	ldr	r3, [pc, #592]	; (8002e68 <stepMotor+0x5a8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a94      	ldr	r2, [pc, #592]	; (8002e6c <stepMotor+0x5ac>)
 8002c1c:	8811      	ldrh	r1, [r2, #0]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 f843 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002c26:	e1fb      	b.n	8003020 <stepMotor+0x760>
			case 7:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 1); // d
 8002c28:	4b89      	ldr	r3, [pc, #548]	; (8002e50 <stepMotor+0x590>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a89      	ldr	r2, [pc, #548]	; (8002e54 <stepMotor+0x594>)
 8002c2e:	8811      	ldrh	r1, [r2, #0]
 8002c30:	2201      	movs	r2, #1
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 f83a 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 0); // b
 8002c38:	4b87      	ldr	r3, [pc, #540]	; (8002e58 <stepMotor+0x598>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a87      	ldr	r2, [pc, #540]	; (8002e5c <stepMotor+0x59c>)
 8002c3e:	8811      	ldrh	r1, [r2, #0]
 8002c40:	2200      	movs	r2, #0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f001 f832 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 0); // a
 8002c48:	4b85      	ldr	r3, [pc, #532]	; (8002e60 <stepMotor+0x5a0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a85      	ldr	r2, [pc, #532]	; (8002e64 <stepMotor+0x5a4>)
 8002c4e:	8811      	ldrh	r1, [r2, #0]
 8002c50:	2200      	movs	r2, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 f82a 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 0); // c
 8002c58:	4b83      	ldr	r3, [pc, #524]	; (8002e68 <stepMotor+0x5a8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a83      	ldr	r2, [pc, #524]	; (8002e6c <stepMotor+0x5ac>)
 8002c5e:	8811      	ldrh	r1, [r2, #0]
 8002c60:	2200      	movs	r2, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 f822 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002c68:	e1da      	b.n	8003020 <stepMotor+0x760>
			}
		}
	}
	else
	{
		if (stepMode)
 8002c6a:	4b81      	ldr	r3, [pc, #516]	; (8002e70 <stepMotor+0x5b0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8094 	beq.w	8002d9c <stepMotor+0x4dc>
		{
			switch (thisStep)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	f200 81d2 	bhi.w	8003020 <stepMotor+0x760>
 8002c7c:	a201      	add	r2, pc, #4	; (adr r2, 8002c84 <stepMotor+0x3c4>)
 8002c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c82:	bf00      	nop
 8002c84:	08002c95 	.word	0x08002c95
 8002c88:	08002cd7 	.word	0x08002cd7
 8002c8c:	08002d19 	.word	0x08002d19
 8002c90:	08002d5b 	.word	0x08002d5b
			{
				// lettering is notationaly consistant with http://www.idc-online.com/technical_references/pdfs/electrical_engineering/Step_Sequence_of_Stepper_Motor.pdf
			case 0:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 1); // d
 8002c94:	4b77      	ldr	r3, [pc, #476]	; (8002e74 <stepMotor+0x5b4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a77      	ldr	r2, [pc, #476]	; (8002e78 <stepMotor+0x5b8>)
 8002c9a:	8811      	ldrh	r1, [r2, #0]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f001 f804 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
 8002ca4:	4b75      	ldr	r3, [pc, #468]	; (8002e7c <stepMotor+0x5bc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a75      	ldr	r2, [pc, #468]	; (8002e80 <stepMotor+0x5c0>)
 8002caa:	8811      	ldrh	r1, [r2, #0]
 8002cac:	2200      	movs	r2, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fffc 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 1); // a
 8002cb4:	4b73      	ldr	r3, [pc, #460]	; (8002e84 <stepMotor+0x5c4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a73      	ldr	r2, [pc, #460]	; (8002e88 <stepMotor+0x5c8>)
 8002cba:	8811      	ldrh	r1, [r2, #0]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fff4 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
 8002cc4:	4b71      	ldr	r3, [pc, #452]	; (8002e8c <stepMotor+0x5cc>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a71      	ldr	r2, [pc, #452]	; (8002e90 <stepMotor+0x5d0>)
 8002cca:	8811      	ldrh	r1, [r2, #0]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 ffec 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002cd4:	e1a4      	b.n	8003020 <stepMotor+0x760>

			case 1:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
 8002cd6:	4b67      	ldr	r3, [pc, #412]	; (8002e74 <stepMotor+0x5b4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a67      	ldr	r2, [pc, #412]	; (8002e78 <stepMotor+0x5b8>)
 8002cdc:	8811      	ldrh	r1, [r2, #0]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 ffe3 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 1); // b
 8002ce6:	4b65      	ldr	r3, [pc, #404]	; (8002e7c <stepMotor+0x5bc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a65      	ldr	r2, [pc, #404]	; (8002e80 <stepMotor+0x5c0>)
 8002cec:	8811      	ldrh	r1, [r2, #0]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 ffdb 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 1); // a
 8002cf6:	4b63      	ldr	r3, [pc, #396]	; (8002e84 <stepMotor+0x5c4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a63      	ldr	r2, [pc, #396]	; (8002e88 <stepMotor+0x5c8>)
 8002cfc:	8811      	ldrh	r1, [r2, #0]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 ffd3 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
 8002d06:	4b61      	ldr	r3, [pc, #388]	; (8002e8c <stepMotor+0x5cc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a61      	ldr	r2, [pc, #388]	; (8002e90 <stepMotor+0x5d0>)
 8002d0c:	8811      	ldrh	r1, [r2, #0]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 ffcb 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002d16:	e183      	b.n	8003020 <stepMotor+0x760>

			case 2:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
 8002d18:	4b56      	ldr	r3, [pc, #344]	; (8002e74 <stepMotor+0x5b4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a56      	ldr	r2, [pc, #344]	; (8002e78 <stepMotor+0x5b8>)
 8002d1e:	8811      	ldrh	r1, [r2, #0]
 8002d20:	2200      	movs	r2, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 ffc2 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 1); // b
 8002d28:	4b54      	ldr	r3, [pc, #336]	; (8002e7c <stepMotor+0x5bc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a54      	ldr	r2, [pc, #336]	; (8002e80 <stepMotor+0x5c0>)
 8002d2e:	8811      	ldrh	r1, [r2, #0]
 8002d30:	2201      	movs	r2, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 ffba 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
 8002d38:	4b52      	ldr	r3, [pc, #328]	; (8002e84 <stepMotor+0x5c4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a52      	ldr	r2, [pc, #328]	; (8002e88 <stepMotor+0x5c8>)
 8002d3e:	8811      	ldrh	r1, [r2, #0]
 8002d40:	2200      	movs	r2, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 ffb2 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 1); // c
 8002d48:	4b50      	ldr	r3, [pc, #320]	; (8002e8c <stepMotor+0x5cc>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a50      	ldr	r2, [pc, #320]	; (8002e90 <stepMotor+0x5d0>)
 8002d4e:	8811      	ldrh	r1, [r2, #0]
 8002d50:	2201      	movs	r2, #1
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 ffaa 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002d58:	e162      	b.n	8003020 <stepMotor+0x760>

			case 3:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 1); // d
 8002d5a:	4b46      	ldr	r3, [pc, #280]	; (8002e74 <stepMotor+0x5b4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a46      	ldr	r2, [pc, #280]	; (8002e78 <stepMotor+0x5b8>)
 8002d60:	8811      	ldrh	r1, [r2, #0]
 8002d62:	2201      	movs	r2, #1
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 ffa1 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
 8002d6a:	4b44      	ldr	r3, [pc, #272]	; (8002e7c <stepMotor+0x5bc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a44      	ldr	r2, [pc, #272]	; (8002e80 <stepMotor+0x5c0>)
 8002d70:	8811      	ldrh	r1, [r2, #0]
 8002d72:	2200      	movs	r2, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 ff99 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
 8002d7a:	4b42      	ldr	r3, [pc, #264]	; (8002e84 <stepMotor+0x5c4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a42      	ldr	r2, [pc, #264]	; (8002e88 <stepMotor+0x5c8>)
 8002d80:	8811      	ldrh	r1, [r2, #0]
 8002d82:	2200      	movs	r2, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 ff91 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 1); // c
 8002d8a:	4b40      	ldr	r3, [pc, #256]	; (8002e8c <stepMotor+0x5cc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a40      	ldr	r2, [pc, #256]	; (8002e90 <stepMotor+0x5d0>)
 8002d90:	8811      	ldrh	r1, [r2, #0]
 8002d92:	2201      	movs	r2, #1
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 ff89 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002d9a:	e141      	b.n	8003020 <stepMotor+0x760>
			}
		}
		else
		{
			switch (thisStep)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b07      	cmp	r3, #7
 8002da0:	f200 813e 	bhi.w	8003020 <stepMotor+0x760>
 8002da4:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <stepMotor+0x4ec>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002dcd 	.word	0x08002dcd
 8002db0:	08002e0f 	.word	0x08002e0f
 8002db4:	08002e95 	.word	0x08002e95
 8002db8:	08002ed7 	.word	0x08002ed7
 8002dbc:	08002f19 	.word	0x08002f19
 8002dc0:	08002f5b 	.word	0x08002f5b
 8002dc4:	08002f9d 	.word	0x08002f9d
 8002dc8:	08002fdf 	.word	0x08002fdf
			{
			case 0:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 1); // d
 8002dcc:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <stepMotor+0x5b4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a29      	ldr	r2, [pc, #164]	; (8002e78 <stepMotor+0x5b8>)
 8002dd2:	8811      	ldrh	r1, [r2, #0]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 ff68 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
 8002ddc:	4b27      	ldr	r3, [pc, #156]	; (8002e7c <stepMotor+0x5bc>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a27      	ldr	r2, [pc, #156]	; (8002e80 <stepMotor+0x5c0>)
 8002de2:	8811      	ldrh	r1, [r2, #0]
 8002de4:	2200      	movs	r2, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 ff60 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 1); // a
 8002dec:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <stepMotor+0x5c4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a25      	ldr	r2, [pc, #148]	; (8002e88 <stepMotor+0x5c8>)
 8002df2:	8811      	ldrh	r1, [r2, #0]
 8002df4:	2201      	movs	r2, #1
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 ff58 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
 8002dfc:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <stepMotor+0x5cc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a23      	ldr	r2, [pc, #140]	; (8002e90 <stepMotor+0x5d0>)
 8002e02:	8811      	ldrh	r1, [r2, #0]
 8002e04:	2200      	movs	r2, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 ff50 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002e0c:	e108      	b.n	8003020 <stepMotor+0x760>

			case 1:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
 8002e0e:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <stepMotor+0x5b4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <stepMotor+0x5b8>)
 8002e14:	8811      	ldrh	r1, [r2, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 ff47 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <stepMotor+0x5bc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a17      	ldr	r2, [pc, #92]	; (8002e80 <stepMotor+0x5c0>)
 8002e24:	8811      	ldrh	r1, [r2, #0]
 8002e26:	2200      	movs	r2, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 ff3f 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 1); // a
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <stepMotor+0x5c4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <stepMotor+0x5c8>)
 8002e34:	8811      	ldrh	r1, [r2, #0]
 8002e36:	2201      	movs	r2, #1
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 ff37 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
 8002e3e:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <stepMotor+0x5cc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <stepMotor+0x5d0>)
 8002e44:	8811      	ldrh	r1, [r2, #0]
 8002e46:	2200      	movs	r2, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 ff2f 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002e4e:	e0e7      	b.n	8003020 <stepMotor+0x760>
 8002e50:	20000588 	.word	0x20000588
 8002e54:	2000058c 	.word	0x2000058c
 8002e58:	20000590 	.word	0x20000590
 8002e5c:	20000594 	.word	0x20000594
 8002e60:	20000598 	.word	0x20000598
 8002e64:	2000059c 	.word	0x2000059c
 8002e68:	200005a0 	.word	0x200005a0
 8002e6c:	200005a4 	.word	0x200005a4
 8002e70:	20000044 	.word	0x20000044
 8002e74:	200005a8 	.word	0x200005a8
 8002e78:	200005ac 	.word	0x200005ac
 8002e7c:	200005b0 	.word	0x200005b0
 8002e80:	200005b4 	.word	0x200005b4
 8002e84:	200005b8 	.word	0x200005b8
 8002e88:	200005bc 	.word	0x200005bc
 8002e8c:	200005c0 	.word	0x200005c0
 8002e90:	200005c4 	.word	0x200005c4

			case 2:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
 8002e94:	4b64      	ldr	r3, [pc, #400]	; (8003028 <stepMotor+0x768>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a64      	ldr	r2, [pc, #400]	; (800302c <stepMotor+0x76c>)
 8002e9a:	8811      	ldrh	r1, [r2, #0]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 ff04 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 1); // b
 8002ea4:	4b62      	ldr	r3, [pc, #392]	; (8003030 <stepMotor+0x770>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a62      	ldr	r2, [pc, #392]	; (8003034 <stepMotor+0x774>)
 8002eaa:	8811      	ldrh	r1, [r2, #0]
 8002eac:	2201      	movs	r2, #1
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fefc 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 1); // a
 8002eb4:	4b60      	ldr	r3, [pc, #384]	; (8003038 <stepMotor+0x778>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a60      	ldr	r2, [pc, #384]	; (800303c <stepMotor+0x77c>)
 8002eba:	8811      	ldrh	r1, [r2, #0]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fef4 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
 8002ec4:	4b5e      	ldr	r3, [pc, #376]	; (8003040 <stepMotor+0x780>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a5e      	ldr	r2, [pc, #376]	; (8003044 <stepMotor+0x784>)
 8002eca:	8811      	ldrh	r1, [r2, #0]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 feec 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002ed4:	e0a4      	b.n	8003020 <stepMotor+0x760>

			case 3:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
 8002ed6:	4b54      	ldr	r3, [pc, #336]	; (8003028 <stepMotor+0x768>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a54      	ldr	r2, [pc, #336]	; (800302c <stepMotor+0x76c>)
 8002edc:	8811      	ldrh	r1, [r2, #0]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fee3 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 1); // b
 8002ee6:	4b52      	ldr	r3, [pc, #328]	; (8003030 <stepMotor+0x770>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a52      	ldr	r2, [pc, #328]	; (8003034 <stepMotor+0x774>)
 8002eec:	8811      	ldrh	r1, [r2, #0]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 fedb 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
 8002ef6:	4b50      	ldr	r3, [pc, #320]	; (8003038 <stepMotor+0x778>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a50      	ldr	r2, [pc, #320]	; (800303c <stepMotor+0x77c>)
 8002efc:	8811      	ldrh	r1, [r2, #0]
 8002efe:	2200      	movs	r2, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fed3 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
 8002f06:	4b4e      	ldr	r3, [pc, #312]	; (8003040 <stepMotor+0x780>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a4e      	ldr	r2, [pc, #312]	; (8003044 <stepMotor+0x784>)
 8002f0c:	8811      	ldrh	r1, [r2, #0]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fecb 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002f16:	e083      	b.n	8003020 <stepMotor+0x760>
			case 4:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
 8002f18:	4b43      	ldr	r3, [pc, #268]	; (8003028 <stepMotor+0x768>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a43      	ldr	r2, [pc, #268]	; (800302c <stepMotor+0x76c>)
 8002f1e:	8811      	ldrh	r1, [r2, #0]
 8002f20:	2200      	movs	r2, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fec2 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 1); // b
 8002f28:	4b41      	ldr	r3, [pc, #260]	; (8003030 <stepMotor+0x770>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a41      	ldr	r2, [pc, #260]	; (8003034 <stepMotor+0x774>)
 8002f2e:	8811      	ldrh	r1, [r2, #0]
 8002f30:	2201      	movs	r2, #1
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 feba 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
 8002f38:	4b3f      	ldr	r3, [pc, #252]	; (8003038 <stepMotor+0x778>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a3f      	ldr	r2, [pc, #252]	; (800303c <stepMotor+0x77c>)
 8002f3e:	8811      	ldrh	r1, [r2, #0]
 8002f40:	2200      	movs	r2, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 feb2 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 1); // c
 8002f48:	4b3d      	ldr	r3, [pc, #244]	; (8003040 <stepMotor+0x780>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a3d      	ldr	r2, [pc, #244]	; (8003044 <stepMotor+0x784>)
 8002f4e:	8811      	ldrh	r1, [r2, #0]
 8002f50:	2201      	movs	r2, #1
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 feaa 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002f58:	e062      	b.n	8003020 <stepMotor+0x760>
			case 5:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
 8002f5a:	4b33      	ldr	r3, [pc, #204]	; (8003028 <stepMotor+0x768>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a33      	ldr	r2, [pc, #204]	; (800302c <stepMotor+0x76c>)
 8002f60:	8811      	ldrh	r1, [r2, #0]
 8002f62:	2200      	movs	r2, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fea1 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
 8002f6a:	4b31      	ldr	r3, [pc, #196]	; (8003030 <stepMotor+0x770>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a31      	ldr	r2, [pc, #196]	; (8003034 <stepMotor+0x774>)
 8002f70:	8811      	ldrh	r1, [r2, #0]
 8002f72:	2200      	movs	r2, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fe99 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
 8002f7a:	4b2f      	ldr	r3, [pc, #188]	; (8003038 <stepMotor+0x778>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a2f      	ldr	r2, [pc, #188]	; (800303c <stepMotor+0x77c>)
 8002f80:	8811      	ldrh	r1, [r2, #0]
 8002f82:	2200      	movs	r2, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fe91 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 1); // c
 8002f8a:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <stepMotor+0x780>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a2d      	ldr	r2, [pc, #180]	; (8003044 <stepMotor+0x784>)
 8002f90:	8811      	ldrh	r1, [r2, #0]
 8002f92:	2201      	movs	r2, #1
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fe89 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002f9a:	e041      	b.n	8003020 <stepMotor+0x760>
			case 6:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 1); // d
 8002f9c:	4b22      	ldr	r3, [pc, #136]	; (8003028 <stepMotor+0x768>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a22      	ldr	r2, [pc, #136]	; (800302c <stepMotor+0x76c>)
 8002fa2:	8811      	ldrh	r1, [r2, #0]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fe80 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
 8002fac:	4b20      	ldr	r3, [pc, #128]	; (8003030 <stepMotor+0x770>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a20      	ldr	r2, [pc, #128]	; (8003034 <stepMotor+0x774>)
 8002fb2:	8811      	ldrh	r1, [r2, #0]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fe78 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
 8002fbc:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <stepMotor+0x778>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	; (800303c <stepMotor+0x77c>)
 8002fc2:	8811      	ldrh	r1, [r2, #0]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fe70 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 1); // c
 8002fcc:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <stepMotor+0x780>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a1c      	ldr	r2, [pc, #112]	; (8003044 <stepMotor+0x784>)
 8002fd2:	8811      	ldrh	r1, [r2, #0]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fe68 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 8002fdc:	e020      	b.n	8003020 <stepMotor+0x760>
			case 7:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 1); // d
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <stepMotor+0x768>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a12      	ldr	r2, [pc, #72]	; (800302c <stepMotor+0x76c>)
 8002fe4:	8811      	ldrh	r1, [r2, #0]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fe5f 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
 8002fee:	4b10      	ldr	r3, [pc, #64]	; (8003030 <stepMotor+0x770>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a10      	ldr	r2, [pc, #64]	; (8003034 <stepMotor+0x774>)
 8002ff4:	8811      	ldrh	r1, [r2, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fe57 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <stepMotor+0x778>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a0e      	ldr	r2, [pc, #56]	; (800303c <stepMotor+0x77c>)
 8003004:	8811      	ldrh	r1, [r2, #0]
 8003006:	2200      	movs	r2, #0
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fe4f 	bl	8003cac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
 800300e:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <stepMotor+0x780>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <stepMotor+0x784>)
 8003014:	8811      	ldrh	r1, [r2, #0]
 8003016:	2200      	movs	r2, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fe47 	bl	8003cac <HAL_GPIO_WritePin>
				break;
 800301e:	bf00      	nop
			}
		}
	}
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	200005a8 	.word	0x200005a8
 800302c:	200005ac 	.word	0x200005ac
 8003030:	200005b0 	.word	0x200005b0
 8003034:	200005b4 	.word	0x200005b4
 8003038:	200005b8 	.word	0x200005b8
 800303c:	200005bc 	.word	0x200005bc
 8003040:	200005c0 	.word	0x200005c0
 8003044:	200005c4 	.word	0x200005c4

08003048 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304e:	4b0f      	ldr	r3, [pc, #60]	; (800308c <HAL_MspInit+0x44>)
 8003050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003052:	4a0e      	ldr	r2, [pc, #56]	; (800308c <HAL_MspInit+0x44>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6613      	str	r3, [r2, #96]	; 0x60
 800305a:	4b0c      	ldr	r3, [pc, #48]	; (800308c <HAL_MspInit+0x44>)
 800305c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	607b      	str	r3, [r7, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <HAL_MspInit+0x44>)
 8003068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306a:	4a08      	ldr	r2, [pc, #32]	; (800308c <HAL_MspInit+0x44>)
 800306c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003070:	6593      	str	r3, [r2, #88]	; 0x58
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_MspInit+0x44>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000

08003090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b0ae      	sub	sp, #184	; 0xb8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030a8:	f107 0310 	add.w	r3, r7, #16
 80030ac:	2294      	movs	r2, #148	; 0x94
 80030ae:	2100      	movs	r1, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f005 fad5 	bl	8008660 <memset>
  if(hi2c->Instance==I2C1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a21      	ldr	r2, [pc, #132]	; (8003140 <HAL_I2C_MspInit+0xb0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d13b      	bne.n	8003138 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030c0:	2340      	movs	r3, #64	; 0x40
 80030c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80030c4:	2300      	movs	r3, #0
 80030c6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030c8:	f107 0310 	add.w	r3, r7, #16
 80030cc:	4618      	mov	r0, r3
 80030ce:	f002 fa29 	bl	8005524 <HAL_RCCEx_PeriphCLKConfig>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80030d8:	f7fd fc5e 	bl	8000998 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_I2C_MspInit+0xb4>)
 80030de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e0:	4a18      	ldr	r2, [pc, #96]	; (8003144 <HAL_I2C_MspInit+0xb4>)
 80030e2:	f043 0302 	orr.w	r3, r3, #2
 80030e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030e8:	4b16      	ldr	r3, [pc, #88]	; (8003144 <HAL_I2C_MspInit+0xb4>)
 80030ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030fc:	2312      	movs	r3, #18
 80030fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003102:	2300      	movs	r3, #0
 8003104:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003108:	2303      	movs	r3, #3
 800310a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800310e:	2304      	movs	r3, #4
 8003110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003114:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003118:	4619      	mov	r1, r3
 800311a:	480b      	ldr	r0, [pc, #44]	; (8003148 <HAL_I2C_MspInit+0xb8>)
 800311c:	f000 fc34 	bl	8003988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003120:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_I2C_MspInit+0xb4>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	4a07      	ldr	r2, [pc, #28]	; (8003144 <HAL_I2C_MspInit+0xb4>)
 8003126:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800312a:	6593      	str	r3, [r2, #88]	; 0x58
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <HAL_I2C_MspInit+0xb4>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003138:	bf00      	nop
 800313a:	37b8      	adds	r7, #184	; 0xb8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40005400 	.word	0x40005400
 8003144:	40021000 	.word	0x40021000
 8003148:	48000400 	.word	0x48000400

0800314c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b0ae      	sub	sp, #184	; 0xb8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003154:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003164:	f107 0310 	add.w	r3, r7, #16
 8003168:	2294      	movs	r2, #148	; 0x94
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f005 fa77 	bl	8008660 <memset>
  if(huart->Instance==LPUART1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a23      	ldr	r2, [pc, #140]	; (8003204 <HAL_UART_MspInit+0xb8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d13e      	bne.n	80031fa <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800317c:	2320      	movs	r3, #32
 800317e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8003180:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003184:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003186:	f107 0310 	add.w	r3, r7, #16
 800318a:	4618      	mov	r0, r3
 800318c:	f002 f9ca 	bl	8005524 <HAL_RCCEx_PeriphCLKConfig>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003196:	f7fd fbff 	bl	8000998 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800319a:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <HAL_UART_MspInit+0xbc>)
 800319c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319e:	4a1a      	ldr	r2, [pc, #104]	; (8003208 <HAL_UART_MspInit+0xbc>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80031a6:	4b18      	ldr	r3, [pc, #96]	; (8003208 <HAL_UART_MspInit+0xbc>)
 80031a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031b2:	4b15      	ldr	r3, [pc, #84]	; (8003208 <HAL_UART_MspInit+0xbc>)
 80031b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b6:	4a14      	ldr	r2, [pc, #80]	; (8003208 <HAL_UART_MspInit+0xbc>)
 80031b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <HAL_UART_MspInit+0xbc>)
 80031c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80031ca:	f001 fac3 	bl	8004754 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80031ce:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80031d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2302      	movs	r3, #2
 80031d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e2:	2303      	movs	r3, #3
 80031e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80031e8:	2308      	movs	r3, #8
 80031ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80031f2:	4619      	mov	r1, r3
 80031f4:	4805      	ldr	r0, [pc, #20]	; (800320c <HAL_UART_MspInit+0xc0>)
 80031f6:	f000 fbc7 	bl	8003988 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80031fa:	bf00      	nop
 80031fc:	37b8      	adds	r7, #184	; 0xb8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40008000 	.word	0x40008000
 8003208:	40021000 	.word	0x40021000
 800320c:	48001800 	.word	0x48001800

08003210 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003218:	f107 0314 	add.w	r3, r7, #20
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a17      	ldr	r2, [pc, #92]	; (800328c <HAL_SPI_MspInit+0x7c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d128      	bne.n	8003284 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003232:	4b17      	ldr	r3, [pc, #92]	; (8003290 <HAL_SPI_MspInit+0x80>)
 8003234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003236:	4a16      	ldr	r2, [pc, #88]	; (8003290 <HAL_SPI_MspInit+0x80>)
 8003238:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800323c:	6613      	str	r3, [r2, #96]	; 0x60
 800323e:	4b14      	ldr	r3, [pc, #80]	; (8003290 <HAL_SPI_MspInit+0x80>)
 8003240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324a:	4b11      	ldr	r3, [pc, #68]	; (8003290 <HAL_SPI_MspInit+0x80>)
 800324c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324e:	4a10      	ldr	r2, [pc, #64]	; (8003290 <HAL_SPI_MspInit+0x80>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <HAL_SPI_MspInit+0x80>)
 8003258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003262:	23e0      	movs	r3, #224	; 0xe0
 8003264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003266:	2302      	movs	r3, #2
 8003268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326e:	2303      	movs	r3, #3
 8003270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003272:	2305      	movs	r3, #5
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003276:	f107 0314 	add.w	r3, r7, #20
 800327a:	4619      	mov	r1, r3
 800327c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003280:	f000 fb82 	bl	8003988 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003284:	bf00      	nop
 8003286:	3728      	adds	r7, #40	; 0x28
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40013000 	.word	0x40013000
 8003290:	40021000 	.word	0x40021000

08003294 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a4:	d10c      	bne.n	80032c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032a6:	4b24      	ldr	r3, [pc, #144]	; (8003338 <HAL_TIM_Base_MspInit+0xa4>)
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032aa:	4a23      	ldr	r2, [pc, #140]	; (8003338 <HAL_TIM_Base_MspInit+0xa4>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6593      	str	r3, [r2, #88]	; 0x58
 80032b2:	4b21      	ldr	r3, [pc, #132]	; (8003338 <HAL_TIM_Base_MspInit+0xa4>)
 80032b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80032be:	e034      	b.n	800332a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a1d      	ldr	r2, [pc, #116]	; (800333c <HAL_TIM_Base_MspInit+0xa8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d10c      	bne.n	80032e4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032ca:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <HAL_TIM_Base_MspInit+0xa4>)
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	4a1a      	ldr	r2, [pc, #104]	; (8003338 <HAL_TIM_Base_MspInit+0xa4>)
 80032d0:	f043 0304 	orr.w	r3, r3, #4
 80032d4:	6593      	str	r3, [r2, #88]	; 0x58
 80032d6:	4b18      	ldr	r3, [pc, #96]	; (8003338 <HAL_TIM_Base_MspInit+0xa4>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	693b      	ldr	r3, [r7, #16]
}
 80032e2:	e022      	b.n	800332a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a15      	ldr	r2, [pc, #84]	; (8003340 <HAL_TIM_Base_MspInit+0xac>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d10c      	bne.n	8003308 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_TIM_Base_MspInit+0xa4>)
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f2:	4a11      	ldr	r2, [pc, #68]	; (8003338 <HAL_TIM_Base_MspInit+0xa4>)
 80032f4:	f043 0308 	orr.w	r3, r3, #8
 80032f8:	6593      	str	r3, [r2, #88]	; 0x58
 80032fa:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <HAL_TIM_Base_MspInit+0xa4>)
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
}
 8003306:	e010      	b.n	800332a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM16)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a0d      	ldr	r2, [pc, #52]	; (8003344 <HAL_TIM_Base_MspInit+0xb0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d10b      	bne.n	800332a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <HAL_TIM_Base_MspInit+0xa4>)
 8003314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003316:	4a08      	ldr	r2, [pc, #32]	; (8003338 <HAL_TIM_Base_MspInit+0xa4>)
 8003318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331c:	6613      	str	r3, [r2, #96]	; 0x60
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_TIM_Base_MspInit+0xa4>)
 8003320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	40000800 	.word	0x40000800
 8003340:	40000c00 	.word	0x40000c00
 8003344:	40014400 	.word	0x40014400

08003348 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003350:	f107 030c 	add.w	r3, r7, #12
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a11      	ldr	r2, [pc, #68]	; (80033ac <HAL_TIM_MspPostInit+0x64>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d11b      	bne.n	80033a2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800336a:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <HAL_TIM_MspPostInit+0x68>)
 800336c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336e:	4a10      	ldr	r2, [pc, #64]	; (80033b0 <HAL_TIM_MspPostInit+0x68>)
 8003370:	f043 0310 	orr.w	r3, r3, #16
 8003374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003376:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <HAL_TIM_MspPostInit+0x68>)
 8003378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PE0     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003382:	2301      	movs	r3, #1
 8003384:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003386:	2302      	movs	r3, #2
 8003388:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8003392:	230e      	movs	r3, #14
 8003394:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003396:	f107 030c 	add.w	r3, r7, #12
 800339a:	4619      	mov	r1, r3
 800339c:	4805      	ldr	r0, [pc, #20]	; (80033b4 <HAL_TIM_MspPostInit+0x6c>)
 800339e:	f000 faf3 	bl	8003988 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80033a2:	bf00      	nop
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40014400 	.word	0x40014400
 80033b0:	40021000 	.word	0x40021000
 80033b4:	48001000 	.word	0x48001000

080033b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033bc:	e7fe      	b.n	80033bc <NMI_Handler+0x4>

080033be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033be:	b480      	push	{r7}
 80033c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033c2:	e7fe      	b.n	80033c2 <HardFault_Handler+0x4>

080033c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033c8:	e7fe      	b.n	80033c8 <MemManage_Handler+0x4>

080033ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033ca:	b480      	push	{r7}
 80033cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ce:	e7fe      	b.n	80033ce <BusFault_Handler+0x4>

080033d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033d4:	e7fe      	b.n	80033d4 <UsageFault_Handler+0x4>

080033d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033d6:	b480      	push	{r7}
 80033d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033f2:	b480      	push	{r7}
 80033f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003404:	f000 f96a 	bl	80036dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003408:	bf00      	nop
 800340a:	bd80      	pop	{r7, pc}

0800340c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	  N64_readSingle();
 8003410:	f7fe ffe6 	bl	80023e0 <N64_readSingle>

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003414:	2010      	movs	r0, #16
 8003416:	f000 fc61 	bl	8003cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}

0800341e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  resetAll();
 8003422:	f7fd fa09 	bl	8000838 <resetAll>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003426:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800342a:	f000 fc57 	bl	8003cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}

08003432 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0
	return 1;
 8003436:	2301      	movs	r3, #1
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <_kill>:

int _kill(int pid, int sig)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800344c:	f005 f8d0 	bl	80085f0 <__errno>
 8003450:	4603      	mov	r3, r0
 8003452:	2216      	movs	r2, #22
 8003454:	601a      	str	r2, [r3, #0]
	return -1;
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <_exit>:

void _exit (int status)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800346a:	f04f 31ff 	mov.w	r1, #4294967295
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff ffe7 	bl	8003442 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003474:	e7fe      	b.n	8003474 <_exit+0x12>

08003476 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e00a      	b.n	800349e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003488:	f3af 8000 	nop.w
 800348c:	4601      	mov	r1, r0
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	60ba      	str	r2, [r7, #8]
 8003494:	b2ca      	uxtb	r2, r1
 8003496:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3301      	adds	r3, #1
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	dbf0      	blt.n	8003488 <_read+0x12>
	}

return len;
 80034a6:	687b      	ldr	r3, [r7, #4]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	e009      	b.n	80034d6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	60ba      	str	r2, [r7, #8]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd fa54 	bl	8000978 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	3301      	adds	r3, #1
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	429a      	cmp	r2, r3
 80034dc:	dbf1      	blt.n	80034c2 <_write+0x12>
	}
	return len;
 80034de:	687b      	ldr	r3, [r7, #4]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <_close>:

int _close(int file)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	return -1;
 80034f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003510:	605a      	str	r2, [r3, #4]
	return 0;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <_isatty>:

int _isatty(int file)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	return 1;
 8003528:	2301      	movs	r3, #1
}
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
	return 0;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003558:	4a14      	ldr	r2, [pc, #80]	; (80035ac <_sbrk+0x5c>)
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <_sbrk+0x60>)
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003564:	4b13      	ldr	r3, [pc, #76]	; (80035b4 <_sbrk+0x64>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d102      	bne.n	8003572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800356c:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <_sbrk+0x64>)
 800356e:	4a12      	ldr	r2, [pc, #72]	; (80035b8 <_sbrk+0x68>)
 8003570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003572:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <_sbrk+0x64>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4413      	add	r3, r2
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	429a      	cmp	r2, r3
 800357e:	d207      	bcs.n	8003590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003580:	f005 f836 	bl	80085f0 <__errno>
 8003584:	4603      	mov	r3, r0
 8003586:	220c      	movs	r2, #12
 8003588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
 800358e:	e009      	b.n	80035a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003590:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <_sbrk+0x64>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003596:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <_sbrk+0x64>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	4a05      	ldr	r2, [pc, #20]	; (80035b4 <_sbrk+0x64>)
 80035a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035a2:	68fb      	ldr	r3, [r7, #12]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	200a0000 	.word	0x200a0000
 80035b0:	00000400 	.word	0x00000400
 80035b4:	200005c8 	.word	0x200005c8
 80035b8:	200005e0 	.word	0x200005e0

080035bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80035c0:	4b06      	ldr	r3, [pc, #24]	; (80035dc <SystemInit+0x20>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	4a05      	ldr	r2, [pc, #20]	; (80035dc <SystemInit+0x20>)
 80035c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80035e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003618 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035e4:	f7ff ffea 	bl	80035bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035e8:	480c      	ldr	r0, [pc, #48]	; (800361c <LoopForever+0x6>)
  ldr r1, =_edata
 80035ea:	490d      	ldr	r1, [pc, #52]	; (8003620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035ec:	4a0d      	ldr	r2, [pc, #52]	; (8003624 <LoopForever+0xe>)
  movs r3, #0
 80035ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035f0:	e002      	b.n	80035f8 <LoopCopyDataInit>

080035f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035f6:	3304      	adds	r3, #4

080035f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035fc:	d3f9      	bcc.n	80035f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035fe:	4a0a      	ldr	r2, [pc, #40]	; (8003628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003600:	4c0a      	ldr	r4, [pc, #40]	; (800362c <LoopForever+0x16>)
  movs r3, #0
 8003602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003604:	e001      	b.n	800360a <LoopFillZerobss>

08003606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003608:	3204      	adds	r2, #4

0800360a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800360a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800360c:	d3fb      	bcc.n	8003606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800360e:	f004 fff5 	bl	80085fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003612:	f7fd fbc5 	bl	8000da0 <main>

08003616 <LoopForever>:

LoopForever:
    b LoopForever
 8003616:	e7fe      	b.n	8003616 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003618:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800361c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003620:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8003624:	0800b614 	.word	0x0800b614
  ldr r2, =_sbss
 8003628:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 800362c:	200005e0 	.word	0x200005e0

08003630 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003630:	e7fe      	b.n	8003630 <ADC1_IRQHandler>

08003632 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b082      	sub	sp, #8
 8003636:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800363c:	2003      	movs	r0, #3
 800363e:	f000 f961 	bl	8003904 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003642:	2000      	movs	r0, #0
 8003644:	f000 f80e 	bl	8003664 <HAL_InitTick>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	71fb      	strb	r3, [r7, #7]
 8003652:	e001      	b.n	8003658 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003654:	f7ff fcf8 	bl	8003048 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003658:	79fb      	ldrb	r3, [r7, #7]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003670:	4b17      	ldr	r3, [pc, #92]	; (80036d0 <HAL_InitTick+0x6c>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d023      	beq.n	80036c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <HAL_InitTick+0x70>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <HAL_InitTick+0x6c>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	4619      	mov	r1, r3
 8003682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003686:	fbb3 f3f1 	udiv	r3, r3, r1
 800368a:	fbb2 f3f3 	udiv	r3, r2, r3
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f96d 	bl	800396e <HAL_SYSTICK_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10f      	bne.n	80036ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b0f      	cmp	r3, #15
 800369e:	d809      	bhi.n	80036b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a0:	2200      	movs	r2, #0
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	f000 f937 	bl	800391a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036ac:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <HAL_InitTick+0x74>)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e007      	b.n	80036c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
 80036b8:	e004      	b.n	80036c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
 80036be:	e001      	b.n	80036c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000050 	.word	0x20000050
 80036d4:	20000048 	.word	0x20000048
 80036d8:	2000004c 	.word	0x2000004c

080036dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <HAL_IncTick+0x20>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_IncTick+0x24>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4413      	add	r3, r2
 80036ec:	4a04      	ldr	r2, [pc, #16]	; (8003700 <HAL_IncTick+0x24>)
 80036ee:	6013      	str	r3, [r2, #0]
}
 80036f0:	bf00      	nop
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000050 	.word	0x20000050
 8003700:	200005cc 	.word	0x200005cc

08003704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return uwTick;
 8003708:	4b03      	ldr	r3, [pc, #12]	; (8003718 <HAL_GetTick+0x14>)
 800370a:	681b      	ldr	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	200005cc 	.word	0x200005cc

0800371c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003724:	f7ff ffee 	bl	8003704 <HAL_GetTick>
 8003728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d005      	beq.n	8003742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_Delay+0x44>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4413      	add	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003742:	bf00      	nop
 8003744:	f7ff ffde 	bl	8003704 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	429a      	cmp	r2, r3
 8003752:	d8f7      	bhi.n	8003744 <HAL_Delay+0x28>
  {
  }
}
 8003754:	bf00      	nop
 8003756:	bf00      	nop
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20000050 	.word	0x20000050

08003764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003780:	4013      	ands	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800378c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003796:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	60d3      	str	r3, [r2, #12]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <__NVIC_GetPriorityGrouping+0x18>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	0a1b      	lsrs	r3, r3, #8
 80037b6:	f003 0307 	and.w	r3, r3, #7
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	db0b      	blt.n	80037f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	f003 021f 	and.w	r2, r3, #31
 80037e0:	4907      	ldr	r1, [pc, #28]	; (8003800 <__NVIC_EnableIRQ+0x38>)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2001      	movs	r0, #1
 80037ea:	fa00 f202 	lsl.w	r2, r0, r2
 80037ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000e100 	.word	0xe000e100

08003804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003814:	2b00      	cmp	r3, #0
 8003816:	db0a      	blt.n	800382e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	b2da      	uxtb	r2, r3
 800381c:	490c      	ldr	r1, [pc, #48]	; (8003850 <__NVIC_SetPriority+0x4c>)
 800381e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003822:	0112      	lsls	r2, r2, #4
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	440b      	add	r3, r1
 8003828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800382c:	e00a      	b.n	8003844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4908      	ldr	r1, [pc, #32]	; (8003854 <__NVIC_SetPriority+0x50>)
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	3b04      	subs	r3, #4
 800383c:	0112      	lsls	r2, r2, #4
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	440b      	add	r3, r1
 8003842:	761a      	strb	r2, [r3, #24]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000e100 	.word	0xe000e100
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003858:	b480      	push	{r7}
 800385a:	b089      	sub	sp, #36	; 0x24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f1c3 0307 	rsb	r3, r3, #7
 8003872:	2b04      	cmp	r3, #4
 8003874:	bf28      	it	cs
 8003876:	2304      	movcs	r3, #4
 8003878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3304      	adds	r3, #4
 800387e:	2b06      	cmp	r3, #6
 8003880:	d902      	bls.n	8003888 <NVIC_EncodePriority+0x30>
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3b03      	subs	r3, #3
 8003886:	e000      	b.n	800388a <NVIC_EncodePriority+0x32>
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800388c:	f04f 32ff 	mov.w	r2, #4294967295
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43da      	mvns	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	401a      	ands	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a0:	f04f 31ff 	mov.w	r1, #4294967295
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	43d9      	mvns	r1, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b0:	4313      	orrs	r3, r2
         );
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3724      	adds	r7, #36	; 0x24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d0:	d301      	bcc.n	80038d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038d2:	2301      	movs	r3, #1
 80038d4:	e00f      	b.n	80038f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038d6:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <SysTick_Config+0x40>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3b01      	subs	r3, #1
 80038dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038de:	210f      	movs	r1, #15
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	f7ff ff8e 	bl	8003804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <SysTick_Config+0x40>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ee:	4b04      	ldr	r3, [pc, #16]	; (8003900 <SysTick_Config+0x40>)
 80038f0:	2207      	movs	r2, #7
 80038f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	e000e010 	.word	0xe000e010

08003904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ff29 	bl	8003764 <__NVIC_SetPriorityGrouping>
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b086      	sub	sp, #24
 800391e:	af00      	add	r7, sp, #0
 8003920:	4603      	mov	r3, r0
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800392c:	f7ff ff3e 	bl	80037ac <__NVIC_GetPriorityGrouping>
 8003930:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	6978      	ldr	r0, [r7, #20]
 8003938:	f7ff ff8e 	bl	8003858 <NVIC_EncodePriority>
 800393c:	4602      	mov	r2, r0
 800393e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003942:	4611      	mov	r1, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ff5d 	bl	8003804 <__NVIC_SetPriority>
}
 800394a:	bf00      	nop
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	4603      	mov	r3, r0
 800395a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800395c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff31 	bl	80037c8 <__NVIC_EnableIRQ>
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ffa2 	bl	80038c0 <SysTick_Config>
 800397c:	4603      	mov	r3, r0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003996:	e166      	b.n	8003c66 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	2101      	movs	r1, #1
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	fa01 f303 	lsl.w	r3, r1, r3
 80039a4:	4013      	ands	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8158 	beq.w	8003c60 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d005      	beq.n	80039c8 <HAL_GPIO_Init+0x40>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d130      	bne.n	8003a2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	2203      	movs	r2, #3
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4013      	ands	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039fe:	2201      	movs	r2, #1
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	f003 0201 	and.w	r2, r3, #1
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d017      	beq.n	8003a66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	2203      	movs	r2, #3
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d123      	bne.n	8003aba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	08da      	lsrs	r2, r3, #3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3208      	adds	r2, #8
 8003a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	220f      	movs	r2, #15
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4013      	ands	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	08da      	lsrs	r2, r3, #3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3208      	adds	r2, #8
 8003ab4:	6939      	ldr	r1, [r7, #16]
 8003ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43db      	mvns	r3, r3
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 0203 	and.w	r2, r3, #3
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80b2 	beq.w	8003c60 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003afc:	4b61      	ldr	r3, [pc, #388]	; (8003c84 <HAL_GPIO_Init+0x2fc>)
 8003afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b00:	4a60      	ldr	r2, [pc, #384]	; (8003c84 <HAL_GPIO_Init+0x2fc>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6613      	str	r3, [r2, #96]	; 0x60
 8003b08:	4b5e      	ldr	r3, [pc, #376]	; (8003c84 <HAL_GPIO_Init+0x2fc>)
 8003b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b14:	4a5c      	ldr	r2, [pc, #368]	; (8003c88 <HAL_GPIO_Init+0x300>)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	089b      	lsrs	r3, r3, #2
 8003b1a:	3302      	adds	r3, #2
 8003b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	220f      	movs	r2, #15
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4013      	ands	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b3e:	d02b      	beq.n	8003b98 <HAL_GPIO_Init+0x210>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a52      	ldr	r2, [pc, #328]	; (8003c8c <HAL_GPIO_Init+0x304>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d025      	beq.n	8003b94 <HAL_GPIO_Init+0x20c>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a51      	ldr	r2, [pc, #324]	; (8003c90 <HAL_GPIO_Init+0x308>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d01f      	beq.n	8003b90 <HAL_GPIO_Init+0x208>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a50      	ldr	r2, [pc, #320]	; (8003c94 <HAL_GPIO_Init+0x30c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d019      	beq.n	8003b8c <HAL_GPIO_Init+0x204>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a4f      	ldr	r2, [pc, #316]	; (8003c98 <HAL_GPIO_Init+0x310>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d013      	beq.n	8003b88 <HAL_GPIO_Init+0x200>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a4e      	ldr	r2, [pc, #312]	; (8003c9c <HAL_GPIO_Init+0x314>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00d      	beq.n	8003b84 <HAL_GPIO_Init+0x1fc>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a4d      	ldr	r2, [pc, #308]	; (8003ca0 <HAL_GPIO_Init+0x318>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d007      	beq.n	8003b80 <HAL_GPIO_Init+0x1f8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a4c      	ldr	r2, [pc, #304]	; (8003ca4 <HAL_GPIO_Init+0x31c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d101      	bne.n	8003b7c <HAL_GPIO_Init+0x1f4>
 8003b78:	2307      	movs	r3, #7
 8003b7a:	e00e      	b.n	8003b9a <HAL_GPIO_Init+0x212>
 8003b7c:	2308      	movs	r3, #8
 8003b7e:	e00c      	b.n	8003b9a <HAL_GPIO_Init+0x212>
 8003b80:	2306      	movs	r3, #6
 8003b82:	e00a      	b.n	8003b9a <HAL_GPIO_Init+0x212>
 8003b84:	2305      	movs	r3, #5
 8003b86:	e008      	b.n	8003b9a <HAL_GPIO_Init+0x212>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	e006      	b.n	8003b9a <HAL_GPIO_Init+0x212>
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e004      	b.n	8003b9a <HAL_GPIO_Init+0x212>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e002      	b.n	8003b9a <HAL_GPIO_Init+0x212>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <HAL_GPIO_Init+0x212>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	f002 0203 	and.w	r2, r2, #3
 8003ba0:	0092      	lsls	r2, r2, #2
 8003ba2:	4093      	lsls	r3, r2
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003baa:	4937      	ldr	r1, [pc, #220]	; (8003c88 <HAL_GPIO_Init+0x300>)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bb8:	4b3b      	ldr	r3, [pc, #236]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bdc:	4a32      	ldr	r2, [pc, #200]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003be2:	4b31      	ldr	r3, [pc, #196]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	43db      	mvns	r3, r3
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c06:	4a28      	ldr	r2, [pc, #160]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c0c:	4b26      	ldr	r3, [pc, #152]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c30:	4a1d      	ldr	r2, [pc, #116]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c36:	4b1c      	ldr	r3, [pc, #112]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c5a:	4a13      	ldr	r2, [pc, #76]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	3301      	adds	r3, #1
 8003c64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f47f ae91 	bne.w	8003998 <HAL_GPIO_Init+0x10>
  }
}
 8003c76:	bf00      	nop
 8003c78:	bf00      	nop
 8003c7a:	371c      	adds	r7, #28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	48000400 	.word	0x48000400
 8003c90:	48000800 	.word	0x48000800
 8003c94:	48000c00 	.word	0x48000c00
 8003c98:	48001000 	.word	0x48001000
 8003c9c:	48001400 	.word	0x48001400
 8003ca0:	48001800 	.word	0x48001800
 8003ca4:	48001c00 	.word	0x48001c00
 8003ca8:	40010400 	.word	0x40010400

08003cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	807b      	strh	r3, [r7, #2]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cbc:	787b      	ldrb	r3, [r7, #1]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cc2:	887a      	ldrh	r2, [r7, #2]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cc8:	e002      	b.n	8003cd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cca:	887a      	ldrh	r2, [r7, #2]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ce6:	4b08      	ldr	r3, [pc, #32]	; (8003d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d006      	beq.n	8003d00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cf2:	4a05      	ldr	r2, [pc, #20]	; (8003d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cf8:	88fb      	ldrh	r3, [r7, #6]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f806 	bl	8003d0c <HAL_GPIO_EXTI_Callback>
  }
}
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40010400 	.word	0x40010400

08003d0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e081      	b.n	8003e38 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d106      	bne.n	8003d4e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff f9a1 	bl	8003090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2224      	movs	r2, #36	; 0x24
 8003d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0201 	bic.w	r2, r2, #1
 8003d64:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d72:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d82:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d107      	bne.n	8003d9c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d98:	609a      	str	r2, [r3, #8]
 8003d9a:	e006      	b.n	8003daa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003da8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d104      	bne.n	8003dbc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dce:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dde:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69d9      	ldr	r1, [r3, #28]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1a      	ldr	r2, [r3, #32]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0201 	orr.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	817b      	strh	r3, [r7, #10]
 8003e50:	4613      	mov	r3, r2
 8003e52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	f040 80db 	bne.w	8004018 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_I2C_Master_Receive+0x30>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e0d4      	b.n	800401a <HAL_I2C_Master_Receive+0x1da>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e78:	f7ff fc44 	bl	8003704 <HAL_GetTick>
 8003e7c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2319      	movs	r3, #25
 8003e84:	2201      	movs	r2, #1
 8003e86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f8f2 	bl	8004074 <I2C_WaitOnFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e0bf      	b.n	800401a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2222      	movs	r2, #34	; 0x22
 8003e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2210      	movs	r2, #16
 8003ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	893a      	ldrh	r2, [r7, #8]
 8003eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2bff      	cmp	r3, #255	; 0xff
 8003eca:	d90e      	bls.n	8003eea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	22ff      	movs	r2, #255	; 0xff
 8003ed0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	8979      	ldrh	r1, [r7, #10]
 8003eda:	4b52      	ldr	r3, [pc, #328]	; (8004024 <HAL_I2C_Master_Receive+0x1e4>)
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 faa8 	bl	8004438 <I2C_TransferConfig>
 8003ee8:	e06d      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	8979      	ldrh	r1, [r7, #10]
 8003efc:	4b49      	ldr	r3, [pc, #292]	; (8004024 <HAL_I2C_Master_Receive+0x1e4>)
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fa97 	bl	8004438 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003f0a:	e05c      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	6a39      	ldr	r1, [r7, #32]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f92b 	bl	800416c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e07c      	b.n	800401a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d034      	beq.n	8003fc6 <HAL_I2C_Master_Receive+0x186>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d130      	bne.n	8003fc6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2180      	movs	r1, #128	; 0x80
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f880 	bl	8004074 <I2C_WaitOnFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e04d      	b.n	800401a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2bff      	cmp	r3, #255	; 0xff
 8003f86:	d90e      	bls.n	8003fa6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	22ff      	movs	r2, #255	; 0xff
 8003f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	8979      	ldrh	r1, [r7, #10]
 8003f96:	2300      	movs	r3, #0
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fa4a 	bl	8004438 <I2C_TransferConfig>
 8003fa4:	e00f      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	8979      	ldrh	r1, [r7, #10]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 fa39 	bl	8004438 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d19d      	bne.n	8003f0c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	6a39      	ldr	r1, [r7, #32]
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 f88d 	bl	80040f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e01a      	b.n	800401a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6859      	ldr	r1, [r3, #4]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <HAL_I2C_Master_Receive+0x1e8>)
 8003ff8:	400b      	ands	r3, r1
 8003ffa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	e000      	b.n	800401a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004018:	2302      	movs	r3, #2
  }
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	80002400 	.word	0x80002400
 8004028:	fe00e800 	.word	0xfe00e800

0800402c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b02      	cmp	r3, #2
 8004040:	d103      	bne.n	800404a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2200      	movs	r2, #0
 8004048:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b01      	cmp	r3, #1
 8004056:	d007      	beq.n	8004068 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	619a      	str	r2, [r3, #24]
  }
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	4613      	mov	r3, r2
 8004082:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004084:	e022      	b.n	80040cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408c:	d01e      	beq.n	80040cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408e:	f7ff fb39 	bl	8003704 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d302      	bcc.n	80040a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d113      	bne.n	80040cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	f043 0220 	orr.w	r2, r3, #32
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e00f      	b.n	80040ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4013      	ands	r3, r2
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	429a      	cmp	r2, r3
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d0cd      	beq.n	8004086 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004100:	e028      	b.n	8004154 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f8aa 	bl	8004260 <I2C_IsErrorOccurred>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e026      	b.n	8004164 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004116:	f7ff faf5 	bl	8003704 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d113      	bne.n	8004154 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004130:	f043 0220 	orr.w	r2, r3, #32
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e007      	b.n	8004164 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b20      	cmp	r3, #32
 8004160:	d1cf      	bne.n	8004102 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004178:	e064      	b.n	8004244 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f86e 	bl	8004260 <I2C_IsErrorOccurred>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e062      	b.n	8004254 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b20      	cmp	r3, #32
 800419a:	d138      	bne.n	800420e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d105      	bne.n	80041b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	e04e      	b.n	8004254 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d107      	bne.n	80041d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2210      	movs	r2, #16
 80041ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2204      	movs	r2, #4
 80041d0:	645a      	str	r2, [r3, #68]	; 0x44
 80041d2:	e002      	b.n	80041da <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2220      	movs	r2, #32
 80041e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b1b      	ldr	r3, [pc, #108]	; (800425c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80041ee:	400b      	ands	r3, r1
 80041f0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e022      	b.n	8004254 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420e:	f7ff fa79 	bl	8003704 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	429a      	cmp	r2, r3
 800421c:	d302      	bcc.n	8004224 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10f      	bne.n	8004244 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004228:	f043 0220 	orr.w	r2, r3, #32
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e007      	b.n	8004254 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b04      	cmp	r3, #4
 8004250:	d193      	bne.n	800417a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	fe00e800 	.word	0xfe00e800

08004260 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08a      	sub	sp, #40	; 0x28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b00      	cmp	r3, #0
 800428a:	d075      	beq.n	8004378 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2210      	movs	r2, #16
 8004292:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004294:	e056      	b.n	8004344 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d052      	beq.n	8004344 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800429e:	f7ff fa31 	bl	8003704 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d302      	bcc.n	80042b4 <I2C_IsErrorOccurred+0x54>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d147      	bne.n	8004344 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d6:	d12e      	bne.n	8004336 <I2C_IsErrorOccurred+0xd6>
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042de:	d02a      	beq.n	8004336 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d027      	beq.n	8004336 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042f4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80042f6:	f7ff fa05 	bl	8003704 <HAL_GetTick>
 80042fa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042fc:	e01b      	b.n	8004336 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80042fe:	f7ff fa01 	bl	8003704 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b19      	cmp	r3, #25
 800430a:	d914      	bls.n	8004336 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004310:	f043 0220 	orr.w	r2, r3, #32
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	2b20      	cmp	r3, #32
 8004342:	d1dc      	bne.n	80042fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b20      	cmp	r3, #32
 8004350:	d003      	beq.n	800435a <I2C_IsErrorOccurred+0xfa>
 8004352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004356:	2b00      	cmp	r3, #0
 8004358:	d09d      	beq.n	8004296 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800435a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800435e:	2b00      	cmp	r3, #0
 8004360:	d103      	bne.n	800436a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2220      	movs	r2, #32
 8004368:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	f043 0304 	orr.w	r3, r3, #4
 8004370:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00b      	beq.n	80043a2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800439a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00b      	beq.n	80043c4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	f043 0308 	orr.w	r3, r3, #8
 80043b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00b      	beq.n	80043e6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	f043 0302 	orr.w	r3, r3, #2
 80043d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80043e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01c      	beq.n	8004428 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f7ff fe1c 	bl	800402c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <I2C_IsErrorOccurred+0x1d4>)
 8004400:	400b      	ands	r3, r1
 8004402:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	431a      	orrs	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800442c:	4618      	mov	r0, r3
 800442e:	3728      	adds	r7, #40	; 0x28
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	fe00e800 	.word	0xfe00e800

08004438 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	607b      	str	r3, [r7, #4]
 8004442:	460b      	mov	r3, r1
 8004444:	817b      	strh	r3, [r7, #10]
 8004446:	4613      	mov	r3, r2
 8004448:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800444a:	897b      	ldrh	r3, [r7, #10]
 800444c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004450:	7a7b      	ldrb	r3, [r7, #9]
 8004452:	041b      	lsls	r3, r3, #16
 8004454:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004458:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	4313      	orrs	r3, r2
 8004462:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004466:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	0d5b      	lsrs	r3, r3, #21
 8004472:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004476:	4b08      	ldr	r3, [pc, #32]	; (8004498 <I2C_TransferConfig+0x60>)
 8004478:	430b      	orrs	r3, r1
 800447a:	43db      	mvns	r3, r3
 800447c:	ea02 0103 	and.w	r1, r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	03ff63ff 	.word	0x03ff63ff

0800449c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d138      	bne.n	8004524 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044bc:	2302      	movs	r3, #2
 80044be:	e032      	b.n	8004526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2224      	movs	r2, #36	; 0x24
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0201 	bic.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6819      	ldr	r1, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e000      	b.n	8004526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
  }
}
 8004526:	4618      	mov	r0, r3
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004532:	b480      	push	{r7}
 8004534:	b085      	sub	sp, #20
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b20      	cmp	r3, #32
 8004546:	d139      	bne.n	80045bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004552:	2302      	movs	r3, #2
 8004554:	e033      	b.n	80045be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2224      	movs	r2, #36	; 0x24
 8004562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0201 	bic.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004584:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	e000      	b.n	80045be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045bc:	2302      	movs	r3, #2
  }
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
	...

080045cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045d0:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <HAL_PWREx_GetVoltageRange+0x3c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045dc:	d102      	bne.n	80045e4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80045de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e2:	e00b      	b.n	80045fc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80045e4:	4b08      	ldr	r3, [pc, #32]	; (8004608 <HAL_PWREx_GetVoltageRange+0x3c>)
 80045e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f2:	d102      	bne.n	80045fa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80045f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045f8:	e000      	b.n	80045fc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80045fa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40007000 	.word	0x40007000

0800460c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d141      	bne.n	800469e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800461a:	4b4b      	ldr	r3, [pc, #300]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004626:	d131      	bne.n	800468c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004628:	4b47      	ldr	r3, [pc, #284]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800462e:	4a46      	ldr	r2, [pc, #280]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004634:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004638:	4b43      	ldr	r3, [pc, #268]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004640:	4a41      	ldr	r2, [pc, #260]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004646:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004648:	4b40      	ldr	r3, [pc, #256]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2232      	movs	r2, #50	; 0x32
 800464e:	fb02 f303 	mul.w	r3, r2, r3
 8004652:	4a3f      	ldr	r2, [pc, #252]	; (8004750 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	0c9b      	lsrs	r3, r3, #18
 800465a:	3301      	adds	r3, #1
 800465c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800465e:	e002      	b.n	8004666 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3b01      	subs	r3, #1
 8004664:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004666:	4b38      	ldr	r3, [pc, #224]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004672:	d102      	bne.n	800467a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f2      	bne.n	8004660 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800467a:	4b33      	ldr	r3, [pc, #204]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004686:	d158      	bne.n	800473a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e057      	b.n	800473c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800468c:	4b2e      	ldr	r3, [pc, #184]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004692:	4a2d      	ldr	r2, [pc, #180]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004698:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800469c:	e04d      	b.n	800473a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a4:	d141      	bne.n	800472a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046a6:	4b28      	ldr	r3, [pc, #160]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b2:	d131      	bne.n	8004718 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046b4:	4b24      	ldr	r3, [pc, #144]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ba:	4a23      	ldr	r2, [pc, #140]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046c4:	4b20      	ldr	r3, [pc, #128]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046cc:	4a1e      	ldr	r2, [pc, #120]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80046d4:	4b1d      	ldr	r3, [pc, #116]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2232      	movs	r2, #50	; 0x32
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	4a1c      	ldr	r2, [pc, #112]	; (8004750 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046e0:	fba2 2303 	umull	r2, r3, r2, r3
 80046e4:	0c9b      	lsrs	r3, r3, #18
 80046e6:	3301      	adds	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ea:	e002      	b.n	80046f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046f2:	4b15      	ldr	r3, [pc, #84]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fe:	d102      	bne.n	8004706 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f2      	bne.n	80046ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004706:	4b10      	ldr	r3, [pc, #64]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004712:	d112      	bne.n	800473a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e011      	b.n	800473c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004718:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800471e:	4a0a      	ldr	r2, [pc, #40]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004724:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004728:	e007      	b.n	800473a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004732:	4a05      	ldr	r2, [pc, #20]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004734:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004738:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	40007000 	.word	0x40007000
 800474c:	20000048 	.word	0x20000048
 8004750:	431bde83 	.word	0x431bde83

08004754 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004758:	4b05      	ldr	r3, [pc, #20]	; (8004770 <HAL_PWREx_EnableVddIO2+0x1c>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4a04      	ldr	r2, [pc, #16]	; (8004770 <HAL_PWREx_EnableVddIO2+0x1c>)
 800475e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004762:	6053      	str	r3, [r2, #4]
}
 8004764:	bf00      	nop
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40007000 	.word	0x40007000

08004774 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d102      	bne.n	8004788 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f000 bc16 	b.w	8004fb4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004788:	4b96      	ldr	r3, [pc, #600]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 030c 	and.w	r3, r3, #12
 8004790:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004792:	4b94      	ldr	r3, [pc, #592]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80e4 	beq.w	8004972 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <HAL_RCC_OscConfig+0x4c>
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b0c      	cmp	r3, #12
 80047b4:	f040 808b 	bne.w	80048ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	f040 8087 	bne.w	80048ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047c0:	4b88      	ldr	r3, [pc, #544]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_OscConfig+0x64>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e3ed      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1a      	ldr	r2, [r3, #32]
 80047dc:	4b81      	ldr	r3, [pc, #516]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d004      	beq.n	80047f2 <HAL_RCC_OscConfig+0x7e>
 80047e8:	4b7e      	ldr	r3, [pc, #504]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f0:	e005      	b.n	80047fe <HAL_RCC_OscConfig+0x8a>
 80047f2:	4b7c      	ldr	r3, [pc, #496]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 80047f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047fe:	4293      	cmp	r3, r2
 8004800:	d223      	bcs.n	800484a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fdca 	bl	80053a0 <RCC_SetFlashLatencyFromMSIRange>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e3ce      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004816:	4b73      	ldr	r3, [pc, #460]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a72      	ldr	r2, [pc, #456]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 800481c:	f043 0308 	orr.w	r3, r3, #8
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	4b70      	ldr	r3, [pc, #448]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	496d      	ldr	r1, [pc, #436]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004830:	4313      	orrs	r3, r2
 8004832:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004834:	4b6b      	ldr	r3, [pc, #428]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	021b      	lsls	r3, r3, #8
 8004842:	4968      	ldr	r1, [pc, #416]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004844:	4313      	orrs	r3, r2
 8004846:	604b      	str	r3, [r1, #4]
 8004848:	e025      	b.n	8004896 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800484a:	4b66      	ldr	r3, [pc, #408]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a65      	ldr	r2, [pc, #404]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004850:	f043 0308 	orr.w	r3, r3, #8
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	4b63      	ldr	r3, [pc, #396]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	4960      	ldr	r1, [pc, #384]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004868:	4b5e      	ldr	r3, [pc, #376]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	021b      	lsls	r3, r3, #8
 8004876:	495b      	ldr	r1, [pc, #364]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004878:	4313      	orrs	r3, r2
 800487a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fd8a 	bl	80053a0 <RCC_SetFlashLatencyFromMSIRange>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e38e      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004896:	f000 fcbf 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 800489a:	4602      	mov	r2, r0
 800489c:	4b51      	ldr	r3, [pc, #324]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	4950      	ldr	r1, [pc, #320]	; (80049e8 <HAL_RCC_OscConfig+0x274>)
 80048a8:	5ccb      	ldrb	r3, [r1, r3]
 80048aa:	f003 031f 	and.w	r3, r3, #31
 80048ae:	fa22 f303 	lsr.w	r3, r2, r3
 80048b2:	4a4e      	ldr	r2, [pc, #312]	; (80049ec <HAL_RCC_OscConfig+0x278>)
 80048b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048b6:	4b4e      	ldr	r3, [pc, #312]	; (80049f0 <HAL_RCC_OscConfig+0x27c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fe fed2 	bl	8003664 <HAL_InitTick>
 80048c0:	4603      	mov	r3, r0
 80048c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d052      	beq.n	8004970 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	e372      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d032      	beq.n	800493c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048d6:	4b43      	ldr	r3, [pc, #268]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a42      	ldr	r2, [pc, #264]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 80048dc:	f043 0301 	orr.w	r3, r3, #1
 80048e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048e2:	f7fe ff0f 	bl	8003704 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048ea:	f7fe ff0b 	bl	8003704 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e35b      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048fc:	4b39      	ldr	r3, [pc, #228]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004908:	4b36      	ldr	r3, [pc, #216]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a35      	ldr	r2, [pc, #212]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 800490e:	f043 0308 	orr.w	r3, r3, #8
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	4b33      	ldr	r3, [pc, #204]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	4930      	ldr	r1, [pc, #192]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004922:	4313      	orrs	r3, r2
 8004924:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004926:	4b2f      	ldr	r3, [pc, #188]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	492b      	ldr	r1, [pc, #172]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004936:	4313      	orrs	r3, r2
 8004938:	604b      	str	r3, [r1, #4]
 800493a:	e01a      	b.n	8004972 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800493c:	4b29      	ldr	r3, [pc, #164]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a28      	ldr	r2, [pc, #160]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004948:	f7fe fedc 	bl	8003704 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004950:	f7fe fed8 	bl	8003704 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e328      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004962:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x1dc>
 800496e:	e000      	b.n	8004972 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004970:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d073      	beq.n	8004a66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b08      	cmp	r3, #8
 8004982:	d005      	beq.n	8004990 <HAL_RCC_OscConfig+0x21c>
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b0c      	cmp	r3, #12
 8004988:	d10e      	bne.n	80049a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b03      	cmp	r3, #3
 800498e:	d10b      	bne.n	80049a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004990:	4b14      	ldr	r3, [pc, #80]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d063      	beq.n	8004a64 <HAL_RCC_OscConfig+0x2f0>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d15f      	bne.n	8004a64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e305      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b0:	d106      	bne.n	80049c0 <HAL_RCC_OscConfig+0x24c>
 80049b2:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a0b      	ldr	r2, [pc, #44]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 80049b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	e025      	b.n	8004a0c <HAL_RCC_OscConfig+0x298>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049c8:	d114      	bne.n	80049f4 <HAL_RCC_OscConfig+0x280>
 80049ca:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a05      	ldr	r2, [pc, #20]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 80049d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	4b03      	ldr	r3, [pc, #12]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a02      	ldr	r2, [pc, #8]	; (80049e4 <HAL_RCC_OscConfig+0x270>)
 80049dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e013      	b.n	8004a0c <HAL_RCC_OscConfig+0x298>
 80049e4:	40021000 	.word	0x40021000
 80049e8:	0800b1b8 	.word	0x0800b1b8
 80049ec:	20000048 	.word	0x20000048
 80049f0:	2000004c 	.word	0x2000004c
 80049f4:	4ba0      	ldr	r3, [pc, #640]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a9f      	ldr	r2, [pc, #636]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 80049fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	4b9d      	ldr	r3, [pc, #628]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a9c      	ldr	r2, [pc, #624]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d013      	beq.n	8004a3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a14:	f7fe fe76 	bl	8003704 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a1c:	f7fe fe72 	bl	8003704 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b64      	cmp	r3, #100	; 0x64
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e2c2      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a2e:	4b92      	ldr	r3, [pc, #584]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x2a8>
 8004a3a:	e014      	b.n	8004a66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fe fe62 	bl	8003704 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a44:	f7fe fe5e 	bl	8003704 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b64      	cmp	r3, #100	; 0x64
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e2ae      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a56:	4b88      	ldr	r3, [pc, #544]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x2d0>
 8004a62:	e000      	b.n	8004a66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d060      	beq.n	8004b34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d005      	beq.n	8004a84 <HAL_RCC_OscConfig+0x310>
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b0c      	cmp	r3, #12
 8004a7c:	d119      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d116      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a84:	4b7c      	ldr	r3, [pc, #496]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCC_OscConfig+0x328>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e28b      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9c:	4b76      	ldr	r3, [pc, #472]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	061b      	lsls	r3, r3, #24
 8004aaa:	4973      	ldr	r1, [pc, #460]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab0:	e040      	b.n	8004b34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d023      	beq.n	8004b02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aba:	4b6f      	ldr	r3, [pc, #444]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a6e      	ldr	r2, [pc, #440]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac6:	f7fe fe1d 	bl	8003704 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ace:	f7fe fe19 	bl	8003704 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e269      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae0:	4b65      	ldr	r3, [pc, #404]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aec:	4b62      	ldr	r3, [pc, #392]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	061b      	lsls	r3, r3, #24
 8004afa:	495f      	ldr	r1, [pc, #380]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	604b      	str	r3, [r1, #4]
 8004b00:	e018      	b.n	8004b34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b02:	4b5d      	ldr	r3, [pc, #372]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a5c      	ldr	r2, [pc, #368]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0e:	f7fe fdf9 	bl	8003704 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b16:	f7fe fdf5 	bl	8003704 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e245      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b28:	4b53      	ldr	r3, [pc, #332]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f0      	bne.n	8004b16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d03c      	beq.n	8004bba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01c      	beq.n	8004b82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b48:	4b4b      	ldr	r3, [pc, #300]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b4e:	4a4a      	ldr	r2, [pc, #296]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b58:	f7fe fdd4 	bl	8003704 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b60:	f7fe fdd0 	bl	8003704 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e220      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b72:	4b41      	ldr	r3, [pc, #260]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0ef      	beq.n	8004b60 <HAL_RCC_OscConfig+0x3ec>
 8004b80:	e01b      	b.n	8004bba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b82:	4b3d      	ldr	r3, [pc, #244]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b88:	4a3b      	ldr	r2, [pc, #236]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004b8a:	f023 0301 	bic.w	r3, r3, #1
 8004b8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b92:	f7fe fdb7 	bl	8003704 <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9a:	f7fe fdb3 	bl	8003704 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e203      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bac:	4b32      	ldr	r3, [pc, #200]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1ef      	bne.n	8004b9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 80a6 	beq.w	8004d14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bcc:	4b2a      	ldr	r3, [pc, #168]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10d      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd8:	4b27      	ldr	r3, [pc, #156]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bdc:	4a26      	ldr	r2, [pc, #152]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be2:	6593      	str	r3, [r2, #88]	; 0x58
 8004be4:	4b24      	ldr	r3, [pc, #144]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bf4:	4b21      	ldr	r3, [pc, #132]	; (8004c7c <HAL_RCC_OscConfig+0x508>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d118      	bne.n	8004c32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c00:	4b1e      	ldr	r3, [pc, #120]	; (8004c7c <HAL_RCC_OscConfig+0x508>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1d      	ldr	r2, [pc, #116]	; (8004c7c <HAL_RCC_OscConfig+0x508>)
 8004c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c0c:	f7fe fd7a 	bl	8003704 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c14:	f7fe fd76 	bl	8003704 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e1c6      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c26:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <HAL_RCC_OscConfig+0x508>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d108      	bne.n	8004c4c <HAL_RCC_OscConfig+0x4d8>
 8004c3a:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c40:	4a0d      	ldr	r2, [pc, #52]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c4a:	e029      	b.n	8004ca0 <HAL_RCC_OscConfig+0x52c>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b05      	cmp	r3, #5
 8004c52:	d115      	bne.n	8004c80 <HAL_RCC_OscConfig+0x50c>
 8004c54:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	4a07      	ldr	r2, [pc, #28]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004c5c:	f043 0304 	orr.w	r3, r3, #4
 8004c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c64:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6a:	4a03      	ldr	r2, [pc, #12]	; (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004c6c:	f043 0301 	orr.w	r3, r3, #1
 8004c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c74:	e014      	b.n	8004ca0 <HAL_RCC_OscConfig+0x52c>
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	40007000 	.word	0x40007000
 8004c80:	4b9d      	ldr	r3, [pc, #628]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c86:	4a9c      	ldr	r2, [pc, #624]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004c88:	f023 0301 	bic.w	r3, r3, #1
 8004c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c90:	4b99      	ldr	r3, [pc, #612]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	4a98      	ldr	r2, [pc, #608]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004c98:	f023 0304 	bic.w	r3, r3, #4
 8004c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d016      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca8:	f7fe fd2c 	bl	8003704 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cae:	e00a      	b.n	8004cc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb0:	f7fe fd28 	bl	8003704 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e176      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cc6:	4b8c      	ldr	r3, [pc, #560]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0ed      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x53c>
 8004cd4:	e015      	b.n	8004d02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd6:	f7fe fd15 	bl	8003704 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cdc:	e00a      	b.n	8004cf4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cde:	f7fe fd11 	bl	8003704 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e15f      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cf4:	4b80      	ldr	r3, [pc, #512]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1ed      	bne.n	8004cde <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d02:	7ffb      	ldrb	r3, [r7, #31]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d105      	bne.n	8004d14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d08:	4b7b      	ldr	r3, [pc, #492]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0c:	4a7a      	ldr	r2, [pc, #488]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d03c      	beq.n	8004d9a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01c      	beq.n	8004d62 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d28:	4b73      	ldr	r3, [pc, #460]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d2e:	4a72      	ldr	r2, [pc, #456]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004d30:	f043 0301 	orr.w	r3, r3, #1
 8004d34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d38:	f7fe fce4 	bl	8003704 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d40:	f7fe fce0 	bl	8003704 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e130      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d52:	4b69      	ldr	r3, [pc, #420]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004d54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0ef      	beq.n	8004d40 <HAL_RCC_OscConfig+0x5cc>
 8004d60:	e01b      	b.n	8004d9a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d62:	4b65      	ldr	r3, [pc, #404]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d68:	4a63      	ldr	r2, [pc, #396]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d72:	f7fe fcc7 	bl	8003704 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d7a:	f7fe fcc3 	bl	8003704 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e113      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d8c:	4b5a      	ldr	r3, [pc, #360]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1ef      	bne.n	8004d7a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8107 	beq.w	8004fb2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	f040 80cf 	bne.w	8004f4c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004dae:	4b52      	ldr	r3, [pc, #328]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f003 0203 	and.w	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d12c      	bne.n	8004e1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d123      	bne.n	8004e1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dde:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d11b      	bne.n	8004e1c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d113      	bne.n	8004e1c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfe:	085b      	lsrs	r3, r3, #1
 8004e00:	3b01      	subs	r3, #1
 8004e02:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d109      	bne.n	8004e1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	3b01      	subs	r3, #1
 8004e16:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d071      	beq.n	8004f00 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	2b0c      	cmp	r3, #12
 8004e20:	d068      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e22:	4b35      	ldr	r3, [pc, #212]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d105      	bne.n	8004e3a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e2e:	4b32      	ldr	r3, [pc, #200]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e0ba      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e3e:	4b2e      	ldr	r3, [pc, #184]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a2d      	ldr	r2, [pc, #180]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004e44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e48:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e4a:	f7fe fc5b 	bl	8003704 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e52:	f7fe fc57 	bl	8003704 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e0a7      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e64:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f0      	bne.n	8004e52 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e70:	4b21      	ldr	r3, [pc, #132]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	4b21      	ldr	r3, [pc, #132]	; (8004efc <HAL_RCC_OscConfig+0x788>)
 8004e76:	4013      	ands	r3, r2
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e80:	3a01      	subs	r2, #1
 8004e82:	0112      	lsls	r2, r2, #4
 8004e84:	4311      	orrs	r1, r2
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e8a:	0212      	lsls	r2, r2, #8
 8004e8c:	4311      	orrs	r1, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e92:	0852      	lsrs	r2, r2, #1
 8004e94:	3a01      	subs	r2, #1
 8004e96:	0552      	lsls	r2, r2, #21
 8004e98:	4311      	orrs	r1, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e9e:	0852      	lsrs	r2, r2, #1
 8004ea0:	3a01      	subs	r2, #1
 8004ea2:	0652      	lsls	r2, r2, #25
 8004ea4:	4311      	orrs	r1, r2
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004eaa:	06d2      	lsls	r2, r2, #27
 8004eac:	430a      	orrs	r2, r1
 8004eae:	4912      	ldr	r1, [pc, #72]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004eb4:	4b10      	ldr	r3, [pc, #64]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a0f      	ldr	r2, [pc, #60]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ebe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ec0:	4b0d      	ldr	r3, [pc, #52]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	4a0c      	ldr	r2, [pc, #48]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ecc:	f7fe fc1a 	bl	8003704 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed4:	f7fe fc16 	bl	8003704 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e066      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ee6:	4b04      	ldr	r3, [pc, #16]	; (8004ef8 <HAL_RCC_OscConfig+0x784>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f0      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ef2:	e05e      	b.n	8004fb2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e05d      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f00:	4b2e      	ldr	r3, [pc, #184]	; (8004fbc <HAL_RCC_OscConfig+0x848>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d152      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f0c:	4b2b      	ldr	r3, [pc, #172]	; (8004fbc <HAL_RCC_OscConfig+0x848>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a2a      	ldr	r2, [pc, #168]	; (8004fbc <HAL_RCC_OscConfig+0x848>)
 8004f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f18:	4b28      	ldr	r3, [pc, #160]	; (8004fbc <HAL_RCC_OscConfig+0x848>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4a27      	ldr	r2, [pc, #156]	; (8004fbc <HAL_RCC_OscConfig+0x848>)
 8004f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f24:	f7fe fbee 	bl	8003704 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2c:	f7fe fbea 	bl	8003704 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e03a      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f3e:	4b1f      	ldr	r3, [pc, #124]	; (8004fbc <HAL_RCC_OscConfig+0x848>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x7b8>
 8004f4a:	e032      	b.n	8004fb2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b0c      	cmp	r3, #12
 8004f50:	d02d      	beq.n	8004fae <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f52:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <HAL_RCC_OscConfig+0x848>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a19      	ldr	r2, [pc, #100]	; (8004fbc <HAL_RCC_OscConfig+0x848>)
 8004f58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f5c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004f5e:	4b17      	ldr	r3, [pc, #92]	; (8004fbc <HAL_RCC_OscConfig+0x848>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d105      	bne.n	8004f76 <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f6a:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <HAL_RCC_OscConfig+0x848>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	4a13      	ldr	r2, [pc, #76]	; (8004fbc <HAL_RCC_OscConfig+0x848>)
 8004f70:	f023 0303 	bic.w	r3, r3, #3
 8004f74:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f76:	4b11      	ldr	r3, [pc, #68]	; (8004fbc <HAL_RCC_OscConfig+0x848>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	4a10      	ldr	r2, [pc, #64]	; (8004fbc <HAL_RCC_OscConfig+0x848>)
 8004f7c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f84:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f86:	f7fe fbbd 	bl	8003704 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8e:	f7fe fbb9 	bl	8003704 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e009      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <HAL_RCC_OscConfig+0x848>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f0      	bne.n	8004f8e <HAL_RCC_OscConfig+0x81a>
 8004fac:	e001      	b.n	8004fb2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3720      	adds	r7, #32
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40021000 	.word	0x40021000

08004fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e10f      	b.n	80051f8 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd8:	4b89      	ldr	r3, [pc, #548]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 030f 	and.w	r3, r3, #15
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d910      	bls.n	8005008 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe6:	4b86      	ldr	r3, [pc, #536]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f023 020f 	bic.w	r2, r3, #15
 8004fee:	4984      	ldr	r1, [pc, #528]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff6:	4b82      	ldr	r3, [pc, #520]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d001      	beq.n	8005008 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0f7      	b.n	80051f8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 8089 	beq.w	8005128 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b03      	cmp	r3, #3
 800501c:	d133      	bne.n	8005086 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800501e:	4b79      	ldr	r3, [pc, #484]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e0e4      	b.n	80051f8 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800502e:	f000 fa11 	bl	8005454 <RCC_GetSysClockFreqFromPLLSource>
 8005032:	4603      	mov	r3, r0
 8005034:	4a74      	ldr	r2, [pc, #464]	; (8005208 <HAL_RCC_ClockConfig+0x248>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d955      	bls.n	80050e6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800503a:	4b72      	ldr	r3, [pc, #456]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005046:	4b6f      	ldr	r3, [pc, #444]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504e:	4a6d      	ldr	r2, [pc, #436]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005054:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005056:	2380      	movs	r3, #128	; 0x80
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	e044      	b.n	80050e6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d03e      	beq.n	80050e6 <HAL_RCC_ClockConfig+0x126>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d13a      	bne.n	80050e6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005070:	4b64      	ldr	r3, [pc, #400]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005078:	4a62      	ldr	r2, [pc, #392]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 800507a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005080:	2380      	movs	r3, #128	; 0x80
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e02f      	b.n	80050e6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d107      	bne.n	800509e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800508e:	4b5d      	ldr	r3, [pc, #372]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d115      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e0ac      	b.n	80051f8 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d107      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050a6:	4b57      	ldr	r3, [pc, #348]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d109      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e0a0      	b.n	80051f8 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050b6:	4b53      	ldr	r3, [pc, #332]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e098      	b.n	80051f8 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80050c6:	f000 f8a7 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 80050ca:	4603      	mov	r3, r0
 80050cc:	4a4e      	ldr	r2, [pc, #312]	; (8005208 <HAL_RCC_ClockConfig+0x248>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d909      	bls.n	80050e6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050d2:	4b4c      	ldr	r3, [pc, #304]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050da:	4a4a      	ldr	r2, [pc, #296]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050e6:	4b47      	ldr	r3, [pc, #284]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f023 0203 	bic.w	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	4944      	ldr	r1, [pc, #272]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f8:	f7fe fb04 	bl	8003704 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fe:	e00a      	b.n	8005116 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005100:	f7fe fb00 	bl	8003704 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f241 3288 	movw	r2, #5000	; 0x1388
 800510e:	4293      	cmp	r3, r2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e070      	b.n	80051f8 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005116:	4b3b      	ldr	r3, [pc, #236]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 020c 	and.w	r2, r3, #12
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	429a      	cmp	r2, r3
 8005126:	d1eb      	bne.n	8005100 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d009      	beq.n	8005148 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005134:	4b33      	ldr	r3, [pc, #204]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	4930      	ldr	r1, [pc, #192]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005142:	4313      	orrs	r3, r2
 8005144:	608b      	str	r3, [r1, #8]
 8005146:	e008      	b.n	800515a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2b80      	cmp	r3, #128	; 0x80
 800514c:	d105      	bne.n	800515a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800514e:	4b2d      	ldr	r3, [pc, #180]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	4a2c      	ldr	r2, [pc, #176]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005154:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005158:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800515a:	4b29      	ldr	r3, [pc, #164]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d210      	bcs.n	800518a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005168:	4b25      	ldr	r3, [pc, #148]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f023 020f 	bic.w	r2, r3, #15
 8005170:	4923      	ldr	r1, [pc, #140]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	4313      	orrs	r3, r2
 8005176:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005178:	4b21      	ldr	r3, [pc, #132]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d001      	beq.n	800518a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e036      	b.n	80051f8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	d008      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005196:	4b1b      	ldr	r3, [pc, #108]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	4918      	ldr	r1, [pc, #96]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d009      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051b4:	4b13      	ldr	r3, [pc, #76]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4910      	ldr	r1, [pc, #64]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051c8:	f000 f826 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 80051cc:	4602      	mov	r2, r0
 80051ce:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	490c      	ldr	r1, [pc, #48]	; (800520c <HAL_RCC_ClockConfig+0x24c>)
 80051da:	5ccb      	ldrb	r3, [r1, r3]
 80051dc:	f003 031f 	and.w	r3, r3, #31
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
 80051e4:	4a0a      	ldr	r2, [pc, #40]	; (8005210 <HAL_RCC_ClockConfig+0x250>)
 80051e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051e8:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <HAL_RCC_ClockConfig+0x254>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fe fa39 	bl	8003664 <HAL_InitTick>
 80051f2:	4603      	mov	r3, r0
 80051f4:	73fb      	strb	r3, [r7, #15]

  return status;
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40022000 	.word	0x40022000
 8005204:	40021000 	.word	0x40021000
 8005208:	04c4b400 	.word	0x04c4b400
 800520c:	0800b1b8 	.word	0x0800b1b8
 8005210:	20000048 	.word	0x20000048
 8005214:	2000004c 	.word	0x2000004c

08005218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005218:	b480      	push	{r7}
 800521a:	b089      	sub	sp, #36	; 0x24
 800521c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005226:	4b3e      	ldr	r3, [pc, #248]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 030c 	and.w	r3, r3, #12
 800522e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005230:	4b3b      	ldr	r3, [pc, #236]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0303 	and.w	r3, r3, #3
 8005238:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d005      	beq.n	800524c <HAL_RCC_GetSysClockFreq+0x34>
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b0c      	cmp	r3, #12
 8005244:	d121      	bne.n	800528a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d11e      	bne.n	800528a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800524c:	4b34      	ldr	r3, [pc, #208]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d107      	bne.n	8005268 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005258:	4b31      	ldr	r3, [pc, #196]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 800525a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800525e:	0a1b      	lsrs	r3, r3, #8
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	e005      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005268:	4b2d      	ldr	r3, [pc, #180]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005274:	4a2b      	ldr	r2, [pc, #172]	; (8005324 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10d      	bne.n	80052a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005288:	e00a      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b04      	cmp	r3, #4
 800528e:	d102      	bne.n	8005296 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005290:	4b25      	ldr	r3, [pc, #148]	; (8005328 <HAL_RCC_GetSysClockFreq+0x110>)
 8005292:	61bb      	str	r3, [r7, #24]
 8005294:	e004      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b08      	cmp	r3, #8
 800529a:	d101      	bne.n	80052a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800529c:	4b23      	ldr	r3, [pc, #140]	; (800532c <HAL_RCC_GetSysClockFreq+0x114>)
 800529e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	2b0c      	cmp	r3, #12
 80052a4:	d134      	bne.n	8005310 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052a6:	4b1e      	ldr	r3, [pc, #120]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d003      	beq.n	80052be <HAL_RCC_GetSysClockFreq+0xa6>
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d003      	beq.n	80052c4 <HAL_RCC_GetSysClockFreq+0xac>
 80052bc:	e005      	b.n	80052ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052be:	4b1a      	ldr	r3, [pc, #104]	; (8005328 <HAL_RCC_GetSysClockFreq+0x110>)
 80052c0:	617b      	str	r3, [r7, #20]
      break;
 80052c2:	e005      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052c4:	4b19      	ldr	r3, [pc, #100]	; (800532c <HAL_RCC_GetSysClockFreq+0x114>)
 80052c6:	617b      	str	r3, [r7, #20]
      break;
 80052c8:	e002      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	617b      	str	r3, [r7, #20]
      break;
 80052ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052d0:	4b13      	ldr	r3, [pc, #76]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	3301      	adds	r3, #1
 80052dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052de:	4b10      	ldr	r3, [pc, #64]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	fb03 f202 	mul.w	r2, r3, r2
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052f6:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	0e5b      	lsrs	r3, r3, #25
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	3301      	adds	r3, #1
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	fbb2 f3f3 	udiv	r3, r2, r3
 800530e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005310:	69bb      	ldr	r3, [r7, #24]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3724      	adds	r7, #36	; 0x24
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40021000 	.word	0x40021000
 8005324:	0800b1d0 	.word	0x0800b1d0
 8005328:	00f42400 	.word	0x00f42400
 800532c:	007a1200 	.word	0x007a1200

08005330 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005334:	4b03      	ldr	r3, [pc, #12]	; (8005344 <HAL_RCC_GetHCLKFreq+0x14>)
 8005336:	681b      	ldr	r3, [r3, #0]
}
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000048 	.word	0x20000048

08005348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800534c:	f7ff fff0 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 8005350:	4602      	mov	r2, r0
 8005352:	4b06      	ldr	r3, [pc, #24]	; (800536c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	0a1b      	lsrs	r3, r3, #8
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	4904      	ldr	r1, [pc, #16]	; (8005370 <HAL_RCC_GetPCLK1Freq+0x28>)
 800535e:	5ccb      	ldrb	r3, [r1, r3]
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005368:	4618      	mov	r0, r3
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40021000 	.word	0x40021000
 8005370:	0800b1c8 	.word	0x0800b1c8

08005374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005378:	f7ff ffda 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 800537c:	4602      	mov	r2, r0
 800537e:	4b06      	ldr	r3, [pc, #24]	; (8005398 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	0adb      	lsrs	r3, r3, #11
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	4904      	ldr	r1, [pc, #16]	; (800539c <HAL_RCC_GetPCLK2Freq+0x28>)
 800538a:	5ccb      	ldrb	r3, [r1, r3]
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005394:	4618      	mov	r0, r3
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40021000 	.word	0x40021000
 800539c:	0800b1c8 	.word	0x0800b1c8

080053a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053a8:	2300      	movs	r3, #0
 80053aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053ac:	4b27      	ldr	r3, [pc, #156]	; (800544c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053b8:	f7ff f908 	bl	80045cc <HAL_PWREx_GetVoltageRange>
 80053bc:	6178      	str	r0, [r7, #20]
 80053be:	e014      	b.n	80053ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053c0:	4b22      	ldr	r3, [pc, #136]	; (800544c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c4:	4a21      	ldr	r2, [pc, #132]	; (800544c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ca:	6593      	str	r3, [r2, #88]	; 0x58
 80053cc:	4b1f      	ldr	r3, [pc, #124]	; (800544c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053d8:	f7ff f8f8 	bl	80045cc <HAL_PWREx_GetVoltageRange>
 80053dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053de:	4b1b      	ldr	r3, [pc, #108]	; (800544c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e2:	4a1a      	ldr	r2, [pc, #104]	; (800544c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f0:	d10b      	bne.n	800540a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b80      	cmp	r3, #128	; 0x80
 80053f6:	d913      	bls.n	8005420 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2ba0      	cmp	r3, #160	; 0xa0
 80053fc:	d902      	bls.n	8005404 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053fe:	2302      	movs	r3, #2
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	e00d      	b.n	8005420 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005404:	2301      	movs	r3, #1
 8005406:	613b      	str	r3, [r7, #16]
 8005408:	e00a      	b.n	8005420 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b7f      	cmp	r3, #127	; 0x7f
 800540e:	d902      	bls.n	8005416 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005410:	2302      	movs	r3, #2
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	e004      	b.n	8005420 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b70      	cmp	r3, #112	; 0x70
 800541a:	d101      	bne.n	8005420 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800541c:	2301      	movs	r3, #1
 800541e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005420:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f023 020f 	bic.w	r2, r3, #15
 8005428:	4909      	ldr	r1, [pc, #36]	; (8005450 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005430:	4b07      	ldr	r3, [pc, #28]	; (8005450 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 030f 	and.w	r3, r3, #15
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	429a      	cmp	r2, r3
 800543c:	d001      	beq.n	8005442 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40021000 	.word	0x40021000
 8005450:	40022000 	.word	0x40022000

08005454 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800545e:	4b2d      	ldr	r3, [pc, #180]	; (8005514 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b01      	cmp	r3, #1
 8005468:	d118      	bne.n	800549c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800546a:	4b2a      	ldr	r3, [pc, #168]	; (8005514 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d107      	bne.n	8005486 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005476:	4b27      	ldr	r3, [pc, #156]	; (8005514 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800547c:	0a1b      	lsrs	r3, r3, #8
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	e005      	b.n	8005492 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005486:	4b23      	ldr	r3, [pc, #140]	; (8005514 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	091b      	lsrs	r3, r3, #4
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005492:	4a21      	ldr	r2, [pc, #132]	; (8005518 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800549a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800549c:	4b1d      	ldr	r3, [pc, #116]	; (8005514 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0303 	and.w	r3, r3, #3
 80054a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d003      	beq.n	80054b4 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d003      	beq.n	80054ba <RCC_GetSysClockFreqFromPLLSource+0x66>
 80054b2:	e005      	b.n	80054c0 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80054b4:	4b19      	ldr	r3, [pc, #100]	; (800551c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80054b6:	613b      	str	r3, [r7, #16]
    break;
 80054b8:	e005      	b.n	80054c6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80054ba:	4b19      	ldr	r3, [pc, #100]	; (8005520 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80054bc:	613b      	str	r3, [r7, #16]
    break;
 80054be:	e002      	b.n	80054c6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	613b      	str	r3, [r7, #16]
    break;
 80054c4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054c6:	4b13      	ldr	r3, [pc, #76]	; (8005514 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	091b      	lsrs	r3, r3, #4
 80054cc:	f003 030f 	and.w	r3, r3, #15
 80054d0:	3301      	adds	r3, #1
 80054d2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054d4:	4b0f      	ldr	r3, [pc, #60]	; (8005514 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	0a1b      	lsrs	r3, r3, #8
 80054da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	fb03 f202 	mul.w	r2, r3, r2
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ea:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054ec:	4b09      	ldr	r3, [pc, #36]	; (8005514 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	0e5b      	lsrs	r3, r3, #25
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	3301      	adds	r3, #1
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	fbb2 f3f3 	udiv	r3, r2, r3
 8005504:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005506:	683b      	ldr	r3, [r7, #0]
}
 8005508:	4618      	mov	r0, r3
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	40021000 	.word	0x40021000
 8005518:	0800b1d0 	.word	0x0800b1d0
 800551c:	00f42400 	.word	0x00f42400
 8005520:	007a1200 	.word	0x007a1200

08005524 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800552c:	2300      	movs	r3, #0
 800552e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005530:	2300      	movs	r3, #0
 8005532:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800553c:	2b00      	cmp	r3, #0
 800553e:	d040      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005544:	2b80      	cmp	r3, #128	; 0x80
 8005546:	d02a      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005548:	2b80      	cmp	r3, #128	; 0x80
 800554a:	d825      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800554c:	2b60      	cmp	r3, #96	; 0x60
 800554e:	d026      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005550:	2b60      	cmp	r3, #96	; 0x60
 8005552:	d821      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005554:	2b40      	cmp	r3, #64	; 0x40
 8005556:	d006      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005558:	2b40      	cmp	r3, #64	; 0x40
 800555a:	d81d      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800555c:	2b00      	cmp	r3, #0
 800555e:	d009      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005560:	2b20      	cmp	r3, #32
 8005562:	d010      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005564:	e018      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005566:	4b89      	ldr	r3, [pc, #548]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	4a88      	ldr	r2, [pc, #544]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800556c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005570:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005572:	e015      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3304      	adds	r3, #4
 8005578:	2100      	movs	r1, #0
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fb02 	bl	8005b84 <RCCEx_PLLSAI1_Config>
 8005580:	4603      	mov	r3, r0
 8005582:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005584:	e00c      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3320      	adds	r3, #32
 800558a:	2100      	movs	r1, #0
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fbed 	bl	8005d6c <RCCEx_PLLSAI2_Config>
 8005592:	4603      	mov	r3, r0
 8005594:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005596:	e003      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	74fb      	strb	r3, [r7, #19]
      break;
 800559c:	e000      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800559e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055a0:	7cfb      	ldrb	r3, [r7, #19]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10b      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055a6:	4b79      	ldr	r3, [pc, #484]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055ac:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055b4:	4975      	ldr	r1, [pc, #468]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80055bc:	e001      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055be:	7cfb      	ldrb	r3, [r7, #19]
 80055c0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d047      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d6:	d030      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80055d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055dc:	d82a      	bhi.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80055de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e2:	d02a      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80055e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e8:	d824      	bhi.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80055ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ee:	d008      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80055f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f4:	d81e      	bhi.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80055fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055fe:	d010      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005600:	e018      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005602:	4b62      	ldr	r3, [pc, #392]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	4a61      	ldr	r2, [pc, #388]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800560c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800560e:	e015      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3304      	adds	r3, #4
 8005614:	2100      	movs	r1, #0
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fab4 	bl	8005b84 <RCCEx_PLLSAI1_Config>
 800561c:	4603      	mov	r3, r0
 800561e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005620:	e00c      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3320      	adds	r3, #32
 8005626:	2100      	movs	r1, #0
 8005628:	4618      	mov	r0, r3
 800562a:	f000 fb9f 	bl	8005d6c <RCCEx_PLLSAI2_Config>
 800562e:	4603      	mov	r3, r0
 8005630:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005632:	e003      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	74fb      	strb	r3, [r7, #19]
      break;
 8005638:	e000      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800563a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800563c:	7cfb      	ldrb	r3, [r7, #19]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10b      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005642:	4b52      	ldr	r3, [pc, #328]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005644:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005650:	494e      	ldr	r1, [pc, #312]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005658:	e001      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565a:	7cfb      	ldrb	r3, [r7, #19]
 800565c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 809f 	beq.w	80057aa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800566c:	2300      	movs	r3, #0
 800566e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005670:	4b46      	ldr	r3, [pc, #280]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005680:	2300      	movs	r3, #0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00d      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005686:	4b41      	ldr	r3, [pc, #260]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568a:	4a40      	ldr	r2, [pc, #256]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800568c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005690:	6593      	str	r3, [r2, #88]	; 0x58
 8005692:	4b3e      	ldr	r3, [pc, #248]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800569a:	60bb      	str	r3, [r7, #8]
 800569c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800569e:	2301      	movs	r3, #1
 80056a0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056a2:	4b3b      	ldr	r3, [pc, #236]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a3a      	ldr	r2, [pc, #232]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80056a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056ae:	f7fe f829 	bl	8003704 <HAL_GetTick>
 80056b2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056b4:	e009      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b6:	f7fe f825 	bl	8003704 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d902      	bls.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	74fb      	strb	r3, [r7, #19]
        break;
 80056c8:	e005      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056ca:	4b31      	ldr	r3, [pc, #196]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0ef      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80056d6:	7cfb      	ldrb	r3, [r7, #19]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d15b      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056dc:	4b2b      	ldr	r3, [pc, #172]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d01f      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d019      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056fa:	4b24      	ldr	r3, [pc, #144]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005704:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005706:	4b21      	ldr	r3, [pc, #132]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570c:	4a1f      	ldr	r2, [pc, #124]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800570e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005716:	4b1d      	ldr	r3, [pc, #116]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571c:	4a1b      	ldr	r2, [pc, #108]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800571e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005726:	4a19      	ldr	r2, [pc, #100]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d016      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005738:	f7fd ffe4 	bl	8003704 <HAL_GetTick>
 800573c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800573e:	e00b      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005740:	f7fd ffe0 	bl	8003704 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	f241 3288 	movw	r2, #5000	; 0x1388
 800574e:	4293      	cmp	r3, r2
 8005750:	d902      	bls.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	74fb      	strb	r3, [r7, #19]
            break;
 8005756:	e006      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005758:	4b0c      	ldr	r3, [pc, #48]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0ec      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005766:	7cfb      	ldrb	r3, [r7, #19]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10c      	bne.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800576c:	4b07      	ldr	r3, [pc, #28]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005772:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577c:	4903      	ldr	r1, [pc, #12]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005784:	e008      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005786:	7cfb      	ldrb	r3, [r7, #19]
 8005788:	74bb      	strb	r3, [r7, #18]
 800578a:	e005      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800578c:	40021000 	.word	0x40021000
 8005790:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005794:	7cfb      	ldrb	r3, [r7, #19]
 8005796:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005798:	7c7b      	ldrb	r3, [r7, #17]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d105      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800579e:	4ba0      	ldr	r3, [pc, #640]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a2:	4a9f      	ldr	r2, [pc, #636]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057b6:	4b9a      	ldr	r3, [pc, #616]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057bc:	f023 0203 	bic.w	r2, r3, #3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c4:	4996      	ldr	r1, [pc, #600]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00a      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057d8:	4b91      	ldr	r3, [pc, #580]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057de:	f023 020c 	bic.w	r2, r3, #12
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	498e      	ldr	r1, [pc, #568]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057fa:	4b89      	ldr	r3, [pc, #548]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005800:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005808:	4985      	ldr	r1, [pc, #532]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800581c:	4b80      	ldr	r3, [pc, #512]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005822:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800582a:	497d      	ldr	r1, [pc, #500]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0310 	and.w	r3, r3, #16
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800583e:	4b78      	ldr	r3, [pc, #480]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584c:	4974      	ldr	r1, [pc, #464]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800584e:	4313      	orrs	r3, r2
 8005850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005860:	4b6f      	ldr	r3, [pc, #444]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005866:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586e:	496c      	ldr	r1, [pc, #432]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005882:	4b67      	ldr	r3, [pc, #412]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005888:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005890:	4963      	ldr	r1, [pc, #396]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058a4:	4b5e      	ldr	r3, [pc, #376]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058b2:	495b      	ldr	r1, [pc, #364]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058c6:	4b56      	ldr	r3, [pc, #344]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d4:	4952      	ldr	r1, [pc, #328]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058e8:	4b4d      	ldr	r3, [pc, #308]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f6:	494a      	ldr	r1, [pc, #296]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800590a:	4b45      	ldr	r3, [pc, #276]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800590c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005910:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005918:	4941      	ldr	r1, [pc, #260]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800592c:	4b3c      	ldr	r3, [pc, #240]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800592e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005932:	f023 0203 	bic.w	r2, r3, #3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800593a:	4939      	ldr	r1, [pc, #228]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d028      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800594e:	4b34      	ldr	r3, [pc, #208]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005954:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800595c:	4930      	ldr	r1, [pc, #192]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800596c:	d106      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800596e:	4b2c      	ldr	r3, [pc, #176]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	4a2b      	ldr	r2, [pc, #172]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005978:	60d3      	str	r3, [r2, #12]
 800597a:	e011      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005980:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005984:	d10c      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3304      	adds	r3, #4
 800598a:	2101      	movs	r1, #1
 800598c:	4618      	mov	r0, r3
 800598e:	f000 f8f9 	bl	8005b84 <RCCEx_PLLSAI1_Config>
 8005992:	4603      	mov	r3, r0
 8005994:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005996:	7cfb      	ldrb	r3, [r7, #19]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800599c:	7cfb      	ldrb	r3, [r7, #19]
 800599e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d04d      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059b4:	d108      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80059b6:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059bc:	4a18      	ldr	r2, [pc, #96]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80059c6:	e012      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80059c8:	4b15      	ldr	r3, [pc, #84]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059ce:	4a14      	ldr	r2, [pc, #80]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059d4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80059d8:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059e6:	490e      	ldr	r1, [pc, #56]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059f6:	d106      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059f8:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	4a08      	ldr	r2, [pc, #32]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a02:	60d3      	str	r3, [r2, #12]
 8005a04:	e020      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a0e:	d109      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a10:	4b03      	ldr	r3, [pc, #12]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	4a02      	ldr	r2, [pc, #8]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a1a:	60d3      	str	r3, [r2, #12]
 8005a1c:	e014      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005a1e:	bf00      	nop
 8005a20:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a2c:	d10c      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3304      	adds	r3, #4
 8005a32:	2101      	movs	r1, #1
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 f8a5 	bl	8005b84 <RCCEx_PLLSAI1_Config>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a3e:	7cfb      	ldrb	r3, [r7, #19]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005a44:	7cfb      	ldrb	r3, [r7, #19]
 8005a46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d028      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a54:	4b4a      	ldr	r3, [pc, #296]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a62:	4947      	ldr	r1, [pc, #284]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a72:	d106      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a74:	4b42      	ldr	r3, [pc, #264]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	4a41      	ldr	r2, [pc, #260]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a7e:	60d3      	str	r3, [r2, #12]
 8005a80:	e011      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a8a:	d10c      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3304      	adds	r3, #4
 8005a90:	2101      	movs	r1, #1
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 f876 	bl	8005b84 <RCCEx_PLLSAI1_Config>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a9c:	7cfb      	ldrb	r3, [r7, #19]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005aa2:	7cfb      	ldrb	r3, [r7, #19]
 8005aa4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d01e      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ab2:	4b33      	ldr	r3, [pc, #204]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ac2:	492f      	ldr	r1, [pc, #188]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ad4:	d10c      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	2102      	movs	r1, #2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 f851 	bl	8005b84 <RCCEx_PLLSAI1_Config>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ae6:	7cfb      	ldrb	r3, [r7, #19]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005aec:	7cfb      	ldrb	r3, [r7, #19]
 8005aee:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00b      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005afc:	4b20      	ldr	r3, [pc, #128]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b02:	f023 0204 	bic.w	r2, r3, #4
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b0c:	491c      	ldr	r1, [pc, #112]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00b      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005b20:	4b17      	ldr	r3, [pc, #92]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b26:	f023 0218 	bic.w	r2, r3, #24
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b30:	4913      	ldr	r1, [pc, #76]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d017      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005b44:	4b0e      	ldr	r3, [pc, #56]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b54:	490a      	ldr	r1, [pc, #40]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b66:	d105      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b68:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	4a04      	ldr	r2, [pc, #16]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b74:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	40021000 	.word	0x40021000

08005b84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b92:	4b72      	ldr	r3, [pc, #456]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00e      	beq.n	8005bbc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b9e:	4b6f      	ldr	r3, [pc, #444]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f003 0203 	and.w	r2, r3, #3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d103      	bne.n	8005bb6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
       ||
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d142      	bne.n	8005c3c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	73fb      	strb	r3, [r7, #15]
 8005bba:	e03f      	b.n	8005c3c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d018      	beq.n	8005bf6 <RCCEx_PLLSAI1_Config+0x72>
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d825      	bhi.n	8005c14 <RCCEx_PLLSAI1_Config+0x90>
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d002      	beq.n	8005bd2 <RCCEx_PLLSAI1_Config+0x4e>
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d009      	beq.n	8005be4 <RCCEx_PLLSAI1_Config+0x60>
 8005bd0:	e020      	b.n	8005c14 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005bd2:	4b62      	ldr	r3, [pc, #392]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d11d      	bne.n	8005c1a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005be2:	e01a      	b.n	8005c1a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005be4:	4b5d      	ldr	r3, [pc, #372]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d116      	bne.n	8005c1e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bf4:	e013      	b.n	8005c1e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005bf6:	4b59      	ldr	r3, [pc, #356]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10f      	bne.n	8005c22 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c02:	4b56      	ldr	r3, [pc, #344]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d109      	bne.n	8005c22 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c12:	e006      	b.n	8005c22 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	73fb      	strb	r3, [r7, #15]
      break;
 8005c18:	e004      	b.n	8005c24 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005c1a:	bf00      	nop
 8005c1c:	e002      	b.n	8005c24 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005c1e:	bf00      	nop
 8005c20:	e000      	b.n	8005c24 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005c22:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d108      	bne.n	8005c3c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005c2a:	4b4c      	ldr	r3, [pc, #304]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f023 0203 	bic.w	r2, r3, #3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4949      	ldr	r1, [pc, #292]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f040 8086 	bne.w	8005d50 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c44:	4b45      	ldr	r3, [pc, #276]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a44      	ldr	r2, [pc, #272]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c50:	f7fd fd58 	bl	8003704 <HAL_GetTick>
 8005c54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c56:	e009      	b.n	8005c6c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c58:	f7fd fd54 	bl	8003704 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d902      	bls.n	8005c6c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	73fb      	strb	r3, [r7, #15]
        break;
 8005c6a:	e005      	b.n	8005c78 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c6c:	4b3b      	ldr	r3, [pc, #236]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1ef      	bne.n	8005c58 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d168      	bne.n	8005d50 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d113      	bne.n	8005cac <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c84:	4b35      	ldr	r3, [pc, #212]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c86:	691a      	ldr	r2, [r3, #16]
 8005c88:	4b35      	ldr	r3, [pc, #212]	; (8005d60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6892      	ldr	r2, [r2, #8]
 8005c90:	0211      	lsls	r1, r2, #8
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	68d2      	ldr	r2, [r2, #12]
 8005c96:	06d2      	lsls	r2, r2, #27
 8005c98:	4311      	orrs	r1, r2
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6852      	ldr	r2, [r2, #4]
 8005c9e:	3a01      	subs	r2, #1
 8005ca0:	0112      	lsls	r2, r2, #4
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	492d      	ldr	r1, [pc, #180]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	610b      	str	r3, [r1, #16]
 8005caa:	e02d      	b.n	8005d08 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d115      	bne.n	8005cde <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cb2:	4b2a      	ldr	r3, [pc, #168]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cb4:	691a      	ldr	r2, [r3, #16]
 8005cb6:	4b2b      	ldr	r3, [pc, #172]	; (8005d64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6892      	ldr	r2, [r2, #8]
 8005cbe:	0211      	lsls	r1, r2, #8
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6912      	ldr	r2, [r2, #16]
 8005cc4:	0852      	lsrs	r2, r2, #1
 8005cc6:	3a01      	subs	r2, #1
 8005cc8:	0552      	lsls	r2, r2, #21
 8005cca:	4311      	orrs	r1, r2
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6852      	ldr	r2, [r2, #4]
 8005cd0:	3a01      	subs	r2, #1
 8005cd2:	0112      	lsls	r2, r2, #4
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	4921      	ldr	r1, [pc, #132]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	610b      	str	r3, [r1, #16]
 8005cdc:	e014      	b.n	8005d08 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cde:	4b1f      	ldr	r3, [pc, #124]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ce0:	691a      	ldr	r2, [r3, #16]
 8005ce2:	4b21      	ldr	r3, [pc, #132]	; (8005d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6892      	ldr	r2, [r2, #8]
 8005cea:	0211      	lsls	r1, r2, #8
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6952      	ldr	r2, [r2, #20]
 8005cf0:	0852      	lsrs	r2, r2, #1
 8005cf2:	3a01      	subs	r2, #1
 8005cf4:	0652      	lsls	r2, r2, #25
 8005cf6:	4311      	orrs	r1, r2
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6852      	ldr	r2, [r2, #4]
 8005cfc:	3a01      	subs	r2, #1
 8005cfe:	0112      	lsls	r2, r2, #4
 8005d00:	430a      	orrs	r2, r1
 8005d02:	4916      	ldr	r1, [pc, #88]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d08:	4b14      	ldr	r3, [pc, #80]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a13      	ldr	r2, [pc, #76]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d14:	f7fd fcf6 	bl	8003704 <HAL_GetTick>
 8005d18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d1a:	e009      	b.n	8005d30 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d1c:	f7fd fcf2 	bl	8003704 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d902      	bls.n	8005d30 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	73fb      	strb	r3, [r7, #15]
          break;
 8005d2e:	e005      	b.n	8005d3c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d30:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0ef      	beq.n	8005d1c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d42:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	4904      	ldr	r1, [pc, #16]	; (8005d5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	40021000 	.word	0x40021000
 8005d60:	07ff800f 	.word	0x07ff800f
 8005d64:	ff9f800f 	.word	0xff9f800f
 8005d68:	f9ff800f 	.word	0xf9ff800f

08005d6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d7a:	4b72      	ldr	r3, [pc, #456]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00e      	beq.n	8005da4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d86:	4b6f      	ldr	r3, [pc, #444]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f003 0203 	and.w	r2, r3, #3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d103      	bne.n	8005d9e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
       ||
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d142      	bne.n	8005e24 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	73fb      	strb	r3, [r7, #15]
 8005da2:	e03f      	b.n	8005e24 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d018      	beq.n	8005dde <RCCEx_PLLSAI2_Config+0x72>
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d825      	bhi.n	8005dfc <RCCEx_PLLSAI2_Config+0x90>
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d002      	beq.n	8005dba <RCCEx_PLLSAI2_Config+0x4e>
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d009      	beq.n	8005dcc <RCCEx_PLLSAI2_Config+0x60>
 8005db8:	e020      	b.n	8005dfc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005dba:	4b62      	ldr	r3, [pc, #392]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d11d      	bne.n	8005e02 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dca:	e01a      	b.n	8005e02 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005dcc:	4b5d      	ldr	r3, [pc, #372]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d116      	bne.n	8005e06 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ddc:	e013      	b.n	8005e06 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005dde:	4b59      	ldr	r3, [pc, #356]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10f      	bne.n	8005e0a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005dea:	4b56      	ldr	r3, [pc, #344]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d109      	bne.n	8005e0a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dfa:	e006      	b.n	8005e0a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8005e00:	e004      	b.n	8005e0c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005e02:	bf00      	nop
 8005e04:	e002      	b.n	8005e0c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005e06:	bf00      	nop
 8005e08:	e000      	b.n	8005e0c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005e0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d108      	bne.n	8005e24 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005e12:	4b4c      	ldr	r3, [pc, #304]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f023 0203 	bic.w	r2, r3, #3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4949      	ldr	r1, [pc, #292]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f040 8086 	bne.w	8005f38 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005e2c:	4b45      	ldr	r3, [pc, #276]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a44      	ldr	r2, [pc, #272]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e38:	f7fd fc64 	bl	8003704 <HAL_GetTick>
 8005e3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e3e:	e009      	b.n	8005e54 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e40:	f7fd fc60 	bl	8003704 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d902      	bls.n	8005e54 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	73fb      	strb	r3, [r7, #15]
        break;
 8005e52:	e005      	b.n	8005e60 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e54:	4b3b      	ldr	r3, [pc, #236]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1ef      	bne.n	8005e40 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d168      	bne.n	8005f38 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d113      	bne.n	8005e94 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e6c:	4b35      	ldr	r3, [pc, #212]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e6e:	695a      	ldr	r2, [r3, #20]
 8005e70:	4b35      	ldr	r3, [pc, #212]	; (8005f48 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005e72:	4013      	ands	r3, r2
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	6892      	ldr	r2, [r2, #8]
 8005e78:	0211      	lsls	r1, r2, #8
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	68d2      	ldr	r2, [r2, #12]
 8005e7e:	06d2      	lsls	r2, r2, #27
 8005e80:	4311      	orrs	r1, r2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6852      	ldr	r2, [r2, #4]
 8005e86:	3a01      	subs	r2, #1
 8005e88:	0112      	lsls	r2, r2, #4
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	492d      	ldr	r1, [pc, #180]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	614b      	str	r3, [r1, #20]
 8005e92:	e02d      	b.n	8005ef0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d115      	bne.n	8005ec6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e9a:	4b2a      	ldr	r3, [pc, #168]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e9c:	695a      	ldr	r2, [r3, #20]
 8005e9e:	4b2b      	ldr	r3, [pc, #172]	; (8005f4c <RCCEx_PLLSAI2_Config+0x1e0>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6892      	ldr	r2, [r2, #8]
 8005ea6:	0211      	lsls	r1, r2, #8
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6912      	ldr	r2, [r2, #16]
 8005eac:	0852      	lsrs	r2, r2, #1
 8005eae:	3a01      	subs	r2, #1
 8005eb0:	0552      	lsls	r2, r2, #21
 8005eb2:	4311      	orrs	r1, r2
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6852      	ldr	r2, [r2, #4]
 8005eb8:	3a01      	subs	r2, #1
 8005eba:	0112      	lsls	r2, r2, #4
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	4921      	ldr	r1, [pc, #132]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	614b      	str	r3, [r1, #20]
 8005ec4:	e014      	b.n	8005ef0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ec6:	4b1f      	ldr	r3, [pc, #124]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ec8:	695a      	ldr	r2, [r3, #20]
 8005eca:	4b21      	ldr	r3, [pc, #132]	; (8005f50 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6892      	ldr	r2, [r2, #8]
 8005ed2:	0211      	lsls	r1, r2, #8
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6952      	ldr	r2, [r2, #20]
 8005ed8:	0852      	lsrs	r2, r2, #1
 8005eda:	3a01      	subs	r2, #1
 8005edc:	0652      	lsls	r2, r2, #25
 8005ede:	4311      	orrs	r1, r2
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6852      	ldr	r2, [r2, #4]
 8005ee4:	3a01      	subs	r2, #1
 8005ee6:	0112      	lsls	r2, r2, #4
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	4916      	ldr	r1, [pc, #88]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ef0:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a13      	ldr	r2, [pc, #76]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efc:	f7fd fc02 	bl	8003704 <HAL_GetTick>
 8005f00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005f02:	e009      	b.n	8005f18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f04:	f7fd fbfe 	bl	8003704 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d902      	bls.n	8005f18 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	73fb      	strb	r3, [r7, #15]
          break;
 8005f16:	e005      	b.n	8005f24 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0ef      	beq.n	8005f04 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d106      	bne.n	8005f38 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005f2a:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f2c:	695a      	ldr	r2, [r3, #20]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	4904      	ldr	r1, [pc, #16]	; (8005f44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40021000 	.word	0x40021000
 8005f48:	07ff800f 	.word	0x07ff800f
 8005f4c:	ff9f800f 	.word	0xff9f800f
 8005f50:	f9ff800f 	.word	0xf9ff800f

08005f54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e095      	b.n	8006092 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d108      	bne.n	8005f80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f76:	d009      	beq.n	8005f8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	61da      	str	r2, [r3, #28]
 8005f7e:	e005      	b.n	8005f8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fd f932 	bl	8003210 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fcc:	d902      	bls.n	8005fd4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	e002      	b.n	8005fda <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fd8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005fe2:	d007      	beq.n	8005ff4 <HAL_SPI_Init+0xa0>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fec:	d002      	beq.n	8005ff4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	431a      	orrs	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800602c:	431a      	orrs	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006036:	ea42 0103 	orr.w	r1, r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	0c1b      	lsrs	r3, r3, #16
 8006050:	f003 0204 	and.w	r2, r3, #4
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006062:	f003 0308 	and.w	r3, r3, #8
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006070:	ea42 0103 	orr.w	r1, r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b088      	sub	sp, #32
 800609e:	af00      	add	r7, sp, #0
 80060a0:	60f8      	str	r0, [r7, #12]
 80060a2:	60b9      	str	r1, [r7, #8]
 80060a4:	603b      	str	r3, [r7, #0]
 80060a6:	4613      	mov	r3, r2
 80060a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_SPI_Transmit+0x22>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e158      	b.n	800636e <HAL_SPI_Transmit+0x2d4>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060c4:	f7fd fb1e 	bl	8003704 <HAL_GetTick>
 80060c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80060ca:	88fb      	ldrh	r3, [r7, #6]
 80060cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d002      	beq.n	80060e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80060da:	2302      	movs	r3, #2
 80060dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060de:	e13d      	b.n	800635c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <HAL_SPI_Transmit+0x52>
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060f0:	e134      	b.n	800635c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2203      	movs	r2, #3
 80060f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	88fa      	ldrh	r2, [r7, #6]
 800610a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	88fa      	ldrh	r2, [r7, #6]
 8006110:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800613c:	d10f      	bne.n	800615e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800614c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800615c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006168:	2b40      	cmp	r3, #64	; 0x40
 800616a:	d007      	beq.n	800617c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800617a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006184:	d94b      	bls.n	800621e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <HAL_SPI_Transmit+0xfa>
 800618e:	8afb      	ldrh	r3, [r7, #22]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d13e      	bne.n	8006212 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006198:	881a      	ldrh	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a4:	1c9a      	adds	r2, r3, #2
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	3b01      	subs	r3, #1
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061b8:	e02b      	b.n	8006212 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d112      	bne.n	80061ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	881a      	ldrh	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	1c9a      	adds	r2, r3, #2
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061ec:	e011      	b.n	8006212 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ee:	f7fd fa89 	bl	8003704 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d803      	bhi.n	8006206 <HAL_SPI_Transmit+0x16c>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006204:	d102      	bne.n	800620c <HAL_SPI_Transmit+0x172>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d102      	bne.n	8006212 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006210:	e0a4      	b.n	800635c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1ce      	bne.n	80061ba <HAL_SPI_Transmit+0x120>
 800621c:	e07c      	b.n	8006318 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <HAL_SPI_Transmit+0x192>
 8006226:	8afb      	ldrh	r3, [r7, #22]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d170      	bne.n	800630e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b01      	cmp	r3, #1
 8006234:	d912      	bls.n	800625c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623a:	881a      	ldrh	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	1c9a      	adds	r2, r3, #2
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b02      	subs	r3, #2
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	87da      	strh	r2, [r3, #62]	; 0x3e
 800625a:	e058      	b.n	800630e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	330c      	adds	r3, #12
 8006266:	7812      	ldrb	r2, [r2, #0]
 8006268:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006278:	b29b      	uxth	r3, r3
 800627a:	3b01      	subs	r3, #1
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006282:	e044      	b.n	800630e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b02      	cmp	r3, #2
 8006290:	d12b      	bne.n	80062ea <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006296:	b29b      	uxth	r3, r3
 8006298:	2b01      	cmp	r3, #1
 800629a:	d912      	bls.n	80062c2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	881a      	ldrh	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	1c9a      	adds	r2, r3, #2
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b02      	subs	r3, #2
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062c0:	e025      	b.n	800630e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	330c      	adds	r3, #12
 80062cc:	7812      	ldrb	r2, [r2, #0]
 80062ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062de:	b29b      	uxth	r3, r3
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062e8:	e011      	b.n	800630e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062ea:	f7fd fa0b 	bl	8003704 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d803      	bhi.n	8006302 <HAL_SPI_Transmit+0x268>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006300:	d102      	bne.n	8006308 <HAL_SPI_Transmit+0x26e>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d102      	bne.n	800630e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800630c:	e026      	b.n	800635c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006312:	b29b      	uxth	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1b5      	bne.n	8006284 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f949 	bl	80065b4 <SPI_EndRxTxTransaction>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2220      	movs	r2, #32
 800632c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10a      	bne.n	800634c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006336:	2300      	movs	r3, #0
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	613b      	str	r3, [r7, #16]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	613b      	str	r3, [r7, #16]
 800634a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	77fb      	strb	r3, [r7, #31]
 8006358:	e000      	b.n	800635c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800635a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800636c:	7ffb      	ldrb	r3, [r7, #31]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	4613      	mov	r3, r2
 8006386:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006388:	f7fd f9bc 	bl	8003704 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006390:	1a9b      	subs	r3, r3, r2
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	4413      	add	r3, r2
 8006396:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006398:	f7fd f9b4 	bl	8003704 <HAL_GetTick>
 800639c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800639e:	4b39      	ldr	r3, [pc, #228]	; (8006484 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	015b      	lsls	r3, r3, #5
 80063a4:	0d1b      	lsrs	r3, r3, #20
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	fb02 f303 	mul.w	r3, r2, r3
 80063ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063ae:	e054      	b.n	800645a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b6:	d050      	beq.n	800645a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063b8:	f7fd f9a4 	bl	8003704 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	69fa      	ldr	r2, [r7, #28]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d902      	bls.n	80063ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d13d      	bne.n	800644a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063e6:	d111      	bne.n	800640c <SPI_WaitFlagStateUntilTimeout+0x94>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063f0:	d004      	beq.n	80063fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063fa:	d107      	bne.n	800640c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800640a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006414:	d10f      	bne.n	8006436 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006434:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e017      	b.n	800647a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	3b01      	subs	r3, #1
 8006458:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4013      	ands	r3, r2
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	429a      	cmp	r2, r3
 8006468:	bf0c      	ite	eq
 800646a:	2301      	moveq	r3, #1
 800646c:	2300      	movne	r3, #0
 800646e:	b2db      	uxtb	r3, r3
 8006470:	461a      	mov	r2, r3
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	429a      	cmp	r2, r3
 8006476:	d19b      	bne.n	80063b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3720      	adds	r7, #32
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	20000048 	.word	0x20000048

08006488 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08a      	sub	sp, #40	; 0x28
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006496:	2300      	movs	r3, #0
 8006498:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800649a:	f7fd f933 	bl	8003704 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	1a9b      	subs	r3, r3, r2
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	4413      	add	r3, r2
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80064aa:	f7fd f92b 	bl	8003704 <HAL_GetTick>
 80064ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	330c      	adds	r3, #12
 80064b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80064b8:	4b3d      	ldr	r3, [pc, #244]	; (80065b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	00da      	lsls	r2, r3, #3
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	0d1b      	lsrs	r3, r3, #20
 80064c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ca:	fb02 f303 	mul.w	r3, r2, r3
 80064ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80064d0:	e060      	b.n	8006594 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80064d8:	d107      	bne.n	80064ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d104      	bne.n	80064ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f0:	d050      	beq.n	8006594 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064f2:	f7fd f907 	bl	8003704 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fe:	429a      	cmp	r2, r3
 8006500:	d902      	bls.n	8006508 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	2b00      	cmp	r3, #0
 8006506:	d13d      	bne.n	8006584 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006516:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006520:	d111      	bne.n	8006546 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800652a:	d004      	beq.n	8006536 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006534:	d107      	bne.n	8006546 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006544:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800654e:	d10f      	bne.n	8006570 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800656e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e010      	b.n	80065a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	3b01      	subs	r3, #1
 8006592:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689a      	ldr	r2, [r3, #8]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4013      	ands	r3, r2
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d196      	bne.n	80064d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3728      	adds	r7, #40	; 0x28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20000048 	.word	0x20000048

080065b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af02      	add	r7, sp, #8
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7ff ff5b 	bl	8006488 <SPI_WaitFifoStateUntilTimeout>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d007      	beq.n	80065e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065dc:	f043 0220 	orr.w	r2, r3, #32
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e027      	b.n	8006638 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2200      	movs	r2, #0
 80065f0:	2180      	movs	r1, #128	; 0x80
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f7ff fec0 	bl	8006378 <SPI_WaitFlagStateUntilTimeout>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d007      	beq.n	800660e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006602:	f043 0220 	orr.w	r2, r3, #32
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e014      	b.n	8006638 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2200      	movs	r2, #0
 8006616:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f7ff ff34 	bl	8006488 <SPI_WaitFifoStateUntilTimeout>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d007      	beq.n	8006636 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662a:	f043 0220 	orr.w	r2, r3, #32
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e000      	b.n	8006638 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e049      	b.n	80066e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d106      	bne.n	800666c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7fc fe14 	bl	8003294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3304      	adds	r3, #4
 800667c:	4619      	mov	r1, r3
 800667e:	4610      	mov	r0, r2
 8006680:	f000 fbe4 	bl	8006e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b01      	cmp	r3, #1
 8006702:	d001      	beq.n	8006708 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e047      	b.n	8006798 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a23      	ldr	r2, [pc, #140]	; (80067a4 <HAL_TIM_Base_Start+0xb4>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d01d      	beq.n	8006756 <HAL_TIM_Base_Start+0x66>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006722:	d018      	beq.n	8006756 <HAL_TIM_Base_Start+0x66>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a1f      	ldr	r2, [pc, #124]	; (80067a8 <HAL_TIM_Base_Start+0xb8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d013      	beq.n	8006756 <HAL_TIM_Base_Start+0x66>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a1e      	ldr	r2, [pc, #120]	; (80067ac <HAL_TIM_Base_Start+0xbc>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d00e      	beq.n	8006756 <HAL_TIM_Base_Start+0x66>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a1c      	ldr	r2, [pc, #112]	; (80067b0 <HAL_TIM_Base_Start+0xc0>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d009      	beq.n	8006756 <HAL_TIM_Base_Start+0x66>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a1b      	ldr	r2, [pc, #108]	; (80067b4 <HAL_TIM_Base_Start+0xc4>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d004      	beq.n	8006756 <HAL_TIM_Base_Start+0x66>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a19      	ldr	r2, [pc, #100]	; (80067b8 <HAL_TIM_Base_Start+0xc8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d115      	bne.n	8006782 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	4b17      	ldr	r3, [pc, #92]	; (80067bc <HAL_TIM_Base_Start+0xcc>)
 800675e:	4013      	ands	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2b06      	cmp	r3, #6
 8006766:	d015      	beq.n	8006794 <HAL_TIM_Base_Start+0xa4>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800676e:	d011      	beq.n	8006794 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006780:	e008      	b.n	8006794 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0201 	orr.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	e000      	b.n	8006796 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006794:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	40012c00 	.word	0x40012c00
 80067a8:	40000400 	.word	0x40000400
 80067ac:	40000800 	.word	0x40000800
 80067b0:	40000c00 	.word	0x40000c00
 80067b4:	40013400 	.word	0x40013400
 80067b8:	40014000 	.word	0x40014000
 80067bc:	00010007 	.word	0x00010007

080067c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e049      	b.n	8006866 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f841 	bl	800686e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3304      	adds	r3, #4
 80067fc:	4619      	mov	r1, r3
 80067fe:	4610      	mov	r0, r2
 8006800:	f000 fb24 	bl	8006e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
	...

08006884 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d109      	bne.n	80068a8 <HAL_TIM_PWM_Start+0x24>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	bf14      	ite	ne
 80068a0:	2301      	movne	r3, #1
 80068a2:	2300      	moveq	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	e03c      	b.n	8006922 <HAL_TIM_PWM_Start+0x9e>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d109      	bne.n	80068c2 <HAL_TIM_PWM_Start+0x3e>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	bf14      	ite	ne
 80068ba:	2301      	movne	r3, #1
 80068bc:	2300      	moveq	r3, #0
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	e02f      	b.n	8006922 <HAL_TIM_PWM_Start+0x9e>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d109      	bne.n	80068dc <HAL_TIM_PWM_Start+0x58>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	bf14      	ite	ne
 80068d4:	2301      	movne	r3, #1
 80068d6:	2300      	moveq	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	e022      	b.n	8006922 <HAL_TIM_PWM_Start+0x9e>
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b0c      	cmp	r3, #12
 80068e0:	d109      	bne.n	80068f6 <HAL_TIM_PWM_Start+0x72>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	bf14      	ite	ne
 80068ee:	2301      	movne	r3, #1
 80068f0:	2300      	moveq	r3, #0
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	e015      	b.n	8006922 <HAL_TIM_PWM_Start+0x9e>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b10      	cmp	r3, #16
 80068fa:	d109      	bne.n	8006910 <HAL_TIM_PWM_Start+0x8c>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b01      	cmp	r3, #1
 8006906:	bf14      	ite	ne
 8006908:	2301      	movne	r3, #1
 800690a:	2300      	moveq	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	e008      	b.n	8006922 <HAL_TIM_PWM_Start+0x9e>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b01      	cmp	r3, #1
 800691a:	bf14      	ite	ne
 800691c:	2301      	movne	r3, #1
 800691e:	2300      	moveq	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e09c      	b.n	8006a64 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d104      	bne.n	800693a <HAL_TIM_PWM_Start+0xb6>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006938:	e023      	b.n	8006982 <HAL_TIM_PWM_Start+0xfe>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b04      	cmp	r3, #4
 800693e:	d104      	bne.n	800694a <HAL_TIM_PWM_Start+0xc6>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006948:	e01b      	b.n	8006982 <HAL_TIM_PWM_Start+0xfe>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b08      	cmp	r3, #8
 800694e:	d104      	bne.n	800695a <HAL_TIM_PWM_Start+0xd6>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006958:	e013      	b.n	8006982 <HAL_TIM_PWM_Start+0xfe>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b0c      	cmp	r3, #12
 800695e:	d104      	bne.n	800696a <HAL_TIM_PWM_Start+0xe6>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006968:	e00b      	b.n	8006982 <HAL_TIM_PWM_Start+0xfe>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b10      	cmp	r3, #16
 800696e:	d104      	bne.n	800697a <HAL_TIM_PWM_Start+0xf6>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006978:	e003      	b.n	8006982 <HAL_TIM_PWM_Start+0xfe>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2202      	movs	r2, #2
 800697e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2201      	movs	r2, #1
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fe68 	bl	8007660 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a35      	ldr	r2, [pc, #212]	; (8006a6c <HAL_TIM_PWM_Start+0x1e8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <HAL_TIM_PWM_Start+0x13e>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a34      	ldr	r2, [pc, #208]	; (8006a70 <HAL_TIM_PWM_Start+0x1ec>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00e      	beq.n	80069c2 <HAL_TIM_PWM_Start+0x13e>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a32      	ldr	r2, [pc, #200]	; (8006a74 <HAL_TIM_PWM_Start+0x1f0>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d009      	beq.n	80069c2 <HAL_TIM_PWM_Start+0x13e>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a31      	ldr	r2, [pc, #196]	; (8006a78 <HAL_TIM_PWM_Start+0x1f4>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d004      	beq.n	80069c2 <HAL_TIM_PWM_Start+0x13e>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a2f      	ldr	r2, [pc, #188]	; (8006a7c <HAL_TIM_PWM_Start+0x1f8>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d101      	bne.n	80069c6 <HAL_TIM_PWM_Start+0x142>
 80069c2:	2301      	movs	r3, #1
 80069c4:	e000      	b.n	80069c8 <HAL_TIM_PWM_Start+0x144>
 80069c6:	2300      	movs	r3, #0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d007      	beq.n	80069dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a22      	ldr	r2, [pc, #136]	; (8006a6c <HAL_TIM_PWM_Start+0x1e8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d01d      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x19e>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ee:	d018      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x19e>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a22      	ldr	r2, [pc, #136]	; (8006a80 <HAL_TIM_PWM_Start+0x1fc>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d013      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x19e>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a21      	ldr	r2, [pc, #132]	; (8006a84 <HAL_TIM_PWM_Start+0x200>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00e      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x19e>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1f      	ldr	r2, [pc, #124]	; (8006a88 <HAL_TIM_PWM_Start+0x204>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d009      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x19e>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a17      	ldr	r2, [pc, #92]	; (8006a70 <HAL_TIM_PWM_Start+0x1ec>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d004      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x19e>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a15      	ldr	r2, [pc, #84]	; (8006a74 <HAL_TIM_PWM_Start+0x1f0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d115      	bne.n	8006a4e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	4b18      	ldr	r3, [pc, #96]	; (8006a8c <HAL_TIM_PWM_Start+0x208>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b06      	cmp	r3, #6
 8006a32:	d015      	beq.n	8006a60 <HAL_TIM_PWM_Start+0x1dc>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a3a:	d011      	beq.n	8006a60 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 0201 	orr.w	r2, r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4c:	e008      	b.n	8006a60 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0201 	orr.w	r2, r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	e000      	b.n	8006a62 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40013400 	.word	0x40013400
 8006a74:	40014000 	.word	0x40014000
 8006a78:	40014400 	.word	0x40014400
 8006a7c:	40014800 	.word	0x40014800
 8006a80:	40000400 	.word	0x40000400
 8006a84:	40000800 	.word	0x40000800
 8006a88:	40000c00 	.word	0x40000c00
 8006a8c:	00010007 	.word	0x00010007

08006a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d101      	bne.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006aaa:	2302      	movs	r3, #2
 8006aac:	e0ff      	b.n	8006cae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b14      	cmp	r3, #20
 8006aba:	f200 80f0 	bhi.w	8006c9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006abe:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac4:	08006b19 	.word	0x08006b19
 8006ac8:	08006c9f 	.word	0x08006c9f
 8006acc:	08006c9f 	.word	0x08006c9f
 8006ad0:	08006c9f 	.word	0x08006c9f
 8006ad4:	08006b59 	.word	0x08006b59
 8006ad8:	08006c9f 	.word	0x08006c9f
 8006adc:	08006c9f 	.word	0x08006c9f
 8006ae0:	08006c9f 	.word	0x08006c9f
 8006ae4:	08006b9b 	.word	0x08006b9b
 8006ae8:	08006c9f 	.word	0x08006c9f
 8006aec:	08006c9f 	.word	0x08006c9f
 8006af0:	08006c9f 	.word	0x08006c9f
 8006af4:	08006bdb 	.word	0x08006bdb
 8006af8:	08006c9f 	.word	0x08006c9f
 8006afc:	08006c9f 	.word	0x08006c9f
 8006b00:	08006c9f 	.word	0x08006c9f
 8006b04:	08006c1d 	.word	0x08006c1d
 8006b08:	08006c9f 	.word	0x08006c9f
 8006b0c:	08006c9f 	.word	0x08006c9f
 8006b10:	08006c9f 	.word	0x08006c9f
 8006b14:	08006c5d 	.word	0x08006c5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68b9      	ldr	r1, [r7, #8]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 fa2e 	bl	8006f80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0208 	orr.w	r2, r2, #8
 8006b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	699a      	ldr	r2, [r3, #24]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0204 	bic.w	r2, r2, #4
 8006b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6999      	ldr	r1, [r3, #24]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	691a      	ldr	r2, [r3, #16]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	619a      	str	r2, [r3, #24]
      break;
 8006b56:	e0a5      	b.n	8006ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68b9      	ldr	r1, [r7, #8]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 fa9e 	bl	80070a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	699a      	ldr	r2, [r3, #24]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6999      	ldr	r1, [r3, #24]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	021a      	lsls	r2, r3, #8
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	619a      	str	r2, [r3, #24]
      break;
 8006b98:	e084      	b.n	8006ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68b9      	ldr	r1, [r7, #8]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 fb07 	bl	80071b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69da      	ldr	r2, [r3, #28]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f042 0208 	orr.w	r2, r2, #8
 8006bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69da      	ldr	r2, [r3, #28]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0204 	bic.w	r2, r2, #4
 8006bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	69d9      	ldr	r1, [r3, #28]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	691a      	ldr	r2, [r3, #16]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	61da      	str	r2, [r3, #28]
      break;
 8006bd8:	e064      	b.n	8006ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fb6f 	bl	80072c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69da      	ldr	r2, [r3, #28]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69d9      	ldr	r1, [r3, #28]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	021a      	lsls	r2, r3, #8
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	61da      	str	r2, [r3, #28]
      break;
 8006c1a:	e043      	b.n	8006ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68b9      	ldr	r1, [r7, #8]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fbb8 	bl	8007398 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0208 	orr.w	r2, r2, #8
 8006c36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 0204 	bic.w	r2, r2, #4
 8006c46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	691a      	ldr	r2, [r3, #16]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c5a:	e023      	b.n	8006ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68b9      	ldr	r1, [r7, #8]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fbfc 	bl	8007460 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	021a      	lsls	r2, r3, #8
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c9c:	e002      	b.n	8006ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop

08006cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d101      	bne.n	8006cd4 <HAL_TIM_ConfigClockSource+0x1c>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	e0b6      	b.n	8006e42 <HAL_TIM_ConfigClockSource+0x18a>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d10:	d03e      	beq.n	8006d90 <HAL_TIM_ConfigClockSource+0xd8>
 8006d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d16:	f200 8087 	bhi.w	8006e28 <HAL_TIM_ConfigClockSource+0x170>
 8006d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d1e:	f000 8086 	beq.w	8006e2e <HAL_TIM_ConfigClockSource+0x176>
 8006d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d26:	d87f      	bhi.n	8006e28 <HAL_TIM_ConfigClockSource+0x170>
 8006d28:	2b70      	cmp	r3, #112	; 0x70
 8006d2a:	d01a      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0xaa>
 8006d2c:	2b70      	cmp	r3, #112	; 0x70
 8006d2e:	d87b      	bhi.n	8006e28 <HAL_TIM_ConfigClockSource+0x170>
 8006d30:	2b60      	cmp	r3, #96	; 0x60
 8006d32:	d050      	beq.n	8006dd6 <HAL_TIM_ConfigClockSource+0x11e>
 8006d34:	2b60      	cmp	r3, #96	; 0x60
 8006d36:	d877      	bhi.n	8006e28 <HAL_TIM_ConfigClockSource+0x170>
 8006d38:	2b50      	cmp	r3, #80	; 0x50
 8006d3a:	d03c      	beq.n	8006db6 <HAL_TIM_ConfigClockSource+0xfe>
 8006d3c:	2b50      	cmp	r3, #80	; 0x50
 8006d3e:	d873      	bhi.n	8006e28 <HAL_TIM_ConfigClockSource+0x170>
 8006d40:	2b40      	cmp	r3, #64	; 0x40
 8006d42:	d058      	beq.n	8006df6 <HAL_TIM_ConfigClockSource+0x13e>
 8006d44:	2b40      	cmp	r3, #64	; 0x40
 8006d46:	d86f      	bhi.n	8006e28 <HAL_TIM_ConfigClockSource+0x170>
 8006d48:	2b30      	cmp	r3, #48	; 0x30
 8006d4a:	d064      	beq.n	8006e16 <HAL_TIM_ConfigClockSource+0x15e>
 8006d4c:	2b30      	cmp	r3, #48	; 0x30
 8006d4e:	d86b      	bhi.n	8006e28 <HAL_TIM_ConfigClockSource+0x170>
 8006d50:	2b20      	cmp	r3, #32
 8006d52:	d060      	beq.n	8006e16 <HAL_TIM_ConfigClockSource+0x15e>
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	d867      	bhi.n	8006e28 <HAL_TIM_ConfigClockSource+0x170>
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d05c      	beq.n	8006e16 <HAL_TIM_ConfigClockSource+0x15e>
 8006d5c:	2b10      	cmp	r3, #16
 8006d5e:	d05a      	beq.n	8006e16 <HAL_TIM_ConfigClockSource+0x15e>
 8006d60:	e062      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6818      	ldr	r0, [r3, #0]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	6899      	ldr	r1, [r3, #8]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f000 fc55 	bl	8007620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	609a      	str	r2, [r3, #8]
      break;
 8006d8e:	e04f      	b.n	8006e30 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6818      	ldr	r0, [r3, #0]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	6899      	ldr	r1, [r3, #8]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f000 fc3e 	bl	8007620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006db2:	609a      	str	r2, [r3, #8]
      break;
 8006db4:	e03c      	b.n	8006e30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	6859      	ldr	r1, [r3, #4]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f000 fbb2 	bl	800752c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2150      	movs	r1, #80	; 0x50
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 fc0b 	bl	80075ea <TIM_ITRx_SetConfig>
      break;
 8006dd4:	e02c      	b.n	8006e30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	6859      	ldr	r1, [r3, #4]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	461a      	mov	r2, r3
 8006de4:	f000 fbd1 	bl	800758a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2160      	movs	r1, #96	; 0x60
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fbfb 	bl	80075ea <TIM_ITRx_SetConfig>
      break;
 8006df4:	e01c      	b.n	8006e30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6818      	ldr	r0, [r3, #0]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	6859      	ldr	r1, [r3, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	461a      	mov	r2, r3
 8006e04:	f000 fb92 	bl	800752c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2140      	movs	r1, #64	; 0x40
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fbeb 	bl	80075ea <TIM_ITRx_SetConfig>
      break;
 8006e14:	e00c      	b.n	8006e30 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4610      	mov	r0, r2
 8006e22:	f000 fbe2 	bl	80075ea <TIM_ITRx_SetConfig>
      break;
 8006e26:	e003      	b.n	8006e30 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e2c:	e000      	b.n	8006e30 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006e2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a40      	ldr	r2, [pc, #256]	; (8006f60 <TIM_Base_SetConfig+0x114>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d013      	beq.n	8006e8c <TIM_Base_SetConfig+0x40>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e6a:	d00f      	beq.n	8006e8c <TIM_Base_SetConfig+0x40>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a3d      	ldr	r2, [pc, #244]	; (8006f64 <TIM_Base_SetConfig+0x118>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00b      	beq.n	8006e8c <TIM_Base_SetConfig+0x40>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a3c      	ldr	r2, [pc, #240]	; (8006f68 <TIM_Base_SetConfig+0x11c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d007      	beq.n	8006e8c <TIM_Base_SetConfig+0x40>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a3b      	ldr	r2, [pc, #236]	; (8006f6c <TIM_Base_SetConfig+0x120>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d003      	beq.n	8006e8c <TIM_Base_SetConfig+0x40>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a3a      	ldr	r2, [pc, #232]	; (8006f70 <TIM_Base_SetConfig+0x124>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d108      	bne.n	8006e9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a2f      	ldr	r2, [pc, #188]	; (8006f60 <TIM_Base_SetConfig+0x114>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d01f      	beq.n	8006ee6 <TIM_Base_SetConfig+0x9a>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eac:	d01b      	beq.n	8006ee6 <TIM_Base_SetConfig+0x9a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a2c      	ldr	r2, [pc, #176]	; (8006f64 <TIM_Base_SetConfig+0x118>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d017      	beq.n	8006ee6 <TIM_Base_SetConfig+0x9a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a2b      	ldr	r2, [pc, #172]	; (8006f68 <TIM_Base_SetConfig+0x11c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d013      	beq.n	8006ee6 <TIM_Base_SetConfig+0x9a>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a2a      	ldr	r2, [pc, #168]	; (8006f6c <TIM_Base_SetConfig+0x120>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d00f      	beq.n	8006ee6 <TIM_Base_SetConfig+0x9a>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a29      	ldr	r2, [pc, #164]	; (8006f70 <TIM_Base_SetConfig+0x124>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d00b      	beq.n	8006ee6 <TIM_Base_SetConfig+0x9a>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a28      	ldr	r2, [pc, #160]	; (8006f74 <TIM_Base_SetConfig+0x128>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d007      	beq.n	8006ee6 <TIM_Base_SetConfig+0x9a>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a27      	ldr	r2, [pc, #156]	; (8006f78 <TIM_Base_SetConfig+0x12c>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d003      	beq.n	8006ee6 <TIM_Base_SetConfig+0x9a>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a26      	ldr	r2, [pc, #152]	; (8006f7c <TIM_Base_SetConfig+0x130>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d108      	bne.n	8006ef8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a10      	ldr	r2, [pc, #64]	; (8006f60 <TIM_Base_SetConfig+0x114>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00f      	beq.n	8006f44 <TIM_Base_SetConfig+0xf8>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a12      	ldr	r2, [pc, #72]	; (8006f70 <TIM_Base_SetConfig+0x124>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d00b      	beq.n	8006f44 <TIM_Base_SetConfig+0xf8>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a11      	ldr	r2, [pc, #68]	; (8006f74 <TIM_Base_SetConfig+0x128>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d007      	beq.n	8006f44 <TIM_Base_SetConfig+0xf8>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a10      	ldr	r2, [pc, #64]	; (8006f78 <TIM_Base_SetConfig+0x12c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d003      	beq.n	8006f44 <TIM_Base_SetConfig+0xf8>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a0f      	ldr	r2, [pc, #60]	; (8006f7c <TIM_Base_SetConfig+0x130>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d103      	bne.n	8006f4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	691a      	ldr	r2, [r3, #16]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	615a      	str	r2, [r3, #20]
}
 8006f52:	bf00      	nop
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	40012c00 	.word	0x40012c00
 8006f64:	40000400 	.word	0x40000400
 8006f68:	40000800 	.word	0x40000800
 8006f6c:	40000c00 	.word	0x40000c00
 8006f70:	40013400 	.word	0x40013400
 8006f74:	40014000 	.word	0x40014000
 8006f78:	40014400 	.word	0x40014400
 8006f7c:	40014800 	.word	0x40014800

08006f80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	f023 0201 	bic.w	r2, r3, #1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0303 	bic.w	r3, r3, #3
 8006fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f023 0302 	bic.w	r3, r3, #2
 8006fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a2c      	ldr	r2, [pc, #176]	; (800708c <TIM_OC1_SetConfig+0x10c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00f      	beq.n	8007000 <TIM_OC1_SetConfig+0x80>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a2b      	ldr	r2, [pc, #172]	; (8007090 <TIM_OC1_SetConfig+0x110>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00b      	beq.n	8007000 <TIM_OC1_SetConfig+0x80>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a2a      	ldr	r2, [pc, #168]	; (8007094 <TIM_OC1_SetConfig+0x114>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d007      	beq.n	8007000 <TIM_OC1_SetConfig+0x80>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a29      	ldr	r2, [pc, #164]	; (8007098 <TIM_OC1_SetConfig+0x118>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d003      	beq.n	8007000 <TIM_OC1_SetConfig+0x80>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a28      	ldr	r2, [pc, #160]	; (800709c <TIM_OC1_SetConfig+0x11c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d10c      	bne.n	800701a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f023 0308 	bic.w	r3, r3, #8
 8007006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	4313      	orrs	r3, r2
 8007010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f023 0304 	bic.w	r3, r3, #4
 8007018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a1b      	ldr	r2, [pc, #108]	; (800708c <TIM_OC1_SetConfig+0x10c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d00f      	beq.n	8007042 <TIM_OC1_SetConfig+0xc2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a1a      	ldr	r2, [pc, #104]	; (8007090 <TIM_OC1_SetConfig+0x110>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00b      	beq.n	8007042 <TIM_OC1_SetConfig+0xc2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a19      	ldr	r2, [pc, #100]	; (8007094 <TIM_OC1_SetConfig+0x114>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d007      	beq.n	8007042 <TIM_OC1_SetConfig+0xc2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a18      	ldr	r2, [pc, #96]	; (8007098 <TIM_OC1_SetConfig+0x118>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d003      	beq.n	8007042 <TIM_OC1_SetConfig+0xc2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a17      	ldr	r2, [pc, #92]	; (800709c <TIM_OC1_SetConfig+0x11c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d111      	bne.n	8007066 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	4313      	orrs	r3, r2
 800705a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	4313      	orrs	r3, r2
 8007064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	621a      	str	r2, [r3, #32]
}
 8007080:	bf00      	nop
 8007082:	371c      	adds	r7, #28
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	40012c00 	.word	0x40012c00
 8007090:	40013400 	.word	0x40013400
 8007094:	40014000 	.word	0x40014000
 8007098:	40014400 	.word	0x40014400
 800709c:	40014800 	.word	0x40014800

080070a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	f023 0210 	bic.w	r2, r3, #16
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	021b      	lsls	r3, r3, #8
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f023 0320 	bic.w	r3, r3, #32
 80070ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	011b      	lsls	r3, r3, #4
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a28      	ldr	r2, [pc, #160]	; (80071a0 <TIM_OC2_SetConfig+0x100>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d003      	beq.n	800710c <TIM_OC2_SetConfig+0x6c>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a27      	ldr	r2, [pc, #156]	; (80071a4 <TIM_OC2_SetConfig+0x104>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d10d      	bne.n	8007128 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	011b      	lsls	r3, r3, #4
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	4313      	orrs	r3, r2
 800711e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007126:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a1d      	ldr	r2, [pc, #116]	; (80071a0 <TIM_OC2_SetConfig+0x100>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d00f      	beq.n	8007150 <TIM_OC2_SetConfig+0xb0>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a1c      	ldr	r2, [pc, #112]	; (80071a4 <TIM_OC2_SetConfig+0x104>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d00b      	beq.n	8007150 <TIM_OC2_SetConfig+0xb0>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a1b      	ldr	r2, [pc, #108]	; (80071a8 <TIM_OC2_SetConfig+0x108>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d007      	beq.n	8007150 <TIM_OC2_SetConfig+0xb0>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a1a      	ldr	r2, [pc, #104]	; (80071ac <TIM_OC2_SetConfig+0x10c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d003      	beq.n	8007150 <TIM_OC2_SetConfig+0xb0>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a19      	ldr	r2, [pc, #100]	; (80071b0 <TIM_OC2_SetConfig+0x110>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d113      	bne.n	8007178 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007156:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800715e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	4313      	orrs	r3, r2
 800716a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	4313      	orrs	r3, r2
 8007176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	621a      	str	r2, [r3, #32]
}
 8007192:	bf00      	nop
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40012c00 	.word	0x40012c00
 80071a4:	40013400 	.word	0x40013400
 80071a8:	40014000 	.word	0x40014000
 80071ac:	40014400 	.word	0x40014400
 80071b0:	40014800 	.word	0x40014800

080071b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 0303 	bic.w	r3, r3, #3
 80071ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	021b      	lsls	r3, r3, #8
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	4313      	orrs	r3, r2
 800720c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a27      	ldr	r2, [pc, #156]	; (80072b0 <TIM_OC3_SetConfig+0xfc>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d003      	beq.n	800721e <TIM_OC3_SetConfig+0x6a>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a26      	ldr	r2, [pc, #152]	; (80072b4 <TIM_OC3_SetConfig+0x100>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d10d      	bne.n	800723a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007224:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	021b      	lsls	r3, r3, #8
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a1c      	ldr	r2, [pc, #112]	; (80072b0 <TIM_OC3_SetConfig+0xfc>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d00f      	beq.n	8007262 <TIM_OC3_SetConfig+0xae>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a1b      	ldr	r2, [pc, #108]	; (80072b4 <TIM_OC3_SetConfig+0x100>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d00b      	beq.n	8007262 <TIM_OC3_SetConfig+0xae>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a1a      	ldr	r2, [pc, #104]	; (80072b8 <TIM_OC3_SetConfig+0x104>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d007      	beq.n	8007262 <TIM_OC3_SetConfig+0xae>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a19      	ldr	r2, [pc, #100]	; (80072bc <TIM_OC3_SetConfig+0x108>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d003      	beq.n	8007262 <TIM_OC3_SetConfig+0xae>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a18      	ldr	r2, [pc, #96]	; (80072c0 <TIM_OC3_SetConfig+0x10c>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d113      	bne.n	800728a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	011b      	lsls	r3, r3, #4
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	4313      	orrs	r3, r2
 800727c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	4313      	orrs	r3, r2
 8007288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	621a      	str	r2, [r3, #32]
}
 80072a4:	bf00      	nop
 80072a6:	371c      	adds	r7, #28
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	40012c00 	.word	0x40012c00
 80072b4:	40013400 	.word	0x40013400
 80072b8:	40014000 	.word	0x40014000
 80072bc:	40014400 	.word	0x40014400
 80072c0:	40014800 	.word	0x40014800

080072c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	021b      	lsls	r3, r3, #8
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4313      	orrs	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007312:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	031b      	lsls	r3, r3, #12
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	4313      	orrs	r3, r2
 800731e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a18      	ldr	r2, [pc, #96]	; (8007384 <TIM_OC4_SetConfig+0xc0>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00f      	beq.n	8007348 <TIM_OC4_SetConfig+0x84>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a17      	ldr	r2, [pc, #92]	; (8007388 <TIM_OC4_SetConfig+0xc4>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d00b      	beq.n	8007348 <TIM_OC4_SetConfig+0x84>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a16      	ldr	r2, [pc, #88]	; (800738c <TIM_OC4_SetConfig+0xc8>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d007      	beq.n	8007348 <TIM_OC4_SetConfig+0x84>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a15      	ldr	r2, [pc, #84]	; (8007390 <TIM_OC4_SetConfig+0xcc>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d003      	beq.n	8007348 <TIM_OC4_SetConfig+0x84>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a14      	ldr	r2, [pc, #80]	; (8007394 <TIM_OC4_SetConfig+0xd0>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d109      	bne.n	800735c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800734e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	019b      	lsls	r3, r3, #6
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4313      	orrs	r3, r2
 800735a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	621a      	str	r2, [r3, #32]
}
 8007376:	bf00      	nop
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	40012c00 	.word	0x40012c00
 8007388:	40013400 	.word	0x40013400
 800738c:	40014000 	.word	0x40014000
 8007390:	40014400 	.word	0x40014400
 8007394:	40014800 	.word	0x40014800

08007398 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80073dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	041b      	lsls	r3, r3, #16
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a17      	ldr	r2, [pc, #92]	; (800744c <TIM_OC5_SetConfig+0xb4>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d00f      	beq.n	8007412 <TIM_OC5_SetConfig+0x7a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a16      	ldr	r2, [pc, #88]	; (8007450 <TIM_OC5_SetConfig+0xb8>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d00b      	beq.n	8007412 <TIM_OC5_SetConfig+0x7a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a15      	ldr	r2, [pc, #84]	; (8007454 <TIM_OC5_SetConfig+0xbc>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d007      	beq.n	8007412 <TIM_OC5_SetConfig+0x7a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a14      	ldr	r2, [pc, #80]	; (8007458 <TIM_OC5_SetConfig+0xc0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d003      	beq.n	8007412 <TIM_OC5_SetConfig+0x7a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a13      	ldr	r2, [pc, #76]	; (800745c <TIM_OC5_SetConfig+0xc4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d109      	bne.n	8007426 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007418:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	021b      	lsls	r3, r3, #8
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	4313      	orrs	r3, r2
 8007424:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	621a      	str	r2, [r3, #32]
}
 8007440:	bf00      	nop
 8007442:	371c      	adds	r7, #28
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	40012c00 	.word	0x40012c00
 8007450:	40013400 	.word	0x40013400
 8007454:	40014000 	.word	0x40014000
 8007458:	40014400 	.word	0x40014400
 800745c:	40014800 	.word	0x40014800

08007460 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800748e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	021b      	lsls	r3, r3, #8
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	4313      	orrs	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	051b      	lsls	r3, r3, #20
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a18      	ldr	r2, [pc, #96]	; (8007518 <TIM_OC6_SetConfig+0xb8>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d00f      	beq.n	80074dc <TIM_OC6_SetConfig+0x7c>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a17      	ldr	r2, [pc, #92]	; (800751c <TIM_OC6_SetConfig+0xbc>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d00b      	beq.n	80074dc <TIM_OC6_SetConfig+0x7c>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a16      	ldr	r2, [pc, #88]	; (8007520 <TIM_OC6_SetConfig+0xc0>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d007      	beq.n	80074dc <TIM_OC6_SetConfig+0x7c>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a15      	ldr	r2, [pc, #84]	; (8007524 <TIM_OC6_SetConfig+0xc4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d003      	beq.n	80074dc <TIM_OC6_SetConfig+0x7c>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a14      	ldr	r2, [pc, #80]	; (8007528 <TIM_OC6_SetConfig+0xc8>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d109      	bne.n	80074f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	029b      	lsls	r3, r3, #10
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	621a      	str	r2, [r3, #32]
}
 800750a:	bf00      	nop
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	40012c00 	.word	0x40012c00
 800751c:	40013400 	.word	0x40013400
 8007520:	40014000 	.word	0x40014000
 8007524:	40014400 	.word	0x40014400
 8007528:	40014800 	.word	0x40014800

0800752c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800752c:	b480      	push	{r7}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	f023 0201 	bic.w	r2, r3, #1
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	011b      	lsls	r3, r3, #4
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	4313      	orrs	r3, r2
 8007560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f023 030a 	bic.w	r3, r3, #10
 8007568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	4313      	orrs	r3, r2
 8007570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	621a      	str	r2, [r3, #32]
}
 800757e:	bf00      	nop
 8007580:	371c      	adds	r7, #28
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800758a:	b480      	push	{r7}
 800758c:	b087      	sub	sp, #28
 800758e:	af00      	add	r7, sp, #0
 8007590:	60f8      	str	r0, [r7, #12]
 8007592:	60b9      	str	r1, [r7, #8]
 8007594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	f023 0210 	bic.w	r2, r3, #16
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a1b      	ldr	r3, [r3, #32]
 80075ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	031b      	lsls	r3, r3, #12
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	4313      	orrs	r3, r2
 80075be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	011b      	lsls	r3, r3, #4
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	621a      	str	r2, [r3, #32]
}
 80075de:	bf00      	nop
 80075e0:	371c      	adds	r7, #28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b085      	sub	sp, #20
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4313      	orrs	r3, r2
 8007608:	f043 0307 	orr.w	r3, r3, #7
 800760c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	609a      	str	r2, [r3, #8]
}
 8007614:	bf00      	nop
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007620:	b480      	push	{r7}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
 800762c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800763a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	021a      	lsls	r2, r3, #8
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	431a      	orrs	r2, r3
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	4313      	orrs	r3, r2
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	4313      	orrs	r3, r2
 800764c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	609a      	str	r2, [r3, #8]
}
 8007654:	bf00      	nop
 8007656:	371c      	adds	r7, #28
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f003 031f 	and.w	r3, r3, #31
 8007672:	2201      	movs	r2, #1
 8007674:	fa02 f303 	lsl.w	r3, r2, r3
 8007678:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6a1a      	ldr	r2, [r3, #32]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	43db      	mvns	r3, r3
 8007682:	401a      	ands	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a1a      	ldr	r2, [r3, #32]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f003 031f 	and.w	r3, r3, #31
 8007692:	6879      	ldr	r1, [r7, #4]
 8007694:	fa01 f303 	lsl.w	r3, r1, r3
 8007698:	431a      	orrs	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	621a      	str	r2, [r3, #32]
}
 800769e:	bf00      	nop
 80076a0:	371c      	adds	r7, #28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
	...

080076ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d101      	bne.n	80076c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076c0:	2302      	movs	r3, #2
 80076c2:	e068      	b.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a2e      	ldr	r2, [pc, #184]	; (80077a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d004      	beq.n	80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a2d      	ldr	r2, [pc, #180]	; (80077a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d108      	bne.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80076fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	4313      	orrs	r3, r2
 8007708:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007710:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	4313      	orrs	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1e      	ldr	r2, [pc, #120]	; (80077a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d01d      	beq.n	800776a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007736:	d018      	beq.n	800776a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a1b      	ldr	r2, [pc, #108]	; (80077ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d013      	beq.n	800776a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a1a      	ldr	r2, [pc, #104]	; (80077b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d00e      	beq.n	800776a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a18      	ldr	r2, [pc, #96]	; (80077b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d009      	beq.n	800776a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a13      	ldr	r2, [pc, #76]	; (80077a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d004      	beq.n	800776a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a14      	ldr	r2, [pc, #80]	; (80077b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d10c      	bne.n	8007784 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	4313      	orrs	r3, r2
 800777a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	40012c00 	.word	0x40012c00
 80077a8:	40013400 	.word	0x40013400
 80077ac:	40000400 	.word	0x40000400
 80077b0:	40000800 	.word	0x40000800
 80077b4:	40000c00 	.word	0x40000c00
 80077b8:	40014000 	.word	0x40014000

080077bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e065      	b.n	80078a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4313      	orrs	r3, r2
 8007816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	4313      	orrs	r3, r2
 8007824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	4313      	orrs	r3, r2
 8007832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783e:	4313      	orrs	r3, r2
 8007840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	041b      	lsls	r3, r3, #16
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a16      	ldr	r2, [pc, #88]	; (80078b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d004      	beq.n	8007866 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a14      	ldr	r2, [pc, #80]	; (80078b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d115      	bne.n	8007892 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007870:	051b      	lsls	r3, r3, #20
 8007872:	4313      	orrs	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	4313      	orrs	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	40012c00 	.word	0x40012c00
 80078b4:	40013400 	.word	0x40013400

080078b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e042      	b.n	8007950 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d106      	bne.n	80078e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7fb fc35 	bl	800314c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2224      	movs	r2, #36	; 0x24
 80078e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f022 0201 	bic.w	r2, r2, #1
 80078f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f8c4 	bl	8007a88 <UART_SetConfig>
 8007900:	4603      	mov	r3, r0
 8007902:	2b01      	cmp	r3, #1
 8007904:	d101      	bne.n	800790a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e022      	b.n	8007950 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790e:	2b00      	cmp	r3, #0
 8007910:	d002      	beq.n	8007918 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fbb4 	bl	8008080 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007936:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f042 0201 	orr.w	r2, r2, #1
 8007946:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fc3b 	bl	80081c4 <UART_CheckIdleState>
 800794e:	4603      	mov	r3, r0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08a      	sub	sp, #40	; 0x28
 800795c:	af02      	add	r7, sp, #8
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	603b      	str	r3, [r7, #0]
 8007964:	4613      	mov	r3, r2
 8007966:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800796e:	2b20      	cmp	r3, #32
 8007970:	f040 8084 	bne.w	8007a7c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <HAL_UART_Transmit+0x28>
 800797a:	88fb      	ldrh	r3, [r7, #6]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e07c      	b.n	8007a7e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800798a:	2b01      	cmp	r3, #1
 800798c:	d101      	bne.n	8007992 <HAL_UART_Transmit+0x3a>
 800798e:	2302      	movs	r3, #2
 8007990:	e075      	b.n	8007a7e <HAL_UART_Transmit+0x126>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2221      	movs	r2, #33	; 0x21
 80079a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079aa:	f7fb feab 	bl	8003704 <HAL_GetTick>
 80079ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	88fa      	ldrh	r2, [r7, #6]
 80079b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	88fa      	ldrh	r2, [r7, #6]
 80079bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c8:	d108      	bne.n	80079dc <HAL_UART_Transmit+0x84>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d104      	bne.n	80079dc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	61bb      	str	r3, [r7, #24]
 80079da:	e003      	b.n	80079e4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079e0:	2300      	movs	r3, #0
 80079e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80079ec:	e02d      	b.n	8007a4a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2200      	movs	r2, #0
 80079f6:	2180      	movs	r1, #128	; 0x80
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 fc2e 	bl	800825a <UART_WaitOnFlagUntilTimeout>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e03a      	b.n	8007a7e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10b      	bne.n	8007a26 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	881a      	ldrh	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a1a:	b292      	uxth	r2, r2
 8007a1c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	3302      	adds	r3, #2
 8007a22:	61bb      	str	r3, [r7, #24]
 8007a24:	e008      	b.n	8007a38 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	781a      	ldrb	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	b292      	uxth	r2, r2
 8007a30:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	3301      	adds	r3, #1
 8007a36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	3b01      	subs	r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1cb      	bne.n	80079ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2140      	movs	r1, #64	; 0x40
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 fbfa 	bl	800825a <UART_WaitOnFlagUntilTimeout>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e006      	b.n	8007a7e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	e000      	b.n	8007a7e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007a7c:	2302      	movs	r3, #2
  }
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3720      	adds	r7, #32
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
	...

08007a88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a8c:	b08c      	sub	sp, #48	; 0x30
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	4baa      	ldr	r3, [pc, #680]	; (8007d60 <UART_SetConfig+0x2d8>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	6812      	ldr	r2, [r2, #0]
 8007abe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a9f      	ldr	r2, [pc, #636]	; (8007d64 <UART_SetConfig+0x2dc>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d004      	beq.n	8007af4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af0:	4313      	orrs	r3, r2
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007afe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	6812      	ldr	r2, [r2, #0]
 8007b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	f023 010f 	bic.w	r1, r3, #15
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a90      	ldr	r2, [pc, #576]	; (8007d68 <UART_SetConfig+0x2e0>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d125      	bne.n	8007b78 <UART_SetConfig+0xf0>
 8007b2c:	4b8f      	ldr	r3, [pc, #572]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b32:	f003 0303 	and.w	r3, r3, #3
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d81a      	bhi.n	8007b70 <UART_SetConfig+0xe8>
 8007b3a:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <UART_SetConfig+0xb8>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007b51 	.word	0x08007b51
 8007b44:	08007b61 	.word	0x08007b61
 8007b48:	08007b59 	.word	0x08007b59
 8007b4c:	08007b69 	.word	0x08007b69
 8007b50:	2301      	movs	r3, #1
 8007b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b56:	e116      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007b58:	2302      	movs	r3, #2
 8007b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b5e:	e112      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007b60:	2304      	movs	r3, #4
 8007b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b66:	e10e      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007b68:	2308      	movs	r3, #8
 8007b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b6e:	e10a      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007b70:	2310      	movs	r3, #16
 8007b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b76:	e106      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a7c      	ldr	r2, [pc, #496]	; (8007d70 <UART_SetConfig+0x2e8>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d138      	bne.n	8007bf4 <UART_SetConfig+0x16c>
 8007b82:	4b7a      	ldr	r3, [pc, #488]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b88:	f003 030c 	and.w	r3, r3, #12
 8007b8c:	2b0c      	cmp	r3, #12
 8007b8e:	d82d      	bhi.n	8007bec <UART_SetConfig+0x164>
 8007b90:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <UART_SetConfig+0x110>)
 8007b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b96:	bf00      	nop
 8007b98:	08007bcd 	.word	0x08007bcd
 8007b9c:	08007bed 	.word	0x08007bed
 8007ba0:	08007bed 	.word	0x08007bed
 8007ba4:	08007bed 	.word	0x08007bed
 8007ba8:	08007bdd 	.word	0x08007bdd
 8007bac:	08007bed 	.word	0x08007bed
 8007bb0:	08007bed 	.word	0x08007bed
 8007bb4:	08007bed 	.word	0x08007bed
 8007bb8:	08007bd5 	.word	0x08007bd5
 8007bbc:	08007bed 	.word	0x08007bed
 8007bc0:	08007bed 	.word	0x08007bed
 8007bc4:	08007bed 	.word	0x08007bed
 8007bc8:	08007be5 	.word	0x08007be5
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bd2:	e0d8      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bda:	e0d4      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007bdc:	2304      	movs	r3, #4
 8007bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007be2:	e0d0      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007be4:	2308      	movs	r3, #8
 8007be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bea:	e0cc      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007bec:	2310      	movs	r3, #16
 8007bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bf2:	e0c8      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a5e      	ldr	r2, [pc, #376]	; (8007d74 <UART_SetConfig+0x2ec>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d125      	bne.n	8007c4a <UART_SetConfig+0x1c2>
 8007bfe:	4b5b      	ldr	r3, [pc, #364]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c08:	2b30      	cmp	r3, #48	; 0x30
 8007c0a:	d016      	beq.n	8007c3a <UART_SetConfig+0x1b2>
 8007c0c:	2b30      	cmp	r3, #48	; 0x30
 8007c0e:	d818      	bhi.n	8007c42 <UART_SetConfig+0x1ba>
 8007c10:	2b20      	cmp	r3, #32
 8007c12:	d00a      	beq.n	8007c2a <UART_SetConfig+0x1a2>
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	d814      	bhi.n	8007c42 <UART_SetConfig+0x1ba>
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <UART_SetConfig+0x19a>
 8007c1c:	2b10      	cmp	r3, #16
 8007c1e:	d008      	beq.n	8007c32 <UART_SetConfig+0x1aa>
 8007c20:	e00f      	b.n	8007c42 <UART_SetConfig+0x1ba>
 8007c22:	2300      	movs	r3, #0
 8007c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c28:	e0ad      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c30:	e0a9      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c32:	2304      	movs	r3, #4
 8007c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c38:	e0a5      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c3a:	2308      	movs	r3, #8
 8007c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c40:	e0a1      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c42:	2310      	movs	r3, #16
 8007c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c48:	e09d      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a4a      	ldr	r2, [pc, #296]	; (8007d78 <UART_SetConfig+0x2f0>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d125      	bne.n	8007ca0 <UART_SetConfig+0x218>
 8007c54:	4b45      	ldr	r3, [pc, #276]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8007c60:	d016      	beq.n	8007c90 <UART_SetConfig+0x208>
 8007c62:	2bc0      	cmp	r3, #192	; 0xc0
 8007c64:	d818      	bhi.n	8007c98 <UART_SetConfig+0x210>
 8007c66:	2b80      	cmp	r3, #128	; 0x80
 8007c68:	d00a      	beq.n	8007c80 <UART_SetConfig+0x1f8>
 8007c6a:	2b80      	cmp	r3, #128	; 0x80
 8007c6c:	d814      	bhi.n	8007c98 <UART_SetConfig+0x210>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d002      	beq.n	8007c78 <UART_SetConfig+0x1f0>
 8007c72:	2b40      	cmp	r3, #64	; 0x40
 8007c74:	d008      	beq.n	8007c88 <UART_SetConfig+0x200>
 8007c76:	e00f      	b.n	8007c98 <UART_SetConfig+0x210>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c7e:	e082      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c80:	2302      	movs	r3, #2
 8007c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c86:	e07e      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c88:	2304      	movs	r3, #4
 8007c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c8e:	e07a      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c90:	2308      	movs	r3, #8
 8007c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c96:	e076      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c98:	2310      	movs	r3, #16
 8007c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c9e:	e072      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a35      	ldr	r2, [pc, #212]	; (8007d7c <UART_SetConfig+0x2f4>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d12a      	bne.n	8007d00 <UART_SetConfig+0x278>
 8007caa:	4b30      	ldr	r3, [pc, #192]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cb8:	d01a      	beq.n	8007cf0 <UART_SetConfig+0x268>
 8007cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cbe:	d81b      	bhi.n	8007cf8 <UART_SetConfig+0x270>
 8007cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cc4:	d00c      	beq.n	8007ce0 <UART_SetConfig+0x258>
 8007cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cca:	d815      	bhi.n	8007cf8 <UART_SetConfig+0x270>
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <UART_SetConfig+0x250>
 8007cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd4:	d008      	beq.n	8007ce8 <UART_SetConfig+0x260>
 8007cd6:	e00f      	b.n	8007cf8 <UART_SetConfig+0x270>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cde:	e052      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ce6:	e04e      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007ce8:	2304      	movs	r3, #4
 8007cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cee:	e04a      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007cf0:	2308      	movs	r3, #8
 8007cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cf6:	e046      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007cf8:	2310      	movs	r3, #16
 8007cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cfe:	e042      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a17      	ldr	r2, [pc, #92]	; (8007d64 <UART_SetConfig+0x2dc>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d13a      	bne.n	8007d80 <UART_SetConfig+0x2f8>
 8007d0a:	4b18      	ldr	r3, [pc, #96]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d18:	d01a      	beq.n	8007d50 <UART_SetConfig+0x2c8>
 8007d1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d1e:	d81b      	bhi.n	8007d58 <UART_SetConfig+0x2d0>
 8007d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d24:	d00c      	beq.n	8007d40 <UART_SetConfig+0x2b8>
 8007d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d2a:	d815      	bhi.n	8007d58 <UART_SetConfig+0x2d0>
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <UART_SetConfig+0x2b0>
 8007d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d34:	d008      	beq.n	8007d48 <UART_SetConfig+0x2c0>
 8007d36:	e00f      	b.n	8007d58 <UART_SetConfig+0x2d0>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d3e:	e022      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d40:	2302      	movs	r3, #2
 8007d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d46:	e01e      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d48:	2304      	movs	r3, #4
 8007d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d4e:	e01a      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d50:	2308      	movs	r3, #8
 8007d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d56:	e016      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d58:	2310      	movs	r3, #16
 8007d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d5e:	e012      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d60:	cfff69f3 	.word	0xcfff69f3
 8007d64:	40008000 	.word	0x40008000
 8007d68:	40013800 	.word	0x40013800
 8007d6c:	40021000 	.word	0x40021000
 8007d70:	40004400 	.word	0x40004400
 8007d74:	40004800 	.word	0x40004800
 8007d78:	40004c00 	.word	0x40004c00
 8007d7c:	40005000 	.word	0x40005000
 8007d80:	2310      	movs	r3, #16
 8007d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4aae      	ldr	r2, [pc, #696]	; (8008044 <UART_SetConfig+0x5bc>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	f040 8097 	bne.w	8007ec0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	d823      	bhi.n	8007de2 <UART_SetConfig+0x35a>
 8007d9a:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <UART_SetConfig+0x318>)
 8007d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da0:	08007dc5 	.word	0x08007dc5
 8007da4:	08007de3 	.word	0x08007de3
 8007da8:	08007dcd 	.word	0x08007dcd
 8007dac:	08007de3 	.word	0x08007de3
 8007db0:	08007dd3 	.word	0x08007dd3
 8007db4:	08007de3 	.word	0x08007de3
 8007db8:	08007de3 	.word	0x08007de3
 8007dbc:	08007de3 	.word	0x08007de3
 8007dc0:	08007ddb 	.word	0x08007ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dc4:	f7fd fac0 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8007dc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dca:	e010      	b.n	8007dee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dcc:	4b9e      	ldr	r3, [pc, #632]	; (8008048 <UART_SetConfig+0x5c0>)
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007dd0:	e00d      	b.n	8007dee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dd2:	f7fd fa21 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 8007dd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dd8:	e009      	b.n	8007dee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007de0:	e005      	b.n	8007dee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007dec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 8130 	beq.w	8008056 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	4a94      	ldr	r2, [pc, #592]	; (800804c <UART_SetConfig+0x5c4>)
 8007dfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e00:	461a      	mov	r2, r3
 8007e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e04:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e08:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	4413      	add	r3, r2
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d305      	bcc.n	8007e26 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d903      	bls.n	8007e2e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e2c:	e113      	b.n	8008056 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	2200      	movs	r2, #0
 8007e32:	60bb      	str	r3, [r7, #8]
 8007e34:	60fa      	str	r2, [r7, #12]
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	4a84      	ldr	r2, [pc, #528]	; (800804c <UART_SetConfig+0x5c4>)
 8007e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2200      	movs	r2, #0
 8007e44:	603b      	str	r3, [r7, #0]
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e50:	f7f9 fd62 	bl	8001918 <__aeabi_uldivmod>
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	f04f 0300 	mov.w	r3, #0
 8007e64:	020b      	lsls	r3, r1, #8
 8007e66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e6a:	0202      	lsls	r2, r0, #8
 8007e6c:	6979      	ldr	r1, [r7, #20]
 8007e6e:	6849      	ldr	r1, [r1, #4]
 8007e70:	0849      	lsrs	r1, r1, #1
 8007e72:	2000      	movs	r0, #0
 8007e74:	460c      	mov	r4, r1
 8007e76:	4605      	mov	r5, r0
 8007e78:	eb12 0804 	adds.w	r8, r2, r4
 8007e7c:	eb43 0905 	adc.w	r9, r3, r5
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	469a      	mov	sl, r3
 8007e88:	4693      	mov	fp, r2
 8007e8a:	4652      	mov	r2, sl
 8007e8c:	465b      	mov	r3, fp
 8007e8e:	4640      	mov	r0, r8
 8007e90:	4649      	mov	r1, r9
 8007e92:	f7f9 fd41 	bl	8001918 <__aeabi_uldivmod>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea4:	d308      	bcc.n	8007eb8 <UART_SetConfig+0x430>
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eac:	d204      	bcs.n	8007eb8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6a3a      	ldr	r2, [r7, #32]
 8007eb4:	60da      	str	r2, [r3, #12]
 8007eb6:	e0ce      	b.n	8008056 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ebe:	e0ca      	b.n	8008056 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec8:	d166      	bne.n	8007f98 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007eca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ece:	2b08      	cmp	r3, #8
 8007ed0:	d827      	bhi.n	8007f22 <UART_SetConfig+0x49a>
 8007ed2:	a201      	add	r2, pc, #4	; (adr r2, 8007ed8 <UART_SetConfig+0x450>)
 8007ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed8:	08007efd 	.word	0x08007efd
 8007edc:	08007f05 	.word	0x08007f05
 8007ee0:	08007f0d 	.word	0x08007f0d
 8007ee4:	08007f23 	.word	0x08007f23
 8007ee8:	08007f13 	.word	0x08007f13
 8007eec:	08007f23 	.word	0x08007f23
 8007ef0:	08007f23 	.word	0x08007f23
 8007ef4:	08007f23 	.word	0x08007f23
 8007ef8:	08007f1b 	.word	0x08007f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007efc:	f7fd fa24 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8007f00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f02:	e014      	b.n	8007f2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f04:	f7fd fa36 	bl	8005374 <HAL_RCC_GetPCLK2Freq>
 8007f08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f0a:	e010      	b.n	8007f2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f0c:	4b4e      	ldr	r3, [pc, #312]	; (8008048 <UART_SetConfig+0x5c0>)
 8007f0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f10:	e00d      	b.n	8007f2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f12:	f7fd f981 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 8007f16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f18:	e009      	b.n	8007f2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f20:	e005      	b.n	8007f2e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 8090 	beq.w	8008056 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	4a44      	ldr	r2, [pc, #272]	; (800804c <UART_SetConfig+0x5c4>)
 8007f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f40:	461a      	mov	r2, r3
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f48:	005a      	lsls	r2, r3, #1
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	441a      	add	r2, r3
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f5a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	2b0f      	cmp	r3, #15
 8007f60:	d916      	bls.n	8007f90 <UART_SetConfig+0x508>
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f68:	d212      	bcs.n	8007f90 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	f023 030f 	bic.w	r3, r3, #15
 8007f72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	085b      	lsrs	r3, r3, #1
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	8bfb      	ldrh	r3, [r7, #30]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	8bfa      	ldrh	r2, [r7, #30]
 8007f8c:	60da      	str	r2, [r3, #12]
 8007f8e:	e062      	b.n	8008056 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f96:	e05e      	b.n	8008056 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d828      	bhi.n	8007ff2 <UART_SetConfig+0x56a>
 8007fa0:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <UART_SetConfig+0x520>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007fcd 	.word	0x08007fcd
 8007fac:	08007fd5 	.word	0x08007fd5
 8007fb0:	08007fdd 	.word	0x08007fdd
 8007fb4:	08007ff3 	.word	0x08007ff3
 8007fb8:	08007fe3 	.word	0x08007fe3
 8007fbc:	08007ff3 	.word	0x08007ff3
 8007fc0:	08007ff3 	.word	0x08007ff3
 8007fc4:	08007ff3 	.word	0x08007ff3
 8007fc8:	08007feb 	.word	0x08007feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fcc:	f7fd f9bc 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8007fd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fd2:	e014      	b.n	8007ffe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fd4:	f7fd f9ce 	bl	8005374 <HAL_RCC_GetPCLK2Freq>
 8007fd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fda:	e010      	b.n	8007ffe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fdc:	4b1a      	ldr	r3, [pc, #104]	; (8008048 <UART_SetConfig+0x5c0>)
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fe0:	e00d      	b.n	8007ffe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fe2:	f7fd f919 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 8007fe6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fe8:	e009      	b.n	8007ffe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ff0:	e005      	b.n	8007ffe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ffc:	bf00      	nop
    }

    if (pclk != 0U)
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	2b00      	cmp	r3, #0
 8008002:	d028      	beq.n	8008056 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	4a10      	ldr	r2, [pc, #64]	; (800804c <UART_SetConfig+0x5c4>)
 800800a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800800e:	461a      	mov	r2, r3
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	fbb3 f2f2 	udiv	r2, r3, r2
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	085b      	lsrs	r3, r3, #1
 800801c:	441a      	add	r2, r3
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	fbb2 f3f3 	udiv	r3, r2, r3
 8008026:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008028:	6a3b      	ldr	r3, [r7, #32]
 800802a:	2b0f      	cmp	r3, #15
 800802c:	d910      	bls.n	8008050 <UART_SetConfig+0x5c8>
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008034:	d20c      	bcs.n	8008050 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	b29a      	uxth	r2, r3
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	60da      	str	r2, [r3, #12]
 8008040:	e009      	b.n	8008056 <UART_SetConfig+0x5ce>
 8008042:	bf00      	nop
 8008044:	40008000 	.word	0x40008000
 8008048:	00f42400 	.word	0x00f42400
 800804c:	0800b200 	.word	0x0800b200
      }
      else
      {
        ret = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2201      	movs	r2, #1
 800805a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2201      	movs	r2, #1
 8008062:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2200      	movs	r2, #0
 800806a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	2200      	movs	r2, #0
 8008070:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008072:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008076:	4618      	mov	r0, r3
 8008078:	3730      	adds	r7, #48	; 0x30
 800807a:	46bd      	mov	sp, r7
 800807c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008080 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00a      	beq.n	80080aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	430a      	orrs	r2, r1
 80080ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00a      	beq.n	80080ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f2:	f003 0308 	and.w	r3, r3, #8
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008114:	f003 0310 	and.w	r3, r3, #16
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008136:	f003 0320 	and.w	r3, r3, #32
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	430a      	orrs	r2, r1
 8008152:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815c:	2b00      	cmp	r3, #0
 800815e:	d01a      	beq.n	8008196 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	430a      	orrs	r2, r1
 8008174:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800817e:	d10a      	bne.n	8008196 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	430a      	orrs	r2, r1
 8008194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00a      	beq.n	80081b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	605a      	str	r2, [r3, #4]
  }
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af02      	add	r7, sp, #8
 80081ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081d4:	f7fb fa96 	bl	8003704 <HAL_GetTick>
 80081d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0308 	and.w	r3, r3, #8
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	d10e      	bne.n	8008206 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f82f 	bl	800825a <UART_WaitOnFlagUntilTimeout>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e025      	b.n	8008252 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0304 	and.w	r3, r3, #4
 8008210:	2b04      	cmp	r3, #4
 8008212:	d10e      	bne.n	8008232 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f819 	bl	800825a <UART_WaitOnFlagUntilTimeout>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e00f      	b.n	8008252 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2220      	movs	r2, #32
 8008236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2220      	movs	r2, #32
 800823e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b09c      	sub	sp, #112	; 0x70
 800825e:	af00      	add	r7, sp, #0
 8008260:	60f8      	str	r0, [r7, #12]
 8008262:	60b9      	str	r1, [r7, #8]
 8008264:	603b      	str	r3, [r7, #0]
 8008266:	4613      	mov	r3, r2
 8008268:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800826a:	e0a9      	b.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800826c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800826e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008272:	f000 80a5 	beq.w	80083c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008276:	f7fb fa45 	bl	8003704 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008282:	429a      	cmp	r2, r3
 8008284:	d302      	bcc.n	800828c <UART_WaitOnFlagUntilTimeout+0x32>
 8008286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008288:	2b00      	cmp	r3, #0
 800828a:	d140      	bne.n	800830e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008294:	e853 3f00 	ldrex	r3, [r3]
 8008298:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800829a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800829c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082a0:	667b      	str	r3, [r7, #100]	; 0x64
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082b2:	e841 2300 	strex	r3, r2, [r1]
 80082b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1e6      	bne.n	800828c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3308      	adds	r3, #8
 80082c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c8:	e853 3f00 	ldrex	r3, [r3]
 80082cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d0:	f023 0301 	bic.w	r3, r3, #1
 80082d4:	663b      	str	r3, [r7, #96]	; 0x60
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3308      	adds	r3, #8
 80082dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082de:	64ba      	str	r2, [r7, #72]	; 0x48
 80082e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082e6:	e841 2300 	strex	r3, r2, [r1]
 80082ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1e5      	bne.n	80082be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2220      	movs	r2, #32
 80082f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2220      	movs	r2, #32
 80082fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e069      	b.n	80083e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b00      	cmp	r3, #0
 800831a:	d051      	beq.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800832a:	d149      	bne.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008334:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	e853 3f00 	ldrex	r3, [r3]
 8008342:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800834a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008354:	637b      	str	r3, [r7, #52]	; 0x34
 8008356:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800835a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e6      	bne.n	8008336 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3308      	adds	r3, #8
 800836e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	613b      	str	r3, [r7, #16]
   return(result);
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	f023 0301 	bic.w	r3, r3, #1
 800837e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3308      	adds	r3, #8
 8008386:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008388:	623a      	str	r2, [r7, #32]
 800838a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838c:	69f9      	ldr	r1, [r7, #28]
 800838e:	6a3a      	ldr	r2, [r7, #32]
 8008390:	e841 2300 	strex	r3, r2, [r1]
 8008394:	61bb      	str	r3, [r7, #24]
   return(result);
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e5      	bne.n	8008368 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2220      	movs	r2, #32
 80083a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2220      	movs	r2, #32
 80083a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2220      	movs	r2, #32
 80083b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e010      	b.n	80083e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	69da      	ldr	r2, [r3, #28]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	4013      	ands	r3, r2
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	bf0c      	ite	eq
 80083d0:	2301      	moveq	r3, #1
 80083d2:	2300      	movne	r3, #0
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	461a      	mov	r2, r3
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	429a      	cmp	r2, r3
 80083dc:	f43f af46 	beq.w	800826c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3770      	adds	r7, #112	; 0x70
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b085      	sub	sp, #20
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d101      	bne.n	8008400 <HAL_UARTEx_DisableFifoMode+0x16>
 80083fc:	2302      	movs	r3, #2
 80083fe:	e027      	b.n	8008450 <HAL_UARTEx_DisableFifoMode+0x66>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2224      	movs	r2, #36	; 0x24
 800840c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 0201 	bic.w	r2, r2, #1
 8008426:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800842e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2220      	movs	r2, #32
 8008442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800846c:	2b01      	cmp	r3, #1
 800846e:	d101      	bne.n	8008474 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008470:	2302      	movs	r3, #2
 8008472:	e02d      	b.n	80084d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2224      	movs	r2, #36	; 0x24
 8008480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 0201 	bic.w	r2, r2, #1
 800849a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	430a      	orrs	r2, r1
 80084ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f84f 	bl	8008554 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d101      	bne.n	80084f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084ec:	2302      	movs	r3, #2
 80084ee:	e02d      	b.n	800854c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2224      	movs	r2, #36	; 0x24
 80084fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f022 0201 	bic.w	r2, r2, #1
 8008516:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f811 	bl	8008554 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2220      	movs	r2, #32
 800853e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008560:	2b00      	cmp	r3, #0
 8008562:	d108      	bne.n	8008576 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008574:	e031      	b.n	80085da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008576:	2308      	movs	r3, #8
 8008578:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800857a:	2308      	movs	r3, #8
 800857c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	0e5b      	lsrs	r3, r3, #25
 8008586:	b2db      	uxtb	r3, r3
 8008588:	f003 0307 	and.w	r3, r3, #7
 800858c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	0f5b      	lsrs	r3, r3, #29
 8008596:	b2db      	uxtb	r3, r3
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800859e:	7bbb      	ldrb	r3, [r7, #14]
 80085a0:	7b3a      	ldrb	r2, [r7, #12]
 80085a2:	4911      	ldr	r1, [pc, #68]	; (80085e8 <UARTEx_SetNbDataToProcess+0x94>)
 80085a4:	5c8a      	ldrb	r2, [r1, r2]
 80085a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085aa:	7b3a      	ldrb	r2, [r7, #12]
 80085ac:	490f      	ldr	r1, [pc, #60]	; (80085ec <UARTEx_SetNbDataToProcess+0x98>)
 80085ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	7b7a      	ldrb	r2, [r7, #13]
 80085c0:	4909      	ldr	r1, [pc, #36]	; (80085e8 <UARTEx_SetNbDataToProcess+0x94>)
 80085c2:	5c8a      	ldrb	r2, [r1, r2]
 80085c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80085c8:	7b7a      	ldrb	r2, [r7, #13]
 80085ca:	4908      	ldr	r1, [pc, #32]	; (80085ec <UARTEx_SetNbDataToProcess+0x98>)
 80085cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80085da:	bf00      	nop
 80085dc:	3714      	adds	r7, #20
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	0800b218 	.word	0x0800b218
 80085ec:	0800b220 	.word	0x0800b220

080085f0 <__errno>:
 80085f0:	4b01      	ldr	r3, [pc, #4]	; (80085f8 <__errno+0x8>)
 80085f2:	6818      	ldr	r0, [r3, #0]
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	20000054 	.word	0x20000054

080085fc <__libc_init_array>:
 80085fc:	b570      	push	{r4, r5, r6, lr}
 80085fe:	4d0d      	ldr	r5, [pc, #52]	; (8008634 <__libc_init_array+0x38>)
 8008600:	4c0d      	ldr	r4, [pc, #52]	; (8008638 <__libc_init_array+0x3c>)
 8008602:	1b64      	subs	r4, r4, r5
 8008604:	10a4      	asrs	r4, r4, #2
 8008606:	2600      	movs	r6, #0
 8008608:	42a6      	cmp	r6, r4
 800860a:	d109      	bne.n	8008620 <__libc_init_array+0x24>
 800860c:	4d0b      	ldr	r5, [pc, #44]	; (800863c <__libc_init_array+0x40>)
 800860e:	4c0c      	ldr	r4, [pc, #48]	; (8008640 <__libc_init_array+0x44>)
 8008610:	f002 fd50 	bl	800b0b4 <_init>
 8008614:	1b64      	subs	r4, r4, r5
 8008616:	10a4      	asrs	r4, r4, #2
 8008618:	2600      	movs	r6, #0
 800861a:	42a6      	cmp	r6, r4
 800861c:	d105      	bne.n	800862a <__libc_init_array+0x2e>
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	f855 3b04 	ldr.w	r3, [r5], #4
 8008624:	4798      	blx	r3
 8008626:	3601      	adds	r6, #1
 8008628:	e7ee      	b.n	8008608 <__libc_init_array+0xc>
 800862a:	f855 3b04 	ldr.w	r3, [r5], #4
 800862e:	4798      	blx	r3
 8008630:	3601      	adds	r6, #1
 8008632:	e7f2      	b.n	800861a <__libc_init_array+0x1e>
 8008634:	0800b60c 	.word	0x0800b60c
 8008638:	0800b60c 	.word	0x0800b60c
 800863c:	0800b60c 	.word	0x0800b60c
 8008640:	0800b610 	.word	0x0800b610

08008644 <memcpy>:
 8008644:	440a      	add	r2, r1
 8008646:	4291      	cmp	r1, r2
 8008648:	f100 33ff 	add.w	r3, r0, #4294967295
 800864c:	d100      	bne.n	8008650 <memcpy+0xc>
 800864e:	4770      	bx	lr
 8008650:	b510      	push	{r4, lr}
 8008652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800865a:	4291      	cmp	r1, r2
 800865c:	d1f9      	bne.n	8008652 <memcpy+0xe>
 800865e:	bd10      	pop	{r4, pc}

08008660 <memset>:
 8008660:	4402      	add	r2, r0
 8008662:	4603      	mov	r3, r0
 8008664:	4293      	cmp	r3, r2
 8008666:	d100      	bne.n	800866a <memset+0xa>
 8008668:	4770      	bx	lr
 800866a:	f803 1b01 	strb.w	r1, [r3], #1
 800866e:	e7f9      	b.n	8008664 <memset+0x4>

08008670 <__cvt>:
 8008670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008674:	ec55 4b10 	vmov	r4, r5, d0
 8008678:	2d00      	cmp	r5, #0
 800867a:	460e      	mov	r6, r1
 800867c:	4619      	mov	r1, r3
 800867e:	462b      	mov	r3, r5
 8008680:	bfbb      	ittet	lt
 8008682:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008686:	461d      	movlt	r5, r3
 8008688:	2300      	movge	r3, #0
 800868a:	232d      	movlt	r3, #45	; 0x2d
 800868c:	700b      	strb	r3, [r1, #0]
 800868e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008690:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008694:	4691      	mov	r9, r2
 8008696:	f023 0820 	bic.w	r8, r3, #32
 800869a:	bfbc      	itt	lt
 800869c:	4622      	movlt	r2, r4
 800869e:	4614      	movlt	r4, r2
 80086a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086a4:	d005      	beq.n	80086b2 <__cvt+0x42>
 80086a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80086aa:	d100      	bne.n	80086ae <__cvt+0x3e>
 80086ac:	3601      	adds	r6, #1
 80086ae:	2102      	movs	r1, #2
 80086b0:	e000      	b.n	80086b4 <__cvt+0x44>
 80086b2:	2103      	movs	r1, #3
 80086b4:	ab03      	add	r3, sp, #12
 80086b6:	9301      	str	r3, [sp, #4]
 80086b8:	ab02      	add	r3, sp, #8
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	ec45 4b10 	vmov	d0, r4, r5
 80086c0:	4653      	mov	r3, sl
 80086c2:	4632      	mov	r2, r6
 80086c4:	f000 fce4 	bl	8009090 <_dtoa_r>
 80086c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80086cc:	4607      	mov	r7, r0
 80086ce:	d102      	bne.n	80086d6 <__cvt+0x66>
 80086d0:	f019 0f01 	tst.w	r9, #1
 80086d4:	d022      	beq.n	800871c <__cvt+0xac>
 80086d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086da:	eb07 0906 	add.w	r9, r7, r6
 80086de:	d110      	bne.n	8008702 <__cvt+0x92>
 80086e0:	783b      	ldrb	r3, [r7, #0]
 80086e2:	2b30      	cmp	r3, #48	; 0x30
 80086e4:	d10a      	bne.n	80086fc <__cvt+0x8c>
 80086e6:	2200      	movs	r2, #0
 80086e8:	2300      	movs	r3, #0
 80086ea:	4620      	mov	r0, r4
 80086ec:	4629      	mov	r1, r5
 80086ee:	f7f9 f8a3 	bl	8001838 <__aeabi_dcmpeq>
 80086f2:	b918      	cbnz	r0, 80086fc <__cvt+0x8c>
 80086f4:	f1c6 0601 	rsb	r6, r6, #1
 80086f8:	f8ca 6000 	str.w	r6, [sl]
 80086fc:	f8da 3000 	ldr.w	r3, [sl]
 8008700:	4499      	add	r9, r3
 8008702:	2200      	movs	r2, #0
 8008704:	2300      	movs	r3, #0
 8008706:	4620      	mov	r0, r4
 8008708:	4629      	mov	r1, r5
 800870a:	f7f9 f895 	bl	8001838 <__aeabi_dcmpeq>
 800870e:	b108      	cbz	r0, 8008714 <__cvt+0xa4>
 8008710:	f8cd 900c 	str.w	r9, [sp, #12]
 8008714:	2230      	movs	r2, #48	; 0x30
 8008716:	9b03      	ldr	r3, [sp, #12]
 8008718:	454b      	cmp	r3, r9
 800871a:	d307      	bcc.n	800872c <__cvt+0xbc>
 800871c:	9b03      	ldr	r3, [sp, #12]
 800871e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008720:	1bdb      	subs	r3, r3, r7
 8008722:	4638      	mov	r0, r7
 8008724:	6013      	str	r3, [r2, #0]
 8008726:	b004      	add	sp, #16
 8008728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800872c:	1c59      	adds	r1, r3, #1
 800872e:	9103      	str	r1, [sp, #12]
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	e7f0      	b.n	8008716 <__cvt+0xa6>

08008734 <__exponent>:
 8008734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008736:	4603      	mov	r3, r0
 8008738:	2900      	cmp	r1, #0
 800873a:	bfb8      	it	lt
 800873c:	4249      	neglt	r1, r1
 800873e:	f803 2b02 	strb.w	r2, [r3], #2
 8008742:	bfb4      	ite	lt
 8008744:	222d      	movlt	r2, #45	; 0x2d
 8008746:	222b      	movge	r2, #43	; 0x2b
 8008748:	2909      	cmp	r1, #9
 800874a:	7042      	strb	r2, [r0, #1]
 800874c:	dd2a      	ble.n	80087a4 <__exponent+0x70>
 800874e:	f10d 0407 	add.w	r4, sp, #7
 8008752:	46a4      	mov	ip, r4
 8008754:	270a      	movs	r7, #10
 8008756:	46a6      	mov	lr, r4
 8008758:	460a      	mov	r2, r1
 800875a:	fb91 f6f7 	sdiv	r6, r1, r7
 800875e:	fb07 1516 	mls	r5, r7, r6, r1
 8008762:	3530      	adds	r5, #48	; 0x30
 8008764:	2a63      	cmp	r2, #99	; 0x63
 8008766:	f104 34ff 	add.w	r4, r4, #4294967295
 800876a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800876e:	4631      	mov	r1, r6
 8008770:	dcf1      	bgt.n	8008756 <__exponent+0x22>
 8008772:	3130      	adds	r1, #48	; 0x30
 8008774:	f1ae 0502 	sub.w	r5, lr, #2
 8008778:	f804 1c01 	strb.w	r1, [r4, #-1]
 800877c:	1c44      	adds	r4, r0, #1
 800877e:	4629      	mov	r1, r5
 8008780:	4561      	cmp	r1, ip
 8008782:	d30a      	bcc.n	800879a <__exponent+0x66>
 8008784:	f10d 0209 	add.w	r2, sp, #9
 8008788:	eba2 020e 	sub.w	r2, r2, lr
 800878c:	4565      	cmp	r5, ip
 800878e:	bf88      	it	hi
 8008790:	2200      	movhi	r2, #0
 8008792:	4413      	add	r3, r2
 8008794:	1a18      	subs	r0, r3, r0
 8008796:	b003      	add	sp, #12
 8008798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800879a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800879e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80087a2:	e7ed      	b.n	8008780 <__exponent+0x4c>
 80087a4:	2330      	movs	r3, #48	; 0x30
 80087a6:	3130      	adds	r1, #48	; 0x30
 80087a8:	7083      	strb	r3, [r0, #2]
 80087aa:	70c1      	strb	r1, [r0, #3]
 80087ac:	1d03      	adds	r3, r0, #4
 80087ae:	e7f1      	b.n	8008794 <__exponent+0x60>

080087b0 <_printf_float>:
 80087b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b4:	ed2d 8b02 	vpush	{d8}
 80087b8:	b08d      	sub	sp, #52	; 0x34
 80087ba:	460c      	mov	r4, r1
 80087bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80087c0:	4616      	mov	r6, r2
 80087c2:	461f      	mov	r7, r3
 80087c4:	4605      	mov	r5, r0
 80087c6:	f001 fb47 	bl	8009e58 <_localeconv_r>
 80087ca:	f8d0 a000 	ldr.w	sl, [r0]
 80087ce:	4650      	mov	r0, sl
 80087d0:	f7f8 fbb4 	bl	8000f3c <strlen>
 80087d4:	2300      	movs	r3, #0
 80087d6:	930a      	str	r3, [sp, #40]	; 0x28
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	9305      	str	r3, [sp, #20]
 80087dc:	f8d8 3000 	ldr.w	r3, [r8]
 80087e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087e4:	3307      	adds	r3, #7
 80087e6:	f023 0307 	bic.w	r3, r3, #7
 80087ea:	f103 0208 	add.w	r2, r3, #8
 80087ee:	f8c8 2000 	str.w	r2, [r8]
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80087fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008802:	9307      	str	r3, [sp, #28]
 8008804:	f8cd 8018 	str.w	r8, [sp, #24]
 8008808:	ee08 0a10 	vmov	s16, r0
 800880c:	4b9f      	ldr	r3, [pc, #636]	; (8008a8c <_printf_float+0x2dc>)
 800880e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008812:	f04f 32ff 	mov.w	r2, #4294967295
 8008816:	f7f9 f841 	bl	800189c <__aeabi_dcmpun>
 800881a:	bb88      	cbnz	r0, 8008880 <_printf_float+0xd0>
 800881c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008820:	4b9a      	ldr	r3, [pc, #616]	; (8008a8c <_printf_float+0x2dc>)
 8008822:	f04f 32ff 	mov.w	r2, #4294967295
 8008826:	f7f9 f81b 	bl	8001860 <__aeabi_dcmple>
 800882a:	bb48      	cbnz	r0, 8008880 <_printf_float+0xd0>
 800882c:	2200      	movs	r2, #0
 800882e:	2300      	movs	r3, #0
 8008830:	4640      	mov	r0, r8
 8008832:	4649      	mov	r1, r9
 8008834:	f7f9 f80a 	bl	800184c <__aeabi_dcmplt>
 8008838:	b110      	cbz	r0, 8008840 <_printf_float+0x90>
 800883a:	232d      	movs	r3, #45	; 0x2d
 800883c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008840:	4b93      	ldr	r3, [pc, #588]	; (8008a90 <_printf_float+0x2e0>)
 8008842:	4894      	ldr	r0, [pc, #592]	; (8008a94 <_printf_float+0x2e4>)
 8008844:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008848:	bf94      	ite	ls
 800884a:	4698      	movls	r8, r3
 800884c:	4680      	movhi	r8, r0
 800884e:	2303      	movs	r3, #3
 8008850:	6123      	str	r3, [r4, #16]
 8008852:	9b05      	ldr	r3, [sp, #20]
 8008854:	f023 0204 	bic.w	r2, r3, #4
 8008858:	6022      	str	r2, [r4, #0]
 800885a:	f04f 0900 	mov.w	r9, #0
 800885e:	9700      	str	r7, [sp, #0]
 8008860:	4633      	mov	r3, r6
 8008862:	aa0b      	add	r2, sp, #44	; 0x2c
 8008864:	4621      	mov	r1, r4
 8008866:	4628      	mov	r0, r5
 8008868:	f000 f9d8 	bl	8008c1c <_printf_common>
 800886c:	3001      	adds	r0, #1
 800886e:	f040 8090 	bne.w	8008992 <_printf_float+0x1e2>
 8008872:	f04f 30ff 	mov.w	r0, #4294967295
 8008876:	b00d      	add	sp, #52	; 0x34
 8008878:	ecbd 8b02 	vpop	{d8}
 800887c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008880:	4642      	mov	r2, r8
 8008882:	464b      	mov	r3, r9
 8008884:	4640      	mov	r0, r8
 8008886:	4649      	mov	r1, r9
 8008888:	f7f9 f808 	bl	800189c <__aeabi_dcmpun>
 800888c:	b140      	cbz	r0, 80088a0 <_printf_float+0xf0>
 800888e:	464b      	mov	r3, r9
 8008890:	2b00      	cmp	r3, #0
 8008892:	bfbc      	itt	lt
 8008894:	232d      	movlt	r3, #45	; 0x2d
 8008896:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800889a:	487f      	ldr	r0, [pc, #508]	; (8008a98 <_printf_float+0x2e8>)
 800889c:	4b7f      	ldr	r3, [pc, #508]	; (8008a9c <_printf_float+0x2ec>)
 800889e:	e7d1      	b.n	8008844 <_printf_float+0x94>
 80088a0:	6863      	ldr	r3, [r4, #4]
 80088a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80088a6:	9206      	str	r2, [sp, #24]
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	d13f      	bne.n	800892c <_printf_float+0x17c>
 80088ac:	2306      	movs	r3, #6
 80088ae:	6063      	str	r3, [r4, #4]
 80088b0:	9b05      	ldr	r3, [sp, #20]
 80088b2:	6861      	ldr	r1, [r4, #4]
 80088b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80088b8:	2300      	movs	r3, #0
 80088ba:	9303      	str	r3, [sp, #12]
 80088bc:	ab0a      	add	r3, sp, #40	; 0x28
 80088be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80088c2:	ab09      	add	r3, sp, #36	; 0x24
 80088c4:	ec49 8b10 	vmov	d0, r8, r9
 80088c8:	9300      	str	r3, [sp, #0]
 80088ca:	6022      	str	r2, [r4, #0]
 80088cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80088d0:	4628      	mov	r0, r5
 80088d2:	f7ff fecd 	bl	8008670 <__cvt>
 80088d6:	9b06      	ldr	r3, [sp, #24]
 80088d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088da:	2b47      	cmp	r3, #71	; 0x47
 80088dc:	4680      	mov	r8, r0
 80088de:	d108      	bne.n	80088f2 <_printf_float+0x142>
 80088e0:	1cc8      	adds	r0, r1, #3
 80088e2:	db02      	blt.n	80088ea <_printf_float+0x13a>
 80088e4:	6863      	ldr	r3, [r4, #4]
 80088e6:	4299      	cmp	r1, r3
 80088e8:	dd41      	ble.n	800896e <_printf_float+0x1be>
 80088ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80088ee:	fa5f fb8b 	uxtb.w	fp, fp
 80088f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088f6:	d820      	bhi.n	800893a <_printf_float+0x18a>
 80088f8:	3901      	subs	r1, #1
 80088fa:	465a      	mov	r2, fp
 80088fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008900:	9109      	str	r1, [sp, #36]	; 0x24
 8008902:	f7ff ff17 	bl	8008734 <__exponent>
 8008906:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008908:	1813      	adds	r3, r2, r0
 800890a:	2a01      	cmp	r2, #1
 800890c:	4681      	mov	r9, r0
 800890e:	6123      	str	r3, [r4, #16]
 8008910:	dc02      	bgt.n	8008918 <_printf_float+0x168>
 8008912:	6822      	ldr	r2, [r4, #0]
 8008914:	07d2      	lsls	r2, r2, #31
 8008916:	d501      	bpl.n	800891c <_printf_float+0x16c>
 8008918:	3301      	adds	r3, #1
 800891a:	6123      	str	r3, [r4, #16]
 800891c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008920:	2b00      	cmp	r3, #0
 8008922:	d09c      	beq.n	800885e <_printf_float+0xae>
 8008924:	232d      	movs	r3, #45	; 0x2d
 8008926:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800892a:	e798      	b.n	800885e <_printf_float+0xae>
 800892c:	9a06      	ldr	r2, [sp, #24]
 800892e:	2a47      	cmp	r2, #71	; 0x47
 8008930:	d1be      	bne.n	80088b0 <_printf_float+0x100>
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1bc      	bne.n	80088b0 <_printf_float+0x100>
 8008936:	2301      	movs	r3, #1
 8008938:	e7b9      	b.n	80088ae <_printf_float+0xfe>
 800893a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800893e:	d118      	bne.n	8008972 <_printf_float+0x1c2>
 8008940:	2900      	cmp	r1, #0
 8008942:	6863      	ldr	r3, [r4, #4]
 8008944:	dd0b      	ble.n	800895e <_printf_float+0x1ae>
 8008946:	6121      	str	r1, [r4, #16]
 8008948:	b913      	cbnz	r3, 8008950 <_printf_float+0x1a0>
 800894a:	6822      	ldr	r2, [r4, #0]
 800894c:	07d0      	lsls	r0, r2, #31
 800894e:	d502      	bpl.n	8008956 <_printf_float+0x1a6>
 8008950:	3301      	adds	r3, #1
 8008952:	440b      	add	r3, r1
 8008954:	6123      	str	r3, [r4, #16]
 8008956:	65a1      	str	r1, [r4, #88]	; 0x58
 8008958:	f04f 0900 	mov.w	r9, #0
 800895c:	e7de      	b.n	800891c <_printf_float+0x16c>
 800895e:	b913      	cbnz	r3, 8008966 <_printf_float+0x1b6>
 8008960:	6822      	ldr	r2, [r4, #0]
 8008962:	07d2      	lsls	r2, r2, #31
 8008964:	d501      	bpl.n	800896a <_printf_float+0x1ba>
 8008966:	3302      	adds	r3, #2
 8008968:	e7f4      	b.n	8008954 <_printf_float+0x1a4>
 800896a:	2301      	movs	r3, #1
 800896c:	e7f2      	b.n	8008954 <_printf_float+0x1a4>
 800896e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008974:	4299      	cmp	r1, r3
 8008976:	db05      	blt.n	8008984 <_printf_float+0x1d4>
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	6121      	str	r1, [r4, #16]
 800897c:	07d8      	lsls	r0, r3, #31
 800897e:	d5ea      	bpl.n	8008956 <_printf_float+0x1a6>
 8008980:	1c4b      	adds	r3, r1, #1
 8008982:	e7e7      	b.n	8008954 <_printf_float+0x1a4>
 8008984:	2900      	cmp	r1, #0
 8008986:	bfd4      	ite	le
 8008988:	f1c1 0202 	rsble	r2, r1, #2
 800898c:	2201      	movgt	r2, #1
 800898e:	4413      	add	r3, r2
 8008990:	e7e0      	b.n	8008954 <_printf_float+0x1a4>
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	055a      	lsls	r2, r3, #21
 8008996:	d407      	bmi.n	80089a8 <_printf_float+0x1f8>
 8008998:	6923      	ldr	r3, [r4, #16]
 800899a:	4642      	mov	r2, r8
 800899c:	4631      	mov	r1, r6
 800899e:	4628      	mov	r0, r5
 80089a0:	47b8      	blx	r7
 80089a2:	3001      	adds	r0, #1
 80089a4:	d12c      	bne.n	8008a00 <_printf_float+0x250>
 80089a6:	e764      	b.n	8008872 <_printf_float+0xc2>
 80089a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089ac:	f240 80e0 	bls.w	8008b70 <_printf_float+0x3c0>
 80089b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089b4:	2200      	movs	r2, #0
 80089b6:	2300      	movs	r3, #0
 80089b8:	f7f8 ff3e 	bl	8001838 <__aeabi_dcmpeq>
 80089bc:	2800      	cmp	r0, #0
 80089be:	d034      	beq.n	8008a2a <_printf_float+0x27a>
 80089c0:	4a37      	ldr	r2, [pc, #220]	; (8008aa0 <_printf_float+0x2f0>)
 80089c2:	2301      	movs	r3, #1
 80089c4:	4631      	mov	r1, r6
 80089c6:	4628      	mov	r0, r5
 80089c8:	47b8      	blx	r7
 80089ca:	3001      	adds	r0, #1
 80089cc:	f43f af51 	beq.w	8008872 <_printf_float+0xc2>
 80089d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089d4:	429a      	cmp	r2, r3
 80089d6:	db02      	blt.n	80089de <_printf_float+0x22e>
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	07d8      	lsls	r0, r3, #31
 80089dc:	d510      	bpl.n	8008a00 <_printf_float+0x250>
 80089de:	ee18 3a10 	vmov	r3, s16
 80089e2:	4652      	mov	r2, sl
 80089e4:	4631      	mov	r1, r6
 80089e6:	4628      	mov	r0, r5
 80089e8:	47b8      	blx	r7
 80089ea:	3001      	adds	r0, #1
 80089ec:	f43f af41 	beq.w	8008872 <_printf_float+0xc2>
 80089f0:	f04f 0800 	mov.w	r8, #0
 80089f4:	f104 091a 	add.w	r9, r4, #26
 80089f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089fa:	3b01      	subs	r3, #1
 80089fc:	4543      	cmp	r3, r8
 80089fe:	dc09      	bgt.n	8008a14 <_printf_float+0x264>
 8008a00:	6823      	ldr	r3, [r4, #0]
 8008a02:	079b      	lsls	r3, r3, #30
 8008a04:	f100 8105 	bmi.w	8008c12 <_printf_float+0x462>
 8008a08:	68e0      	ldr	r0, [r4, #12]
 8008a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a0c:	4298      	cmp	r0, r3
 8008a0e:	bfb8      	it	lt
 8008a10:	4618      	movlt	r0, r3
 8008a12:	e730      	b.n	8008876 <_printf_float+0xc6>
 8008a14:	2301      	movs	r3, #1
 8008a16:	464a      	mov	r2, r9
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	47b8      	blx	r7
 8008a1e:	3001      	adds	r0, #1
 8008a20:	f43f af27 	beq.w	8008872 <_printf_float+0xc2>
 8008a24:	f108 0801 	add.w	r8, r8, #1
 8008a28:	e7e6      	b.n	80089f8 <_printf_float+0x248>
 8008a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	dc39      	bgt.n	8008aa4 <_printf_float+0x2f4>
 8008a30:	4a1b      	ldr	r2, [pc, #108]	; (8008aa0 <_printf_float+0x2f0>)
 8008a32:	2301      	movs	r3, #1
 8008a34:	4631      	mov	r1, r6
 8008a36:	4628      	mov	r0, r5
 8008a38:	47b8      	blx	r7
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	f43f af19 	beq.w	8008872 <_printf_float+0xc2>
 8008a40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a44:	4313      	orrs	r3, r2
 8008a46:	d102      	bne.n	8008a4e <_printf_float+0x29e>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	07d9      	lsls	r1, r3, #31
 8008a4c:	d5d8      	bpl.n	8008a00 <_printf_float+0x250>
 8008a4e:	ee18 3a10 	vmov	r3, s16
 8008a52:	4652      	mov	r2, sl
 8008a54:	4631      	mov	r1, r6
 8008a56:	4628      	mov	r0, r5
 8008a58:	47b8      	blx	r7
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	f43f af09 	beq.w	8008872 <_printf_float+0xc2>
 8008a60:	f04f 0900 	mov.w	r9, #0
 8008a64:	f104 0a1a 	add.w	sl, r4, #26
 8008a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a6a:	425b      	negs	r3, r3
 8008a6c:	454b      	cmp	r3, r9
 8008a6e:	dc01      	bgt.n	8008a74 <_printf_float+0x2c4>
 8008a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a72:	e792      	b.n	800899a <_printf_float+0x1ea>
 8008a74:	2301      	movs	r3, #1
 8008a76:	4652      	mov	r2, sl
 8008a78:	4631      	mov	r1, r6
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	47b8      	blx	r7
 8008a7e:	3001      	adds	r0, #1
 8008a80:	f43f aef7 	beq.w	8008872 <_printf_float+0xc2>
 8008a84:	f109 0901 	add.w	r9, r9, #1
 8008a88:	e7ee      	b.n	8008a68 <_printf_float+0x2b8>
 8008a8a:	bf00      	nop
 8008a8c:	7fefffff 	.word	0x7fefffff
 8008a90:	0800b22c 	.word	0x0800b22c
 8008a94:	0800b230 	.word	0x0800b230
 8008a98:	0800b238 	.word	0x0800b238
 8008a9c:	0800b234 	.word	0x0800b234
 8008aa0:	0800b23c 	.word	0x0800b23c
 8008aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	bfa8      	it	ge
 8008aac:	461a      	movge	r2, r3
 8008aae:	2a00      	cmp	r2, #0
 8008ab0:	4691      	mov	r9, r2
 8008ab2:	dc37      	bgt.n	8008b24 <_printf_float+0x374>
 8008ab4:	f04f 0b00 	mov.w	fp, #0
 8008ab8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008abc:	f104 021a 	add.w	r2, r4, #26
 8008ac0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ac2:	9305      	str	r3, [sp, #20]
 8008ac4:	eba3 0309 	sub.w	r3, r3, r9
 8008ac8:	455b      	cmp	r3, fp
 8008aca:	dc33      	bgt.n	8008b34 <_printf_float+0x384>
 8008acc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	db3b      	blt.n	8008b4c <_printf_float+0x39c>
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	07da      	lsls	r2, r3, #31
 8008ad8:	d438      	bmi.n	8008b4c <_printf_float+0x39c>
 8008ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008adc:	9a05      	ldr	r2, [sp, #20]
 8008ade:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ae0:	1a9a      	subs	r2, r3, r2
 8008ae2:	eba3 0901 	sub.w	r9, r3, r1
 8008ae6:	4591      	cmp	r9, r2
 8008ae8:	bfa8      	it	ge
 8008aea:	4691      	movge	r9, r2
 8008aec:	f1b9 0f00 	cmp.w	r9, #0
 8008af0:	dc35      	bgt.n	8008b5e <_printf_float+0x3ae>
 8008af2:	f04f 0800 	mov.w	r8, #0
 8008af6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008afa:	f104 0a1a 	add.w	sl, r4, #26
 8008afe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b02:	1a9b      	subs	r3, r3, r2
 8008b04:	eba3 0309 	sub.w	r3, r3, r9
 8008b08:	4543      	cmp	r3, r8
 8008b0a:	f77f af79 	ble.w	8008a00 <_printf_float+0x250>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	4652      	mov	r2, sl
 8008b12:	4631      	mov	r1, r6
 8008b14:	4628      	mov	r0, r5
 8008b16:	47b8      	blx	r7
 8008b18:	3001      	adds	r0, #1
 8008b1a:	f43f aeaa 	beq.w	8008872 <_printf_float+0xc2>
 8008b1e:	f108 0801 	add.w	r8, r8, #1
 8008b22:	e7ec      	b.n	8008afe <_printf_float+0x34e>
 8008b24:	4613      	mov	r3, r2
 8008b26:	4631      	mov	r1, r6
 8008b28:	4642      	mov	r2, r8
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	47b8      	blx	r7
 8008b2e:	3001      	adds	r0, #1
 8008b30:	d1c0      	bne.n	8008ab4 <_printf_float+0x304>
 8008b32:	e69e      	b.n	8008872 <_printf_float+0xc2>
 8008b34:	2301      	movs	r3, #1
 8008b36:	4631      	mov	r1, r6
 8008b38:	4628      	mov	r0, r5
 8008b3a:	9205      	str	r2, [sp, #20]
 8008b3c:	47b8      	blx	r7
 8008b3e:	3001      	adds	r0, #1
 8008b40:	f43f ae97 	beq.w	8008872 <_printf_float+0xc2>
 8008b44:	9a05      	ldr	r2, [sp, #20]
 8008b46:	f10b 0b01 	add.w	fp, fp, #1
 8008b4a:	e7b9      	b.n	8008ac0 <_printf_float+0x310>
 8008b4c:	ee18 3a10 	vmov	r3, s16
 8008b50:	4652      	mov	r2, sl
 8008b52:	4631      	mov	r1, r6
 8008b54:	4628      	mov	r0, r5
 8008b56:	47b8      	blx	r7
 8008b58:	3001      	adds	r0, #1
 8008b5a:	d1be      	bne.n	8008ada <_printf_float+0x32a>
 8008b5c:	e689      	b.n	8008872 <_printf_float+0xc2>
 8008b5e:	9a05      	ldr	r2, [sp, #20]
 8008b60:	464b      	mov	r3, r9
 8008b62:	4442      	add	r2, r8
 8008b64:	4631      	mov	r1, r6
 8008b66:	4628      	mov	r0, r5
 8008b68:	47b8      	blx	r7
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	d1c1      	bne.n	8008af2 <_printf_float+0x342>
 8008b6e:	e680      	b.n	8008872 <_printf_float+0xc2>
 8008b70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b72:	2a01      	cmp	r2, #1
 8008b74:	dc01      	bgt.n	8008b7a <_printf_float+0x3ca>
 8008b76:	07db      	lsls	r3, r3, #31
 8008b78:	d538      	bpl.n	8008bec <_printf_float+0x43c>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4642      	mov	r2, r8
 8008b7e:	4631      	mov	r1, r6
 8008b80:	4628      	mov	r0, r5
 8008b82:	47b8      	blx	r7
 8008b84:	3001      	adds	r0, #1
 8008b86:	f43f ae74 	beq.w	8008872 <_printf_float+0xc2>
 8008b8a:	ee18 3a10 	vmov	r3, s16
 8008b8e:	4652      	mov	r2, sl
 8008b90:	4631      	mov	r1, r6
 8008b92:	4628      	mov	r0, r5
 8008b94:	47b8      	blx	r7
 8008b96:	3001      	adds	r0, #1
 8008b98:	f43f ae6b 	beq.w	8008872 <_printf_float+0xc2>
 8008b9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	f7f8 fe48 	bl	8001838 <__aeabi_dcmpeq>
 8008ba8:	b9d8      	cbnz	r0, 8008be2 <_printf_float+0x432>
 8008baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bac:	f108 0201 	add.w	r2, r8, #1
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	47b8      	blx	r7
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d10e      	bne.n	8008bda <_printf_float+0x42a>
 8008bbc:	e659      	b.n	8008872 <_printf_float+0xc2>
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	4652      	mov	r2, sl
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	47b8      	blx	r7
 8008bc8:	3001      	adds	r0, #1
 8008bca:	f43f ae52 	beq.w	8008872 <_printf_float+0xc2>
 8008bce:	f108 0801 	add.w	r8, r8, #1
 8008bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	4543      	cmp	r3, r8
 8008bd8:	dcf1      	bgt.n	8008bbe <_printf_float+0x40e>
 8008bda:	464b      	mov	r3, r9
 8008bdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008be0:	e6dc      	b.n	800899c <_printf_float+0x1ec>
 8008be2:	f04f 0800 	mov.w	r8, #0
 8008be6:	f104 0a1a 	add.w	sl, r4, #26
 8008bea:	e7f2      	b.n	8008bd2 <_printf_float+0x422>
 8008bec:	2301      	movs	r3, #1
 8008bee:	4642      	mov	r2, r8
 8008bf0:	e7df      	b.n	8008bb2 <_printf_float+0x402>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	464a      	mov	r2, r9
 8008bf6:	4631      	mov	r1, r6
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	47b8      	blx	r7
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	f43f ae38 	beq.w	8008872 <_printf_float+0xc2>
 8008c02:	f108 0801 	add.w	r8, r8, #1
 8008c06:	68e3      	ldr	r3, [r4, #12]
 8008c08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c0a:	1a5b      	subs	r3, r3, r1
 8008c0c:	4543      	cmp	r3, r8
 8008c0e:	dcf0      	bgt.n	8008bf2 <_printf_float+0x442>
 8008c10:	e6fa      	b.n	8008a08 <_printf_float+0x258>
 8008c12:	f04f 0800 	mov.w	r8, #0
 8008c16:	f104 0919 	add.w	r9, r4, #25
 8008c1a:	e7f4      	b.n	8008c06 <_printf_float+0x456>

08008c1c <_printf_common>:
 8008c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c20:	4616      	mov	r6, r2
 8008c22:	4699      	mov	r9, r3
 8008c24:	688a      	ldr	r2, [r1, #8]
 8008c26:	690b      	ldr	r3, [r1, #16]
 8008c28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	bfb8      	it	lt
 8008c30:	4613      	movlt	r3, r2
 8008c32:	6033      	str	r3, [r6, #0]
 8008c34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c38:	4607      	mov	r7, r0
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	b10a      	cbz	r2, 8008c42 <_printf_common+0x26>
 8008c3e:	3301      	adds	r3, #1
 8008c40:	6033      	str	r3, [r6, #0]
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	0699      	lsls	r1, r3, #26
 8008c46:	bf42      	ittt	mi
 8008c48:	6833      	ldrmi	r3, [r6, #0]
 8008c4a:	3302      	addmi	r3, #2
 8008c4c:	6033      	strmi	r3, [r6, #0]
 8008c4e:	6825      	ldr	r5, [r4, #0]
 8008c50:	f015 0506 	ands.w	r5, r5, #6
 8008c54:	d106      	bne.n	8008c64 <_printf_common+0x48>
 8008c56:	f104 0a19 	add.w	sl, r4, #25
 8008c5a:	68e3      	ldr	r3, [r4, #12]
 8008c5c:	6832      	ldr	r2, [r6, #0]
 8008c5e:	1a9b      	subs	r3, r3, r2
 8008c60:	42ab      	cmp	r3, r5
 8008c62:	dc26      	bgt.n	8008cb2 <_printf_common+0x96>
 8008c64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c68:	1e13      	subs	r3, r2, #0
 8008c6a:	6822      	ldr	r2, [r4, #0]
 8008c6c:	bf18      	it	ne
 8008c6e:	2301      	movne	r3, #1
 8008c70:	0692      	lsls	r2, r2, #26
 8008c72:	d42b      	bmi.n	8008ccc <_printf_common+0xb0>
 8008c74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c78:	4649      	mov	r1, r9
 8008c7a:	4638      	mov	r0, r7
 8008c7c:	47c0      	blx	r8
 8008c7e:	3001      	adds	r0, #1
 8008c80:	d01e      	beq.n	8008cc0 <_printf_common+0xa4>
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	68e5      	ldr	r5, [r4, #12]
 8008c86:	6832      	ldr	r2, [r6, #0]
 8008c88:	f003 0306 	and.w	r3, r3, #6
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	bf08      	it	eq
 8008c90:	1aad      	subeq	r5, r5, r2
 8008c92:	68a3      	ldr	r3, [r4, #8]
 8008c94:	6922      	ldr	r2, [r4, #16]
 8008c96:	bf0c      	ite	eq
 8008c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c9c:	2500      	movne	r5, #0
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	bfc4      	itt	gt
 8008ca2:	1a9b      	subgt	r3, r3, r2
 8008ca4:	18ed      	addgt	r5, r5, r3
 8008ca6:	2600      	movs	r6, #0
 8008ca8:	341a      	adds	r4, #26
 8008caa:	42b5      	cmp	r5, r6
 8008cac:	d11a      	bne.n	8008ce4 <_printf_common+0xc8>
 8008cae:	2000      	movs	r0, #0
 8008cb0:	e008      	b.n	8008cc4 <_printf_common+0xa8>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	4652      	mov	r2, sl
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	4638      	mov	r0, r7
 8008cba:	47c0      	blx	r8
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	d103      	bne.n	8008cc8 <_printf_common+0xac>
 8008cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc8:	3501      	adds	r5, #1
 8008cca:	e7c6      	b.n	8008c5a <_printf_common+0x3e>
 8008ccc:	18e1      	adds	r1, r4, r3
 8008cce:	1c5a      	adds	r2, r3, #1
 8008cd0:	2030      	movs	r0, #48	; 0x30
 8008cd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cd6:	4422      	add	r2, r4
 8008cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ce0:	3302      	adds	r3, #2
 8008ce2:	e7c7      	b.n	8008c74 <_printf_common+0x58>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	4622      	mov	r2, r4
 8008ce8:	4649      	mov	r1, r9
 8008cea:	4638      	mov	r0, r7
 8008cec:	47c0      	blx	r8
 8008cee:	3001      	adds	r0, #1
 8008cf0:	d0e6      	beq.n	8008cc0 <_printf_common+0xa4>
 8008cf2:	3601      	adds	r6, #1
 8008cf4:	e7d9      	b.n	8008caa <_printf_common+0x8e>
	...

08008cf8 <_printf_i>:
 8008cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cfc:	7e0f      	ldrb	r7, [r1, #24]
 8008cfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d00:	2f78      	cmp	r7, #120	; 0x78
 8008d02:	4691      	mov	r9, r2
 8008d04:	4680      	mov	r8, r0
 8008d06:	460c      	mov	r4, r1
 8008d08:	469a      	mov	sl, r3
 8008d0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d0e:	d807      	bhi.n	8008d20 <_printf_i+0x28>
 8008d10:	2f62      	cmp	r7, #98	; 0x62
 8008d12:	d80a      	bhi.n	8008d2a <_printf_i+0x32>
 8008d14:	2f00      	cmp	r7, #0
 8008d16:	f000 80d8 	beq.w	8008eca <_printf_i+0x1d2>
 8008d1a:	2f58      	cmp	r7, #88	; 0x58
 8008d1c:	f000 80a3 	beq.w	8008e66 <_printf_i+0x16e>
 8008d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d28:	e03a      	b.n	8008da0 <_printf_i+0xa8>
 8008d2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d2e:	2b15      	cmp	r3, #21
 8008d30:	d8f6      	bhi.n	8008d20 <_printf_i+0x28>
 8008d32:	a101      	add	r1, pc, #4	; (adr r1, 8008d38 <_printf_i+0x40>)
 8008d34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d38:	08008d91 	.word	0x08008d91
 8008d3c:	08008da5 	.word	0x08008da5
 8008d40:	08008d21 	.word	0x08008d21
 8008d44:	08008d21 	.word	0x08008d21
 8008d48:	08008d21 	.word	0x08008d21
 8008d4c:	08008d21 	.word	0x08008d21
 8008d50:	08008da5 	.word	0x08008da5
 8008d54:	08008d21 	.word	0x08008d21
 8008d58:	08008d21 	.word	0x08008d21
 8008d5c:	08008d21 	.word	0x08008d21
 8008d60:	08008d21 	.word	0x08008d21
 8008d64:	08008eb1 	.word	0x08008eb1
 8008d68:	08008dd5 	.word	0x08008dd5
 8008d6c:	08008e93 	.word	0x08008e93
 8008d70:	08008d21 	.word	0x08008d21
 8008d74:	08008d21 	.word	0x08008d21
 8008d78:	08008ed3 	.word	0x08008ed3
 8008d7c:	08008d21 	.word	0x08008d21
 8008d80:	08008dd5 	.word	0x08008dd5
 8008d84:	08008d21 	.word	0x08008d21
 8008d88:	08008d21 	.word	0x08008d21
 8008d8c:	08008e9b 	.word	0x08008e9b
 8008d90:	682b      	ldr	r3, [r5, #0]
 8008d92:	1d1a      	adds	r2, r3, #4
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	602a      	str	r2, [r5, #0]
 8008d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008da0:	2301      	movs	r3, #1
 8008da2:	e0a3      	b.n	8008eec <_printf_i+0x1f4>
 8008da4:	6820      	ldr	r0, [r4, #0]
 8008da6:	6829      	ldr	r1, [r5, #0]
 8008da8:	0606      	lsls	r6, r0, #24
 8008daa:	f101 0304 	add.w	r3, r1, #4
 8008dae:	d50a      	bpl.n	8008dc6 <_printf_i+0xce>
 8008db0:	680e      	ldr	r6, [r1, #0]
 8008db2:	602b      	str	r3, [r5, #0]
 8008db4:	2e00      	cmp	r6, #0
 8008db6:	da03      	bge.n	8008dc0 <_printf_i+0xc8>
 8008db8:	232d      	movs	r3, #45	; 0x2d
 8008dba:	4276      	negs	r6, r6
 8008dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dc0:	485e      	ldr	r0, [pc, #376]	; (8008f3c <_printf_i+0x244>)
 8008dc2:	230a      	movs	r3, #10
 8008dc4:	e019      	b.n	8008dfa <_printf_i+0x102>
 8008dc6:	680e      	ldr	r6, [r1, #0]
 8008dc8:	602b      	str	r3, [r5, #0]
 8008dca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008dce:	bf18      	it	ne
 8008dd0:	b236      	sxthne	r6, r6
 8008dd2:	e7ef      	b.n	8008db4 <_printf_i+0xbc>
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	6820      	ldr	r0, [r4, #0]
 8008dd8:	1d19      	adds	r1, r3, #4
 8008dda:	6029      	str	r1, [r5, #0]
 8008ddc:	0601      	lsls	r1, r0, #24
 8008dde:	d501      	bpl.n	8008de4 <_printf_i+0xec>
 8008de0:	681e      	ldr	r6, [r3, #0]
 8008de2:	e002      	b.n	8008dea <_printf_i+0xf2>
 8008de4:	0646      	lsls	r6, r0, #25
 8008de6:	d5fb      	bpl.n	8008de0 <_printf_i+0xe8>
 8008de8:	881e      	ldrh	r6, [r3, #0]
 8008dea:	4854      	ldr	r0, [pc, #336]	; (8008f3c <_printf_i+0x244>)
 8008dec:	2f6f      	cmp	r7, #111	; 0x6f
 8008dee:	bf0c      	ite	eq
 8008df0:	2308      	moveq	r3, #8
 8008df2:	230a      	movne	r3, #10
 8008df4:	2100      	movs	r1, #0
 8008df6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dfa:	6865      	ldr	r5, [r4, #4]
 8008dfc:	60a5      	str	r5, [r4, #8]
 8008dfe:	2d00      	cmp	r5, #0
 8008e00:	bfa2      	ittt	ge
 8008e02:	6821      	ldrge	r1, [r4, #0]
 8008e04:	f021 0104 	bicge.w	r1, r1, #4
 8008e08:	6021      	strge	r1, [r4, #0]
 8008e0a:	b90e      	cbnz	r6, 8008e10 <_printf_i+0x118>
 8008e0c:	2d00      	cmp	r5, #0
 8008e0e:	d04d      	beq.n	8008eac <_printf_i+0x1b4>
 8008e10:	4615      	mov	r5, r2
 8008e12:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e16:	fb03 6711 	mls	r7, r3, r1, r6
 8008e1a:	5dc7      	ldrb	r7, [r0, r7]
 8008e1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e20:	4637      	mov	r7, r6
 8008e22:	42bb      	cmp	r3, r7
 8008e24:	460e      	mov	r6, r1
 8008e26:	d9f4      	bls.n	8008e12 <_printf_i+0x11a>
 8008e28:	2b08      	cmp	r3, #8
 8008e2a:	d10b      	bne.n	8008e44 <_printf_i+0x14c>
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	07de      	lsls	r6, r3, #31
 8008e30:	d508      	bpl.n	8008e44 <_printf_i+0x14c>
 8008e32:	6923      	ldr	r3, [r4, #16]
 8008e34:	6861      	ldr	r1, [r4, #4]
 8008e36:	4299      	cmp	r1, r3
 8008e38:	bfde      	ittt	le
 8008e3a:	2330      	movle	r3, #48	; 0x30
 8008e3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e44:	1b52      	subs	r2, r2, r5
 8008e46:	6122      	str	r2, [r4, #16]
 8008e48:	f8cd a000 	str.w	sl, [sp]
 8008e4c:	464b      	mov	r3, r9
 8008e4e:	aa03      	add	r2, sp, #12
 8008e50:	4621      	mov	r1, r4
 8008e52:	4640      	mov	r0, r8
 8008e54:	f7ff fee2 	bl	8008c1c <_printf_common>
 8008e58:	3001      	adds	r0, #1
 8008e5a:	d14c      	bne.n	8008ef6 <_printf_i+0x1fe>
 8008e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e60:	b004      	add	sp, #16
 8008e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e66:	4835      	ldr	r0, [pc, #212]	; (8008f3c <_printf_i+0x244>)
 8008e68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e6c:	6829      	ldr	r1, [r5, #0]
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e74:	6029      	str	r1, [r5, #0]
 8008e76:	061d      	lsls	r5, r3, #24
 8008e78:	d514      	bpl.n	8008ea4 <_printf_i+0x1ac>
 8008e7a:	07df      	lsls	r7, r3, #31
 8008e7c:	bf44      	itt	mi
 8008e7e:	f043 0320 	orrmi.w	r3, r3, #32
 8008e82:	6023      	strmi	r3, [r4, #0]
 8008e84:	b91e      	cbnz	r6, 8008e8e <_printf_i+0x196>
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	f023 0320 	bic.w	r3, r3, #32
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	2310      	movs	r3, #16
 8008e90:	e7b0      	b.n	8008df4 <_printf_i+0xfc>
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	f043 0320 	orr.w	r3, r3, #32
 8008e98:	6023      	str	r3, [r4, #0]
 8008e9a:	2378      	movs	r3, #120	; 0x78
 8008e9c:	4828      	ldr	r0, [pc, #160]	; (8008f40 <_printf_i+0x248>)
 8008e9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ea2:	e7e3      	b.n	8008e6c <_printf_i+0x174>
 8008ea4:	0659      	lsls	r1, r3, #25
 8008ea6:	bf48      	it	mi
 8008ea8:	b2b6      	uxthmi	r6, r6
 8008eaa:	e7e6      	b.n	8008e7a <_printf_i+0x182>
 8008eac:	4615      	mov	r5, r2
 8008eae:	e7bb      	b.n	8008e28 <_printf_i+0x130>
 8008eb0:	682b      	ldr	r3, [r5, #0]
 8008eb2:	6826      	ldr	r6, [r4, #0]
 8008eb4:	6961      	ldr	r1, [r4, #20]
 8008eb6:	1d18      	adds	r0, r3, #4
 8008eb8:	6028      	str	r0, [r5, #0]
 8008eba:	0635      	lsls	r5, r6, #24
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	d501      	bpl.n	8008ec4 <_printf_i+0x1cc>
 8008ec0:	6019      	str	r1, [r3, #0]
 8008ec2:	e002      	b.n	8008eca <_printf_i+0x1d2>
 8008ec4:	0670      	lsls	r0, r6, #25
 8008ec6:	d5fb      	bpl.n	8008ec0 <_printf_i+0x1c8>
 8008ec8:	8019      	strh	r1, [r3, #0]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	6123      	str	r3, [r4, #16]
 8008ece:	4615      	mov	r5, r2
 8008ed0:	e7ba      	b.n	8008e48 <_printf_i+0x150>
 8008ed2:	682b      	ldr	r3, [r5, #0]
 8008ed4:	1d1a      	adds	r2, r3, #4
 8008ed6:	602a      	str	r2, [r5, #0]
 8008ed8:	681d      	ldr	r5, [r3, #0]
 8008eda:	6862      	ldr	r2, [r4, #4]
 8008edc:	2100      	movs	r1, #0
 8008ede:	4628      	mov	r0, r5
 8008ee0:	f7f8 f836 	bl	8000f50 <memchr>
 8008ee4:	b108      	cbz	r0, 8008eea <_printf_i+0x1f2>
 8008ee6:	1b40      	subs	r0, r0, r5
 8008ee8:	6060      	str	r0, [r4, #4]
 8008eea:	6863      	ldr	r3, [r4, #4]
 8008eec:	6123      	str	r3, [r4, #16]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ef4:	e7a8      	b.n	8008e48 <_printf_i+0x150>
 8008ef6:	6923      	ldr	r3, [r4, #16]
 8008ef8:	462a      	mov	r2, r5
 8008efa:	4649      	mov	r1, r9
 8008efc:	4640      	mov	r0, r8
 8008efe:	47d0      	blx	sl
 8008f00:	3001      	adds	r0, #1
 8008f02:	d0ab      	beq.n	8008e5c <_printf_i+0x164>
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	079b      	lsls	r3, r3, #30
 8008f08:	d413      	bmi.n	8008f32 <_printf_i+0x23a>
 8008f0a:	68e0      	ldr	r0, [r4, #12]
 8008f0c:	9b03      	ldr	r3, [sp, #12]
 8008f0e:	4298      	cmp	r0, r3
 8008f10:	bfb8      	it	lt
 8008f12:	4618      	movlt	r0, r3
 8008f14:	e7a4      	b.n	8008e60 <_printf_i+0x168>
 8008f16:	2301      	movs	r3, #1
 8008f18:	4632      	mov	r2, r6
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	47d0      	blx	sl
 8008f20:	3001      	adds	r0, #1
 8008f22:	d09b      	beq.n	8008e5c <_printf_i+0x164>
 8008f24:	3501      	adds	r5, #1
 8008f26:	68e3      	ldr	r3, [r4, #12]
 8008f28:	9903      	ldr	r1, [sp, #12]
 8008f2a:	1a5b      	subs	r3, r3, r1
 8008f2c:	42ab      	cmp	r3, r5
 8008f2e:	dcf2      	bgt.n	8008f16 <_printf_i+0x21e>
 8008f30:	e7eb      	b.n	8008f0a <_printf_i+0x212>
 8008f32:	2500      	movs	r5, #0
 8008f34:	f104 0619 	add.w	r6, r4, #25
 8008f38:	e7f5      	b.n	8008f26 <_printf_i+0x22e>
 8008f3a:	bf00      	nop
 8008f3c:	0800b23e 	.word	0x0800b23e
 8008f40:	0800b24f 	.word	0x0800b24f

08008f44 <iprintf>:
 8008f44:	b40f      	push	{r0, r1, r2, r3}
 8008f46:	4b0a      	ldr	r3, [pc, #40]	; (8008f70 <iprintf+0x2c>)
 8008f48:	b513      	push	{r0, r1, r4, lr}
 8008f4a:	681c      	ldr	r4, [r3, #0]
 8008f4c:	b124      	cbz	r4, 8008f58 <iprintf+0x14>
 8008f4e:	69a3      	ldr	r3, [r4, #24]
 8008f50:	b913      	cbnz	r3, 8008f58 <iprintf+0x14>
 8008f52:	4620      	mov	r0, r4
 8008f54:	f000 fee2 	bl	8009d1c <__sinit>
 8008f58:	ab05      	add	r3, sp, #20
 8008f5a:	9a04      	ldr	r2, [sp, #16]
 8008f5c:	68a1      	ldr	r1, [r4, #8]
 8008f5e:	9301      	str	r3, [sp, #4]
 8008f60:	4620      	mov	r0, r4
 8008f62:	f001 fc2d 	bl	800a7c0 <_vfiprintf_r>
 8008f66:	b002      	add	sp, #8
 8008f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f6c:	b004      	add	sp, #16
 8008f6e:	4770      	bx	lr
 8008f70:	20000054 	.word	0x20000054

08008f74 <quorem>:
 8008f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f78:	6903      	ldr	r3, [r0, #16]
 8008f7a:	690c      	ldr	r4, [r1, #16]
 8008f7c:	42a3      	cmp	r3, r4
 8008f7e:	4607      	mov	r7, r0
 8008f80:	f2c0 8081 	blt.w	8009086 <quorem+0x112>
 8008f84:	3c01      	subs	r4, #1
 8008f86:	f101 0814 	add.w	r8, r1, #20
 8008f8a:	f100 0514 	add.w	r5, r0, #20
 8008f8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008fa4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fa8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fac:	d331      	bcc.n	8009012 <quorem+0x9e>
 8008fae:	f04f 0e00 	mov.w	lr, #0
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	46ac      	mov	ip, r5
 8008fb6:	46f2      	mov	sl, lr
 8008fb8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008fbc:	b293      	uxth	r3, r2
 8008fbe:	fb06 e303 	mla	r3, r6, r3, lr
 8008fc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	ebaa 0303 	sub.w	r3, sl, r3
 8008fcc:	f8dc a000 	ldr.w	sl, [ip]
 8008fd0:	0c12      	lsrs	r2, r2, #16
 8008fd2:	fa13 f38a 	uxtah	r3, r3, sl
 8008fd6:	fb06 e202 	mla	r2, r6, r2, lr
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	9b00      	ldr	r3, [sp, #0]
 8008fde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008fe2:	b292      	uxth	r2, r2
 8008fe4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008fe8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fec:	f8bd 3000 	ldrh.w	r3, [sp]
 8008ff0:	4581      	cmp	r9, r0
 8008ff2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ff6:	f84c 3b04 	str.w	r3, [ip], #4
 8008ffa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ffe:	d2db      	bcs.n	8008fb8 <quorem+0x44>
 8009000:	f855 300b 	ldr.w	r3, [r5, fp]
 8009004:	b92b      	cbnz	r3, 8009012 <quorem+0x9e>
 8009006:	9b01      	ldr	r3, [sp, #4]
 8009008:	3b04      	subs	r3, #4
 800900a:	429d      	cmp	r5, r3
 800900c:	461a      	mov	r2, r3
 800900e:	d32e      	bcc.n	800906e <quorem+0xfa>
 8009010:	613c      	str	r4, [r7, #16]
 8009012:	4638      	mov	r0, r7
 8009014:	f001 f9b2 	bl	800a37c <__mcmp>
 8009018:	2800      	cmp	r0, #0
 800901a:	db24      	blt.n	8009066 <quorem+0xf2>
 800901c:	3601      	adds	r6, #1
 800901e:	4628      	mov	r0, r5
 8009020:	f04f 0c00 	mov.w	ip, #0
 8009024:	f858 2b04 	ldr.w	r2, [r8], #4
 8009028:	f8d0 e000 	ldr.w	lr, [r0]
 800902c:	b293      	uxth	r3, r2
 800902e:	ebac 0303 	sub.w	r3, ip, r3
 8009032:	0c12      	lsrs	r2, r2, #16
 8009034:	fa13 f38e 	uxtah	r3, r3, lr
 8009038:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800903c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009040:	b29b      	uxth	r3, r3
 8009042:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009046:	45c1      	cmp	r9, r8
 8009048:	f840 3b04 	str.w	r3, [r0], #4
 800904c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009050:	d2e8      	bcs.n	8009024 <quorem+0xb0>
 8009052:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009056:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800905a:	b922      	cbnz	r2, 8009066 <quorem+0xf2>
 800905c:	3b04      	subs	r3, #4
 800905e:	429d      	cmp	r5, r3
 8009060:	461a      	mov	r2, r3
 8009062:	d30a      	bcc.n	800907a <quorem+0x106>
 8009064:	613c      	str	r4, [r7, #16]
 8009066:	4630      	mov	r0, r6
 8009068:	b003      	add	sp, #12
 800906a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906e:	6812      	ldr	r2, [r2, #0]
 8009070:	3b04      	subs	r3, #4
 8009072:	2a00      	cmp	r2, #0
 8009074:	d1cc      	bne.n	8009010 <quorem+0x9c>
 8009076:	3c01      	subs	r4, #1
 8009078:	e7c7      	b.n	800900a <quorem+0x96>
 800907a:	6812      	ldr	r2, [r2, #0]
 800907c:	3b04      	subs	r3, #4
 800907e:	2a00      	cmp	r2, #0
 8009080:	d1f0      	bne.n	8009064 <quorem+0xf0>
 8009082:	3c01      	subs	r4, #1
 8009084:	e7eb      	b.n	800905e <quorem+0xea>
 8009086:	2000      	movs	r0, #0
 8009088:	e7ee      	b.n	8009068 <quorem+0xf4>
 800908a:	0000      	movs	r0, r0
 800908c:	0000      	movs	r0, r0
	...

08009090 <_dtoa_r>:
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	ed2d 8b04 	vpush	{d8-d9}
 8009098:	ec57 6b10 	vmov	r6, r7, d0
 800909c:	b093      	sub	sp, #76	; 0x4c
 800909e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80090a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80090a4:	9106      	str	r1, [sp, #24]
 80090a6:	ee10 aa10 	vmov	sl, s0
 80090aa:	4604      	mov	r4, r0
 80090ac:	9209      	str	r2, [sp, #36]	; 0x24
 80090ae:	930c      	str	r3, [sp, #48]	; 0x30
 80090b0:	46bb      	mov	fp, r7
 80090b2:	b975      	cbnz	r5, 80090d2 <_dtoa_r+0x42>
 80090b4:	2010      	movs	r0, #16
 80090b6:	f000 fed7 	bl	8009e68 <malloc>
 80090ba:	4602      	mov	r2, r0
 80090bc:	6260      	str	r0, [r4, #36]	; 0x24
 80090be:	b920      	cbnz	r0, 80090ca <_dtoa_r+0x3a>
 80090c0:	4ba7      	ldr	r3, [pc, #668]	; (8009360 <_dtoa_r+0x2d0>)
 80090c2:	21ea      	movs	r1, #234	; 0xea
 80090c4:	48a7      	ldr	r0, [pc, #668]	; (8009364 <_dtoa_r+0x2d4>)
 80090c6:	f001 fdd1 	bl	800ac6c <__assert_func>
 80090ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80090ce:	6005      	str	r5, [r0, #0]
 80090d0:	60c5      	str	r5, [r0, #12]
 80090d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090d4:	6819      	ldr	r1, [r3, #0]
 80090d6:	b151      	cbz	r1, 80090ee <_dtoa_r+0x5e>
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	604a      	str	r2, [r1, #4]
 80090dc:	2301      	movs	r3, #1
 80090de:	4093      	lsls	r3, r2
 80090e0:	608b      	str	r3, [r1, #8]
 80090e2:	4620      	mov	r0, r4
 80090e4:	f000 ff08 	bl	8009ef8 <_Bfree>
 80090e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	1e3b      	subs	r3, r7, #0
 80090f0:	bfaa      	itet	ge
 80090f2:	2300      	movge	r3, #0
 80090f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80090f8:	f8c8 3000 	strge.w	r3, [r8]
 80090fc:	4b9a      	ldr	r3, [pc, #616]	; (8009368 <_dtoa_r+0x2d8>)
 80090fe:	bfbc      	itt	lt
 8009100:	2201      	movlt	r2, #1
 8009102:	f8c8 2000 	strlt.w	r2, [r8]
 8009106:	ea33 030b 	bics.w	r3, r3, fp
 800910a:	d11b      	bne.n	8009144 <_dtoa_r+0xb4>
 800910c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800910e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009112:	6013      	str	r3, [r2, #0]
 8009114:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009118:	4333      	orrs	r3, r6
 800911a:	f000 8592 	beq.w	8009c42 <_dtoa_r+0xbb2>
 800911e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009120:	b963      	cbnz	r3, 800913c <_dtoa_r+0xac>
 8009122:	4b92      	ldr	r3, [pc, #584]	; (800936c <_dtoa_r+0x2dc>)
 8009124:	e022      	b.n	800916c <_dtoa_r+0xdc>
 8009126:	4b92      	ldr	r3, [pc, #584]	; (8009370 <_dtoa_r+0x2e0>)
 8009128:	9301      	str	r3, [sp, #4]
 800912a:	3308      	adds	r3, #8
 800912c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800912e:	6013      	str	r3, [r2, #0]
 8009130:	9801      	ldr	r0, [sp, #4]
 8009132:	b013      	add	sp, #76	; 0x4c
 8009134:	ecbd 8b04 	vpop	{d8-d9}
 8009138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913c:	4b8b      	ldr	r3, [pc, #556]	; (800936c <_dtoa_r+0x2dc>)
 800913e:	9301      	str	r3, [sp, #4]
 8009140:	3303      	adds	r3, #3
 8009142:	e7f3      	b.n	800912c <_dtoa_r+0x9c>
 8009144:	2200      	movs	r2, #0
 8009146:	2300      	movs	r3, #0
 8009148:	4650      	mov	r0, sl
 800914a:	4659      	mov	r1, fp
 800914c:	f7f8 fb74 	bl	8001838 <__aeabi_dcmpeq>
 8009150:	ec4b ab19 	vmov	d9, sl, fp
 8009154:	4680      	mov	r8, r0
 8009156:	b158      	cbz	r0, 8009170 <_dtoa_r+0xe0>
 8009158:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800915a:	2301      	movs	r3, #1
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009160:	2b00      	cmp	r3, #0
 8009162:	f000 856b 	beq.w	8009c3c <_dtoa_r+0xbac>
 8009166:	4883      	ldr	r0, [pc, #524]	; (8009374 <_dtoa_r+0x2e4>)
 8009168:	6018      	str	r0, [r3, #0]
 800916a:	1e43      	subs	r3, r0, #1
 800916c:	9301      	str	r3, [sp, #4]
 800916e:	e7df      	b.n	8009130 <_dtoa_r+0xa0>
 8009170:	ec4b ab10 	vmov	d0, sl, fp
 8009174:	aa10      	add	r2, sp, #64	; 0x40
 8009176:	a911      	add	r1, sp, #68	; 0x44
 8009178:	4620      	mov	r0, r4
 800917a:	f001 f9a5 	bl	800a4c8 <__d2b>
 800917e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009182:	ee08 0a10 	vmov	s16, r0
 8009186:	2d00      	cmp	r5, #0
 8009188:	f000 8084 	beq.w	8009294 <_dtoa_r+0x204>
 800918c:	ee19 3a90 	vmov	r3, s19
 8009190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009194:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009198:	4656      	mov	r6, sl
 800919a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800919e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80091a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80091a6:	4b74      	ldr	r3, [pc, #464]	; (8009378 <_dtoa_r+0x2e8>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	4630      	mov	r0, r6
 80091ac:	4639      	mov	r1, r7
 80091ae:	f7f7 ff23 	bl	8000ff8 <__aeabi_dsub>
 80091b2:	a365      	add	r3, pc, #404	; (adr r3, 8009348 <_dtoa_r+0x2b8>)
 80091b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b8:	f7f8 f8d6 	bl	8001368 <__aeabi_dmul>
 80091bc:	a364      	add	r3, pc, #400	; (adr r3, 8009350 <_dtoa_r+0x2c0>)
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	f7f7 ff1b 	bl	8000ffc <__adddf3>
 80091c6:	4606      	mov	r6, r0
 80091c8:	4628      	mov	r0, r5
 80091ca:	460f      	mov	r7, r1
 80091cc:	f7f8 f862 	bl	8001294 <__aeabi_i2d>
 80091d0:	a361      	add	r3, pc, #388	; (adr r3, 8009358 <_dtoa_r+0x2c8>)
 80091d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d6:	f7f8 f8c7 	bl	8001368 <__aeabi_dmul>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	4630      	mov	r0, r6
 80091e0:	4639      	mov	r1, r7
 80091e2:	f7f7 ff0b 	bl	8000ffc <__adddf3>
 80091e6:	4606      	mov	r6, r0
 80091e8:	460f      	mov	r7, r1
 80091ea:	f7f8 fb6d 	bl	80018c8 <__aeabi_d2iz>
 80091ee:	2200      	movs	r2, #0
 80091f0:	9000      	str	r0, [sp, #0]
 80091f2:	2300      	movs	r3, #0
 80091f4:	4630      	mov	r0, r6
 80091f6:	4639      	mov	r1, r7
 80091f8:	f7f8 fb28 	bl	800184c <__aeabi_dcmplt>
 80091fc:	b150      	cbz	r0, 8009214 <_dtoa_r+0x184>
 80091fe:	9800      	ldr	r0, [sp, #0]
 8009200:	f7f8 f848 	bl	8001294 <__aeabi_i2d>
 8009204:	4632      	mov	r2, r6
 8009206:	463b      	mov	r3, r7
 8009208:	f7f8 fb16 	bl	8001838 <__aeabi_dcmpeq>
 800920c:	b910      	cbnz	r0, 8009214 <_dtoa_r+0x184>
 800920e:	9b00      	ldr	r3, [sp, #0]
 8009210:	3b01      	subs	r3, #1
 8009212:	9300      	str	r3, [sp, #0]
 8009214:	9b00      	ldr	r3, [sp, #0]
 8009216:	2b16      	cmp	r3, #22
 8009218:	d85a      	bhi.n	80092d0 <_dtoa_r+0x240>
 800921a:	9a00      	ldr	r2, [sp, #0]
 800921c:	4b57      	ldr	r3, [pc, #348]	; (800937c <_dtoa_r+0x2ec>)
 800921e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009226:	ec51 0b19 	vmov	r0, r1, d9
 800922a:	f7f8 fb0f 	bl	800184c <__aeabi_dcmplt>
 800922e:	2800      	cmp	r0, #0
 8009230:	d050      	beq.n	80092d4 <_dtoa_r+0x244>
 8009232:	9b00      	ldr	r3, [sp, #0]
 8009234:	3b01      	subs	r3, #1
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	2300      	movs	r3, #0
 800923a:	930b      	str	r3, [sp, #44]	; 0x2c
 800923c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800923e:	1b5d      	subs	r5, r3, r5
 8009240:	1e6b      	subs	r3, r5, #1
 8009242:	9305      	str	r3, [sp, #20]
 8009244:	bf45      	ittet	mi
 8009246:	f1c5 0301 	rsbmi	r3, r5, #1
 800924a:	9304      	strmi	r3, [sp, #16]
 800924c:	2300      	movpl	r3, #0
 800924e:	2300      	movmi	r3, #0
 8009250:	bf4c      	ite	mi
 8009252:	9305      	strmi	r3, [sp, #20]
 8009254:	9304      	strpl	r3, [sp, #16]
 8009256:	9b00      	ldr	r3, [sp, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	db3d      	blt.n	80092d8 <_dtoa_r+0x248>
 800925c:	9b05      	ldr	r3, [sp, #20]
 800925e:	9a00      	ldr	r2, [sp, #0]
 8009260:	920a      	str	r2, [sp, #40]	; 0x28
 8009262:	4413      	add	r3, r2
 8009264:	9305      	str	r3, [sp, #20]
 8009266:	2300      	movs	r3, #0
 8009268:	9307      	str	r3, [sp, #28]
 800926a:	9b06      	ldr	r3, [sp, #24]
 800926c:	2b09      	cmp	r3, #9
 800926e:	f200 8089 	bhi.w	8009384 <_dtoa_r+0x2f4>
 8009272:	2b05      	cmp	r3, #5
 8009274:	bfc4      	itt	gt
 8009276:	3b04      	subgt	r3, #4
 8009278:	9306      	strgt	r3, [sp, #24]
 800927a:	9b06      	ldr	r3, [sp, #24]
 800927c:	f1a3 0302 	sub.w	r3, r3, #2
 8009280:	bfcc      	ite	gt
 8009282:	2500      	movgt	r5, #0
 8009284:	2501      	movle	r5, #1
 8009286:	2b03      	cmp	r3, #3
 8009288:	f200 8087 	bhi.w	800939a <_dtoa_r+0x30a>
 800928c:	e8df f003 	tbb	[pc, r3]
 8009290:	59383a2d 	.word	0x59383a2d
 8009294:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009298:	441d      	add	r5, r3
 800929a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800929e:	2b20      	cmp	r3, #32
 80092a0:	bfc1      	itttt	gt
 80092a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80092a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80092aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80092ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80092b2:	bfda      	itte	le
 80092b4:	f1c3 0320 	rsble	r3, r3, #32
 80092b8:	fa06 f003 	lslle.w	r0, r6, r3
 80092bc:	4318      	orrgt	r0, r3
 80092be:	f7f7 ffd9 	bl	8001274 <__aeabi_ui2d>
 80092c2:	2301      	movs	r3, #1
 80092c4:	4606      	mov	r6, r0
 80092c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80092ca:	3d01      	subs	r5, #1
 80092cc:	930e      	str	r3, [sp, #56]	; 0x38
 80092ce:	e76a      	b.n	80091a6 <_dtoa_r+0x116>
 80092d0:	2301      	movs	r3, #1
 80092d2:	e7b2      	b.n	800923a <_dtoa_r+0x1aa>
 80092d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80092d6:	e7b1      	b.n	800923c <_dtoa_r+0x1ac>
 80092d8:	9b04      	ldr	r3, [sp, #16]
 80092da:	9a00      	ldr	r2, [sp, #0]
 80092dc:	1a9b      	subs	r3, r3, r2
 80092de:	9304      	str	r3, [sp, #16]
 80092e0:	4253      	negs	r3, r2
 80092e2:	9307      	str	r3, [sp, #28]
 80092e4:	2300      	movs	r3, #0
 80092e6:	930a      	str	r3, [sp, #40]	; 0x28
 80092e8:	e7bf      	b.n	800926a <_dtoa_r+0x1da>
 80092ea:	2300      	movs	r3, #0
 80092ec:	9308      	str	r3, [sp, #32]
 80092ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	dc55      	bgt.n	80093a0 <_dtoa_r+0x310>
 80092f4:	2301      	movs	r3, #1
 80092f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80092fa:	461a      	mov	r2, r3
 80092fc:	9209      	str	r2, [sp, #36]	; 0x24
 80092fe:	e00c      	b.n	800931a <_dtoa_r+0x28a>
 8009300:	2301      	movs	r3, #1
 8009302:	e7f3      	b.n	80092ec <_dtoa_r+0x25c>
 8009304:	2300      	movs	r3, #0
 8009306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009308:	9308      	str	r3, [sp, #32]
 800930a:	9b00      	ldr	r3, [sp, #0]
 800930c:	4413      	add	r3, r2
 800930e:	9302      	str	r3, [sp, #8]
 8009310:	3301      	adds	r3, #1
 8009312:	2b01      	cmp	r3, #1
 8009314:	9303      	str	r3, [sp, #12]
 8009316:	bfb8      	it	lt
 8009318:	2301      	movlt	r3, #1
 800931a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800931c:	2200      	movs	r2, #0
 800931e:	6042      	str	r2, [r0, #4]
 8009320:	2204      	movs	r2, #4
 8009322:	f102 0614 	add.w	r6, r2, #20
 8009326:	429e      	cmp	r6, r3
 8009328:	6841      	ldr	r1, [r0, #4]
 800932a:	d93d      	bls.n	80093a8 <_dtoa_r+0x318>
 800932c:	4620      	mov	r0, r4
 800932e:	f000 fda3 	bl	8009e78 <_Balloc>
 8009332:	9001      	str	r0, [sp, #4]
 8009334:	2800      	cmp	r0, #0
 8009336:	d13b      	bne.n	80093b0 <_dtoa_r+0x320>
 8009338:	4b11      	ldr	r3, [pc, #68]	; (8009380 <_dtoa_r+0x2f0>)
 800933a:	4602      	mov	r2, r0
 800933c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009340:	e6c0      	b.n	80090c4 <_dtoa_r+0x34>
 8009342:	2301      	movs	r3, #1
 8009344:	e7df      	b.n	8009306 <_dtoa_r+0x276>
 8009346:	bf00      	nop
 8009348:	636f4361 	.word	0x636f4361
 800934c:	3fd287a7 	.word	0x3fd287a7
 8009350:	8b60c8b3 	.word	0x8b60c8b3
 8009354:	3fc68a28 	.word	0x3fc68a28
 8009358:	509f79fb 	.word	0x509f79fb
 800935c:	3fd34413 	.word	0x3fd34413
 8009360:	0800b26d 	.word	0x0800b26d
 8009364:	0800b284 	.word	0x0800b284
 8009368:	7ff00000 	.word	0x7ff00000
 800936c:	0800b269 	.word	0x0800b269
 8009370:	0800b260 	.word	0x0800b260
 8009374:	0800b23d 	.word	0x0800b23d
 8009378:	3ff80000 	.word	0x3ff80000
 800937c:	0800b3d8 	.word	0x0800b3d8
 8009380:	0800b2df 	.word	0x0800b2df
 8009384:	2501      	movs	r5, #1
 8009386:	2300      	movs	r3, #0
 8009388:	9306      	str	r3, [sp, #24]
 800938a:	9508      	str	r5, [sp, #32]
 800938c:	f04f 33ff 	mov.w	r3, #4294967295
 8009390:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009394:	2200      	movs	r2, #0
 8009396:	2312      	movs	r3, #18
 8009398:	e7b0      	b.n	80092fc <_dtoa_r+0x26c>
 800939a:	2301      	movs	r3, #1
 800939c:	9308      	str	r3, [sp, #32]
 800939e:	e7f5      	b.n	800938c <_dtoa_r+0x2fc>
 80093a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093a6:	e7b8      	b.n	800931a <_dtoa_r+0x28a>
 80093a8:	3101      	adds	r1, #1
 80093aa:	6041      	str	r1, [r0, #4]
 80093ac:	0052      	lsls	r2, r2, #1
 80093ae:	e7b8      	b.n	8009322 <_dtoa_r+0x292>
 80093b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093b2:	9a01      	ldr	r2, [sp, #4]
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	9b03      	ldr	r3, [sp, #12]
 80093b8:	2b0e      	cmp	r3, #14
 80093ba:	f200 809d 	bhi.w	80094f8 <_dtoa_r+0x468>
 80093be:	2d00      	cmp	r5, #0
 80093c0:	f000 809a 	beq.w	80094f8 <_dtoa_r+0x468>
 80093c4:	9b00      	ldr	r3, [sp, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	dd32      	ble.n	8009430 <_dtoa_r+0x3a0>
 80093ca:	4ab7      	ldr	r2, [pc, #732]	; (80096a8 <_dtoa_r+0x618>)
 80093cc:	f003 030f 	and.w	r3, r3, #15
 80093d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80093d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093d8:	9b00      	ldr	r3, [sp, #0]
 80093da:	05d8      	lsls	r0, r3, #23
 80093dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80093e0:	d516      	bpl.n	8009410 <_dtoa_r+0x380>
 80093e2:	4bb2      	ldr	r3, [pc, #712]	; (80096ac <_dtoa_r+0x61c>)
 80093e4:	ec51 0b19 	vmov	r0, r1, d9
 80093e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80093ec:	f7f8 f8e6 	bl	80015bc <__aeabi_ddiv>
 80093f0:	f007 070f 	and.w	r7, r7, #15
 80093f4:	4682      	mov	sl, r0
 80093f6:	468b      	mov	fp, r1
 80093f8:	2503      	movs	r5, #3
 80093fa:	4eac      	ldr	r6, [pc, #688]	; (80096ac <_dtoa_r+0x61c>)
 80093fc:	b957      	cbnz	r7, 8009414 <_dtoa_r+0x384>
 80093fe:	4642      	mov	r2, r8
 8009400:	464b      	mov	r3, r9
 8009402:	4650      	mov	r0, sl
 8009404:	4659      	mov	r1, fp
 8009406:	f7f8 f8d9 	bl	80015bc <__aeabi_ddiv>
 800940a:	4682      	mov	sl, r0
 800940c:	468b      	mov	fp, r1
 800940e:	e028      	b.n	8009462 <_dtoa_r+0x3d2>
 8009410:	2502      	movs	r5, #2
 8009412:	e7f2      	b.n	80093fa <_dtoa_r+0x36a>
 8009414:	07f9      	lsls	r1, r7, #31
 8009416:	d508      	bpl.n	800942a <_dtoa_r+0x39a>
 8009418:	4640      	mov	r0, r8
 800941a:	4649      	mov	r1, r9
 800941c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009420:	f7f7 ffa2 	bl	8001368 <__aeabi_dmul>
 8009424:	3501      	adds	r5, #1
 8009426:	4680      	mov	r8, r0
 8009428:	4689      	mov	r9, r1
 800942a:	107f      	asrs	r7, r7, #1
 800942c:	3608      	adds	r6, #8
 800942e:	e7e5      	b.n	80093fc <_dtoa_r+0x36c>
 8009430:	f000 809b 	beq.w	800956a <_dtoa_r+0x4da>
 8009434:	9b00      	ldr	r3, [sp, #0]
 8009436:	4f9d      	ldr	r7, [pc, #628]	; (80096ac <_dtoa_r+0x61c>)
 8009438:	425e      	negs	r6, r3
 800943a:	4b9b      	ldr	r3, [pc, #620]	; (80096a8 <_dtoa_r+0x618>)
 800943c:	f006 020f 	and.w	r2, r6, #15
 8009440:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009448:	ec51 0b19 	vmov	r0, r1, d9
 800944c:	f7f7 ff8c 	bl	8001368 <__aeabi_dmul>
 8009450:	1136      	asrs	r6, r6, #4
 8009452:	4682      	mov	sl, r0
 8009454:	468b      	mov	fp, r1
 8009456:	2300      	movs	r3, #0
 8009458:	2502      	movs	r5, #2
 800945a:	2e00      	cmp	r6, #0
 800945c:	d17a      	bne.n	8009554 <_dtoa_r+0x4c4>
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1d3      	bne.n	800940a <_dtoa_r+0x37a>
 8009462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009464:	2b00      	cmp	r3, #0
 8009466:	f000 8082 	beq.w	800956e <_dtoa_r+0x4de>
 800946a:	4b91      	ldr	r3, [pc, #580]	; (80096b0 <_dtoa_r+0x620>)
 800946c:	2200      	movs	r2, #0
 800946e:	4650      	mov	r0, sl
 8009470:	4659      	mov	r1, fp
 8009472:	f7f8 f9eb 	bl	800184c <__aeabi_dcmplt>
 8009476:	2800      	cmp	r0, #0
 8009478:	d079      	beq.n	800956e <_dtoa_r+0x4de>
 800947a:	9b03      	ldr	r3, [sp, #12]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d076      	beq.n	800956e <_dtoa_r+0x4de>
 8009480:	9b02      	ldr	r3, [sp, #8]
 8009482:	2b00      	cmp	r3, #0
 8009484:	dd36      	ble.n	80094f4 <_dtoa_r+0x464>
 8009486:	9b00      	ldr	r3, [sp, #0]
 8009488:	4650      	mov	r0, sl
 800948a:	4659      	mov	r1, fp
 800948c:	1e5f      	subs	r7, r3, #1
 800948e:	2200      	movs	r2, #0
 8009490:	4b88      	ldr	r3, [pc, #544]	; (80096b4 <_dtoa_r+0x624>)
 8009492:	f7f7 ff69 	bl	8001368 <__aeabi_dmul>
 8009496:	9e02      	ldr	r6, [sp, #8]
 8009498:	4682      	mov	sl, r0
 800949a:	468b      	mov	fp, r1
 800949c:	3501      	adds	r5, #1
 800949e:	4628      	mov	r0, r5
 80094a0:	f7f7 fef8 	bl	8001294 <__aeabi_i2d>
 80094a4:	4652      	mov	r2, sl
 80094a6:	465b      	mov	r3, fp
 80094a8:	f7f7 ff5e 	bl	8001368 <__aeabi_dmul>
 80094ac:	4b82      	ldr	r3, [pc, #520]	; (80096b8 <_dtoa_r+0x628>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	f7f7 fda4 	bl	8000ffc <__adddf3>
 80094b4:	46d0      	mov	r8, sl
 80094b6:	46d9      	mov	r9, fp
 80094b8:	4682      	mov	sl, r0
 80094ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80094be:	2e00      	cmp	r6, #0
 80094c0:	d158      	bne.n	8009574 <_dtoa_r+0x4e4>
 80094c2:	4b7e      	ldr	r3, [pc, #504]	; (80096bc <_dtoa_r+0x62c>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	4640      	mov	r0, r8
 80094c8:	4649      	mov	r1, r9
 80094ca:	f7f7 fd95 	bl	8000ff8 <__aeabi_dsub>
 80094ce:	4652      	mov	r2, sl
 80094d0:	465b      	mov	r3, fp
 80094d2:	4680      	mov	r8, r0
 80094d4:	4689      	mov	r9, r1
 80094d6:	f7f8 f9d7 	bl	8001888 <__aeabi_dcmpgt>
 80094da:	2800      	cmp	r0, #0
 80094dc:	f040 8295 	bne.w	8009a0a <_dtoa_r+0x97a>
 80094e0:	4652      	mov	r2, sl
 80094e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80094e6:	4640      	mov	r0, r8
 80094e8:	4649      	mov	r1, r9
 80094ea:	f7f8 f9af 	bl	800184c <__aeabi_dcmplt>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	f040 8289 	bne.w	8009a06 <_dtoa_r+0x976>
 80094f4:	ec5b ab19 	vmov	sl, fp, d9
 80094f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f2c0 8148 	blt.w	8009790 <_dtoa_r+0x700>
 8009500:	9a00      	ldr	r2, [sp, #0]
 8009502:	2a0e      	cmp	r2, #14
 8009504:	f300 8144 	bgt.w	8009790 <_dtoa_r+0x700>
 8009508:	4b67      	ldr	r3, [pc, #412]	; (80096a8 <_dtoa_r+0x618>)
 800950a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800950e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009514:	2b00      	cmp	r3, #0
 8009516:	f280 80d5 	bge.w	80096c4 <_dtoa_r+0x634>
 800951a:	9b03      	ldr	r3, [sp, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	f300 80d1 	bgt.w	80096c4 <_dtoa_r+0x634>
 8009522:	f040 826f 	bne.w	8009a04 <_dtoa_r+0x974>
 8009526:	4b65      	ldr	r3, [pc, #404]	; (80096bc <_dtoa_r+0x62c>)
 8009528:	2200      	movs	r2, #0
 800952a:	4640      	mov	r0, r8
 800952c:	4649      	mov	r1, r9
 800952e:	f7f7 ff1b 	bl	8001368 <__aeabi_dmul>
 8009532:	4652      	mov	r2, sl
 8009534:	465b      	mov	r3, fp
 8009536:	f7f8 f99d 	bl	8001874 <__aeabi_dcmpge>
 800953a:	9e03      	ldr	r6, [sp, #12]
 800953c:	4637      	mov	r7, r6
 800953e:	2800      	cmp	r0, #0
 8009540:	f040 8245 	bne.w	80099ce <_dtoa_r+0x93e>
 8009544:	9d01      	ldr	r5, [sp, #4]
 8009546:	2331      	movs	r3, #49	; 0x31
 8009548:	f805 3b01 	strb.w	r3, [r5], #1
 800954c:	9b00      	ldr	r3, [sp, #0]
 800954e:	3301      	adds	r3, #1
 8009550:	9300      	str	r3, [sp, #0]
 8009552:	e240      	b.n	80099d6 <_dtoa_r+0x946>
 8009554:	07f2      	lsls	r2, r6, #31
 8009556:	d505      	bpl.n	8009564 <_dtoa_r+0x4d4>
 8009558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800955c:	f7f7 ff04 	bl	8001368 <__aeabi_dmul>
 8009560:	3501      	adds	r5, #1
 8009562:	2301      	movs	r3, #1
 8009564:	1076      	asrs	r6, r6, #1
 8009566:	3708      	adds	r7, #8
 8009568:	e777      	b.n	800945a <_dtoa_r+0x3ca>
 800956a:	2502      	movs	r5, #2
 800956c:	e779      	b.n	8009462 <_dtoa_r+0x3d2>
 800956e:	9f00      	ldr	r7, [sp, #0]
 8009570:	9e03      	ldr	r6, [sp, #12]
 8009572:	e794      	b.n	800949e <_dtoa_r+0x40e>
 8009574:	9901      	ldr	r1, [sp, #4]
 8009576:	4b4c      	ldr	r3, [pc, #304]	; (80096a8 <_dtoa_r+0x618>)
 8009578:	4431      	add	r1, r6
 800957a:	910d      	str	r1, [sp, #52]	; 0x34
 800957c:	9908      	ldr	r1, [sp, #32]
 800957e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009582:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009586:	2900      	cmp	r1, #0
 8009588:	d043      	beq.n	8009612 <_dtoa_r+0x582>
 800958a:	494d      	ldr	r1, [pc, #308]	; (80096c0 <_dtoa_r+0x630>)
 800958c:	2000      	movs	r0, #0
 800958e:	f7f8 f815 	bl	80015bc <__aeabi_ddiv>
 8009592:	4652      	mov	r2, sl
 8009594:	465b      	mov	r3, fp
 8009596:	f7f7 fd2f 	bl	8000ff8 <__aeabi_dsub>
 800959a:	9d01      	ldr	r5, [sp, #4]
 800959c:	4682      	mov	sl, r0
 800959e:	468b      	mov	fp, r1
 80095a0:	4649      	mov	r1, r9
 80095a2:	4640      	mov	r0, r8
 80095a4:	f7f8 f990 	bl	80018c8 <__aeabi_d2iz>
 80095a8:	4606      	mov	r6, r0
 80095aa:	f7f7 fe73 	bl	8001294 <__aeabi_i2d>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	4640      	mov	r0, r8
 80095b4:	4649      	mov	r1, r9
 80095b6:	f7f7 fd1f 	bl	8000ff8 <__aeabi_dsub>
 80095ba:	3630      	adds	r6, #48	; 0x30
 80095bc:	f805 6b01 	strb.w	r6, [r5], #1
 80095c0:	4652      	mov	r2, sl
 80095c2:	465b      	mov	r3, fp
 80095c4:	4680      	mov	r8, r0
 80095c6:	4689      	mov	r9, r1
 80095c8:	f7f8 f940 	bl	800184c <__aeabi_dcmplt>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d163      	bne.n	8009698 <_dtoa_r+0x608>
 80095d0:	4642      	mov	r2, r8
 80095d2:	464b      	mov	r3, r9
 80095d4:	4936      	ldr	r1, [pc, #216]	; (80096b0 <_dtoa_r+0x620>)
 80095d6:	2000      	movs	r0, #0
 80095d8:	f7f7 fd0e 	bl	8000ff8 <__aeabi_dsub>
 80095dc:	4652      	mov	r2, sl
 80095de:	465b      	mov	r3, fp
 80095e0:	f7f8 f934 	bl	800184c <__aeabi_dcmplt>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	f040 80b5 	bne.w	8009754 <_dtoa_r+0x6c4>
 80095ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095ec:	429d      	cmp	r5, r3
 80095ee:	d081      	beq.n	80094f4 <_dtoa_r+0x464>
 80095f0:	4b30      	ldr	r3, [pc, #192]	; (80096b4 <_dtoa_r+0x624>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	4650      	mov	r0, sl
 80095f6:	4659      	mov	r1, fp
 80095f8:	f7f7 feb6 	bl	8001368 <__aeabi_dmul>
 80095fc:	4b2d      	ldr	r3, [pc, #180]	; (80096b4 <_dtoa_r+0x624>)
 80095fe:	4682      	mov	sl, r0
 8009600:	468b      	mov	fp, r1
 8009602:	4640      	mov	r0, r8
 8009604:	4649      	mov	r1, r9
 8009606:	2200      	movs	r2, #0
 8009608:	f7f7 feae 	bl	8001368 <__aeabi_dmul>
 800960c:	4680      	mov	r8, r0
 800960e:	4689      	mov	r9, r1
 8009610:	e7c6      	b.n	80095a0 <_dtoa_r+0x510>
 8009612:	4650      	mov	r0, sl
 8009614:	4659      	mov	r1, fp
 8009616:	f7f7 fea7 	bl	8001368 <__aeabi_dmul>
 800961a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800961c:	9d01      	ldr	r5, [sp, #4]
 800961e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009620:	4682      	mov	sl, r0
 8009622:	468b      	mov	fp, r1
 8009624:	4649      	mov	r1, r9
 8009626:	4640      	mov	r0, r8
 8009628:	f7f8 f94e 	bl	80018c8 <__aeabi_d2iz>
 800962c:	4606      	mov	r6, r0
 800962e:	f7f7 fe31 	bl	8001294 <__aeabi_i2d>
 8009632:	3630      	adds	r6, #48	; 0x30
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	4640      	mov	r0, r8
 800963a:	4649      	mov	r1, r9
 800963c:	f7f7 fcdc 	bl	8000ff8 <__aeabi_dsub>
 8009640:	f805 6b01 	strb.w	r6, [r5], #1
 8009644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009646:	429d      	cmp	r5, r3
 8009648:	4680      	mov	r8, r0
 800964a:	4689      	mov	r9, r1
 800964c:	f04f 0200 	mov.w	r2, #0
 8009650:	d124      	bne.n	800969c <_dtoa_r+0x60c>
 8009652:	4b1b      	ldr	r3, [pc, #108]	; (80096c0 <_dtoa_r+0x630>)
 8009654:	4650      	mov	r0, sl
 8009656:	4659      	mov	r1, fp
 8009658:	f7f7 fcd0 	bl	8000ffc <__adddf3>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	4640      	mov	r0, r8
 8009662:	4649      	mov	r1, r9
 8009664:	f7f8 f910 	bl	8001888 <__aeabi_dcmpgt>
 8009668:	2800      	cmp	r0, #0
 800966a:	d173      	bne.n	8009754 <_dtoa_r+0x6c4>
 800966c:	4652      	mov	r2, sl
 800966e:	465b      	mov	r3, fp
 8009670:	4913      	ldr	r1, [pc, #76]	; (80096c0 <_dtoa_r+0x630>)
 8009672:	2000      	movs	r0, #0
 8009674:	f7f7 fcc0 	bl	8000ff8 <__aeabi_dsub>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	4640      	mov	r0, r8
 800967e:	4649      	mov	r1, r9
 8009680:	f7f8 f8e4 	bl	800184c <__aeabi_dcmplt>
 8009684:	2800      	cmp	r0, #0
 8009686:	f43f af35 	beq.w	80094f4 <_dtoa_r+0x464>
 800968a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800968c:	1e6b      	subs	r3, r5, #1
 800968e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009690:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009694:	2b30      	cmp	r3, #48	; 0x30
 8009696:	d0f8      	beq.n	800968a <_dtoa_r+0x5fa>
 8009698:	9700      	str	r7, [sp, #0]
 800969a:	e049      	b.n	8009730 <_dtoa_r+0x6a0>
 800969c:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <_dtoa_r+0x624>)
 800969e:	f7f7 fe63 	bl	8001368 <__aeabi_dmul>
 80096a2:	4680      	mov	r8, r0
 80096a4:	4689      	mov	r9, r1
 80096a6:	e7bd      	b.n	8009624 <_dtoa_r+0x594>
 80096a8:	0800b3d8 	.word	0x0800b3d8
 80096ac:	0800b3b0 	.word	0x0800b3b0
 80096b0:	3ff00000 	.word	0x3ff00000
 80096b4:	40240000 	.word	0x40240000
 80096b8:	401c0000 	.word	0x401c0000
 80096bc:	40140000 	.word	0x40140000
 80096c0:	3fe00000 	.word	0x3fe00000
 80096c4:	9d01      	ldr	r5, [sp, #4]
 80096c6:	4656      	mov	r6, sl
 80096c8:	465f      	mov	r7, fp
 80096ca:	4642      	mov	r2, r8
 80096cc:	464b      	mov	r3, r9
 80096ce:	4630      	mov	r0, r6
 80096d0:	4639      	mov	r1, r7
 80096d2:	f7f7 ff73 	bl	80015bc <__aeabi_ddiv>
 80096d6:	f7f8 f8f7 	bl	80018c8 <__aeabi_d2iz>
 80096da:	4682      	mov	sl, r0
 80096dc:	f7f7 fdda 	bl	8001294 <__aeabi_i2d>
 80096e0:	4642      	mov	r2, r8
 80096e2:	464b      	mov	r3, r9
 80096e4:	f7f7 fe40 	bl	8001368 <__aeabi_dmul>
 80096e8:	4602      	mov	r2, r0
 80096ea:	460b      	mov	r3, r1
 80096ec:	4630      	mov	r0, r6
 80096ee:	4639      	mov	r1, r7
 80096f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80096f4:	f7f7 fc80 	bl	8000ff8 <__aeabi_dsub>
 80096f8:	f805 6b01 	strb.w	r6, [r5], #1
 80096fc:	9e01      	ldr	r6, [sp, #4]
 80096fe:	9f03      	ldr	r7, [sp, #12]
 8009700:	1bae      	subs	r6, r5, r6
 8009702:	42b7      	cmp	r7, r6
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	d135      	bne.n	8009776 <_dtoa_r+0x6e6>
 800970a:	f7f7 fc77 	bl	8000ffc <__adddf3>
 800970e:	4642      	mov	r2, r8
 8009710:	464b      	mov	r3, r9
 8009712:	4606      	mov	r6, r0
 8009714:	460f      	mov	r7, r1
 8009716:	f7f8 f8b7 	bl	8001888 <__aeabi_dcmpgt>
 800971a:	b9d0      	cbnz	r0, 8009752 <_dtoa_r+0x6c2>
 800971c:	4642      	mov	r2, r8
 800971e:	464b      	mov	r3, r9
 8009720:	4630      	mov	r0, r6
 8009722:	4639      	mov	r1, r7
 8009724:	f7f8 f888 	bl	8001838 <__aeabi_dcmpeq>
 8009728:	b110      	cbz	r0, 8009730 <_dtoa_r+0x6a0>
 800972a:	f01a 0f01 	tst.w	sl, #1
 800972e:	d110      	bne.n	8009752 <_dtoa_r+0x6c2>
 8009730:	4620      	mov	r0, r4
 8009732:	ee18 1a10 	vmov	r1, s16
 8009736:	f000 fbdf 	bl	8009ef8 <_Bfree>
 800973a:	2300      	movs	r3, #0
 800973c:	9800      	ldr	r0, [sp, #0]
 800973e:	702b      	strb	r3, [r5, #0]
 8009740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009742:	3001      	adds	r0, #1
 8009744:	6018      	str	r0, [r3, #0]
 8009746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009748:	2b00      	cmp	r3, #0
 800974a:	f43f acf1 	beq.w	8009130 <_dtoa_r+0xa0>
 800974e:	601d      	str	r5, [r3, #0]
 8009750:	e4ee      	b.n	8009130 <_dtoa_r+0xa0>
 8009752:	9f00      	ldr	r7, [sp, #0]
 8009754:	462b      	mov	r3, r5
 8009756:	461d      	mov	r5, r3
 8009758:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800975c:	2a39      	cmp	r2, #57	; 0x39
 800975e:	d106      	bne.n	800976e <_dtoa_r+0x6de>
 8009760:	9a01      	ldr	r2, [sp, #4]
 8009762:	429a      	cmp	r2, r3
 8009764:	d1f7      	bne.n	8009756 <_dtoa_r+0x6c6>
 8009766:	9901      	ldr	r1, [sp, #4]
 8009768:	2230      	movs	r2, #48	; 0x30
 800976a:	3701      	adds	r7, #1
 800976c:	700a      	strb	r2, [r1, #0]
 800976e:	781a      	ldrb	r2, [r3, #0]
 8009770:	3201      	adds	r2, #1
 8009772:	701a      	strb	r2, [r3, #0]
 8009774:	e790      	b.n	8009698 <_dtoa_r+0x608>
 8009776:	4ba6      	ldr	r3, [pc, #664]	; (8009a10 <_dtoa_r+0x980>)
 8009778:	2200      	movs	r2, #0
 800977a:	f7f7 fdf5 	bl	8001368 <__aeabi_dmul>
 800977e:	2200      	movs	r2, #0
 8009780:	2300      	movs	r3, #0
 8009782:	4606      	mov	r6, r0
 8009784:	460f      	mov	r7, r1
 8009786:	f7f8 f857 	bl	8001838 <__aeabi_dcmpeq>
 800978a:	2800      	cmp	r0, #0
 800978c:	d09d      	beq.n	80096ca <_dtoa_r+0x63a>
 800978e:	e7cf      	b.n	8009730 <_dtoa_r+0x6a0>
 8009790:	9a08      	ldr	r2, [sp, #32]
 8009792:	2a00      	cmp	r2, #0
 8009794:	f000 80d7 	beq.w	8009946 <_dtoa_r+0x8b6>
 8009798:	9a06      	ldr	r2, [sp, #24]
 800979a:	2a01      	cmp	r2, #1
 800979c:	f300 80ba 	bgt.w	8009914 <_dtoa_r+0x884>
 80097a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097a2:	2a00      	cmp	r2, #0
 80097a4:	f000 80b2 	beq.w	800990c <_dtoa_r+0x87c>
 80097a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80097ac:	9e07      	ldr	r6, [sp, #28]
 80097ae:	9d04      	ldr	r5, [sp, #16]
 80097b0:	9a04      	ldr	r2, [sp, #16]
 80097b2:	441a      	add	r2, r3
 80097b4:	9204      	str	r2, [sp, #16]
 80097b6:	9a05      	ldr	r2, [sp, #20]
 80097b8:	2101      	movs	r1, #1
 80097ba:	441a      	add	r2, r3
 80097bc:	4620      	mov	r0, r4
 80097be:	9205      	str	r2, [sp, #20]
 80097c0:	f000 fc52 	bl	800a068 <__i2b>
 80097c4:	4607      	mov	r7, r0
 80097c6:	2d00      	cmp	r5, #0
 80097c8:	dd0c      	ble.n	80097e4 <_dtoa_r+0x754>
 80097ca:	9b05      	ldr	r3, [sp, #20]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	dd09      	ble.n	80097e4 <_dtoa_r+0x754>
 80097d0:	42ab      	cmp	r3, r5
 80097d2:	9a04      	ldr	r2, [sp, #16]
 80097d4:	bfa8      	it	ge
 80097d6:	462b      	movge	r3, r5
 80097d8:	1ad2      	subs	r2, r2, r3
 80097da:	9204      	str	r2, [sp, #16]
 80097dc:	9a05      	ldr	r2, [sp, #20]
 80097de:	1aed      	subs	r5, r5, r3
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	9305      	str	r3, [sp, #20]
 80097e4:	9b07      	ldr	r3, [sp, #28]
 80097e6:	b31b      	cbz	r3, 8009830 <_dtoa_r+0x7a0>
 80097e8:	9b08      	ldr	r3, [sp, #32]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f000 80af 	beq.w	800994e <_dtoa_r+0x8be>
 80097f0:	2e00      	cmp	r6, #0
 80097f2:	dd13      	ble.n	800981c <_dtoa_r+0x78c>
 80097f4:	4639      	mov	r1, r7
 80097f6:	4632      	mov	r2, r6
 80097f8:	4620      	mov	r0, r4
 80097fa:	f000 fcf5 	bl	800a1e8 <__pow5mult>
 80097fe:	ee18 2a10 	vmov	r2, s16
 8009802:	4601      	mov	r1, r0
 8009804:	4607      	mov	r7, r0
 8009806:	4620      	mov	r0, r4
 8009808:	f000 fc44 	bl	800a094 <__multiply>
 800980c:	ee18 1a10 	vmov	r1, s16
 8009810:	4680      	mov	r8, r0
 8009812:	4620      	mov	r0, r4
 8009814:	f000 fb70 	bl	8009ef8 <_Bfree>
 8009818:	ee08 8a10 	vmov	s16, r8
 800981c:	9b07      	ldr	r3, [sp, #28]
 800981e:	1b9a      	subs	r2, r3, r6
 8009820:	d006      	beq.n	8009830 <_dtoa_r+0x7a0>
 8009822:	ee18 1a10 	vmov	r1, s16
 8009826:	4620      	mov	r0, r4
 8009828:	f000 fcde 	bl	800a1e8 <__pow5mult>
 800982c:	ee08 0a10 	vmov	s16, r0
 8009830:	2101      	movs	r1, #1
 8009832:	4620      	mov	r0, r4
 8009834:	f000 fc18 	bl	800a068 <__i2b>
 8009838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800983a:	2b00      	cmp	r3, #0
 800983c:	4606      	mov	r6, r0
 800983e:	f340 8088 	ble.w	8009952 <_dtoa_r+0x8c2>
 8009842:	461a      	mov	r2, r3
 8009844:	4601      	mov	r1, r0
 8009846:	4620      	mov	r0, r4
 8009848:	f000 fcce 	bl	800a1e8 <__pow5mult>
 800984c:	9b06      	ldr	r3, [sp, #24]
 800984e:	2b01      	cmp	r3, #1
 8009850:	4606      	mov	r6, r0
 8009852:	f340 8081 	ble.w	8009958 <_dtoa_r+0x8c8>
 8009856:	f04f 0800 	mov.w	r8, #0
 800985a:	6933      	ldr	r3, [r6, #16]
 800985c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009860:	6918      	ldr	r0, [r3, #16]
 8009862:	f000 fbb1 	bl	8009fc8 <__hi0bits>
 8009866:	f1c0 0020 	rsb	r0, r0, #32
 800986a:	9b05      	ldr	r3, [sp, #20]
 800986c:	4418      	add	r0, r3
 800986e:	f010 001f 	ands.w	r0, r0, #31
 8009872:	f000 8092 	beq.w	800999a <_dtoa_r+0x90a>
 8009876:	f1c0 0320 	rsb	r3, r0, #32
 800987a:	2b04      	cmp	r3, #4
 800987c:	f340 808a 	ble.w	8009994 <_dtoa_r+0x904>
 8009880:	f1c0 001c 	rsb	r0, r0, #28
 8009884:	9b04      	ldr	r3, [sp, #16]
 8009886:	4403      	add	r3, r0
 8009888:	9304      	str	r3, [sp, #16]
 800988a:	9b05      	ldr	r3, [sp, #20]
 800988c:	4403      	add	r3, r0
 800988e:	4405      	add	r5, r0
 8009890:	9305      	str	r3, [sp, #20]
 8009892:	9b04      	ldr	r3, [sp, #16]
 8009894:	2b00      	cmp	r3, #0
 8009896:	dd07      	ble.n	80098a8 <_dtoa_r+0x818>
 8009898:	ee18 1a10 	vmov	r1, s16
 800989c:	461a      	mov	r2, r3
 800989e:	4620      	mov	r0, r4
 80098a0:	f000 fcfc 	bl	800a29c <__lshift>
 80098a4:	ee08 0a10 	vmov	s16, r0
 80098a8:	9b05      	ldr	r3, [sp, #20]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	dd05      	ble.n	80098ba <_dtoa_r+0x82a>
 80098ae:	4631      	mov	r1, r6
 80098b0:	461a      	mov	r2, r3
 80098b2:	4620      	mov	r0, r4
 80098b4:	f000 fcf2 	bl	800a29c <__lshift>
 80098b8:	4606      	mov	r6, r0
 80098ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d06e      	beq.n	800999e <_dtoa_r+0x90e>
 80098c0:	ee18 0a10 	vmov	r0, s16
 80098c4:	4631      	mov	r1, r6
 80098c6:	f000 fd59 	bl	800a37c <__mcmp>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	da67      	bge.n	800999e <_dtoa_r+0x90e>
 80098ce:	9b00      	ldr	r3, [sp, #0]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	ee18 1a10 	vmov	r1, s16
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	220a      	movs	r2, #10
 80098da:	2300      	movs	r3, #0
 80098dc:	4620      	mov	r0, r4
 80098de:	f000 fb2d 	bl	8009f3c <__multadd>
 80098e2:	9b08      	ldr	r3, [sp, #32]
 80098e4:	ee08 0a10 	vmov	s16, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 81b1 	beq.w	8009c50 <_dtoa_r+0xbc0>
 80098ee:	2300      	movs	r3, #0
 80098f0:	4639      	mov	r1, r7
 80098f2:	220a      	movs	r2, #10
 80098f4:	4620      	mov	r0, r4
 80098f6:	f000 fb21 	bl	8009f3c <__multadd>
 80098fa:	9b02      	ldr	r3, [sp, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	4607      	mov	r7, r0
 8009900:	f300 808e 	bgt.w	8009a20 <_dtoa_r+0x990>
 8009904:	9b06      	ldr	r3, [sp, #24]
 8009906:	2b02      	cmp	r3, #2
 8009908:	dc51      	bgt.n	80099ae <_dtoa_r+0x91e>
 800990a:	e089      	b.n	8009a20 <_dtoa_r+0x990>
 800990c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800990e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009912:	e74b      	b.n	80097ac <_dtoa_r+0x71c>
 8009914:	9b03      	ldr	r3, [sp, #12]
 8009916:	1e5e      	subs	r6, r3, #1
 8009918:	9b07      	ldr	r3, [sp, #28]
 800991a:	42b3      	cmp	r3, r6
 800991c:	bfbf      	itttt	lt
 800991e:	9b07      	ldrlt	r3, [sp, #28]
 8009920:	9607      	strlt	r6, [sp, #28]
 8009922:	1af2      	sublt	r2, r6, r3
 8009924:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009926:	bfb6      	itet	lt
 8009928:	189b      	addlt	r3, r3, r2
 800992a:	1b9e      	subge	r6, r3, r6
 800992c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800992e:	9b03      	ldr	r3, [sp, #12]
 8009930:	bfb8      	it	lt
 8009932:	2600      	movlt	r6, #0
 8009934:	2b00      	cmp	r3, #0
 8009936:	bfb7      	itett	lt
 8009938:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800993c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009940:	1a9d      	sublt	r5, r3, r2
 8009942:	2300      	movlt	r3, #0
 8009944:	e734      	b.n	80097b0 <_dtoa_r+0x720>
 8009946:	9e07      	ldr	r6, [sp, #28]
 8009948:	9d04      	ldr	r5, [sp, #16]
 800994a:	9f08      	ldr	r7, [sp, #32]
 800994c:	e73b      	b.n	80097c6 <_dtoa_r+0x736>
 800994e:	9a07      	ldr	r2, [sp, #28]
 8009950:	e767      	b.n	8009822 <_dtoa_r+0x792>
 8009952:	9b06      	ldr	r3, [sp, #24]
 8009954:	2b01      	cmp	r3, #1
 8009956:	dc18      	bgt.n	800998a <_dtoa_r+0x8fa>
 8009958:	f1ba 0f00 	cmp.w	sl, #0
 800995c:	d115      	bne.n	800998a <_dtoa_r+0x8fa>
 800995e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009962:	b993      	cbnz	r3, 800998a <_dtoa_r+0x8fa>
 8009964:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009968:	0d1b      	lsrs	r3, r3, #20
 800996a:	051b      	lsls	r3, r3, #20
 800996c:	b183      	cbz	r3, 8009990 <_dtoa_r+0x900>
 800996e:	9b04      	ldr	r3, [sp, #16]
 8009970:	3301      	adds	r3, #1
 8009972:	9304      	str	r3, [sp, #16]
 8009974:	9b05      	ldr	r3, [sp, #20]
 8009976:	3301      	adds	r3, #1
 8009978:	9305      	str	r3, [sp, #20]
 800997a:	f04f 0801 	mov.w	r8, #1
 800997e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009980:	2b00      	cmp	r3, #0
 8009982:	f47f af6a 	bne.w	800985a <_dtoa_r+0x7ca>
 8009986:	2001      	movs	r0, #1
 8009988:	e76f      	b.n	800986a <_dtoa_r+0x7da>
 800998a:	f04f 0800 	mov.w	r8, #0
 800998e:	e7f6      	b.n	800997e <_dtoa_r+0x8ee>
 8009990:	4698      	mov	r8, r3
 8009992:	e7f4      	b.n	800997e <_dtoa_r+0x8ee>
 8009994:	f43f af7d 	beq.w	8009892 <_dtoa_r+0x802>
 8009998:	4618      	mov	r0, r3
 800999a:	301c      	adds	r0, #28
 800999c:	e772      	b.n	8009884 <_dtoa_r+0x7f4>
 800999e:	9b03      	ldr	r3, [sp, #12]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	dc37      	bgt.n	8009a14 <_dtoa_r+0x984>
 80099a4:	9b06      	ldr	r3, [sp, #24]
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	dd34      	ble.n	8009a14 <_dtoa_r+0x984>
 80099aa:	9b03      	ldr	r3, [sp, #12]
 80099ac:	9302      	str	r3, [sp, #8]
 80099ae:	9b02      	ldr	r3, [sp, #8]
 80099b0:	b96b      	cbnz	r3, 80099ce <_dtoa_r+0x93e>
 80099b2:	4631      	mov	r1, r6
 80099b4:	2205      	movs	r2, #5
 80099b6:	4620      	mov	r0, r4
 80099b8:	f000 fac0 	bl	8009f3c <__multadd>
 80099bc:	4601      	mov	r1, r0
 80099be:	4606      	mov	r6, r0
 80099c0:	ee18 0a10 	vmov	r0, s16
 80099c4:	f000 fcda 	bl	800a37c <__mcmp>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	f73f adbb 	bgt.w	8009544 <_dtoa_r+0x4b4>
 80099ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d0:	9d01      	ldr	r5, [sp, #4]
 80099d2:	43db      	mvns	r3, r3
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	f04f 0800 	mov.w	r8, #0
 80099da:	4631      	mov	r1, r6
 80099dc:	4620      	mov	r0, r4
 80099de:	f000 fa8b 	bl	8009ef8 <_Bfree>
 80099e2:	2f00      	cmp	r7, #0
 80099e4:	f43f aea4 	beq.w	8009730 <_dtoa_r+0x6a0>
 80099e8:	f1b8 0f00 	cmp.w	r8, #0
 80099ec:	d005      	beq.n	80099fa <_dtoa_r+0x96a>
 80099ee:	45b8      	cmp	r8, r7
 80099f0:	d003      	beq.n	80099fa <_dtoa_r+0x96a>
 80099f2:	4641      	mov	r1, r8
 80099f4:	4620      	mov	r0, r4
 80099f6:	f000 fa7f 	bl	8009ef8 <_Bfree>
 80099fa:	4639      	mov	r1, r7
 80099fc:	4620      	mov	r0, r4
 80099fe:	f000 fa7b 	bl	8009ef8 <_Bfree>
 8009a02:	e695      	b.n	8009730 <_dtoa_r+0x6a0>
 8009a04:	2600      	movs	r6, #0
 8009a06:	4637      	mov	r7, r6
 8009a08:	e7e1      	b.n	80099ce <_dtoa_r+0x93e>
 8009a0a:	9700      	str	r7, [sp, #0]
 8009a0c:	4637      	mov	r7, r6
 8009a0e:	e599      	b.n	8009544 <_dtoa_r+0x4b4>
 8009a10:	40240000 	.word	0x40240000
 8009a14:	9b08      	ldr	r3, [sp, #32]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 80ca 	beq.w	8009bb0 <_dtoa_r+0xb20>
 8009a1c:	9b03      	ldr	r3, [sp, #12]
 8009a1e:	9302      	str	r3, [sp, #8]
 8009a20:	2d00      	cmp	r5, #0
 8009a22:	dd05      	ble.n	8009a30 <_dtoa_r+0x9a0>
 8009a24:	4639      	mov	r1, r7
 8009a26:	462a      	mov	r2, r5
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f000 fc37 	bl	800a29c <__lshift>
 8009a2e:	4607      	mov	r7, r0
 8009a30:	f1b8 0f00 	cmp.w	r8, #0
 8009a34:	d05b      	beq.n	8009aee <_dtoa_r+0xa5e>
 8009a36:	6879      	ldr	r1, [r7, #4]
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f000 fa1d 	bl	8009e78 <_Balloc>
 8009a3e:	4605      	mov	r5, r0
 8009a40:	b928      	cbnz	r0, 8009a4e <_dtoa_r+0x9be>
 8009a42:	4b87      	ldr	r3, [pc, #540]	; (8009c60 <_dtoa_r+0xbd0>)
 8009a44:	4602      	mov	r2, r0
 8009a46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009a4a:	f7ff bb3b 	b.w	80090c4 <_dtoa_r+0x34>
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	3202      	adds	r2, #2
 8009a52:	0092      	lsls	r2, r2, #2
 8009a54:	f107 010c 	add.w	r1, r7, #12
 8009a58:	300c      	adds	r0, #12
 8009a5a:	f7fe fdf3 	bl	8008644 <memcpy>
 8009a5e:	2201      	movs	r2, #1
 8009a60:	4629      	mov	r1, r5
 8009a62:	4620      	mov	r0, r4
 8009a64:	f000 fc1a 	bl	800a29c <__lshift>
 8009a68:	9b01      	ldr	r3, [sp, #4]
 8009a6a:	f103 0901 	add.w	r9, r3, #1
 8009a6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009a72:	4413      	add	r3, r2
 8009a74:	9305      	str	r3, [sp, #20]
 8009a76:	f00a 0301 	and.w	r3, sl, #1
 8009a7a:	46b8      	mov	r8, r7
 8009a7c:	9304      	str	r3, [sp, #16]
 8009a7e:	4607      	mov	r7, r0
 8009a80:	4631      	mov	r1, r6
 8009a82:	ee18 0a10 	vmov	r0, s16
 8009a86:	f7ff fa75 	bl	8008f74 <quorem>
 8009a8a:	4641      	mov	r1, r8
 8009a8c:	9002      	str	r0, [sp, #8]
 8009a8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009a92:	ee18 0a10 	vmov	r0, s16
 8009a96:	f000 fc71 	bl	800a37c <__mcmp>
 8009a9a:	463a      	mov	r2, r7
 8009a9c:	9003      	str	r0, [sp, #12]
 8009a9e:	4631      	mov	r1, r6
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f000 fc87 	bl	800a3b4 <__mdiff>
 8009aa6:	68c2      	ldr	r2, [r0, #12]
 8009aa8:	f109 3bff 	add.w	fp, r9, #4294967295
 8009aac:	4605      	mov	r5, r0
 8009aae:	bb02      	cbnz	r2, 8009af2 <_dtoa_r+0xa62>
 8009ab0:	4601      	mov	r1, r0
 8009ab2:	ee18 0a10 	vmov	r0, s16
 8009ab6:	f000 fc61 	bl	800a37c <__mcmp>
 8009aba:	4602      	mov	r2, r0
 8009abc:	4629      	mov	r1, r5
 8009abe:	4620      	mov	r0, r4
 8009ac0:	9207      	str	r2, [sp, #28]
 8009ac2:	f000 fa19 	bl	8009ef8 <_Bfree>
 8009ac6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009aca:	ea43 0102 	orr.w	r1, r3, r2
 8009ace:	9b04      	ldr	r3, [sp, #16]
 8009ad0:	430b      	orrs	r3, r1
 8009ad2:	464d      	mov	r5, r9
 8009ad4:	d10f      	bne.n	8009af6 <_dtoa_r+0xa66>
 8009ad6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ada:	d02a      	beq.n	8009b32 <_dtoa_r+0xaa2>
 8009adc:	9b03      	ldr	r3, [sp, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	dd02      	ble.n	8009ae8 <_dtoa_r+0xa58>
 8009ae2:	9b02      	ldr	r3, [sp, #8]
 8009ae4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009ae8:	f88b a000 	strb.w	sl, [fp]
 8009aec:	e775      	b.n	80099da <_dtoa_r+0x94a>
 8009aee:	4638      	mov	r0, r7
 8009af0:	e7ba      	b.n	8009a68 <_dtoa_r+0x9d8>
 8009af2:	2201      	movs	r2, #1
 8009af4:	e7e2      	b.n	8009abc <_dtoa_r+0xa2c>
 8009af6:	9b03      	ldr	r3, [sp, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	db04      	blt.n	8009b06 <_dtoa_r+0xa76>
 8009afc:	9906      	ldr	r1, [sp, #24]
 8009afe:	430b      	orrs	r3, r1
 8009b00:	9904      	ldr	r1, [sp, #16]
 8009b02:	430b      	orrs	r3, r1
 8009b04:	d122      	bne.n	8009b4c <_dtoa_r+0xabc>
 8009b06:	2a00      	cmp	r2, #0
 8009b08:	ddee      	ble.n	8009ae8 <_dtoa_r+0xa58>
 8009b0a:	ee18 1a10 	vmov	r1, s16
 8009b0e:	2201      	movs	r2, #1
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 fbc3 	bl	800a29c <__lshift>
 8009b16:	4631      	mov	r1, r6
 8009b18:	ee08 0a10 	vmov	s16, r0
 8009b1c:	f000 fc2e 	bl	800a37c <__mcmp>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	dc03      	bgt.n	8009b2c <_dtoa_r+0xa9c>
 8009b24:	d1e0      	bne.n	8009ae8 <_dtoa_r+0xa58>
 8009b26:	f01a 0f01 	tst.w	sl, #1
 8009b2a:	d0dd      	beq.n	8009ae8 <_dtoa_r+0xa58>
 8009b2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b30:	d1d7      	bne.n	8009ae2 <_dtoa_r+0xa52>
 8009b32:	2339      	movs	r3, #57	; 0x39
 8009b34:	f88b 3000 	strb.w	r3, [fp]
 8009b38:	462b      	mov	r3, r5
 8009b3a:	461d      	mov	r5, r3
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b42:	2a39      	cmp	r2, #57	; 0x39
 8009b44:	d071      	beq.n	8009c2a <_dtoa_r+0xb9a>
 8009b46:	3201      	adds	r2, #1
 8009b48:	701a      	strb	r2, [r3, #0]
 8009b4a:	e746      	b.n	80099da <_dtoa_r+0x94a>
 8009b4c:	2a00      	cmp	r2, #0
 8009b4e:	dd07      	ble.n	8009b60 <_dtoa_r+0xad0>
 8009b50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b54:	d0ed      	beq.n	8009b32 <_dtoa_r+0xaa2>
 8009b56:	f10a 0301 	add.w	r3, sl, #1
 8009b5a:	f88b 3000 	strb.w	r3, [fp]
 8009b5e:	e73c      	b.n	80099da <_dtoa_r+0x94a>
 8009b60:	9b05      	ldr	r3, [sp, #20]
 8009b62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009b66:	4599      	cmp	r9, r3
 8009b68:	d047      	beq.n	8009bfa <_dtoa_r+0xb6a>
 8009b6a:	ee18 1a10 	vmov	r1, s16
 8009b6e:	2300      	movs	r3, #0
 8009b70:	220a      	movs	r2, #10
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 f9e2 	bl	8009f3c <__multadd>
 8009b78:	45b8      	cmp	r8, r7
 8009b7a:	ee08 0a10 	vmov	s16, r0
 8009b7e:	f04f 0300 	mov.w	r3, #0
 8009b82:	f04f 020a 	mov.w	r2, #10
 8009b86:	4641      	mov	r1, r8
 8009b88:	4620      	mov	r0, r4
 8009b8a:	d106      	bne.n	8009b9a <_dtoa_r+0xb0a>
 8009b8c:	f000 f9d6 	bl	8009f3c <__multadd>
 8009b90:	4680      	mov	r8, r0
 8009b92:	4607      	mov	r7, r0
 8009b94:	f109 0901 	add.w	r9, r9, #1
 8009b98:	e772      	b.n	8009a80 <_dtoa_r+0x9f0>
 8009b9a:	f000 f9cf 	bl	8009f3c <__multadd>
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	4680      	mov	r8, r0
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	220a      	movs	r2, #10
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f000 f9c8 	bl	8009f3c <__multadd>
 8009bac:	4607      	mov	r7, r0
 8009bae:	e7f1      	b.n	8009b94 <_dtoa_r+0xb04>
 8009bb0:	9b03      	ldr	r3, [sp, #12]
 8009bb2:	9302      	str	r3, [sp, #8]
 8009bb4:	9d01      	ldr	r5, [sp, #4]
 8009bb6:	ee18 0a10 	vmov	r0, s16
 8009bba:	4631      	mov	r1, r6
 8009bbc:	f7ff f9da 	bl	8008f74 <quorem>
 8009bc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009bc4:	9b01      	ldr	r3, [sp, #4]
 8009bc6:	f805 ab01 	strb.w	sl, [r5], #1
 8009bca:	1aea      	subs	r2, r5, r3
 8009bcc:	9b02      	ldr	r3, [sp, #8]
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	dd09      	ble.n	8009be6 <_dtoa_r+0xb56>
 8009bd2:	ee18 1a10 	vmov	r1, s16
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	220a      	movs	r2, #10
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 f9ae 	bl	8009f3c <__multadd>
 8009be0:	ee08 0a10 	vmov	s16, r0
 8009be4:	e7e7      	b.n	8009bb6 <_dtoa_r+0xb26>
 8009be6:	9b02      	ldr	r3, [sp, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	bfc8      	it	gt
 8009bec:	461d      	movgt	r5, r3
 8009bee:	9b01      	ldr	r3, [sp, #4]
 8009bf0:	bfd8      	it	le
 8009bf2:	2501      	movle	r5, #1
 8009bf4:	441d      	add	r5, r3
 8009bf6:	f04f 0800 	mov.w	r8, #0
 8009bfa:	ee18 1a10 	vmov	r1, s16
 8009bfe:	2201      	movs	r2, #1
 8009c00:	4620      	mov	r0, r4
 8009c02:	f000 fb4b 	bl	800a29c <__lshift>
 8009c06:	4631      	mov	r1, r6
 8009c08:	ee08 0a10 	vmov	s16, r0
 8009c0c:	f000 fbb6 	bl	800a37c <__mcmp>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	dc91      	bgt.n	8009b38 <_dtoa_r+0xaa8>
 8009c14:	d102      	bne.n	8009c1c <_dtoa_r+0xb8c>
 8009c16:	f01a 0f01 	tst.w	sl, #1
 8009c1a:	d18d      	bne.n	8009b38 <_dtoa_r+0xaa8>
 8009c1c:	462b      	mov	r3, r5
 8009c1e:	461d      	mov	r5, r3
 8009c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c24:	2a30      	cmp	r2, #48	; 0x30
 8009c26:	d0fa      	beq.n	8009c1e <_dtoa_r+0xb8e>
 8009c28:	e6d7      	b.n	80099da <_dtoa_r+0x94a>
 8009c2a:	9a01      	ldr	r2, [sp, #4]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d184      	bne.n	8009b3a <_dtoa_r+0xaaa>
 8009c30:	9b00      	ldr	r3, [sp, #0]
 8009c32:	3301      	adds	r3, #1
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	2331      	movs	r3, #49	; 0x31
 8009c38:	7013      	strb	r3, [r2, #0]
 8009c3a:	e6ce      	b.n	80099da <_dtoa_r+0x94a>
 8009c3c:	4b09      	ldr	r3, [pc, #36]	; (8009c64 <_dtoa_r+0xbd4>)
 8009c3e:	f7ff ba95 	b.w	800916c <_dtoa_r+0xdc>
 8009c42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f47f aa6e 	bne.w	8009126 <_dtoa_r+0x96>
 8009c4a:	4b07      	ldr	r3, [pc, #28]	; (8009c68 <_dtoa_r+0xbd8>)
 8009c4c:	f7ff ba8e 	b.w	800916c <_dtoa_r+0xdc>
 8009c50:	9b02      	ldr	r3, [sp, #8]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	dcae      	bgt.n	8009bb4 <_dtoa_r+0xb24>
 8009c56:	9b06      	ldr	r3, [sp, #24]
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	f73f aea8 	bgt.w	80099ae <_dtoa_r+0x91e>
 8009c5e:	e7a9      	b.n	8009bb4 <_dtoa_r+0xb24>
 8009c60:	0800b2df 	.word	0x0800b2df
 8009c64:	0800b23c 	.word	0x0800b23c
 8009c68:	0800b260 	.word	0x0800b260

08009c6c <std>:
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	b510      	push	{r4, lr}
 8009c70:	4604      	mov	r4, r0
 8009c72:	e9c0 3300 	strd	r3, r3, [r0]
 8009c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c7a:	6083      	str	r3, [r0, #8]
 8009c7c:	8181      	strh	r1, [r0, #12]
 8009c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8009c80:	81c2      	strh	r2, [r0, #14]
 8009c82:	6183      	str	r3, [r0, #24]
 8009c84:	4619      	mov	r1, r3
 8009c86:	2208      	movs	r2, #8
 8009c88:	305c      	adds	r0, #92	; 0x5c
 8009c8a:	f7fe fce9 	bl	8008660 <memset>
 8009c8e:	4b05      	ldr	r3, [pc, #20]	; (8009ca4 <std+0x38>)
 8009c90:	6263      	str	r3, [r4, #36]	; 0x24
 8009c92:	4b05      	ldr	r3, [pc, #20]	; (8009ca8 <std+0x3c>)
 8009c94:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c96:	4b05      	ldr	r3, [pc, #20]	; (8009cac <std+0x40>)
 8009c98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c9a:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <std+0x44>)
 8009c9c:	6224      	str	r4, [r4, #32]
 8009c9e:	6323      	str	r3, [r4, #48]	; 0x30
 8009ca0:	bd10      	pop	{r4, pc}
 8009ca2:	bf00      	nop
 8009ca4:	0800aa41 	.word	0x0800aa41
 8009ca8:	0800aa63 	.word	0x0800aa63
 8009cac:	0800aa9b 	.word	0x0800aa9b
 8009cb0:	0800aabf 	.word	0x0800aabf

08009cb4 <_cleanup_r>:
 8009cb4:	4901      	ldr	r1, [pc, #4]	; (8009cbc <_cleanup_r+0x8>)
 8009cb6:	f000 b8af 	b.w	8009e18 <_fwalk_reent>
 8009cba:	bf00      	nop
 8009cbc:	0800add5 	.word	0x0800add5

08009cc0 <__sfmoreglue>:
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	2268      	movs	r2, #104	; 0x68
 8009cc4:	1e4d      	subs	r5, r1, #1
 8009cc6:	4355      	muls	r5, r2
 8009cc8:	460e      	mov	r6, r1
 8009cca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009cce:	f000 fcd9 	bl	800a684 <_malloc_r>
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	b140      	cbz	r0, 8009ce8 <__sfmoreglue+0x28>
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	e9c0 1600 	strd	r1, r6, [r0]
 8009cdc:	300c      	adds	r0, #12
 8009cde:	60a0      	str	r0, [r4, #8]
 8009ce0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ce4:	f7fe fcbc 	bl	8008660 <memset>
 8009ce8:	4620      	mov	r0, r4
 8009cea:	bd70      	pop	{r4, r5, r6, pc}

08009cec <__sfp_lock_acquire>:
 8009cec:	4801      	ldr	r0, [pc, #4]	; (8009cf4 <__sfp_lock_acquire+0x8>)
 8009cee:	f000 b8b8 	b.w	8009e62 <__retarget_lock_acquire_recursive>
 8009cf2:	bf00      	nop
 8009cf4:	200005d1 	.word	0x200005d1

08009cf8 <__sfp_lock_release>:
 8009cf8:	4801      	ldr	r0, [pc, #4]	; (8009d00 <__sfp_lock_release+0x8>)
 8009cfa:	f000 b8b3 	b.w	8009e64 <__retarget_lock_release_recursive>
 8009cfe:	bf00      	nop
 8009d00:	200005d1 	.word	0x200005d1

08009d04 <__sinit_lock_acquire>:
 8009d04:	4801      	ldr	r0, [pc, #4]	; (8009d0c <__sinit_lock_acquire+0x8>)
 8009d06:	f000 b8ac 	b.w	8009e62 <__retarget_lock_acquire_recursive>
 8009d0a:	bf00      	nop
 8009d0c:	200005d2 	.word	0x200005d2

08009d10 <__sinit_lock_release>:
 8009d10:	4801      	ldr	r0, [pc, #4]	; (8009d18 <__sinit_lock_release+0x8>)
 8009d12:	f000 b8a7 	b.w	8009e64 <__retarget_lock_release_recursive>
 8009d16:	bf00      	nop
 8009d18:	200005d2 	.word	0x200005d2

08009d1c <__sinit>:
 8009d1c:	b510      	push	{r4, lr}
 8009d1e:	4604      	mov	r4, r0
 8009d20:	f7ff fff0 	bl	8009d04 <__sinit_lock_acquire>
 8009d24:	69a3      	ldr	r3, [r4, #24]
 8009d26:	b11b      	cbz	r3, 8009d30 <__sinit+0x14>
 8009d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d2c:	f7ff bff0 	b.w	8009d10 <__sinit_lock_release>
 8009d30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d34:	6523      	str	r3, [r4, #80]	; 0x50
 8009d36:	4b13      	ldr	r3, [pc, #76]	; (8009d84 <__sinit+0x68>)
 8009d38:	4a13      	ldr	r2, [pc, #76]	; (8009d88 <__sinit+0x6c>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d3e:	42a3      	cmp	r3, r4
 8009d40:	bf04      	itt	eq
 8009d42:	2301      	moveq	r3, #1
 8009d44:	61a3      	streq	r3, [r4, #24]
 8009d46:	4620      	mov	r0, r4
 8009d48:	f000 f820 	bl	8009d8c <__sfp>
 8009d4c:	6060      	str	r0, [r4, #4]
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f000 f81c 	bl	8009d8c <__sfp>
 8009d54:	60a0      	str	r0, [r4, #8]
 8009d56:	4620      	mov	r0, r4
 8009d58:	f000 f818 	bl	8009d8c <__sfp>
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	60e0      	str	r0, [r4, #12]
 8009d60:	2104      	movs	r1, #4
 8009d62:	6860      	ldr	r0, [r4, #4]
 8009d64:	f7ff ff82 	bl	8009c6c <std>
 8009d68:	68a0      	ldr	r0, [r4, #8]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	2109      	movs	r1, #9
 8009d6e:	f7ff ff7d 	bl	8009c6c <std>
 8009d72:	68e0      	ldr	r0, [r4, #12]
 8009d74:	2202      	movs	r2, #2
 8009d76:	2112      	movs	r1, #18
 8009d78:	f7ff ff78 	bl	8009c6c <std>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	61a3      	str	r3, [r4, #24]
 8009d80:	e7d2      	b.n	8009d28 <__sinit+0xc>
 8009d82:	bf00      	nop
 8009d84:	0800b228 	.word	0x0800b228
 8009d88:	08009cb5 	.word	0x08009cb5

08009d8c <__sfp>:
 8009d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8e:	4607      	mov	r7, r0
 8009d90:	f7ff ffac 	bl	8009cec <__sfp_lock_acquire>
 8009d94:	4b1e      	ldr	r3, [pc, #120]	; (8009e10 <__sfp+0x84>)
 8009d96:	681e      	ldr	r6, [r3, #0]
 8009d98:	69b3      	ldr	r3, [r6, #24]
 8009d9a:	b913      	cbnz	r3, 8009da2 <__sfp+0x16>
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f7ff ffbd 	bl	8009d1c <__sinit>
 8009da2:	3648      	adds	r6, #72	; 0x48
 8009da4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009da8:	3b01      	subs	r3, #1
 8009daa:	d503      	bpl.n	8009db4 <__sfp+0x28>
 8009dac:	6833      	ldr	r3, [r6, #0]
 8009dae:	b30b      	cbz	r3, 8009df4 <__sfp+0x68>
 8009db0:	6836      	ldr	r6, [r6, #0]
 8009db2:	e7f7      	b.n	8009da4 <__sfp+0x18>
 8009db4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009db8:	b9d5      	cbnz	r5, 8009df0 <__sfp+0x64>
 8009dba:	4b16      	ldr	r3, [pc, #88]	; (8009e14 <__sfp+0x88>)
 8009dbc:	60e3      	str	r3, [r4, #12]
 8009dbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009dc2:	6665      	str	r5, [r4, #100]	; 0x64
 8009dc4:	f000 f84c 	bl	8009e60 <__retarget_lock_init_recursive>
 8009dc8:	f7ff ff96 	bl	8009cf8 <__sfp_lock_release>
 8009dcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009dd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009dd4:	6025      	str	r5, [r4, #0]
 8009dd6:	61a5      	str	r5, [r4, #24]
 8009dd8:	2208      	movs	r2, #8
 8009dda:	4629      	mov	r1, r5
 8009ddc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009de0:	f7fe fc3e 	bl	8008660 <memset>
 8009de4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009de8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009dec:	4620      	mov	r0, r4
 8009dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009df0:	3468      	adds	r4, #104	; 0x68
 8009df2:	e7d9      	b.n	8009da8 <__sfp+0x1c>
 8009df4:	2104      	movs	r1, #4
 8009df6:	4638      	mov	r0, r7
 8009df8:	f7ff ff62 	bl	8009cc0 <__sfmoreglue>
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	6030      	str	r0, [r6, #0]
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d1d5      	bne.n	8009db0 <__sfp+0x24>
 8009e04:	f7ff ff78 	bl	8009cf8 <__sfp_lock_release>
 8009e08:	230c      	movs	r3, #12
 8009e0a:	603b      	str	r3, [r7, #0]
 8009e0c:	e7ee      	b.n	8009dec <__sfp+0x60>
 8009e0e:	bf00      	nop
 8009e10:	0800b228 	.word	0x0800b228
 8009e14:	ffff0001 	.word	0xffff0001

08009e18 <_fwalk_reent>:
 8009e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	4688      	mov	r8, r1
 8009e20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e24:	2700      	movs	r7, #0
 8009e26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e2a:	f1b9 0901 	subs.w	r9, r9, #1
 8009e2e:	d505      	bpl.n	8009e3c <_fwalk_reent+0x24>
 8009e30:	6824      	ldr	r4, [r4, #0]
 8009e32:	2c00      	cmp	r4, #0
 8009e34:	d1f7      	bne.n	8009e26 <_fwalk_reent+0xe>
 8009e36:	4638      	mov	r0, r7
 8009e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e3c:	89ab      	ldrh	r3, [r5, #12]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d907      	bls.n	8009e52 <_fwalk_reent+0x3a>
 8009e42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e46:	3301      	adds	r3, #1
 8009e48:	d003      	beq.n	8009e52 <_fwalk_reent+0x3a>
 8009e4a:	4629      	mov	r1, r5
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	47c0      	blx	r8
 8009e50:	4307      	orrs	r7, r0
 8009e52:	3568      	adds	r5, #104	; 0x68
 8009e54:	e7e9      	b.n	8009e2a <_fwalk_reent+0x12>
	...

08009e58 <_localeconv_r>:
 8009e58:	4800      	ldr	r0, [pc, #0]	; (8009e5c <_localeconv_r+0x4>)
 8009e5a:	4770      	bx	lr
 8009e5c:	200001a8 	.word	0x200001a8

08009e60 <__retarget_lock_init_recursive>:
 8009e60:	4770      	bx	lr

08009e62 <__retarget_lock_acquire_recursive>:
 8009e62:	4770      	bx	lr

08009e64 <__retarget_lock_release_recursive>:
 8009e64:	4770      	bx	lr
	...

08009e68 <malloc>:
 8009e68:	4b02      	ldr	r3, [pc, #8]	; (8009e74 <malloc+0xc>)
 8009e6a:	4601      	mov	r1, r0
 8009e6c:	6818      	ldr	r0, [r3, #0]
 8009e6e:	f000 bc09 	b.w	800a684 <_malloc_r>
 8009e72:	bf00      	nop
 8009e74:	20000054 	.word	0x20000054

08009e78 <_Balloc>:
 8009e78:	b570      	push	{r4, r5, r6, lr}
 8009e7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	460d      	mov	r5, r1
 8009e80:	b976      	cbnz	r6, 8009ea0 <_Balloc+0x28>
 8009e82:	2010      	movs	r0, #16
 8009e84:	f7ff fff0 	bl	8009e68 <malloc>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	6260      	str	r0, [r4, #36]	; 0x24
 8009e8c:	b920      	cbnz	r0, 8009e98 <_Balloc+0x20>
 8009e8e:	4b18      	ldr	r3, [pc, #96]	; (8009ef0 <_Balloc+0x78>)
 8009e90:	4818      	ldr	r0, [pc, #96]	; (8009ef4 <_Balloc+0x7c>)
 8009e92:	2166      	movs	r1, #102	; 0x66
 8009e94:	f000 feea 	bl	800ac6c <__assert_func>
 8009e98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e9c:	6006      	str	r6, [r0, #0]
 8009e9e:	60c6      	str	r6, [r0, #12]
 8009ea0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ea2:	68f3      	ldr	r3, [r6, #12]
 8009ea4:	b183      	cbz	r3, 8009ec8 <_Balloc+0x50>
 8009ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009eae:	b9b8      	cbnz	r0, 8009ee0 <_Balloc+0x68>
 8009eb0:	2101      	movs	r1, #1
 8009eb2:	fa01 f605 	lsl.w	r6, r1, r5
 8009eb6:	1d72      	adds	r2, r6, #5
 8009eb8:	0092      	lsls	r2, r2, #2
 8009eba:	4620      	mov	r0, r4
 8009ebc:	f000 fb60 	bl	800a580 <_calloc_r>
 8009ec0:	b160      	cbz	r0, 8009edc <_Balloc+0x64>
 8009ec2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ec6:	e00e      	b.n	8009ee6 <_Balloc+0x6e>
 8009ec8:	2221      	movs	r2, #33	; 0x21
 8009eca:	2104      	movs	r1, #4
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f000 fb57 	bl	800a580 <_calloc_r>
 8009ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ed4:	60f0      	str	r0, [r6, #12]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1e4      	bne.n	8009ea6 <_Balloc+0x2e>
 8009edc:	2000      	movs	r0, #0
 8009ede:	bd70      	pop	{r4, r5, r6, pc}
 8009ee0:	6802      	ldr	r2, [r0, #0]
 8009ee2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009eec:	e7f7      	b.n	8009ede <_Balloc+0x66>
 8009eee:	bf00      	nop
 8009ef0:	0800b26d 	.word	0x0800b26d
 8009ef4:	0800b350 	.word	0x0800b350

08009ef8 <_Bfree>:
 8009ef8:	b570      	push	{r4, r5, r6, lr}
 8009efa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009efc:	4605      	mov	r5, r0
 8009efe:	460c      	mov	r4, r1
 8009f00:	b976      	cbnz	r6, 8009f20 <_Bfree+0x28>
 8009f02:	2010      	movs	r0, #16
 8009f04:	f7ff ffb0 	bl	8009e68 <malloc>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	6268      	str	r0, [r5, #36]	; 0x24
 8009f0c:	b920      	cbnz	r0, 8009f18 <_Bfree+0x20>
 8009f0e:	4b09      	ldr	r3, [pc, #36]	; (8009f34 <_Bfree+0x3c>)
 8009f10:	4809      	ldr	r0, [pc, #36]	; (8009f38 <_Bfree+0x40>)
 8009f12:	218a      	movs	r1, #138	; 0x8a
 8009f14:	f000 feaa 	bl	800ac6c <__assert_func>
 8009f18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f1c:	6006      	str	r6, [r0, #0]
 8009f1e:	60c6      	str	r6, [r0, #12]
 8009f20:	b13c      	cbz	r4, 8009f32 <_Bfree+0x3a>
 8009f22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f24:	6862      	ldr	r2, [r4, #4]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f2c:	6021      	str	r1, [r4, #0]
 8009f2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f32:	bd70      	pop	{r4, r5, r6, pc}
 8009f34:	0800b26d 	.word	0x0800b26d
 8009f38:	0800b350 	.word	0x0800b350

08009f3c <__multadd>:
 8009f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f40:	690d      	ldr	r5, [r1, #16]
 8009f42:	4607      	mov	r7, r0
 8009f44:	460c      	mov	r4, r1
 8009f46:	461e      	mov	r6, r3
 8009f48:	f101 0c14 	add.w	ip, r1, #20
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	f8dc 3000 	ldr.w	r3, [ip]
 8009f52:	b299      	uxth	r1, r3
 8009f54:	fb02 6101 	mla	r1, r2, r1, r6
 8009f58:	0c1e      	lsrs	r6, r3, #16
 8009f5a:	0c0b      	lsrs	r3, r1, #16
 8009f5c:	fb02 3306 	mla	r3, r2, r6, r3
 8009f60:	b289      	uxth	r1, r1
 8009f62:	3001      	adds	r0, #1
 8009f64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f68:	4285      	cmp	r5, r0
 8009f6a:	f84c 1b04 	str.w	r1, [ip], #4
 8009f6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f72:	dcec      	bgt.n	8009f4e <__multadd+0x12>
 8009f74:	b30e      	cbz	r6, 8009fba <__multadd+0x7e>
 8009f76:	68a3      	ldr	r3, [r4, #8]
 8009f78:	42ab      	cmp	r3, r5
 8009f7a:	dc19      	bgt.n	8009fb0 <__multadd+0x74>
 8009f7c:	6861      	ldr	r1, [r4, #4]
 8009f7e:	4638      	mov	r0, r7
 8009f80:	3101      	adds	r1, #1
 8009f82:	f7ff ff79 	bl	8009e78 <_Balloc>
 8009f86:	4680      	mov	r8, r0
 8009f88:	b928      	cbnz	r0, 8009f96 <__multadd+0x5a>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	4b0c      	ldr	r3, [pc, #48]	; (8009fc0 <__multadd+0x84>)
 8009f8e:	480d      	ldr	r0, [pc, #52]	; (8009fc4 <__multadd+0x88>)
 8009f90:	21b5      	movs	r1, #181	; 0xb5
 8009f92:	f000 fe6b 	bl	800ac6c <__assert_func>
 8009f96:	6922      	ldr	r2, [r4, #16]
 8009f98:	3202      	adds	r2, #2
 8009f9a:	f104 010c 	add.w	r1, r4, #12
 8009f9e:	0092      	lsls	r2, r2, #2
 8009fa0:	300c      	adds	r0, #12
 8009fa2:	f7fe fb4f 	bl	8008644 <memcpy>
 8009fa6:	4621      	mov	r1, r4
 8009fa8:	4638      	mov	r0, r7
 8009faa:	f7ff ffa5 	bl	8009ef8 <_Bfree>
 8009fae:	4644      	mov	r4, r8
 8009fb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fb4:	3501      	adds	r5, #1
 8009fb6:	615e      	str	r6, [r3, #20]
 8009fb8:	6125      	str	r5, [r4, #16]
 8009fba:	4620      	mov	r0, r4
 8009fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc0:	0800b2df 	.word	0x0800b2df
 8009fc4:	0800b350 	.word	0x0800b350

08009fc8 <__hi0bits>:
 8009fc8:	0c03      	lsrs	r3, r0, #16
 8009fca:	041b      	lsls	r3, r3, #16
 8009fcc:	b9d3      	cbnz	r3, 800a004 <__hi0bits+0x3c>
 8009fce:	0400      	lsls	r0, r0, #16
 8009fd0:	2310      	movs	r3, #16
 8009fd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009fd6:	bf04      	itt	eq
 8009fd8:	0200      	lsleq	r0, r0, #8
 8009fda:	3308      	addeq	r3, #8
 8009fdc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009fe0:	bf04      	itt	eq
 8009fe2:	0100      	lsleq	r0, r0, #4
 8009fe4:	3304      	addeq	r3, #4
 8009fe6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009fea:	bf04      	itt	eq
 8009fec:	0080      	lsleq	r0, r0, #2
 8009fee:	3302      	addeq	r3, #2
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	db05      	blt.n	800a000 <__hi0bits+0x38>
 8009ff4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ff8:	f103 0301 	add.w	r3, r3, #1
 8009ffc:	bf08      	it	eq
 8009ffe:	2320      	moveq	r3, #32
 800a000:	4618      	mov	r0, r3
 800a002:	4770      	bx	lr
 800a004:	2300      	movs	r3, #0
 800a006:	e7e4      	b.n	8009fd2 <__hi0bits+0xa>

0800a008 <__lo0bits>:
 800a008:	6803      	ldr	r3, [r0, #0]
 800a00a:	f013 0207 	ands.w	r2, r3, #7
 800a00e:	4601      	mov	r1, r0
 800a010:	d00b      	beq.n	800a02a <__lo0bits+0x22>
 800a012:	07da      	lsls	r2, r3, #31
 800a014:	d423      	bmi.n	800a05e <__lo0bits+0x56>
 800a016:	0798      	lsls	r0, r3, #30
 800a018:	bf49      	itett	mi
 800a01a:	085b      	lsrmi	r3, r3, #1
 800a01c:	089b      	lsrpl	r3, r3, #2
 800a01e:	2001      	movmi	r0, #1
 800a020:	600b      	strmi	r3, [r1, #0]
 800a022:	bf5c      	itt	pl
 800a024:	600b      	strpl	r3, [r1, #0]
 800a026:	2002      	movpl	r0, #2
 800a028:	4770      	bx	lr
 800a02a:	b298      	uxth	r0, r3
 800a02c:	b9a8      	cbnz	r0, 800a05a <__lo0bits+0x52>
 800a02e:	0c1b      	lsrs	r3, r3, #16
 800a030:	2010      	movs	r0, #16
 800a032:	b2da      	uxtb	r2, r3
 800a034:	b90a      	cbnz	r2, 800a03a <__lo0bits+0x32>
 800a036:	3008      	adds	r0, #8
 800a038:	0a1b      	lsrs	r3, r3, #8
 800a03a:	071a      	lsls	r2, r3, #28
 800a03c:	bf04      	itt	eq
 800a03e:	091b      	lsreq	r3, r3, #4
 800a040:	3004      	addeq	r0, #4
 800a042:	079a      	lsls	r2, r3, #30
 800a044:	bf04      	itt	eq
 800a046:	089b      	lsreq	r3, r3, #2
 800a048:	3002      	addeq	r0, #2
 800a04a:	07da      	lsls	r2, r3, #31
 800a04c:	d403      	bmi.n	800a056 <__lo0bits+0x4e>
 800a04e:	085b      	lsrs	r3, r3, #1
 800a050:	f100 0001 	add.w	r0, r0, #1
 800a054:	d005      	beq.n	800a062 <__lo0bits+0x5a>
 800a056:	600b      	str	r3, [r1, #0]
 800a058:	4770      	bx	lr
 800a05a:	4610      	mov	r0, r2
 800a05c:	e7e9      	b.n	800a032 <__lo0bits+0x2a>
 800a05e:	2000      	movs	r0, #0
 800a060:	4770      	bx	lr
 800a062:	2020      	movs	r0, #32
 800a064:	4770      	bx	lr
	...

0800a068 <__i2b>:
 800a068:	b510      	push	{r4, lr}
 800a06a:	460c      	mov	r4, r1
 800a06c:	2101      	movs	r1, #1
 800a06e:	f7ff ff03 	bl	8009e78 <_Balloc>
 800a072:	4602      	mov	r2, r0
 800a074:	b928      	cbnz	r0, 800a082 <__i2b+0x1a>
 800a076:	4b05      	ldr	r3, [pc, #20]	; (800a08c <__i2b+0x24>)
 800a078:	4805      	ldr	r0, [pc, #20]	; (800a090 <__i2b+0x28>)
 800a07a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a07e:	f000 fdf5 	bl	800ac6c <__assert_func>
 800a082:	2301      	movs	r3, #1
 800a084:	6144      	str	r4, [r0, #20]
 800a086:	6103      	str	r3, [r0, #16]
 800a088:	bd10      	pop	{r4, pc}
 800a08a:	bf00      	nop
 800a08c:	0800b2df 	.word	0x0800b2df
 800a090:	0800b350 	.word	0x0800b350

0800a094 <__multiply>:
 800a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	4691      	mov	r9, r2
 800a09a:	690a      	ldr	r2, [r1, #16]
 800a09c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	bfb8      	it	lt
 800a0a4:	460b      	movlt	r3, r1
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	bfbc      	itt	lt
 800a0aa:	464c      	movlt	r4, r9
 800a0ac:	4699      	movlt	r9, r3
 800a0ae:	6927      	ldr	r7, [r4, #16]
 800a0b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a0b4:	68a3      	ldr	r3, [r4, #8]
 800a0b6:	6861      	ldr	r1, [r4, #4]
 800a0b8:	eb07 060a 	add.w	r6, r7, sl
 800a0bc:	42b3      	cmp	r3, r6
 800a0be:	b085      	sub	sp, #20
 800a0c0:	bfb8      	it	lt
 800a0c2:	3101      	addlt	r1, #1
 800a0c4:	f7ff fed8 	bl	8009e78 <_Balloc>
 800a0c8:	b930      	cbnz	r0, 800a0d8 <__multiply+0x44>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	4b44      	ldr	r3, [pc, #272]	; (800a1e0 <__multiply+0x14c>)
 800a0ce:	4845      	ldr	r0, [pc, #276]	; (800a1e4 <__multiply+0x150>)
 800a0d0:	f240 115d 	movw	r1, #349	; 0x15d
 800a0d4:	f000 fdca 	bl	800ac6c <__assert_func>
 800a0d8:	f100 0514 	add.w	r5, r0, #20
 800a0dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a0e0:	462b      	mov	r3, r5
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	4543      	cmp	r3, r8
 800a0e6:	d321      	bcc.n	800a12c <__multiply+0x98>
 800a0e8:	f104 0314 	add.w	r3, r4, #20
 800a0ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a0f0:	f109 0314 	add.w	r3, r9, #20
 800a0f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a0f8:	9202      	str	r2, [sp, #8]
 800a0fa:	1b3a      	subs	r2, r7, r4
 800a0fc:	3a15      	subs	r2, #21
 800a0fe:	f022 0203 	bic.w	r2, r2, #3
 800a102:	3204      	adds	r2, #4
 800a104:	f104 0115 	add.w	r1, r4, #21
 800a108:	428f      	cmp	r7, r1
 800a10a:	bf38      	it	cc
 800a10c:	2204      	movcc	r2, #4
 800a10e:	9201      	str	r2, [sp, #4]
 800a110:	9a02      	ldr	r2, [sp, #8]
 800a112:	9303      	str	r3, [sp, #12]
 800a114:	429a      	cmp	r2, r3
 800a116:	d80c      	bhi.n	800a132 <__multiply+0x9e>
 800a118:	2e00      	cmp	r6, #0
 800a11a:	dd03      	ble.n	800a124 <__multiply+0x90>
 800a11c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a120:	2b00      	cmp	r3, #0
 800a122:	d05a      	beq.n	800a1da <__multiply+0x146>
 800a124:	6106      	str	r6, [r0, #16]
 800a126:	b005      	add	sp, #20
 800a128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12c:	f843 2b04 	str.w	r2, [r3], #4
 800a130:	e7d8      	b.n	800a0e4 <__multiply+0x50>
 800a132:	f8b3 a000 	ldrh.w	sl, [r3]
 800a136:	f1ba 0f00 	cmp.w	sl, #0
 800a13a:	d024      	beq.n	800a186 <__multiply+0xf2>
 800a13c:	f104 0e14 	add.w	lr, r4, #20
 800a140:	46a9      	mov	r9, r5
 800a142:	f04f 0c00 	mov.w	ip, #0
 800a146:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a14a:	f8d9 1000 	ldr.w	r1, [r9]
 800a14e:	fa1f fb82 	uxth.w	fp, r2
 800a152:	b289      	uxth	r1, r1
 800a154:	fb0a 110b 	mla	r1, sl, fp, r1
 800a158:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a15c:	f8d9 2000 	ldr.w	r2, [r9]
 800a160:	4461      	add	r1, ip
 800a162:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a166:	fb0a c20b 	mla	r2, sl, fp, ip
 800a16a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a16e:	b289      	uxth	r1, r1
 800a170:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a174:	4577      	cmp	r7, lr
 800a176:	f849 1b04 	str.w	r1, [r9], #4
 800a17a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a17e:	d8e2      	bhi.n	800a146 <__multiply+0xb2>
 800a180:	9a01      	ldr	r2, [sp, #4]
 800a182:	f845 c002 	str.w	ip, [r5, r2]
 800a186:	9a03      	ldr	r2, [sp, #12]
 800a188:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a18c:	3304      	adds	r3, #4
 800a18e:	f1b9 0f00 	cmp.w	r9, #0
 800a192:	d020      	beq.n	800a1d6 <__multiply+0x142>
 800a194:	6829      	ldr	r1, [r5, #0]
 800a196:	f104 0c14 	add.w	ip, r4, #20
 800a19a:	46ae      	mov	lr, r5
 800a19c:	f04f 0a00 	mov.w	sl, #0
 800a1a0:	f8bc b000 	ldrh.w	fp, [ip]
 800a1a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a1a8:	fb09 220b 	mla	r2, r9, fp, r2
 800a1ac:	4492      	add	sl, r2
 800a1ae:	b289      	uxth	r1, r1
 800a1b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a1b4:	f84e 1b04 	str.w	r1, [lr], #4
 800a1b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a1bc:	f8be 1000 	ldrh.w	r1, [lr]
 800a1c0:	0c12      	lsrs	r2, r2, #16
 800a1c2:	fb09 1102 	mla	r1, r9, r2, r1
 800a1c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a1ca:	4567      	cmp	r7, ip
 800a1cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a1d0:	d8e6      	bhi.n	800a1a0 <__multiply+0x10c>
 800a1d2:	9a01      	ldr	r2, [sp, #4]
 800a1d4:	50a9      	str	r1, [r5, r2]
 800a1d6:	3504      	adds	r5, #4
 800a1d8:	e79a      	b.n	800a110 <__multiply+0x7c>
 800a1da:	3e01      	subs	r6, #1
 800a1dc:	e79c      	b.n	800a118 <__multiply+0x84>
 800a1de:	bf00      	nop
 800a1e0:	0800b2df 	.word	0x0800b2df
 800a1e4:	0800b350 	.word	0x0800b350

0800a1e8 <__pow5mult>:
 800a1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1ec:	4615      	mov	r5, r2
 800a1ee:	f012 0203 	ands.w	r2, r2, #3
 800a1f2:	4606      	mov	r6, r0
 800a1f4:	460f      	mov	r7, r1
 800a1f6:	d007      	beq.n	800a208 <__pow5mult+0x20>
 800a1f8:	4c25      	ldr	r4, [pc, #148]	; (800a290 <__pow5mult+0xa8>)
 800a1fa:	3a01      	subs	r2, #1
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a202:	f7ff fe9b 	bl	8009f3c <__multadd>
 800a206:	4607      	mov	r7, r0
 800a208:	10ad      	asrs	r5, r5, #2
 800a20a:	d03d      	beq.n	800a288 <__pow5mult+0xa0>
 800a20c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a20e:	b97c      	cbnz	r4, 800a230 <__pow5mult+0x48>
 800a210:	2010      	movs	r0, #16
 800a212:	f7ff fe29 	bl	8009e68 <malloc>
 800a216:	4602      	mov	r2, r0
 800a218:	6270      	str	r0, [r6, #36]	; 0x24
 800a21a:	b928      	cbnz	r0, 800a228 <__pow5mult+0x40>
 800a21c:	4b1d      	ldr	r3, [pc, #116]	; (800a294 <__pow5mult+0xac>)
 800a21e:	481e      	ldr	r0, [pc, #120]	; (800a298 <__pow5mult+0xb0>)
 800a220:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a224:	f000 fd22 	bl	800ac6c <__assert_func>
 800a228:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a22c:	6004      	str	r4, [r0, #0]
 800a22e:	60c4      	str	r4, [r0, #12]
 800a230:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a234:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a238:	b94c      	cbnz	r4, 800a24e <__pow5mult+0x66>
 800a23a:	f240 2171 	movw	r1, #625	; 0x271
 800a23e:	4630      	mov	r0, r6
 800a240:	f7ff ff12 	bl	800a068 <__i2b>
 800a244:	2300      	movs	r3, #0
 800a246:	f8c8 0008 	str.w	r0, [r8, #8]
 800a24a:	4604      	mov	r4, r0
 800a24c:	6003      	str	r3, [r0, #0]
 800a24e:	f04f 0900 	mov.w	r9, #0
 800a252:	07eb      	lsls	r3, r5, #31
 800a254:	d50a      	bpl.n	800a26c <__pow5mult+0x84>
 800a256:	4639      	mov	r1, r7
 800a258:	4622      	mov	r2, r4
 800a25a:	4630      	mov	r0, r6
 800a25c:	f7ff ff1a 	bl	800a094 <__multiply>
 800a260:	4639      	mov	r1, r7
 800a262:	4680      	mov	r8, r0
 800a264:	4630      	mov	r0, r6
 800a266:	f7ff fe47 	bl	8009ef8 <_Bfree>
 800a26a:	4647      	mov	r7, r8
 800a26c:	106d      	asrs	r5, r5, #1
 800a26e:	d00b      	beq.n	800a288 <__pow5mult+0xa0>
 800a270:	6820      	ldr	r0, [r4, #0]
 800a272:	b938      	cbnz	r0, 800a284 <__pow5mult+0x9c>
 800a274:	4622      	mov	r2, r4
 800a276:	4621      	mov	r1, r4
 800a278:	4630      	mov	r0, r6
 800a27a:	f7ff ff0b 	bl	800a094 <__multiply>
 800a27e:	6020      	str	r0, [r4, #0]
 800a280:	f8c0 9000 	str.w	r9, [r0]
 800a284:	4604      	mov	r4, r0
 800a286:	e7e4      	b.n	800a252 <__pow5mult+0x6a>
 800a288:	4638      	mov	r0, r7
 800a28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a28e:	bf00      	nop
 800a290:	0800b4a0 	.word	0x0800b4a0
 800a294:	0800b26d 	.word	0x0800b26d
 800a298:	0800b350 	.word	0x0800b350

0800a29c <__lshift>:
 800a29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a0:	460c      	mov	r4, r1
 800a2a2:	6849      	ldr	r1, [r1, #4]
 800a2a4:	6923      	ldr	r3, [r4, #16]
 800a2a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2aa:	68a3      	ldr	r3, [r4, #8]
 800a2ac:	4607      	mov	r7, r0
 800a2ae:	4691      	mov	r9, r2
 800a2b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2b4:	f108 0601 	add.w	r6, r8, #1
 800a2b8:	42b3      	cmp	r3, r6
 800a2ba:	db0b      	blt.n	800a2d4 <__lshift+0x38>
 800a2bc:	4638      	mov	r0, r7
 800a2be:	f7ff fddb 	bl	8009e78 <_Balloc>
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	b948      	cbnz	r0, 800a2da <__lshift+0x3e>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	4b2a      	ldr	r3, [pc, #168]	; (800a374 <__lshift+0xd8>)
 800a2ca:	482b      	ldr	r0, [pc, #172]	; (800a378 <__lshift+0xdc>)
 800a2cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a2d0:	f000 fccc 	bl	800ac6c <__assert_func>
 800a2d4:	3101      	adds	r1, #1
 800a2d6:	005b      	lsls	r3, r3, #1
 800a2d8:	e7ee      	b.n	800a2b8 <__lshift+0x1c>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	f100 0114 	add.w	r1, r0, #20
 800a2e0:	f100 0210 	add.w	r2, r0, #16
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	4553      	cmp	r3, sl
 800a2e8:	db37      	blt.n	800a35a <__lshift+0xbe>
 800a2ea:	6920      	ldr	r0, [r4, #16]
 800a2ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2f0:	f104 0314 	add.w	r3, r4, #20
 800a2f4:	f019 091f 	ands.w	r9, r9, #31
 800a2f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a300:	d02f      	beq.n	800a362 <__lshift+0xc6>
 800a302:	f1c9 0e20 	rsb	lr, r9, #32
 800a306:	468a      	mov	sl, r1
 800a308:	f04f 0c00 	mov.w	ip, #0
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	fa02 f209 	lsl.w	r2, r2, r9
 800a312:	ea42 020c 	orr.w	r2, r2, ip
 800a316:	f84a 2b04 	str.w	r2, [sl], #4
 800a31a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a31e:	4298      	cmp	r0, r3
 800a320:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a324:	d8f2      	bhi.n	800a30c <__lshift+0x70>
 800a326:	1b03      	subs	r3, r0, r4
 800a328:	3b15      	subs	r3, #21
 800a32a:	f023 0303 	bic.w	r3, r3, #3
 800a32e:	3304      	adds	r3, #4
 800a330:	f104 0215 	add.w	r2, r4, #21
 800a334:	4290      	cmp	r0, r2
 800a336:	bf38      	it	cc
 800a338:	2304      	movcc	r3, #4
 800a33a:	f841 c003 	str.w	ip, [r1, r3]
 800a33e:	f1bc 0f00 	cmp.w	ip, #0
 800a342:	d001      	beq.n	800a348 <__lshift+0xac>
 800a344:	f108 0602 	add.w	r6, r8, #2
 800a348:	3e01      	subs	r6, #1
 800a34a:	4638      	mov	r0, r7
 800a34c:	612e      	str	r6, [r5, #16]
 800a34e:	4621      	mov	r1, r4
 800a350:	f7ff fdd2 	bl	8009ef8 <_Bfree>
 800a354:	4628      	mov	r0, r5
 800a356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a35a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a35e:	3301      	adds	r3, #1
 800a360:	e7c1      	b.n	800a2e6 <__lshift+0x4a>
 800a362:	3904      	subs	r1, #4
 800a364:	f853 2b04 	ldr.w	r2, [r3], #4
 800a368:	f841 2f04 	str.w	r2, [r1, #4]!
 800a36c:	4298      	cmp	r0, r3
 800a36e:	d8f9      	bhi.n	800a364 <__lshift+0xc8>
 800a370:	e7ea      	b.n	800a348 <__lshift+0xac>
 800a372:	bf00      	nop
 800a374:	0800b2df 	.word	0x0800b2df
 800a378:	0800b350 	.word	0x0800b350

0800a37c <__mcmp>:
 800a37c:	b530      	push	{r4, r5, lr}
 800a37e:	6902      	ldr	r2, [r0, #16]
 800a380:	690c      	ldr	r4, [r1, #16]
 800a382:	1b12      	subs	r2, r2, r4
 800a384:	d10e      	bne.n	800a3a4 <__mcmp+0x28>
 800a386:	f100 0314 	add.w	r3, r0, #20
 800a38a:	3114      	adds	r1, #20
 800a38c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a390:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a394:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a398:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a39c:	42a5      	cmp	r5, r4
 800a39e:	d003      	beq.n	800a3a8 <__mcmp+0x2c>
 800a3a0:	d305      	bcc.n	800a3ae <__mcmp+0x32>
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	bd30      	pop	{r4, r5, pc}
 800a3a8:	4283      	cmp	r3, r0
 800a3aa:	d3f3      	bcc.n	800a394 <__mcmp+0x18>
 800a3ac:	e7fa      	b.n	800a3a4 <__mcmp+0x28>
 800a3ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a3b2:	e7f7      	b.n	800a3a4 <__mcmp+0x28>

0800a3b4 <__mdiff>:
 800a3b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b8:	460c      	mov	r4, r1
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	4611      	mov	r1, r2
 800a3be:	4620      	mov	r0, r4
 800a3c0:	4690      	mov	r8, r2
 800a3c2:	f7ff ffdb 	bl	800a37c <__mcmp>
 800a3c6:	1e05      	subs	r5, r0, #0
 800a3c8:	d110      	bne.n	800a3ec <__mdiff+0x38>
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	f7ff fd53 	bl	8009e78 <_Balloc>
 800a3d2:	b930      	cbnz	r0, 800a3e2 <__mdiff+0x2e>
 800a3d4:	4b3a      	ldr	r3, [pc, #232]	; (800a4c0 <__mdiff+0x10c>)
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	f240 2132 	movw	r1, #562	; 0x232
 800a3dc:	4839      	ldr	r0, [pc, #228]	; (800a4c4 <__mdiff+0x110>)
 800a3de:	f000 fc45 	bl	800ac6c <__assert_func>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ec:	bfa4      	itt	ge
 800a3ee:	4643      	movge	r3, r8
 800a3f0:	46a0      	movge	r8, r4
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a3f8:	bfa6      	itte	ge
 800a3fa:	461c      	movge	r4, r3
 800a3fc:	2500      	movge	r5, #0
 800a3fe:	2501      	movlt	r5, #1
 800a400:	f7ff fd3a 	bl	8009e78 <_Balloc>
 800a404:	b920      	cbnz	r0, 800a410 <__mdiff+0x5c>
 800a406:	4b2e      	ldr	r3, [pc, #184]	; (800a4c0 <__mdiff+0x10c>)
 800a408:	4602      	mov	r2, r0
 800a40a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a40e:	e7e5      	b.n	800a3dc <__mdiff+0x28>
 800a410:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a414:	6926      	ldr	r6, [r4, #16]
 800a416:	60c5      	str	r5, [r0, #12]
 800a418:	f104 0914 	add.w	r9, r4, #20
 800a41c:	f108 0514 	add.w	r5, r8, #20
 800a420:	f100 0e14 	add.w	lr, r0, #20
 800a424:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a428:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a42c:	f108 0210 	add.w	r2, r8, #16
 800a430:	46f2      	mov	sl, lr
 800a432:	2100      	movs	r1, #0
 800a434:	f859 3b04 	ldr.w	r3, [r9], #4
 800a438:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a43c:	fa1f f883 	uxth.w	r8, r3
 800a440:	fa11 f18b 	uxtah	r1, r1, fp
 800a444:	0c1b      	lsrs	r3, r3, #16
 800a446:	eba1 0808 	sub.w	r8, r1, r8
 800a44a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a44e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a452:	fa1f f888 	uxth.w	r8, r8
 800a456:	1419      	asrs	r1, r3, #16
 800a458:	454e      	cmp	r6, r9
 800a45a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a45e:	f84a 3b04 	str.w	r3, [sl], #4
 800a462:	d8e7      	bhi.n	800a434 <__mdiff+0x80>
 800a464:	1b33      	subs	r3, r6, r4
 800a466:	3b15      	subs	r3, #21
 800a468:	f023 0303 	bic.w	r3, r3, #3
 800a46c:	3304      	adds	r3, #4
 800a46e:	3415      	adds	r4, #21
 800a470:	42a6      	cmp	r6, r4
 800a472:	bf38      	it	cc
 800a474:	2304      	movcc	r3, #4
 800a476:	441d      	add	r5, r3
 800a478:	4473      	add	r3, lr
 800a47a:	469e      	mov	lr, r3
 800a47c:	462e      	mov	r6, r5
 800a47e:	4566      	cmp	r6, ip
 800a480:	d30e      	bcc.n	800a4a0 <__mdiff+0xec>
 800a482:	f10c 0203 	add.w	r2, ip, #3
 800a486:	1b52      	subs	r2, r2, r5
 800a488:	f022 0203 	bic.w	r2, r2, #3
 800a48c:	3d03      	subs	r5, #3
 800a48e:	45ac      	cmp	ip, r5
 800a490:	bf38      	it	cc
 800a492:	2200      	movcc	r2, #0
 800a494:	441a      	add	r2, r3
 800a496:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a49a:	b17b      	cbz	r3, 800a4bc <__mdiff+0x108>
 800a49c:	6107      	str	r7, [r0, #16]
 800a49e:	e7a3      	b.n	800a3e8 <__mdiff+0x34>
 800a4a0:	f856 8b04 	ldr.w	r8, [r6], #4
 800a4a4:	fa11 f288 	uxtah	r2, r1, r8
 800a4a8:	1414      	asrs	r4, r2, #16
 800a4aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a4ae:	b292      	uxth	r2, r2
 800a4b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a4b4:	f84e 2b04 	str.w	r2, [lr], #4
 800a4b8:	1421      	asrs	r1, r4, #16
 800a4ba:	e7e0      	b.n	800a47e <__mdiff+0xca>
 800a4bc:	3f01      	subs	r7, #1
 800a4be:	e7ea      	b.n	800a496 <__mdiff+0xe2>
 800a4c0:	0800b2df 	.word	0x0800b2df
 800a4c4:	0800b350 	.word	0x0800b350

0800a4c8 <__d2b>:
 800a4c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4cc:	4689      	mov	r9, r1
 800a4ce:	2101      	movs	r1, #1
 800a4d0:	ec57 6b10 	vmov	r6, r7, d0
 800a4d4:	4690      	mov	r8, r2
 800a4d6:	f7ff fccf 	bl	8009e78 <_Balloc>
 800a4da:	4604      	mov	r4, r0
 800a4dc:	b930      	cbnz	r0, 800a4ec <__d2b+0x24>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	4b25      	ldr	r3, [pc, #148]	; (800a578 <__d2b+0xb0>)
 800a4e2:	4826      	ldr	r0, [pc, #152]	; (800a57c <__d2b+0xb4>)
 800a4e4:	f240 310a 	movw	r1, #778	; 0x30a
 800a4e8:	f000 fbc0 	bl	800ac6c <__assert_func>
 800a4ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a4f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a4f4:	bb35      	cbnz	r5, 800a544 <__d2b+0x7c>
 800a4f6:	2e00      	cmp	r6, #0
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	d028      	beq.n	800a54e <__d2b+0x86>
 800a4fc:	4668      	mov	r0, sp
 800a4fe:	9600      	str	r6, [sp, #0]
 800a500:	f7ff fd82 	bl	800a008 <__lo0bits>
 800a504:	9900      	ldr	r1, [sp, #0]
 800a506:	b300      	cbz	r0, 800a54a <__d2b+0x82>
 800a508:	9a01      	ldr	r2, [sp, #4]
 800a50a:	f1c0 0320 	rsb	r3, r0, #32
 800a50e:	fa02 f303 	lsl.w	r3, r2, r3
 800a512:	430b      	orrs	r3, r1
 800a514:	40c2      	lsrs	r2, r0
 800a516:	6163      	str	r3, [r4, #20]
 800a518:	9201      	str	r2, [sp, #4]
 800a51a:	9b01      	ldr	r3, [sp, #4]
 800a51c:	61a3      	str	r3, [r4, #24]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	bf14      	ite	ne
 800a522:	2202      	movne	r2, #2
 800a524:	2201      	moveq	r2, #1
 800a526:	6122      	str	r2, [r4, #16]
 800a528:	b1d5      	cbz	r5, 800a560 <__d2b+0x98>
 800a52a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a52e:	4405      	add	r5, r0
 800a530:	f8c9 5000 	str.w	r5, [r9]
 800a534:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a538:	f8c8 0000 	str.w	r0, [r8]
 800a53c:	4620      	mov	r0, r4
 800a53e:	b003      	add	sp, #12
 800a540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a548:	e7d5      	b.n	800a4f6 <__d2b+0x2e>
 800a54a:	6161      	str	r1, [r4, #20]
 800a54c:	e7e5      	b.n	800a51a <__d2b+0x52>
 800a54e:	a801      	add	r0, sp, #4
 800a550:	f7ff fd5a 	bl	800a008 <__lo0bits>
 800a554:	9b01      	ldr	r3, [sp, #4]
 800a556:	6163      	str	r3, [r4, #20]
 800a558:	2201      	movs	r2, #1
 800a55a:	6122      	str	r2, [r4, #16]
 800a55c:	3020      	adds	r0, #32
 800a55e:	e7e3      	b.n	800a528 <__d2b+0x60>
 800a560:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a564:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a568:	f8c9 0000 	str.w	r0, [r9]
 800a56c:	6918      	ldr	r0, [r3, #16]
 800a56e:	f7ff fd2b 	bl	8009fc8 <__hi0bits>
 800a572:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a576:	e7df      	b.n	800a538 <__d2b+0x70>
 800a578:	0800b2df 	.word	0x0800b2df
 800a57c:	0800b350 	.word	0x0800b350

0800a580 <_calloc_r>:
 800a580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a582:	fba1 2402 	umull	r2, r4, r1, r2
 800a586:	b94c      	cbnz	r4, 800a59c <_calloc_r+0x1c>
 800a588:	4611      	mov	r1, r2
 800a58a:	9201      	str	r2, [sp, #4]
 800a58c:	f000 f87a 	bl	800a684 <_malloc_r>
 800a590:	9a01      	ldr	r2, [sp, #4]
 800a592:	4605      	mov	r5, r0
 800a594:	b930      	cbnz	r0, 800a5a4 <_calloc_r+0x24>
 800a596:	4628      	mov	r0, r5
 800a598:	b003      	add	sp, #12
 800a59a:	bd30      	pop	{r4, r5, pc}
 800a59c:	220c      	movs	r2, #12
 800a59e:	6002      	str	r2, [r0, #0]
 800a5a0:	2500      	movs	r5, #0
 800a5a2:	e7f8      	b.n	800a596 <_calloc_r+0x16>
 800a5a4:	4621      	mov	r1, r4
 800a5a6:	f7fe f85b 	bl	8008660 <memset>
 800a5aa:	e7f4      	b.n	800a596 <_calloc_r+0x16>

0800a5ac <_free_r>:
 800a5ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5ae:	2900      	cmp	r1, #0
 800a5b0:	d044      	beq.n	800a63c <_free_r+0x90>
 800a5b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5b6:	9001      	str	r0, [sp, #4]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f1a1 0404 	sub.w	r4, r1, #4
 800a5be:	bfb8      	it	lt
 800a5c0:	18e4      	addlt	r4, r4, r3
 800a5c2:	f000 fcdf 	bl	800af84 <__malloc_lock>
 800a5c6:	4a1e      	ldr	r2, [pc, #120]	; (800a640 <_free_r+0x94>)
 800a5c8:	9801      	ldr	r0, [sp, #4]
 800a5ca:	6813      	ldr	r3, [r2, #0]
 800a5cc:	b933      	cbnz	r3, 800a5dc <_free_r+0x30>
 800a5ce:	6063      	str	r3, [r4, #4]
 800a5d0:	6014      	str	r4, [r2, #0]
 800a5d2:	b003      	add	sp, #12
 800a5d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5d8:	f000 bcda 	b.w	800af90 <__malloc_unlock>
 800a5dc:	42a3      	cmp	r3, r4
 800a5de:	d908      	bls.n	800a5f2 <_free_r+0x46>
 800a5e0:	6825      	ldr	r5, [r4, #0]
 800a5e2:	1961      	adds	r1, r4, r5
 800a5e4:	428b      	cmp	r3, r1
 800a5e6:	bf01      	itttt	eq
 800a5e8:	6819      	ldreq	r1, [r3, #0]
 800a5ea:	685b      	ldreq	r3, [r3, #4]
 800a5ec:	1949      	addeq	r1, r1, r5
 800a5ee:	6021      	streq	r1, [r4, #0]
 800a5f0:	e7ed      	b.n	800a5ce <_free_r+0x22>
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	b10b      	cbz	r3, 800a5fc <_free_r+0x50>
 800a5f8:	42a3      	cmp	r3, r4
 800a5fa:	d9fa      	bls.n	800a5f2 <_free_r+0x46>
 800a5fc:	6811      	ldr	r1, [r2, #0]
 800a5fe:	1855      	adds	r5, r2, r1
 800a600:	42a5      	cmp	r5, r4
 800a602:	d10b      	bne.n	800a61c <_free_r+0x70>
 800a604:	6824      	ldr	r4, [r4, #0]
 800a606:	4421      	add	r1, r4
 800a608:	1854      	adds	r4, r2, r1
 800a60a:	42a3      	cmp	r3, r4
 800a60c:	6011      	str	r1, [r2, #0]
 800a60e:	d1e0      	bne.n	800a5d2 <_free_r+0x26>
 800a610:	681c      	ldr	r4, [r3, #0]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	6053      	str	r3, [r2, #4]
 800a616:	4421      	add	r1, r4
 800a618:	6011      	str	r1, [r2, #0]
 800a61a:	e7da      	b.n	800a5d2 <_free_r+0x26>
 800a61c:	d902      	bls.n	800a624 <_free_r+0x78>
 800a61e:	230c      	movs	r3, #12
 800a620:	6003      	str	r3, [r0, #0]
 800a622:	e7d6      	b.n	800a5d2 <_free_r+0x26>
 800a624:	6825      	ldr	r5, [r4, #0]
 800a626:	1961      	adds	r1, r4, r5
 800a628:	428b      	cmp	r3, r1
 800a62a:	bf04      	itt	eq
 800a62c:	6819      	ldreq	r1, [r3, #0]
 800a62e:	685b      	ldreq	r3, [r3, #4]
 800a630:	6063      	str	r3, [r4, #4]
 800a632:	bf04      	itt	eq
 800a634:	1949      	addeq	r1, r1, r5
 800a636:	6021      	streq	r1, [r4, #0]
 800a638:	6054      	str	r4, [r2, #4]
 800a63a:	e7ca      	b.n	800a5d2 <_free_r+0x26>
 800a63c:	b003      	add	sp, #12
 800a63e:	bd30      	pop	{r4, r5, pc}
 800a640:	200005d4 	.word	0x200005d4

0800a644 <sbrk_aligned>:
 800a644:	b570      	push	{r4, r5, r6, lr}
 800a646:	4e0e      	ldr	r6, [pc, #56]	; (800a680 <sbrk_aligned+0x3c>)
 800a648:	460c      	mov	r4, r1
 800a64a:	6831      	ldr	r1, [r6, #0]
 800a64c:	4605      	mov	r5, r0
 800a64e:	b911      	cbnz	r1, 800a656 <sbrk_aligned+0x12>
 800a650:	f000 f9e6 	bl	800aa20 <_sbrk_r>
 800a654:	6030      	str	r0, [r6, #0]
 800a656:	4621      	mov	r1, r4
 800a658:	4628      	mov	r0, r5
 800a65a:	f000 f9e1 	bl	800aa20 <_sbrk_r>
 800a65e:	1c43      	adds	r3, r0, #1
 800a660:	d00a      	beq.n	800a678 <sbrk_aligned+0x34>
 800a662:	1cc4      	adds	r4, r0, #3
 800a664:	f024 0403 	bic.w	r4, r4, #3
 800a668:	42a0      	cmp	r0, r4
 800a66a:	d007      	beq.n	800a67c <sbrk_aligned+0x38>
 800a66c:	1a21      	subs	r1, r4, r0
 800a66e:	4628      	mov	r0, r5
 800a670:	f000 f9d6 	bl	800aa20 <_sbrk_r>
 800a674:	3001      	adds	r0, #1
 800a676:	d101      	bne.n	800a67c <sbrk_aligned+0x38>
 800a678:	f04f 34ff 	mov.w	r4, #4294967295
 800a67c:	4620      	mov	r0, r4
 800a67e:	bd70      	pop	{r4, r5, r6, pc}
 800a680:	200005d8 	.word	0x200005d8

0800a684 <_malloc_r>:
 800a684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a688:	1ccd      	adds	r5, r1, #3
 800a68a:	f025 0503 	bic.w	r5, r5, #3
 800a68e:	3508      	adds	r5, #8
 800a690:	2d0c      	cmp	r5, #12
 800a692:	bf38      	it	cc
 800a694:	250c      	movcc	r5, #12
 800a696:	2d00      	cmp	r5, #0
 800a698:	4607      	mov	r7, r0
 800a69a:	db01      	blt.n	800a6a0 <_malloc_r+0x1c>
 800a69c:	42a9      	cmp	r1, r5
 800a69e:	d905      	bls.n	800a6ac <_malloc_r+0x28>
 800a6a0:	230c      	movs	r3, #12
 800a6a2:	603b      	str	r3, [r7, #0]
 800a6a4:	2600      	movs	r6, #0
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6ac:	4e2e      	ldr	r6, [pc, #184]	; (800a768 <_malloc_r+0xe4>)
 800a6ae:	f000 fc69 	bl	800af84 <__malloc_lock>
 800a6b2:	6833      	ldr	r3, [r6, #0]
 800a6b4:	461c      	mov	r4, r3
 800a6b6:	bb34      	cbnz	r4, 800a706 <_malloc_r+0x82>
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	4638      	mov	r0, r7
 800a6bc:	f7ff ffc2 	bl	800a644 <sbrk_aligned>
 800a6c0:	1c43      	adds	r3, r0, #1
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	d14d      	bne.n	800a762 <_malloc_r+0xde>
 800a6c6:	6834      	ldr	r4, [r6, #0]
 800a6c8:	4626      	mov	r6, r4
 800a6ca:	2e00      	cmp	r6, #0
 800a6cc:	d140      	bne.n	800a750 <_malloc_r+0xcc>
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	4631      	mov	r1, r6
 800a6d2:	4638      	mov	r0, r7
 800a6d4:	eb04 0803 	add.w	r8, r4, r3
 800a6d8:	f000 f9a2 	bl	800aa20 <_sbrk_r>
 800a6dc:	4580      	cmp	r8, r0
 800a6de:	d13a      	bne.n	800a756 <_malloc_r+0xd2>
 800a6e0:	6821      	ldr	r1, [r4, #0]
 800a6e2:	3503      	adds	r5, #3
 800a6e4:	1a6d      	subs	r5, r5, r1
 800a6e6:	f025 0503 	bic.w	r5, r5, #3
 800a6ea:	3508      	adds	r5, #8
 800a6ec:	2d0c      	cmp	r5, #12
 800a6ee:	bf38      	it	cc
 800a6f0:	250c      	movcc	r5, #12
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	4638      	mov	r0, r7
 800a6f6:	f7ff ffa5 	bl	800a644 <sbrk_aligned>
 800a6fa:	3001      	adds	r0, #1
 800a6fc:	d02b      	beq.n	800a756 <_malloc_r+0xd2>
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	442b      	add	r3, r5
 800a702:	6023      	str	r3, [r4, #0]
 800a704:	e00e      	b.n	800a724 <_malloc_r+0xa0>
 800a706:	6822      	ldr	r2, [r4, #0]
 800a708:	1b52      	subs	r2, r2, r5
 800a70a:	d41e      	bmi.n	800a74a <_malloc_r+0xc6>
 800a70c:	2a0b      	cmp	r2, #11
 800a70e:	d916      	bls.n	800a73e <_malloc_r+0xba>
 800a710:	1961      	adds	r1, r4, r5
 800a712:	42a3      	cmp	r3, r4
 800a714:	6025      	str	r5, [r4, #0]
 800a716:	bf18      	it	ne
 800a718:	6059      	strne	r1, [r3, #4]
 800a71a:	6863      	ldr	r3, [r4, #4]
 800a71c:	bf08      	it	eq
 800a71e:	6031      	streq	r1, [r6, #0]
 800a720:	5162      	str	r2, [r4, r5]
 800a722:	604b      	str	r3, [r1, #4]
 800a724:	4638      	mov	r0, r7
 800a726:	f104 060b 	add.w	r6, r4, #11
 800a72a:	f000 fc31 	bl	800af90 <__malloc_unlock>
 800a72e:	f026 0607 	bic.w	r6, r6, #7
 800a732:	1d23      	adds	r3, r4, #4
 800a734:	1af2      	subs	r2, r6, r3
 800a736:	d0b6      	beq.n	800a6a6 <_malloc_r+0x22>
 800a738:	1b9b      	subs	r3, r3, r6
 800a73a:	50a3      	str	r3, [r4, r2]
 800a73c:	e7b3      	b.n	800a6a6 <_malloc_r+0x22>
 800a73e:	6862      	ldr	r2, [r4, #4]
 800a740:	42a3      	cmp	r3, r4
 800a742:	bf0c      	ite	eq
 800a744:	6032      	streq	r2, [r6, #0]
 800a746:	605a      	strne	r2, [r3, #4]
 800a748:	e7ec      	b.n	800a724 <_malloc_r+0xa0>
 800a74a:	4623      	mov	r3, r4
 800a74c:	6864      	ldr	r4, [r4, #4]
 800a74e:	e7b2      	b.n	800a6b6 <_malloc_r+0x32>
 800a750:	4634      	mov	r4, r6
 800a752:	6876      	ldr	r6, [r6, #4]
 800a754:	e7b9      	b.n	800a6ca <_malloc_r+0x46>
 800a756:	230c      	movs	r3, #12
 800a758:	603b      	str	r3, [r7, #0]
 800a75a:	4638      	mov	r0, r7
 800a75c:	f000 fc18 	bl	800af90 <__malloc_unlock>
 800a760:	e7a1      	b.n	800a6a6 <_malloc_r+0x22>
 800a762:	6025      	str	r5, [r4, #0]
 800a764:	e7de      	b.n	800a724 <_malloc_r+0xa0>
 800a766:	bf00      	nop
 800a768:	200005d4 	.word	0x200005d4

0800a76c <__sfputc_r>:
 800a76c:	6893      	ldr	r3, [r2, #8]
 800a76e:	3b01      	subs	r3, #1
 800a770:	2b00      	cmp	r3, #0
 800a772:	b410      	push	{r4}
 800a774:	6093      	str	r3, [r2, #8]
 800a776:	da08      	bge.n	800a78a <__sfputc_r+0x1e>
 800a778:	6994      	ldr	r4, [r2, #24]
 800a77a:	42a3      	cmp	r3, r4
 800a77c:	db01      	blt.n	800a782 <__sfputc_r+0x16>
 800a77e:	290a      	cmp	r1, #10
 800a780:	d103      	bne.n	800a78a <__sfputc_r+0x1e>
 800a782:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a786:	f000 b99f 	b.w	800aac8 <__swbuf_r>
 800a78a:	6813      	ldr	r3, [r2, #0]
 800a78c:	1c58      	adds	r0, r3, #1
 800a78e:	6010      	str	r0, [r2, #0]
 800a790:	7019      	strb	r1, [r3, #0]
 800a792:	4608      	mov	r0, r1
 800a794:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <__sfputs_r>:
 800a79a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79c:	4606      	mov	r6, r0
 800a79e:	460f      	mov	r7, r1
 800a7a0:	4614      	mov	r4, r2
 800a7a2:	18d5      	adds	r5, r2, r3
 800a7a4:	42ac      	cmp	r4, r5
 800a7a6:	d101      	bne.n	800a7ac <__sfputs_r+0x12>
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	e007      	b.n	800a7bc <__sfputs_r+0x22>
 800a7ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7b0:	463a      	mov	r2, r7
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f7ff ffda 	bl	800a76c <__sfputc_r>
 800a7b8:	1c43      	adds	r3, r0, #1
 800a7ba:	d1f3      	bne.n	800a7a4 <__sfputs_r+0xa>
 800a7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7c0 <_vfiprintf_r>:
 800a7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c4:	460d      	mov	r5, r1
 800a7c6:	b09d      	sub	sp, #116	; 0x74
 800a7c8:	4614      	mov	r4, r2
 800a7ca:	4698      	mov	r8, r3
 800a7cc:	4606      	mov	r6, r0
 800a7ce:	b118      	cbz	r0, 800a7d8 <_vfiprintf_r+0x18>
 800a7d0:	6983      	ldr	r3, [r0, #24]
 800a7d2:	b90b      	cbnz	r3, 800a7d8 <_vfiprintf_r+0x18>
 800a7d4:	f7ff faa2 	bl	8009d1c <__sinit>
 800a7d8:	4b89      	ldr	r3, [pc, #548]	; (800aa00 <_vfiprintf_r+0x240>)
 800a7da:	429d      	cmp	r5, r3
 800a7dc:	d11b      	bne.n	800a816 <_vfiprintf_r+0x56>
 800a7de:	6875      	ldr	r5, [r6, #4]
 800a7e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7e2:	07d9      	lsls	r1, r3, #31
 800a7e4:	d405      	bmi.n	800a7f2 <_vfiprintf_r+0x32>
 800a7e6:	89ab      	ldrh	r3, [r5, #12]
 800a7e8:	059a      	lsls	r2, r3, #22
 800a7ea:	d402      	bmi.n	800a7f2 <_vfiprintf_r+0x32>
 800a7ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7ee:	f7ff fb38 	bl	8009e62 <__retarget_lock_acquire_recursive>
 800a7f2:	89ab      	ldrh	r3, [r5, #12]
 800a7f4:	071b      	lsls	r3, r3, #28
 800a7f6:	d501      	bpl.n	800a7fc <_vfiprintf_r+0x3c>
 800a7f8:	692b      	ldr	r3, [r5, #16]
 800a7fa:	b9eb      	cbnz	r3, 800a838 <_vfiprintf_r+0x78>
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	4630      	mov	r0, r6
 800a800:	f000 f9c6 	bl	800ab90 <__swsetup_r>
 800a804:	b1c0      	cbz	r0, 800a838 <_vfiprintf_r+0x78>
 800a806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a808:	07dc      	lsls	r4, r3, #31
 800a80a:	d50e      	bpl.n	800a82a <_vfiprintf_r+0x6a>
 800a80c:	f04f 30ff 	mov.w	r0, #4294967295
 800a810:	b01d      	add	sp, #116	; 0x74
 800a812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a816:	4b7b      	ldr	r3, [pc, #492]	; (800aa04 <_vfiprintf_r+0x244>)
 800a818:	429d      	cmp	r5, r3
 800a81a:	d101      	bne.n	800a820 <_vfiprintf_r+0x60>
 800a81c:	68b5      	ldr	r5, [r6, #8]
 800a81e:	e7df      	b.n	800a7e0 <_vfiprintf_r+0x20>
 800a820:	4b79      	ldr	r3, [pc, #484]	; (800aa08 <_vfiprintf_r+0x248>)
 800a822:	429d      	cmp	r5, r3
 800a824:	bf08      	it	eq
 800a826:	68f5      	ldreq	r5, [r6, #12]
 800a828:	e7da      	b.n	800a7e0 <_vfiprintf_r+0x20>
 800a82a:	89ab      	ldrh	r3, [r5, #12]
 800a82c:	0598      	lsls	r0, r3, #22
 800a82e:	d4ed      	bmi.n	800a80c <_vfiprintf_r+0x4c>
 800a830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a832:	f7ff fb17 	bl	8009e64 <__retarget_lock_release_recursive>
 800a836:	e7e9      	b.n	800a80c <_vfiprintf_r+0x4c>
 800a838:	2300      	movs	r3, #0
 800a83a:	9309      	str	r3, [sp, #36]	; 0x24
 800a83c:	2320      	movs	r3, #32
 800a83e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a842:	f8cd 800c 	str.w	r8, [sp, #12]
 800a846:	2330      	movs	r3, #48	; 0x30
 800a848:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa0c <_vfiprintf_r+0x24c>
 800a84c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a850:	f04f 0901 	mov.w	r9, #1
 800a854:	4623      	mov	r3, r4
 800a856:	469a      	mov	sl, r3
 800a858:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a85c:	b10a      	cbz	r2, 800a862 <_vfiprintf_r+0xa2>
 800a85e:	2a25      	cmp	r2, #37	; 0x25
 800a860:	d1f9      	bne.n	800a856 <_vfiprintf_r+0x96>
 800a862:	ebba 0b04 	subs.w	fp, sl, r4
 800a866:	d00b      	beq.n	800a880 <_vfiprintf_r+0xc0>
 800a868:	465b      	mov	r3, fp
 800a86a:	4622      	mov	r2, r4
 800a86c:	4629      	mov	r1, r5
 800a86e:	4630      	mov	r0, r6
 800a870:	f7ff ff93 	bl	800a79a <__sfputs_r>
 800a874:	3001      	adds	r0, #1
 800a876:	f000 80aa 	beq.w	800a9ce <_vfiprintf_r+0x20e>
 800a87a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a87c:	445a      	add	r2, fp
 800a87e:	9209      	str	r2, [sp, #36]	; 0x24
 800a880:	f89a 3000 	ldrb.w	r3, [sl]
 800a884:	2b00      	cmp	r3, #0
 800a886:	f000 80a2 	beq.w	800a9ce <_vfiprintf_r+0x20e>
 800a88a:	2300      	movs	r3, #0
 800a88c:	f04f 32ff 	mov.w	r2, #4294967295
 800a890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a894:	f10a 0a01 	add.w	sl, sl, #1
 800a898:	9304      	str	r3, [sp, #16]
 800a89a:	9307      	str	r3, [sp, #28]
 800a89c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8a0:	931a      	str	r3, [sp, #104]	; 0x68
 800a8a2:	4654      	mov	r4, sl
 800a8a4:	2205      	movs	r2, #5
 800a8a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8aa:	4858      	ldr	r0, [pc, #352]	; (800aa0c <_vfiprintf_r+0x24c>)
 800a8ac:	f7f6 fb50 	bl	8000f50 <memchr>
 800a8b0:	9a04      	ldr	r2, [sp, #16]
 800a8b2:	b9d8      	cbnz	r0, 800a8ec <_vfiprintf_r+0x12c>
 800a8b4:	06d1      	lsls	r1, r2, #27
 800a8b6:	bf44      	itt	mi
 800a8b8:	2320      	movmi	r3, #32
 800a8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8be:	0713      	lsls	r3, r2, #28
 800a8c0:	bf44      	itt	mi
 800a8c2:	232b      	movmi	r3, #43	; 0x2b
 800a8c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a8ce:	d015      	beq.n	800a8fc <_vfiprintf_r+0x13c>
 800a8d0:	9a07      	ldr	r2, [sp, #28]
 800a8d2:	4654      	mov	r4, sl
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	f04f 0c0a 	mov.w	ip, #10
 800a8da:	4621      	mov	r1, r4
 800a8dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8e0:	3b30      	subs	r3, #48	; 0x30
 800a8e2:	2b09      	cmp	r3, #9
 800a8e4:	d94e      	bls.n	800a984 <_vfiprintf_r+0x1c4>
 800a8e6:	b1b0      	cbz	r0, 800a916 <_vfiprintf_r+0x156>
 800a8e8:	9207      	str	r2, [sp, #28]
 800a8ea:	e014      	b.n	800a916 <_vfiprintf_r+0x156>
 800a8ec:	eba0 0308 	sub.w	r3, r0, r8
 800a8f0:	fa09 f303 	lsl.w	r3, r9, r3
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	9304      	str	r3, [sp, #16]
 800a8f8:	46a2      	mov	sl, r4
 800a8fa:	e7d2      	b.n	800a8a2 <_vfiprintf_r+0xe2>
 800a8fc:	9b03      	ldr	r3, [sp, #12]
 800a8fe:	1d19      	adds	r1, r3, #4
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	9103      	str	r1, [sp, #12]
 800a904:	2b00      	cmp	r3, #0
 800a906:	bfbb      	ittet	lt
 800a908:	425b      	neglt	r3, r3
 800a90a:	f042 0202 	orrlt.w	r2, r2, #2
 800a90e:	9307      	strge	r3, [sp, #28]
 800a910:	9307      	strlt	r3, [sp, #28]
 800a912:	bfb8      	it	lt
 800a914:	9204      	strlt	r2, [sp, #16]
 800a916:	7823      	ldrb	r3, [r4, #0]
 800a918:	2b2e      	cmp	r3, #46	; 0x2e
 800a91a:	d10c      	bne.n	800a936 <_vfiprintf_r+0x176>
 800a91c:	7863      	ldrb	r3, [r4, #1]
 800a91e:	2b2a      	cmp	r3, #42	; 0x2a
 800a920:	d135      	bne.n	800a98e <_vfiprintf_r+0x1ce>
 800a922:	9b03      	ldr	r3, [sp, #12]
 800a924:	1d1a      	adds	r2, r3, #4
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	9203      	str	r2, [sp, #12]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	bfb8      	it	lt
 800a92e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a932:	3402      	adds	r4, #2
 800a934:	9305      	str	r3, [sp, #20]
 800a936:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa1c <_vfiprintf_r+0x25c>
 800a93a:	7821      	ldrb	r1, [r4, #0]
 800a93c:	2203      	movs	r2, #3
 800a93e:	4650      	mov	r0, sl
 800a940:	f7f6 fb06 	bl	8000f50 <memchr>
 800a944:	b140      	cbz	r0, 800a958 <_vfiprintf_r+0x198>
 800a946:	2340      	movs	r3, #64	; 0x40
 800a948:	eba0 000a 	sub.w	r0, r0, sl
 800a94c:	fa03 f000 	lsl.w	r0, r3, r0
 800a950:	9b04      	ldr	r3, [sp, #16]
 800a952:	4303      	orrs	r3, r0
 800a954:	3401      	adds	r4, #1
 800a956:	9304      	str	r3, [sp, #16]
 800a958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a95c:	482c      	ldr	r0, [pc, #176]	; (800aa10 <_vfiprintf_r+0x250>)
 800a95e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a962:	2206      	movs	r2, #6
 800a964:	f7f6 faf4 	bl	8000f50 <memchr>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d03f      	beq.n	800a9ec <_vfiprintf_r+0x22c>
 800a96c:	4b29      	ldr	r3, [pc, #164]	; (800aa14 <_vfiprintf_r+0x254>)
 800a96e:	bb1b      	cbnz	r3, 800a9b8 <_vfiprintf_r+0x1f8>
 800a970:	9b03      	ldr	r3, [sp, #12]
 800a972:	3307      	adds	r3, #7
 800a974:	f023 0307 	bic.w	r3, r3, #7
 800a978:	3308      	adds	r3, #8
 800a97a:	9303      	str	r3, [sp, #12]
 800a97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a97e:	443b      	add	r3, r7
 800a980:	9309      	str	r3, [sp, #36]	; 0x24
 800a982:	e767      	b.n	800a854 <_vfiprintf_r+0x94>
 800a984:	fb0c 3202 	mla	r2, ip, r2, r3
 800a988:	460c      	mov	r4, r1
 800a98a:	2001      	movs	r0, #1
 800a98c:	e7a5      	b.n	800a8da <_vfiprintf_r+0x11a>
 800a98e:	2300      	movs	r3, #0
 800a990:	3401      	adds	r4, #1
 800a992:	9305      	str	r3, [sp, #20]
 800a994:	4619      	mov	r1, r3
 800a996:	f04f 0c0a 	mov.w	ip, #10
 800a99a:	4620      	mov	r0, r4
 800a99c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9a0:	3a30      	subs	r2, #48	; 0x30
 800a9a2:	2a09      	cmp	r2, #9
 800a9a4:	d903      	bls.n	800a9ae <_vfiprintf_r+0x1ee>
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d0c5      	beq.n	800a936 <_vfiprintf_r+0x176>
 800a9aa:	9105      	str	r1, [sp, #20]
 800a9ac:	e7c3      	b.n	800a936 <_vfiprintf_r+0x176>
 800a9ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e7f0      	b.n	800a99a <_vfiprintf_r+0x1da>
 800a9b8:	ab03      	add	r3, sp, #12
 800a9ba:	9300      	str	r3, [sp, #0]
 800a9bc:	462a      	mov	r2, r5
 800a9be:	4b16      	ldr	r3, [pc, #88]	; (800aa18 <_vfiprintf_r+0x258>)
 800a9c0:	a904      	add	r1, sp, #16
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f7fd fef4 	bl	80087b0 <_printf_float>
 800a9c8:	4607      	mov	r7, r0
 800a9ca:	1c78      	adds	r0, r7, #1
 800a9cc:	d1d6      	bne.n	800a97c <_vfiprintf_r+0x1bc>
 800a9ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9d0:	07d9      	lsls	r1, r3, #31
 800a9d2:	d405      	bmi.n	800a9e0 <_vfiprintf_r+0x220>
 800a9d4:	89ab      	ldrh	r3, [r5, #12]
 800a9d6:	059a      	lsls	r2, r3, #22
 800a9d8:	d402      	bmi.n	800a9e0 <_vfiprintf_r+0x220>
 800a9da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9dc:	f7ff fa42 	bl	8009e64 <__retarget_lock_release_recursive>
 800a9e0:	89ab      	ldrh	r3, [r5, #12]
 800a9e2:	065b      	lsls	r3, r3, #25
 800a9e4:	f53f af12 	bmi.w	800a80c <_vfiprintf_r+0x4c>
 800a9e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9ea:	e711      	b.n	800a810 <_vfiprintf_r+0x50>
 800a9ec:	ab03      	add	r3, sp, #12
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	462a      	mov	r2, r5
 800a9f2:	4b09      	ldr	r3, [pc, #36]	; (800aa18 <_vfiprintf_r+0x258>)
 800a9f4:	a904      	add	r1, sp, #16
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	f7fe f97e 	bl	8008cf8 <_printf_i>
 800a9fc:	e7e4      	b.n	800a9c8 <_vfiprintf_r+0x208>
 800a9fe:	bf00      	nop
 800aa00:	0800b310 	.word	0x0800b310
 800aa04:	0800b330 	.word	0x0800b330
 800aa08:	0800b2f0 	.word	0x0800b2f0
 800aa0c:	0800b4ac 	.word	0x0800b4ac
 800aa10:	0800b4b6 	.word	0x0800b4b6
 800aa14:	080087b1 	.word	0x080087b1
 800aa18:	0800a79b 	.word	0x0800a79b
 800aa1c:	0800b4b2 	.word	0x0800b4b2

0800aa20 <_sbrk_r>:
 800aa20:	b538      	push	{r3, r4, r5, lr}
 800aa22:	4d06      	ldr	r5, [pc, #24]	; (800aa3c <_sbrk_r+0x1c>)
 800aa24:	2300      	movs	r3, #0
 800aa26:	4604      	mov	r4, r0
 800aa28:	4608      	mov	r0, r1
 800aa2a:	602b      	str	r3, [r5, #0]
 800aa2c:	f7f8 fd90 	bl	8003550 <_sbrk>
 800aa30:	1c43      	adds	r3, r0, #1
 800aa32:	d102      	bne.n	800aa3a <_sbrk_r+0x1a>
 800aa34:	682b      	ldr	r3, [r5, #0]
 800aa36:	b103      	cbz	r3, 800aa3a <_sbrk_r+0x1a>
 800aa38:	6023      	str	r3, [r4, #0]
 800aa3a:	bd38      	pop	{r3, r4, r5, pc}
 800aa3c:	200005dc 	.word	0x200005dc

0800aa40 <__sread>:
 800aa40:	b510      	push	{r4, lr}
 800aa42:	460c      	mov	r4, r1
 800aa44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa48:	f000 faa8 	bl	800af9c <_read_r>
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	bfab      	itete	ge
 800aa50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa52:	89a3      	ldrhlt	r3, [r4, #12]
 800aa54:	181b      	addge	r3, r3, r0
 800aa56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa5a:	bfac      	ite	ge
 800aa5c:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa5e:	81a3      	strhlt	r3, [r4, #12]
 800aa60:	bd10      	pop	{r4, pc}

0800aa62 <__swrite>:
 800aa62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa66:	461f      	mov	r7, r3
 800aa68:	898b      	ldrh	r3, [r1, #12]
 800aa6a:	05db      	lsls	r3, r3, #23
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	460c      	mov	r4, r1
 800aa70:	4616      	mov	r6, r2
 800aa72:	d505      	bpl.n	800aa80 <__swrite+0x1e>
 800aa74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa78:	2302      	movs	r3, #2
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f000 f9f8 	bl	800ae70 <_lseek_r>
 800aa80:	89a3      	ldrh	r3, [r4, #12]
 800aa82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa8a:	81a3      	strh	r3, [r4, #12]
 800aa8c:	4632      	mov	r2, r6
 800aa8e:	463b      	mov	r3, r7
 800aa90:	4628      	mov	r0, r5
 800aa92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa96:	f000 b869 	b.w	800ab6c <_write_r>

0800aa9a <__sseek>:
 800aa9a:	b510      	push	{r4, lr}
 800aa9c:	460c      	mov	r4, r1
 800aa9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa2:	f000 f9e5 	bl	800ae70 <_lseek_r>
 800aaa6:	1c43      	adds	r3, r0, #1
 800aaa8:	89a3      	ldrh	r3, [r4, #12]
 800aaaa:	bf15      	itete	ne
 800aaac:	6560      	strne	r0, [r4, #84]	; 0x54
 800aaae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aab6:	81a3      	strheq	r3, [r4, #12]
 800aab8:	bf18      	it	ne
 800aaba:	81a3      	strhne	r3, [r4, #12]
 800aabc:	bd10      	pop	{r4, pc}

0800aabe <__sclose>:
 800aabe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aac2:	f000 b8f1 	b.w	800aca8 <_close_r>
	...

0800aac8 <__swbuf_r>:
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	460e      	mov	r6, r1
 800aacc:	4614      	mov	r4, r2
 800aace:	4605      	mov	r5, r0
 800aad0:	b118      	cbz	r0, 800aada <__swbuf_r+0x12>
 800aad2:	6983      	ldr	r3, [r0, #24]
 800aad4:	b90b      	cbnz	r3, 800aada <__swbuf_r+0x12>
 800aad6:	f7ff f921 	bl	8009d1c <__sinit>
 800aada:	4b21      	ldr	r3, [pc, #132]	; (800ab60 <__swbuf_r+0x98>)
 800aadc:	429c      	cmp	r4, r3
 800aade:	d12b      	bne.n	800ab38 <__swbuf_r+0x70>
 800aae0:	686c      	ldr	r4, [r5, #4]
 800aae2:	69a3      	ldr	r3, [r4, #24]
 800aae4:	60a3      	str	r3, [r4, #8]
 800aae6:	89a3      	ldrh	r3, [r4, #12]
 800aae8:	071a      	lsls	r2, r3, #28
 800aaea:	d52f      	bpl.n	800ab4c <__swbuf_r+0x84>
 800aaec:	6923      	ldr	r3, [r4, #16]
 800aaee:	b36b      	cbz	r3, 800ab4c <__swbuf_r+0x84>
 800aaf0:	6923      	ldr	r3, [r4, #16]
 800aaf2:	6820      	ldr	r0, [r4, #0]
 800aaf4:	1ac0      	subs	r0, r0, r3
 800aaf6:	6963      	ldr	r3, [r4, #20]
 800aaf8:	b2f6      	uxtb	r6, r6
 800aafa:	4283      	cmp	r3, r0
 800aafc:	4637      	mov	r7, r6
 800aafe:	dc04      	bgt.n	800ab0a <__swbuf_r+0x42>
 800ab00:	4621      	mov	r1, r4
 800ab02:	4628      	mov	r0, r5
 800ab04:	f000 f966 	bl	800add4 <_fflush_r>
 800ab08:	bb30      	cbnz	r0, 800ab58 <__swbuf_r+0x90>
 800ab0a:	68a3      	ldr	r3, [r4, #8]
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	60a3      	str	r3, [r4, #8]
 800ab10:	6823      	ldr	r3, [r4, #0]
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	6022      	str	r2, [r4, #0]
 800ab16:	701e      	strb	r6, [r3, #0]
 800ab18:	6963      	ldr	r3, [r4, #20]
 800ab1a:	3001      	adds	r0, #1
 800ab1c:	4283      	cmp	r3, r0
 800ab1e:	d004      	beq.n	800ab2a <__swbuf_r+0x62>
 800ab20:	89a3      	ldrh	r3, [r4, #12]
 800ab22:	07db      	lsls	r3, r3, #31
 800ab24:	d506      	bpl.n	800ab34 <__swbuf_r+0x6c>
 800ab26:	2e0a      	cmp	r6, #10
 800ab28:	d104      	bne.n	800ab34 <__swbuf_r+0x6c>
 800ab2a:	4621      	mov	r1, r4
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	f000 f951 	bl	800add4 <_fflush_r>
 800ab32:	b988      	cbnz	r0, 800ab58 <__swbuf_r+0x90>
 800ab34:	4638      	mov	r0, r7
 800ab36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab38:	4b0a      	ldr	r3, [pc, #40]	; (800ab64 <__swbuf_r+0x9c>)
 800ab3a:	429c      	cmp	r4, r3
 800ab3c:	d101      	bne.n	800ab42 <__swbuf_r+0x7a>
 800ab3e:	68ac      	ldr	r4, [r5, #8]
 800ab40:	e7cf      	b.n	800aae2 <__swbuf_r+0x1a>
 800ab42:	4b09      	ldr	r3, [pc, #36]	; (800ab68 <__swbuf_r+0xa0>)
 800ab44:	429c      	cmp	r4, r3
 800ab46:	bf08      	it	eq
 800ab48:	68ec      	ldreq	r4, [r5, #12]
 800ab4a:	e7ca      	b.n	800aae2 <__swbuf_r+0x1a>
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	4628      	mov	r0, r5
 800ab50:	f000 f81e 	bl	800ab90 <__swsetup_r>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d0cb      	beq.n	800aaf0 <__swbuf_r+0x28>
 800ab58:	f04f 37ff 	mov.w	r7, #4294967295
 800ab5c:	e7ea      	b.n	800ab34 <__swbuf_r+0x6c>
 800ab5e:	bf00      	nop
 800ab60:	0800b310 	.word	0x0800b310
 800ab64:	0800b330 	.word	0x0800b330
 800ab68:	0800b2f0 	.word	0x0800b2f0

0800ab6c <_write_r>:
 800ab6c:	b538      	push	{r3, r4, r5, lr}
 800ab6e:	4d07      	ldr	r5, [pc, #28]	; (800ab8c <_write_r+0x20>)
 800ab70:	4604      	mov	r4, r0
 800ab72:	4608      	mov	r0, r1
 800ab74:	4611      	mov	r1, r2
 800ab76:	2200      	movs	r2, #0
 800ab78:	602a      	str	r2, [r5, #0]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	f7f8 fc98 	bl	80034b0 <_write>
 800ab80:	1c43      	adds	r3, r0, #1
 800ab82:	d102      	bne.n	800ab8a <_write_r+0x1e>
 800ab84:	682b      	ldr	r3, [r5, #0]
 800ab86:	b103      	cbz	r3, 800ab8a <_write_r+0x1e>
 800ab88:	6023      	str	r3, [r4, #0]
 800ab8a:	bd38      	pop	{r3, r4, r5, pc}
 800ab8c:	200005dc 	.word	0x200005dc

0800ab90 <__swsetup_r>:
 800ab90:	4b32      	ldr	r3, [pc, #200]	; (800ac5c <__swsetup_r+0xcc>)
 800ab92:	b570      	push	{r4, r5, r6, lr}
 800ab94:	681d      	ldr	r5, [r3, #0]
 800ab96:	4606      	mov	r6, r0
 800ab98:	460c      	mov	r4, r1
 800ab9a:	b125      	cbz	r5, 800aba6 <__swsetup_r+0x16>
 800ab9c:	69ab      	ldr	r3, [r5, #24]
 800ab9e:	b913      	cbnz	r3, 800aba6 <__swsetup_r+0x16>
 800aba0:	4628      	mov	r0, r5
 800aba2:	f7ff f8bb 	bl	8009d1c <__sinit>
 800aba6:	4b2e      	ldr	r3, [pc, #184]	; (800ac60 <__swsetup_r+0xd0>)
 800aba8:	429c      	cmp	r4, r3
 800abaa:	d10f      	bne.n	800abcc <__swsetup_r+0x3c>
 800abac:	686c      	ldr	r4, [r5, #4]
 800abae:	89a3      	ldrh	r3, [r4, #12]
 800abb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abb4:	0719      	lsls	r1, r3, #28
 800abb6:	d42c      	bmi.n	800ac12 <__swsetup_r+0x82>
 800abb8:	06dd      	lsls	r5, r3, #27
 800abba:	d411      	bmi.n	800abe0 <__swsetup_r+0x50>
 800abbc:	2309      	movs	r3, #9
 800abbe:	6033      	str	r3, [r6, #0]
 800abc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abc4:	81a3      	strh	r3, [r4, #12]
 800abc6:	f04f 30ff 	mov.w	r0, #4294967295
 800abca:	e03e      	b.n	800ac4a <__swsetup_r+0xba>
 800abcc:	4b25      	ldr	r3, [pc, #148]	; (800ac64 <__swsetup_r+0xd4>)
 800abce:	429c      	cmp	r4, r3
 800abd0:	d101      	bne.n	800abd6 <__swsetup_r+0x46>
 800abd2:	68ac      	ldr	r4, [r5, #8]
 800abd4:	e7eb      	b.n	800abae <__swsetup_r+0x1e>
 800abd6:	4b24      	ldr	r3, [pc, #144]	; (800ac68 <__swsetup_r+0xd8>)
 800abd8:	429c      	cmp	r4, r3
 800abda:	bf08      	it	eq
 800abdc:	68ec      	ldreq	r4, [r5, #12]
 800abde:	e7e6      	b.n	800abae <__swsetup_r+0x1e>
 800abe0:	0758      	lsls	r0, r3, #29
 800abe2:	d512      	bpl.n	800ac0a <__swsetup_r+0x7a>
 800abe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abe6:	b141      	cbz	r1, 800abfa <__swsetup_r+0x6a>
 800abe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abec:	4299      	cmp	r1, r3
 800abee:	d002      	beq.n	800abf6 <__swsetup_r+0x66>
 800abf0:	4630      	mov	r0, r6
 800abf2:	f7ff fcdb 	bl	800a5ac <_free_r>
 800abf6:	2300      	movs	r3, #0
 800abf8:	6363      	str	r3, [r4, #52]	; 0x34
 800abfa:	89a3      	ldrh	r3, [r4, #12]
 800abfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac00:	81a3      	strh	r3, [r4, #12]
 800ac02:	2300      	movs	r3, #0
 800ac04:	6063      	str	r3, [r4, #4]
 800ac06:	6923      	ldr	r3, [r4, #16]
 800ac08:	6023      	str	r3, [r4, #0]
 800ac0a:	89a3      	ldrh	r3, [r4, #12]
 800ac0c:	f043 0308 	orr.w	r3, r3, #8
 800ac10:	81a3      	strh	r3, [r4, #12]
 800ac12:	6923      	ldr	r3, [r4, #16]
 800ac14:	b94b      	cbnz	r3, 800ac2a <__swsetup_r+0x9a>
 800ac16:	89a3      	ldrh	r3, [r4, #12]
 800ac18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac20:	d003      	beq.n	800ac2a <__swsetup_r+0x9a>
 800ac22:	4621      	mov	r1, r4
 800ac24:	4630      	mov	r0, r6
 800ac26:	f000 f95b 	bl	800aee0 <__smakebuf_r>
 800ac2a:	89a0      	ldrh	r0, [r4, #12]
 800ac2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac30:	f010 0301 	ands.w	r3, r0, #1
 800ac34:	d00a      	beq.n	800ac4c <__swsetup_r+0xbc>
 800ac36:	2300      	movs	r3, #0
 800ac38:	60a3      	str	r3, [r4, #8]
 800ac3a:	6963      	ldr	r3, [r4, #20]
 800ac3c:	425b      	negs	r3, r3
 800ac3e:	61a3      	str	r3, [r4, #24]
 800ac40:	6923      	ldr	r3, [r4, #16]
 800ac42:	b943      	cbnz	r3, 800ac56 <__swsetup_r+0xc6>
 800ac44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac48:	d1ba      	bne.n	800abc0 <__swsetup_r+0x30>
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	0781      	lsls	r1, r0, #30
 800ac4e:	bf58      	it	pl
 800ac50:	6963      	ldrpl	r3, [r4, #20]
 800ac52:	60a3      	str	r3, [r4, #8]
 800ac54:	e7f4      	b.n	800ac40 <__swsetup_r+0xb0>
 800ac56:	2000      	movs	r0, #0
 800ac58:	e7f7      	b.n	800ac4a <__swsetup_r+0xba>
 800ac5a:	bf00      	nop
 800ac5c:	20000054 	.word	0x20000054
 800ac60:	0800b310 	.word	0x0800b310
 800ac64:	0800b330 	.word	0x0800b330
 800ac68:	0800b2f0 	.word	0x0800b2f0

0800ac6c <__assert_func>:
 800ac6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac6e:	4614      	mov	r4, r2
 800ac70:	461a      	mov	r2, r3
 800ac72:	4b09      	ldr	r3, [pc, #36]	; (800ac98 <__assert_func+0x2c>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4605      	mov	r5, r0
 800ac78:	68d8      	ldr	r0, [r3, #12]
 800ac7a:	b14c      	cbz	r4, 800ac90 <__assert_func+0x24>
 800ac7c:	4b07      	ldr	r3, [pc, #28]	; (800ac9c <__assert_func+0x30>)
 800ac7e:	9100      	str	r1, [sp, #0]
 800ac80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac84:	4906      	ldr	r1, [pc, #24]	; (800aca0 <__assert_func+0x34>)
 800ac86:	462b      	mov	r3, r5
 800ac88:	f000 f8e0 	bl	800ae4c <fiprintf>
 800ac8c:	f000 f9a5 	bl	800afda <abort>
 800ac90:	4b04      	ldr	r3, [pc, #16]	; (800aca4 <__assert_func+0x38>)
 800ac92:	461c      	mov	r4, r3
 800ac94:	e7f3      	b.n	800ac7e <__assert_func+0x12>
 800ac96:	bf00      	nop
 800ac98:	20000054 	.word	0x20000054
 800ac9c:	0800b4bd 	.word	0x0800b4bd
 800aca0:	0800b4ca 	.word	0x0800b4ca
 800aca4:	0800b4f8 	.word	0x0800b4f8

0800aca8 <_close_r>:
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	4d06      	ldr	r5, [pc, #24]	; (800acc4 <_close_r+0x1c>)
 800acac:	2300      	movs	r3, #0
 800acae:	4604      	mov	r4, r0
 800acb0:	4608      	mov	r0, r1
 800acb2:	602b      	str	r3, [r5, #0]
 800acb4:	f7f8 fc18 	bl	80034e8 <_close>
 800acb8:	1c43      	adds	r3, r0, #1
 800acba:	d102      	bne.n	800acc2 <_close_r+0x1a>
 800acbc:	682b      	ldr	r3, [r5, #0]
 800acbe:	b103      	cbz	r3, 800acc2 <_close_r+0x1a>
 800acc0:	6023      	str	r3, [r4, #0]
 800acc2:	bd38      	pop	{r3, r4, r5, pc}
 800acc4:	200005dc 	.word	0x200005dc

0800acc8 <__sflush_r>:
 800acc8:	898a      	ldrh	r2, [r1, #12]
 800acca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acce:	4605      	mov	r5, r0
 800acd0:	0710      	lsls	r0, r2, #28
 800acd2:	460c      	mov	r4, r1
 800acd4:	d458      	bmi.n	800ad88 <__sflush_r+0xc0>
 800acd6:	684b      	ldr	r3, [r1, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	dc05      	bgt.n	800ace8 <__sflush_r+0x20>
 800acdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acde:	2b00      	cmp	r3, #0
 800ace0:	dc02      	bgt.n	800ace8 <__sflush_r+0x20>
 800ace2:	2000      	movs	r0, #0
 800ace4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ace8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acea:	2e00      	cmp	r6, #0
 800acec:	d0f9      	beq.n	800ace2 <__sflush_r+0x1a>
 800acee:	2300      	movs	r3, #0
 800acf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acf4:	682f      	ldr	r7, [r5, #0]
 800acf6:	602b      	str	r3, [r5, #0]
 800acf8:	d032      	beq.n	800ad60 <__sflush_r+0x98>
 800acfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acfc:	89a3      	ldrh	r3, [r4, #12]
 800acfe:	075a      	lsls	r2, r3, #29
 800ad00:	d505      	bpl.n	800ad0e <__sflush_r+0x46>
 800ad02:	6863      	ldr	r3, [r4, #4]
 800ad04:	1ac0      	subs	r0, r0, r3
 800ad06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad08:	b10b      	cbz	r3, 800ad0e <__sflush_r+0x46>
 800ad0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad0c:	1ac0      	subs	r0, r0, r3
 800ad0e:	2300      	movs	r3, #0
 800ad10:	4602      	mov	r2, r0
 800ad12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad14:	6a21      	ldr	r1, [r4, #32]
 800ad16:	4628      	mov	r0, r5
 800ad18:	47b0      	blx	r6
 800ad1a:	1c43      	adds	r3, r0, #1
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	d106      	bne.n	800ad2e <__sflush_r+0x66>
 800ad20:	6829      	ldr	r1, [r5, #0]
 800ad22:	291d      	cmp	r1, #29
 800ad24:	d82c      	bhi.n	800ad80 <__sflush_r+0xb8>
 800ad26:	4a2a      	ldr	r2, [pc, #168]	; (800add0 <__sflush_r+0x108>)
 800ad28:	40ca      	lsrs	r2, r1
 800ad2a:	07d6      	lsls	r6, r2, #31
 800ad2c:	d528      	bpl.n	800ad80 <__sflush_r+0xb8>
 800ad2e:	2200      	movs	r2, #0
 800ad30:	6062      	str	r2, [r4, #4]
 800ad32:	04d9      	lsls	r1, r3, #19
 800ad34:	6922      	ldr	r2, [r4, #16]
 800ad36:	6022      	str	r2, [r4, #0]
 800ad38:	d504      	bpl.n	800ad44 <__sflush_r+0x7c>
 800ad3a:	1c42      	adds	r2, r0, #1
 800ad3c:	d101      	bne.n	800ad42 <__sflush_r+0x7a>
 800ad3e:	682b      	ldr	r3, [r5, #0]
 800ad40:	b903      	cbnz	r3, 800ad44 <__sflush_r+0x7c>
 800ad42:	6560      	str	r0, [r4, #84]	; 0x54
 800ad44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad46:	602f      	str	r7, [r5, #0]
 800ad48:	2900      	cmp	r1, #0
 800ad4a:	d0ca      	beq.n	800ace2 <__sflush_r+0x1a>
 800ad4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad50:	4299      	cmp	r1, r3
 800ad52:	d002      	beq.n	800ad5a <__sflush_r+0x92>
 800ad54:	4628      	mov	r0, r5
 800ad56:	f7ff fc29 	bl	800a5ac <_free_r>
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	6360      	str	r0, [r4, #52]	; 0x34
 800ad5e:	e7c1      	b.n	800ace4 <__sflush_r+0x1c>
 800ad60:	6a21      	ldr	r1, [r4, #32]
 800ad62:	2301      	movs	r3, #1
 800ad64:	4628      	mov	r0, r5
 800ad66:	47b0      	blx	r6
 800ad68:	1c41      	adds	r1, r0, #1
 800ad6a:	d1c7      	bne.n	800acfc <__sflush_r+0x34>
 800ad6c:	682b      	ldr	r3, [r5, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d0c4      	beq.n	800acfc <__sflush_r+0x34>
 800ad72:	2b1d      	cmp	r3, #29
 800ad74:	d001      	beq.n	800ad7a <__sflush_r+0xb2>
 800ad76:	2b16      	cmp	r3, #22
 800ad78:	d101      	bne.n	800ad7e <__sflush_r+0xb6>
 800ad7a:	602f      	str	r7, [r5, #0]
 800ad7c:	e7b1      	b.n	800ace2 <__sflush_r+0x1a>
 800ad7e:	89a3      	ldrh	r3, [r4, #12]
 800ad80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad84:	81a3      	strh	r3, [r4, #12]
 800ad86:	e7ad      	b.n	800ace4 <__sflush_r+0x1c>
 800ad88:	690f      	ldr	r7, [r1, #16]
 800ad8a:	2f00      	cmp	r7, #0
 800ad8c:	d0a9      	beq.n	800ace2 <__sflush_r+0x1a>
 800ad8e:	0793      	lsls	r3, r2, #30
 800ad90:	680e      	ldr	r6, [r1, #0]
 800ad92:	bf08      	it	eq
 800ad94:	694b      	ldreq	r3, [r1, #20]
 800ad96:	600f      	str	r7, [r1, #0]
 800ad98:	bf18      	it	ne
 800ad9a:	2300      	movne	r3, #0
 800ad9c:	eba6 0807 	sub.w	r8, r6, r7
 800ada0:	608b      	str	r3, [r1, #8]
 800ada2:	f1b8 0f00 	cmp.w	r8, #0
 800ada6:	dd9c      	ble.n	800ace2 <__sflush_r+0x1a>
 800ada8:	6a21      	ldr	r1, [r4, #32]
 800adaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800adac:	4643      	mov	r3, r8
 800adae:	463a      	mov	r2, r7
 800adb0:	4628      	mov	r0, r5
 800adb2:	47b0      	blx	r6
 800adb4:	2800      	cmp	r0, #0
 800adb6:	dc06      	bgt.n	800adc6 <__sflush_r+0xfe>
 800adb8:	89a3      	ldrh	r3, [r4, #12]
 800adba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adbe:	81a3      	strh	r3, [r4, #12]
 800adc0:	f04f 30ff 	mov.w	r0, #4294967295
 800adc4:	e78e      	b.n	800ace4 <__sflush_r+0x1c>
 800adc6:	4407      	add	r7, r0
 800adc8:	eba8 0800 	sub.w	r8, r8, r0
 800adcc:	e7e9      	b.n	800ada2 <__sflush_r+0xda>
 800adce:	bf00      	nop
 800add0:	20400001 	.word	0x20400001

0800add4 <_fflush_r>:
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	690b      	ldr	r3, [r1, #16]
 800add8:	4605      	mov	r5, r0
 800adda:	460c      	mov	r4, r1
 800addc:	b913      	cbnz	r3, 800ade4 <_fflush_r+0x10>
 800adde:	2500      	movs	r5, #0
 800ade0:	4628      	mov	r0, r5
 800ade2:	bd38      	pop	{r3, r4, r5, pc}
 800ade4:	b118      	cbz	r0, 800adee <_fflush_r+0x1a>
 800ade6:	6983      	ldr	r3, [r0, #24]
 800ade8:	b90b      	cbnz	r3, 800adee <_fflush_r+0x1a>
 800adea:	f7fe ff97 	bl	8009d1c <__sinit>
 800adee:	4b14      	ldr	r3, [pc, #80]	; (800ae40 <_fflush_r+0x6c>)
 800adf0:	429c      	cmp	r4, r3
 800adf2:	d11b      	bne.n	800ae2c <_fflush_r+0x58>
 800adf4:	686c      	ldr	r4, [r5, #4]
 800adf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d0ef      	beq.n	800adde <_fflush_r+0xa>
 800adfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae00:	07d0      	lsls	r0, r2, #31
 800ae02:	d404      	bmi.n	800ae0e <_fflush_r+0x3a>
 800ae04:	0599      	lsls	r1, r3, #22
 800ae06:	d402      	bmi.n	800ae0e <_fflush_r+0x3a>
 800ae08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae0a:	f7ff f82a 	bl	8009e62 <__retarget_lock_acquire_recursive>
 800ae0e:	4628      	mov	r0, r5
 800ae10:	4621      	mov	r1, r4
 800ae12:	f7ff ff59 	bl	800acc8 <__sflush_r>
 800ae16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae18:	07da      	lsls	r2, r3, #31
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	d4e0      	bmi.n	800ade0 <_fflush_r+0xc>
 800ae1e:	89a3      	ldrh	r3, [r4, #12]
 800ae20:	059b      	lsls	r3, r3, #22
 800ae22:	d4dd      	bmi.n	800ade0 <_fflush_r+0xc>
 800ae24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae26:	f7ff f81d 	bl	8009e64 <__retarget_lock_release_recursive>
 800ae2a:	e7d9      	b.n	800ade0 <_fflush_r+0xc>
 800ae2c:	4b05      	ldr	r3, [pc, #20]	; (800ae44 <_fflush_r+0x70>)
 800ae2e:	429c      	cmp	r4, r3
 800ae30:	d101      	bne.n	800ae36 <_fflush_r+0x62>
 800ae32:	68ac      	ldr	r4, [r5, #8]
 800ae34:	e7df      	b.n	800adf6 <_fflush_r+0x22>
 800ae36:	4b04      	ldr	r3, [pc, #16]	; (800ae48 <_fflush_r+0x74>)
 800ae38:	429c      	cmp	r4, r3
 800ae3a:	bf08      	it	eq
 800ae3c:	68ec      	ldreq	r4, [r5, #12]
 800ae3e:	e7da      	b.n	800adf6 <_fflush_r+0x22>
 800ae40:	0800b310 	.word	0x0800b310
 800ae44:	0800b330 	.word	0x0800b330
 800ae48:	0800b2f0 	.word	0x0800b2f0

0800ae4c <fiprintf>:
 800ae4c:	b40e      	push	{r1, r2, r3}
 800ae4e:	b503      	push	{r0, r1, lr}
 800ae50:	4601      	mov	r1, r0
 800ae52:	ab03      	add	r3, sp, #12
 800ae54:	4805      	ldr	r0, [pc, #20]	; (800ae6c <fiprintf+0x20>)
 800ae56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae5a:	6800      	ldr	r0, [r0, #0]
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	f7ff fcaf 	bl	800a7c0 <_vfiprintf_r>
 800ae62:	b002      	add	sp, #8
 800ae64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae68:	b003      	add	sp, #12
 800ae6a:	4770      	bx	lr
 800ae6c:	20000054 	.word	0x20000054

0800ae70 <_lseek_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4d07      	ldr	r5, [pc, #28]	; (800ae90 <_lseek_r+0x20>)
 800ae74:	4604      	mov	r4, r0
 800ae76:	4608      	mov	r0, r1
 800ae78:	4611      	mov	r1, r2
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	602a      	str	r2, [r5, #0]
 800ae7e:	461a      	mov	r2, r3
 800ae80:	f7f8 fb59 	bl	8003536 <_lseek>
 800ae84:	1c43      	adds	r3, r0, #1
 800ae86:	d102      	bne.n	800ae8e <_lseek_r+0x1e>
 800ae88:	682b      	ldr	r3, [r5, #0]
 800ae8a:	b103      	cbz	r3, 800ae8e <_lseek_r+0x1e>
 800ae8c:	6023      	str	r3, [r4, #0]
 800ae8e:	bd38      	pop	{r3, r4, r5, pc}
 800ae90:	200005dc 	.word	0x200005dc

0800ae94 <__swhatbuf_r>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	460e      	mov	r6, r1
 800ae98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae9c:	2900      	cmp	r1, #0
 800ae9e:	b096      	sub	sp, #88	; 0x58
 800aea0:	4614      	mov	r4, r2
 800aea2:	461d      	mov	r5, r3
 800aea4:	da08      	bge.n	800aeb8 <__swhatbuf_r+0x24>
 800aea6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	602a      	str	r2, [r5, #0]
 800aeae:	061a      	lsls	r2, r3, #24
 800aeb0:	d410      	bmi.n	800aed4 <__swhatbuf_r+0x40>
 800aeb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeb6:	e00e      	b.n	800aed6 <__swhatbuf_r+0x42>
 800aeb8:	466a      	mov	r2, sp
 800aeba:	f000 f895 	bl	800afe8 <_fstat_r>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	dbf1      	blt.n	800aea6 <__swhatbuf_r+0x12>
 800aec2:	9a01      	ldr	r2, [sp, #4]
 800aec4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aec8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aecc:	425a      	negs	r2, r3
 800aece:	415a      	adcs	r2, r3
 800aed0:	602a      	str	r2, [r5, #0]
 800aed2:	e7ee      	b.n	800aeb2 <__swhatbuf_r+0x1e>
 800aed4:	2340      	movs	r3, #64	; 0x40
 800aed6:	2000      	movs	r0, #0
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	b016      	add	sp, #88	; 0x58
 800aedc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aee0 <__smakebuf_r>:
 800aee0:	898b      	ldrh	r3, [r1, #12]
 800aee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aee4:	079d      	lsls	r5, r3, #30
 800aee6:	4606      	mov	r6, r0
 800aee8:	460c      	mov	r4, r1
 800aeea:	d507      	bpl.n	800aefc <__smakebuf_r+0x1c>
 800aeec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	6123      	str	r3, [r4, #16]
 800aef4:	2301      	movs	r3, #1
 800aef6:	6163      	str	r3, [r4, #20]
 800aef8:	b002      	add	sp, #8
 800aefa:	bd70      	pop	{r4, r5, r6, pc}
 800aefc:	ab01      	add	r3, sp, #4
 800aefe:	466a      	mov	r2, sp
 800af00:	f7ff ffc8 	bl	800ae94 <__swhatbuf_r>
 800af04:	9900      	ldr	r1, [sp, #0]
 800af06:	4605      	mov	r5, r0
 800af08:	4630      	mov	r0, r6
 800af0a:	f7ff fbbb 	bl	800a684 <_malloc_r>
 800af0e:	b948      	cbnz	r0, 800af24 <__smakebuf_r+0x44>
 800af10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af14:	059a      	lsls	r2, r3, #22
 800af16:	d4ef      	bmi.n	800aef8 <__smakebuf_r+0x18>
 800af18:	f023 0303 	bic.w	r3, r3, #3
 800af1c:	f043 0302 	orr.w	r3, r3, #2
 800af20:	81a3      	strh	r3, [r4, #12]
 800af22:	e7e3      	b.n	800aeec <__smakebuf_r+0xc>
 800af24:	4b0d      	ldr	r3, [pc, #52]	; (800af5c <__smakebuf_r+0x7c>)
 800af26:	62b3      	str	r3, [r6, #40]	; 0x28
 800af28:	89a3      	ldrh	r3, [r4, #12]
 800af2a:	6020      	str	r0, [r4, #0]
 800af2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af30:	81a3      	strh	r3, [r4, #12]
 800af32:	9b00      	ldr	r3, [sp, #0]
 800af34:	6163      	str	r3, [r4, #20]
 800af36:	9b01      	ldr	r3, [sp, #4]
 800af38:	6120      	str	r0, [r4, #16]
 800af3a:	b15b      	cbz	r3, 800af54 <__smakebuf_r+0x74>
 800af3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af40:	4630      	mov	r0, r6
 800af42:	f000 f863 	bl	800b00c <_isatty_r>
 800af46:	b128      	cbz	r0, 800af54 <__smakebuf_r+0x74>
 800af48:	89a3      	ldrh	r3, [r4, #12]
 800af4a:	f023 0303 	bic.w	r3, r3, #3
 800af4e:	f043 0301 	orr.w	r3, r3, #1
 800af52:	81a3      	strh	r3, [r4, #12]
 800af54:	89a0      	ldrh	r0, [r4, #12]
 800af56:	4305      	orrs	r5, r0
 800af58:	81a5      	strh	r5, [r4, #12]
 800af5a:	e7cd      	b.n	800aef8 <__smakebuf_r+0x18>
 800af5c:	08009cb5 	.word	0x08009cb5

0800af60 <__ascii_mbtowc>:
 800af60:	b082      	sub	sp, #8
 800af62:	b901      	cbnz	r1, 800af66 <__ascii_mbtowc+0x6>
 800af64:	a901      	add	r1, sp, #4
 800af66:	b142      	cbz	r2, 800af7a <__ascii_mbtowc+0x1a>
 800af68:	b14b      	cbz	r3, 800af7e <__ascii_mbtowc+0x1e>
 800af6a:	7813      	ldrb	r3, [r2, #0]
 800af6c:	600b      	str	r3, [r1, #0]
 800af6e:	7812      	ldrb	r2, [r2, #0]
 800af70:	1e10      	subs	r0, r2, #0
 800af72:	bf18      	it	ne
 800af74:	2001      	movne	r0, #1
 800af76:	b002      	add	sp, #8
 800af78:	4770      	bx	lr
 800af7a:	4610      	mov	r0, r2
 800af7c:	e7fb      	b.n	800af76 <__ascii_mbtowc+0x16>
 800af7e:	f06f 0001 	mvn.w	r0, #1
 800af82:	e7f8      	b.n	800af76 <__ascii_mbtowc+0x16>

0800af84 <__malloc_lock>:
 800af84:	4801      	ldr	r0, [pc, #4]	; (800af8c <__malloc_lock+0x8>)
 800af86:	f7fe bf6c 	b.w	8009e62 <__retarget_lock_acquire_recursive>
 800af8a:	bf00      	nop
 800af8c:	200005d0 	.word	0x200005d0

0800af90 <__malloc_unlock>:
 800af90:	4801      	ldr	r0, [pc, #4]	; (800af98 <__malloc_unlock+0x8>)
 800af92:	f7fe bf67 	b.w	8009e64 <__retarget_lock_release_recursive>
 800af96:	bf00      	nop
 800af98:	200005d0 	.word	0x200005d0

0800af9c <_read_r>:
 800af9c:	b538      	push	{r3, r4, r5, lr}
 800af9e:	4d07      	ldr	r5, [pc, #28]	; (800afbc <_read_r+0x20>)
 800afa0:	4604      	mov	r4, r0
 800afa2:	4608      	mov	r0, r1
 800afa4:	4611      	mov	r1, r2
 800afa6:	2200      	movs	r2, #0
 800afa8:	602a      	str	r2, [r5, #0]
 800afaa:	461a      	mov	r2, r3
 800afac:	f7f8 fa63 	bl	8003476 <_read>
 800afb0:	1c43      	adds	r3, r0, #1
 800afb2:	d102      	bne.n	800afba <_read_r+0x1e>
 800afb4:	682b      	ldr	r3, [r5, #0]
 800afb6:	b103      	cbz	r3, 800afba <_read_r+0x1e>
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	bd38      	pop	{r3, r4, r5, pc}
 800afbc:	200005dc 	.word	0x200005dc

0800afc0 <__ascii_wctomb>:
 800afc0:	b149      	cbz	r1, 800afd6 <__ascii_wctomb+0x16>
 800afc2:	2aff      	cmp	r2, #255	; 0xff
 800afc4:	bf85      	ittet	hi
 800afc6:	238a      	movhi	r3, #138	; 0x8a
 800afc8:	6003      	strhi	r3, [r0, #0]
 800afca:	700a      	strbls	r2, [r1, #0]
 800afcc:	f04f 30ff 	movhi.w	r0, #4294967295
 800afd0:	bf98      	it	ls
 800afd2:	2001      	movls	r0, #1
 800afd4:	4770      	bx	lr
 800afd6:	4608      	mov	r0, r1
 800afd8:	4770      	bx	lr

0800afda <abort>:
 800afda:	b508      	push	{r3, lr}
 800afdc:	2006      	movs	r0, #6
 800afde:	f000 f84d 	bl	800b07c <raise>
 800afe2:	2001      	movs	r0, #1
 800afe4:	f7f8 fa3d 	bl	8003462 <_exit>

0800afe8 <_fstat_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4d07      	ldr	r5, [pc, #28]	; (800b008 <_fstat_r+0x20>)
 800afec:	2300      	movs	r3, #0
 800afee:	4604      	mov	r4, r0
 800aff0:	4608      	mov	r0, r1
 800aff2:	4611      	mov	r1, r2
 800aff4:	602b      	str	r3, [r5, #0]
 800aff6:	f7f8 fa83 	bl	8003500 <_fstat>
 800affa:	1c43      	adds	r3, r0, #1
 800affc:	d102      	bne.n	800b004 <_fstat_r+0x1c>
 800affe:	682b      	ldr	r3, [r5, #0]
 800b000:	b103      	cbz	r3, 800b004 <_fstat_r+0x1c>
 800b002:	6023      	str	r3, [r4, #0]
 800b004:	bd38      	pop	{r3, r4, r5, pc}
 800b006:	bf00      	nop
 800b008:	200005dc 	.word	0x200005dc

0800b00c <_isatty_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4d06      	ldr	r5, [pc, #24]	; (800b028 <_isatty_r+0x1c>)
 800b010:	2300      	movs	r3, #0
 800b012:	4604      	mov	r4, r0
 800b014:	4608      	mov	r0, r1
 800b016:	602b      	str	r3, [r5, #0]
 800b018:	f7f8 fa82 	bl	8003520 <_isatty>
 800b01c:	1c43      	adds	r3, r0, #1
 800b01e:	d102      	bne.n	800b026 <_isatty_r+0x1a>
 800b020:	682b      	ldr	r3, [r5, #0]
 800b022:	b103      	cbz	r3, 800b026 <_isatty_r+0x1a>
 800b024:	6023      	str	r3, [r4, #0]
 800b026:	bd38      	pop	{r3, r4, r5, pc}
 800b028:	200005dc 	.word	0x200005dc

0800b02c <_raise_r>:
 800b02c:	291f      	cmp	r1, #31
 800b02e:	b538      	push	{r3, r4, r5, lr}
 800b030:	4604      	mov	r4, r0
 800b032:	460d      	mov	r5, r1
 800b034:	d904      	bls.n	800b040 <_raise_r+0x14>
 800b036:	2316      	movs	r3, #22
 800b038:	6003      	str	r3, [r0, #0]
 800b03a:	f04f 30ff 	mov.w	r0, #4294967295
 800b03e:	bd38      	pop	{r3, r4, r5, pc}
 800b040:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b042:	b112      	cbz	r2, 800b04a <_raise_r+0x1e>
 800b044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b048:	b94b      	cbnz	r3, 800b05e <_raise_r+0x32>
 800b04a:	4620      	mov	r0, r4
 800b04c:	f000 f830 	bl	800b0b0 <_getpid_r>
 800b050:	462a      	mov	r2, r5
 800b052:	4601      	mov	r1, r0
 800b054:	4620      	mov	r0, r4
 800b056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b05a:	f000 b817 	b.w	800b08c <_kill_r>
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d00a      	beq.n	800b078 <_raise_r+0x4c>
 800b062:	1c59      	adds	r1, r3, #1
 800b064:	d103      	bne.n	800b06e <_raise_r+0x42>
 800b066:	2316      	movs	r3, #22
 800b068:	6003      	str	r3, [r0, #0]
 800b06a:	2001      	movs	r0, #1
 800b06c:	e7e7      	b.n	800b03e <_raise_r+0x12>
 800b06e:	2400      	movs	r4, #0
 800b070:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b074:	4628      	mov	r0, r5
 800b076:	4798      	blx	r3
 800b078:	2000      	movs	r0, #0
 800b07a:	e7e0      	b.n	800b03e <_raise_r+0x12>

0800b07c <raise>:
 800b07c:	4b02      	ldr	r3, [pc, #8]	; (800b088 <raise+0xc>)
 800b07e:	4601      	mov	r1, r0
 800b080:	6818      	ldr	r0, [r3, #0]
 800b082:	f7ff bfd3 	b.w	800b02c <_raise_r>
 800b086:	bf00      	nop
 800b088:	20000054 	.word	0x20000054

0800b08c <_kill_r>:
 800b08c:	b538      	push	{r3, r4, r5, lr}
 800b08e:	4d07      	ldr	r5, [pc, #28]	; (800b0ac <_kill_r+0x20>)
 800b090:	2300      	movs	r3, #0
 800b092:	4604      	mov	r4, r0
 800b094:	4608      	mov	r0, r1
 800b096:	4611      	mov	r1, r2
 800b098:	602b      	str	r3, [r5, #0]
 800b09a:	f7f8 f9d2 	bl	8003442 <_kill>
 800b09e:	1c43      	adds	r3, r0, #1
 800b0a0:	d102      	bne.n	800b0a8 <_kill_r+0x1c>
 800b0a2:	682b      	ldr	r3, [r5, #0]
 800b0a4:	b103      	cbz	r3, 800b0a8 <_kill_r+0x1c>
 800b0a6:	6023      	str	r3, [r4, #0]
 800b0a8:	bd38      	pop	{r3, r4, r5, pc}
 800b0aa:	bf00      	nop
 800b0ac:	200005dc 	.word	0x200005dc

0800b0b0 <_getpid_r>:
 800b0b0:	f7f8 b9bf 	b.w	8003432 <_getpid>

0800b0b4 <_init>:
 800b0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b6:	bf00      	nop
 800b0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ba:	bc08      	pop	{r3}
 800b0bc:	469e      	mov	lr, r3
 800b0be:	4770      	bx	lr

0800b0c0 <_fini>:
 800b0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c2:	bf00      	nop
 800b0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0c6:	bc08      	pop	{r3}
 800b0c8:	469e      	mov	lr, r3
 800b0ca:	4770      	bx	lr
