
FinalProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009434  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  080095f8  080095f8  000195f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ab4  08009ab4  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  08009ab4  08009ab4  00019ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009abc  08009abc  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009abc  08009abc  00019abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ac0  08009ac0  00019ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08009ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000214  08009cd8  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  08009cd8  00020578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b49e  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f7c  00000000  00000000  0003b6e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  0003e660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001798  00000000  00000000  0003fc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005565  00000000  00000000  000413b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b5a8  00000000  00000000  0004691d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ebdf  00000000  00000000  00061ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00170aa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e00  00000000  00000000  00170af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000217  00000000  00000000  001778f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000214 	.word	0x20000214
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080095dc 	.word	0x080095dc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000218 	.word	0x20000218
 80001fc:	080095dc 	.word	0x080095dc

08000200 <movePlot>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void movePlot(int dXStep, int dYStep){
 8000200:	b508      	push	{r3, lr}
 8000202:	460b      	mov	r3, r1
	plotXStep += dXStep;
 8000204:	4a0d      	ldr	r2, [pc, #52]	; (800023c <movePlot+0x3c>)
 8000206:	6811      	ldr	r1, [r2, #0]
 8000208:	4401      	add	r1, r0
 800020a:	6011      	str	r1, [r2, #0]
	plotYStep += dYStep;
 800020c:	6851      	ldr	r1, [r2, #4]
 800020e:	4419      	add	r1, r3
 8000210:	6051      	str	r1, [r2, #4]
	if(dXStep == 0){
 8000212:	b150      	cbz	r0, 800022a <movePlot+0x2a>
		stepStop(dYStep, 1);
	}else if(dYStep == 0){
 8000214:	b973      	cbnz	r3, 8000234 <movePlot+0x34>
		stepStop(dXStep, 0);
 8000216:	2100      	movs	r1, #0
 8000218:	f001 ff38 	bl	800208c <stepStop>
	}else{
		stepDiag(dXStep, dYStep);
	}
	printf("movePlot: now at (%d, %d)\n\r", plotXStep, plotYStep);
 800021c:	4b07      	ldr	r3, [pc, #28]	; (800023c <movePlot+0x3c>)
 800021e:	685a      	ldr	r2, [r3, #4]
 8000220:	6819      	ldr	r1, [r3, #0]
 8000222:	4807      	ldr	r0, [pc, #28]	; (8000240 <movePlot+0x40>)
 8000224:	f007 f922 	bl	800746c <iprintf>
}
 8000228:	bd08      	pop	{r3, pc}
		stepStop(dYStep, 1);
 800022a:	2101      	movs	r1, #1
 800022c:	4618      	mov	r0, r3
 800022e:	f001 ff2d 	bl	800208c <stepStop>
 8000232:	e7f3      	b.n	800021c <movePlot+0x1c>
		stepDiag(dXStep, dYStep);
 8000234:	4619      	mov	r1, r3
 8000236:	f001 fdad 	bl	8001d94 <stepDiag>
 800023a:	e7ef      	b.n	800021c <movePlot+0x1c>
 800023c:	20000230 	.word	0x20000230
 8000240:	080095f8 	.word	0x080095f8

08000244 <scaleN64Plot>:

//this goes from -128 to +127 on each axis
void scaleN64Plot(signed char xval, signed char yval){
 8000244:	b508      	push	{r3, lr}
	plotXGoalStep = (xval + 128) * (STEP_PER_CM * TRAVEL_X_CM) / 255;
	plotYGoalStep = (yval + 128) * (STEP_PER_CM * TRAVEL_Y_CM) / 255;
 8000246:	f101 0380 	add.w	r3, r1, #128	; 0x80
 800024a:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
 800024e:	fb0c f303 	mul.w	r3, ip, r3
 8000252:	490a      	ldr	r1, [pc, #40]	; (800027c <scaleN64Plot+0x38>)
 8000254:	fb81 e203 	smull	lr, r2, r1, r3
 8000258:	441a      	add	r2, r3
 800025a:	17db      	asrs	r3, r3, #31
	plotXGoalStep = (xval + 128) * (STEP_PER_CM * TRAVEL_X_CM) / 255;
 800025c:	3080      	adds	r0, #128	; 0x80
 800025e:	fb0c f000 	mul.w	r0, ip, r0
 8000262:	fb81 c100 	smull	ip, r1, r1, r0
 8000266:	4401      	add	r1, r0
 8000268:	17c0      	asrs	r0, r0, #31
	printf("N64Plot: going to (%d, %d)\n\r", plotXGoalStep, plotYGoalStep);
 800026a:	ebc3 12e2 	rsb	r2, r3, r2, asr #7
 800026e:	ebc0 11e1 	rsb	r1, r0, r1, asr #7
 8000272:	4803      	ldr	r0, [pc, #12]	; (8000280 <scaleN64Plot+0x3c>)
 8000274:	f007 f8fa 	bl	800746c <iprintf>
}
 8000278:	bd08      	pop	{r3, pc}
 800027a:	bf00      	nop
 800027c:	80808081 	.word	0x80808081
 8000280:	08009614 	.word	0x08009614

08000284 <drawPlotBounds>:
void drawPlotBounds(){
 8000284:	b510      	push	{r4, lr}
	//assumes we are at (0,0);
	movePlot((int)(STEP_PER_CM * TRAVEL_X_CM), 0);
 8000286:	2100      	movs	r1, #0
 8000288:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800028c:	f7ff ffb8 	bl	8000200 <movePlot>
	movePlot(0, (int)(STEP_PER_CM * TRAVEL_Y_CM));
 8000290:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000294:	2000      	movs	r0, #0
 8000296:	f7ff ffb3 	bl	8000200 <movePlot>
	movePlot((int)(-STEP_PER_CM * TRAVEL_X_CM), 0);
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <drawPlotBounds+0x2c>)
 800029c:	2100      	movs	r1, #0
 800029e:	4620      	mov	r0, r4
 80002a0:	f7ff ffae 	bl	8000200 <movePlot>
	movePlot(0, (int)(-STEP_PER_CM * TRAVEL_Y_CM));
 80002a4:	4621      	mov	r1, r4
 80002a6:	2000      	movs	r0, #0
 80002a8:	f7ff ffaa 	bl	8000200 <movePlot>
}
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	bf00      	nop
 80002b0:	fffff830 	.word	0xfffff830

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b500      	push	{lr}
 80002b6:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b8:	2244      	movs	r2, #68	; 0x44
 80002ba:	2100      	movs	r1, #0
 80002bc:	a805      	add	r0, sp, #20
 80002be:	f006 fc63 	bl	8006b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c2:	2000      	movs	r0, #0
 80002c4:	9000      	str	r0, [sp, #0]
 80002c6:	9001      	str	r0, [sp, #4]
 80002c8:	9002      	str	r0, [sp, #8]
 80002ca:	9003      	str	r0, [sp, #12]
 80002cc:	9004      	str	r0, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80002ce:	f003 fa27 	bl	8003720 <HAL_PWREx_ControlVoltageScaling>
 80002d2:	bb48      	cbnz	r0, 8000328 <SystemClock_Config+0x74>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80002d4:	2312      	movs	r3, #18
 80002d6:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002dc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002de:	2340      	movs	r3, #64	; 0x40
 80002e0:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002e2:	2201      	movs	r2, #1
 80002e4:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002e6:	2300      	movs	r3, #0
 80002e8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ea:	2360      	movs	r3, #96	; 0x60
 80002ec:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ee:	2302      	movs	r3, #2
 80002f0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002f2:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002f4:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80002f6:	223c      	movs	r2, #60	; 0x3c
 80002f8:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002fa:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002fc:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002fe:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	a805      	add	r0, sp, #20
 8000302:	f003 fac1 	bl	8003888 <HAL_RCC_OscConfig>
 8000306:	b988      	cbnz	r0, 800032c <SystemClock_Config+0x78>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030c:	2303      	movs	r3, #3
 800030e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000314:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	9304      	str	r3, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000318:	2105      	movs	r1, #5
 800031a:	4668      	mov	r0, sp
 800031c:	f003 feda 	bl	80040d4 <HAL_RCC_ClockConfig>
 8000320:	b930      	cbnz	r0, 8000330 <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
}
 8000322:	b017      	add	sp, #92	; 0x5c
 8000324:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000328:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800032a:	e7fe      	b.n	800032a <SystemClock_Config+0x76>
 800032c:	b672      	cpsid	i
 800032e:	e7fe      	b.n	800032e <SystemClock_Config+0x7a>
 8000330:	b672      	cpsid	i
 8000332:	e7fe      	b.n	8000332 <SystemClock_Config+0x7e>

08000334 <main>:
{
 8000334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000338:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 800033a:	f002 fd3e 	bl	8002dba <HAL_Init>
  SystemClock_Config();
 800033e:	f7ff ffb9 	bl	80002b4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	2400      	movs	r4, #0
 8000344:	9419      	str	r4, [sp, #100]	; 0x64
 8000346:	941a      	str	r4, [sp, #104]	; 0x68
 8000348:	941b      	str	r4, [sp, #108]	; 0x6c
 800034a:	941c      	str	r4, [sp, #112]	; 0x70
 800034c:	941d      	str	r4, [sp, #116]	; 0x74
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800034e:	4bb1      	ldr	r3, [pc, #708]	; (8000614 <main+0x2e0>)
 8000350:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000352:	f042 0210 	orr.w	r2, r2, #16
 8000356:	64da      	str	r2, [r3, #76]	; 0x4c
 8000358:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800035a:	f002 0210 	and.w	r2, r2, #16
 800035e:	920e      	str	r2, [sp, #56]	; 0x38
 8000360:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000362:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000364:	f042 0204 	orr.w	r2, r2, #4
 8000368:	64da      	str	r2, [r3, #76]	; 0x4c
 800036a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800036c:	f002 0204 	and.w	r2, r2, #4
 8000370:	920f      	str	r2, [sp, #60]	; 0x3c
 8000372:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000374:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000376:	f042 0220 	orr.w	r2, r2, #32
 800037a:	64da      	str	r2, [r3, #76]	; 0x4c
 800037c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800037e:	f002 0220 	and.w	r2, r2, #32
 8000382:	9210      	str	r2, [sp, #64]	; 0x40
 8000384:	9a10      	ldr	r2, [sp, #64]	; 0x40
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000388:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800038c:	64da      	str	r2, [r3, #76]	; 0x4c
 800038e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000390:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000394:	9211      	str	r2, [sp, #68]	; 0x44
 8000396:	9a11      	ldr	r2, [sp, #68]	; 0x44
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000398:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800039a:	f042 0201 	orr.w	r2, r2, #1
 800039e:	64da      	str	r2, [r3, #76]	; 0x4c
 80003a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003a2:	f002 0201 	and.w	r2, r2, #1
 80003a6:	9212      	str	r2, [sp, #72]	; 0x48
 80003a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80003aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80003b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80003b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003b4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80003b8:	9213      	str	r2, [sp, #76]	; 0x4c
 80003ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003be:	f042 0202 	orr.w	r2, r2, #2
 80003c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80003c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003c6:	f002 0202 	and.w	r2, r2, #2
 80003ca:	9214      	str	r2, [sp, #80]	; 0x50
 80003cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003d0:	f042 0208 	orr.w	r2, r2, #8
 80003d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80003d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d8:	f003 0308 	and.w	r3, r3, #8
 80003dc:	9315      	str	r3, [sp, #84]	; 0x54
 80003de:	9b15      	ldr	r3, [sp, #84]	; 0x54
  HAL_PWREx_EnableVddIO2();
 80003e0:	f003 fa42 	bl	8003868 <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_RESET);
 80003e4:	4622      	mov	r2, r4
 80003e6:	f44f 519c 	mov.w	r1, #4992	; 0x1380
 80003ea:	488b      	ldr	r0, [pc, #556]	; (8000618 <main+0x2e4>)
 80003ec:	f003 f822 	bl	8003434 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 80003f0:	4622      	mov	r2, r4
 80003f2:	2102      	movs	r1, #2
 80003f4:	4889      	ldr	r0, [pc, #548]	; (800061c <main+0x2e8>)
 80003f6:	f003 f81d 	bl	8003434 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80003fa:	f8df a224 	ldr.w	sl, [pc, #548]	; 8000620 <main+0x2ec>
 80003fe:	4622      	mov	r2, r4
 8000400:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 8000404:	4650      	mov	r0, sl
 8000406:	f003 f815 	bl	8003434 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13, GPIO_PIN_RESET);
 800040a:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8000624 <main+0x2f0>
 800040e:	4622      	mov	r2, r4
 8000410:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000414:	4640      	mov	r0, r8
 8000416:	f003 f80d 	bl	8003434 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800041a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8000628 <main+0x2f4>
 800041e:	4622      	mov	r2, r4
 8000420:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000424:	4648      	mov	r0, r9
 8000426:	f003 f805 	bl	8003434 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800042a:	f8df b200 	ldr.w	fp, [pc, #512]	; 800062c <main+0x2f8>
 800042e:	4622      	mov	r2, r4
 8000430:	2140      	movs	r1, #64	; 0x40
 8000432:	4658      	mov	r0, fp
 8000434:	f002 fffe 	bl	8003434 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000438:	230c      	movs	r3, #12
 800043a:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043c:	2502      	movs	r5, #2
 800043e:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000442:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000444:	230d      	movs	r3, #13
 8000446:	931d      	str	r3, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000448:	a919      	add	r1, sp, #100	; 0x64
 800044a:	4650      	mov	r0, sl
 800044c:	f002 fe60 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000450:	2307      	movs	r3, #7
 8000452:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000454:	2312      	movs	r3, #18
 8000456:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000458:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800045a:	2603      	movs	r6, #3
 800045c:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800045e:	2304      	movs	r3, #4
 8000460:	931d      	str	r3, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000462:	a919      	add	r1, sp, #100	; 0x64
 8000464:	486c      	ldr	r0, [pc, #432]	; (8000618 <main+0x2e4>)
 8000466:	f002 fe53 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
 800046a:	f44f 539c 	mov.w	r3, #4992	; 0x1380
 800046e:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000470:	2701      	movs	r7, #1
 8000472:	971a      	str	r7, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000476:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000478:	a919      	add	r1, sp, #100	; 0x64
 800047a:	4867      	ldr	r0, [pc, #412]	; (8000618 <main+0x2e4>)
 800047c:	f002 fe48 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000480:	233f      	movs	r3, #63	; 0x3f
 8000482:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000484:	230b      	movs	r3, #11
 8000486:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048a:	a919      	add	r1, sp, #100	; 0x64
 800048c:	4658      	mov	r0, fp
 800048e:	f002 fe3f 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000492:	9519      	str	r5, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000494:	971a      	str	r7, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000498:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800049a:	a919      	add	r1, sp, #100	; 0x64
 800049c:	485f      	ldr	r0, [pc, #380]	; (800061c <main+0x2e8>)
 800049e:	f002 fe37 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80004a2:	f44f 531e 	mov.w	r3, #10112	; 0x2780
 80004a6:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a8:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80004ae:	971d      	str	r7, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004b0:	a919      	add	r1, sp, #100	; 0x64
 80004b2:	4650      	mov	r0, sl
 80004b4:	f002 fe2c 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80004b8:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80004bc:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004be:	971a      	str	r7, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c2:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004c4:	a919      	add	r1, sp, #100	; 0x64
 80004c6:	4650      	mov	r0, sl
 80004c8:	f002 fe22 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13;
 80004cc:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80004d0:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	971a      	str	r7, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d8:	a919      	add	r1, sp, #100	; 0x64
 80004da:	4640      	mov	r0, r8
 80004dc:	f002 fe18 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004e4:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e6:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ea:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80004ec:	230d      	movs	r3, #13
 80004ee:	931d      	str	r3, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f0:	a919      	add	r1, sp, #100	; 0x64
 80004f2:	4640      	mov	r0, r8
 80004f4:	f002 fe0c 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80004f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004fc:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000502:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000506:	a919      	add	r1, sp, #100	; 0x64
 8000508:	4640      	mov	r0, r8
 800050a:	f002 fe01 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800050e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000512:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000514:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000518:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800051a:	2307      	movs	r3, #7
 800051c:	931d      	str	r3, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800051e:	a919      	add	r1, sp, #100	; 0x64
 8000520:	4648      	mov	r0, r9
 8000522:	f002 fdf5 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000526:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800052a:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	971a      	str	r7, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000532:	a919      	add	r1, sp, #100	; 0x64
 8000534:	4648      	mov	r0, r9
 8000536:	f002 fdeb 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800053a:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800053e:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000542:	2311      	movs	r3, #17
 8000544:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000546:	971b      	str	r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000548:	971c      	str	r7, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054a:	a919      	add	r1, sp, #100	; 0x64
 800054c:	4658      	mov	r0, fp
 800054e:	f002 fddf 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000552:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000556:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000558:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800055c:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800055e:	230c      	movs	r3, #12
 8000560:	931d      	str	r3, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000562:	a919      	add	r1, sp, #100	; 0x64
 8000564:	4658      	mov	r0, fp
 8000566:	f002 fdd3 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800056a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800056e:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000570:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000574:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000576:	230a      	movs	r3, #10
 8000578:	931d      	str	r3, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057a:	a919      	add	r1, sp, #100	; 0x64
 800057c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000580:	f002 fdc6 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000584:	f44f 7b00 	mov.w	fp, #512	; 0x200
 8000588:	f8cd b064 	str.w	fp, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058c:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000590:	a919      	add	r1, sp, #100	; 0x64
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f002 fdbb 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800059a:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059c:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a0:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005a2:	2309      	movs	r3, #9
 80005a4:	931d      	str	r3, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005a6:	a919      	add	r1, sp, #100	; 0x64
 80005a8:	4648      	mov	r0, r9
 80005aa:	f002 fdb1 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005ae:	2304      	movs	r3, #4
 80005b0:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b6:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80005b8:	230c      	movs	r3, #12
 80005ba:	931d      	str	r3, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005bc:	a919      	add	r1, sp, #100	; 0x64
 80005be:	4648      	mov	r0, r9
 80005c0:	f002 fda6 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80005c4:	2378      	movs	r3, #120	; 0x78
 80005c6:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c8:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005cc:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005ce:	2307      	movs	r3, #7
 80005d0:	931d      	str	r3, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d2:	a919      	add	r1, sp, #100	; 0x64
 80005d4:	4648      	mov	r0, r9
 80005d6:	f002 fd9b 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005da:	2330      	movs	r3, #48	; 0x30
 80005dc:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005de:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e2:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80005e4:	2306      	movs	r3, #6
 80005e6:	931d      	str	r3, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e8:	a919      	add	r1, sp, #100	; 0x64
 80005ea:	4640      	mov	r0, r8
 80005ec:	f002 fd90 	bl	8003110 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005f0:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f4:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f8:	a919      	add	r1, sp, #100	; 0x64
 80005fa:	4640      	mov	r0, r8
 80005fc:	f002 fd88 	bl	8003110 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000600:	4622      	mov	r2, r4
 8000602:	4621      	mov	r1, r4
 8000604:	2028      	movs	r0, #40	; 0x28
 8000606:	f002 fd4c 	bl	80030a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800060a:	2028      	movs	r0, #40	; 0x28
 800060c:	f002 fd65 	bl	80030da <HAL_NVIC_EnableIRQ>
 8000610:	e00e      	b.n	8000630 <main+0x2fc>
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000
 8000618:	48001400 	.word	0x48001400
 800061c:	48001800 	.word	0x48001800
 8000620:	48001000 	.word	0x48001000
 8000624:	48000400 	.word	0x48000400
 8000628:	48000c00 	.word	0x48000c00
 800062c:	48000800 	.word	0x48000800
  hspi1.Instance = SPI1;
 8000630:	48b6      	ldr	r0, [pc, #728]	; (800090c <main+0x5d8>)
 8000632:	4bb7      	ldr	r3, [pc, #732]	; (8000910 <main+0x5dc>)
 8000634:	6083      	str	r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000636:	f44f 7382 	mov.w	r3, #260	; 0x104
 800063a:	60c3      	str	r3, [r0, #12]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800063c:	6104      	str	r4, [r0, #16]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800063e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000642:	6143      	str	r3, [r0, #20]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000644:	6184      	str	r4, [r0, #24]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000646:	61c4      	str	r4, [r0, #28]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000648:	f8c0 b020 	str.w	fp, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800064c:	2308      	movs	r3, #8
 800064e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000650:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000652:	62c4      	str	r4, [r0, #44]	; 0x2c
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000654:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.CRCPolynomial = 7;
 8000656:	2207      	movs	r2, #7
 8000658:	6342      	str	r2, [r0, #52]	; 0x34
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800065a:	6384      	str	r4, [r0, #56]	; 0x38
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800065c:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800065e:	4418      	add	r0, r3
 8000660:	f004 fd02 	bl	8005068 <HAL_SPI_Init>
 8000664:	2800      	cmp	r0, #0
 8000666:	f040 8197 	bne.w	8000998 <main+0x664>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800066a:	2300      	movs	r3, #0
 800066c:	9319      	str	r3, [sp, #100]	; 0x64
 800066e:	931a      	str	r3, [sp, #104]	; 0x68
 8000670:	931b      	str	r3, [sp, #108]	; 0x6c
 8000672:	931c      	str	r3, [sp, #112]	; 0x70
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000674:	9316      	str	r3, [sp, #88]	; 0x58
 8000676:	9317      	str	r3, [sp, #92]	; 0x5c
 8000678:	9318      	str	r3, [sp, #96]	; 0x60
  htim4.Instance = TIM4;
 800067a:	48a4      	ldr	r0, [pc, #656]	; (800090c <main+0x5d8>)
 800067c:	4aa5      	ldr	r2, [pc, #660]	; (8000914 <main+0x5e0>)
 800067e:	66c2      	str	r2, [r0, #108]	; 0x6c
  htim4.Init.Prescaler = 19;
 8000680:	2213      	movs	r2, #19
 8000682:	6702      	str	r2, [r0, #112]	; 0x70
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	6743      	str	r3, [r0, #116]	; 0x74
  htim4.Init.Period = 0xffff-1;
 8000686:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800068a:	6782      	str	r2, [r0, #120]	; 0x78
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068c:	67c3      	str	r3, [r0, #124]	; 0x7c
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000692:	306c      	adds	r0, #108	; 0x6c
 8000694:	f005 f85e 	bl	8005754 <HAL_TIM_Base_Init>
 8000698:	2800      	cmp	r0, #0
 800069a:	f040 817f 	bne.w	800099c <main+0x668>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80006a4:	a919      	add	r1, sp, #100	; 0x64
 80006a6:	489c      	ldr	r0, [pc, #624]	; (8000918 <main+0x5e4>)
 80006a8:	f005 f914 	bl	80058d4 <HAL_TIM_ConfigClockSource>
 80006ac:	2800      	cmp	r0, #0
 80006ae:	f040 8177 	bne.w	80009a0 <main+0x66c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b2:	2300      	movs	r3, #0
 80006b4:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b6:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006b8:	a916      	add	r1, sp, #88	; 0x58
 80006ba:	4897      	ldr	r0, [pc, #604]	; (8000918 <main+0x5e4>)
 80006bc:	f005 fb08 	bl	8005cd0 <HAL_TIMEx_MasterConfigSynchronization>
 80006c0:	2800      	cmp	r0, #0
 80006c2:	f040 816f 	bne.w	80009a4 <main+0x670>
  hlpuart1.Instance = LPUART1;
 80006c6:	4891      	ldr	r0, [pc, #580]	; (800090c <main+0x5d8>)
 80006c8:	4b94      	ldr	r3, [pc, #592]	; (800091c <main+0x5e8>)
 80006ca:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
  hlpuart1.Init.BaudRate = 9600;
 80006ce:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80006d2:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006dc:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006e0:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006e4:	220c      	movs	r2, #12
 80006e6:	f8c0 20cc 	str.w	r2, [r0, #204]	; 0xcc
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006f2:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f6:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80006fa:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006fe:	30b8      	adds	r0, #184	; 0xb8
 8000700:	f005 fb6e 	bl	8005de0 <HAL_UART_Init>
 8000704:	2800      	cmp	r0, #0
 8000706:	f040 814f 	bne.w	80009a8 <main+0x674>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800070a:	2100      	movs	r1, #0
 800070c:	4884      	ldr	r0, [pc, #528]	; (8000920 <main+0x5ec>)
 800070e:	f006 f939 	bl	8006984 <HAL_UARTEx_SetTxFifoThreshold>
 8000712:	2800      	cmp	r0, #0
 8000714:	f040 814a 	bne.w	80009ac <main+0x678>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000718:	2100      	movs	r1, #0
 800071a:	4881      	ldr	r0, [pc, #516]	; (8000920 <main+0x5ec>)
 800071c:	f006 f970 	bl	8006a00 <HAL_UARTEx_SetRxFifoThreshold>
 8000720:	2800      	cmp	r0, #0
 8000722:	f040 8145 	bne.w	80009b0 <main+0x67c>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000726:	487e      	ldr	r0, [pc, #504]	; (8000920 <main+0x5ec>)
 8000728:	f006 f8f3 	bl	8006912 <HAL_UARTEx_DisableFifoMode>
 800072c:	2800      	cmp	r0, #0
 800072e:	f040 8141 	bne.w	80009b4 <main+0x680>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000732:	2300      	movs	r3, #0
 8000734:	9319      	str	r3, [sp, #100]	; 0x64
 8000736:	931a      	str	r3, [sp, #104]	; 0x68
 8000738:	931b      	str	r3, [sp, #108]	; 0x6c
 800073a:	931c      	str	r3, [sp, #112]	; 0x70
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	9316      	str	r3, [sp, #88]	; 0x58
 800073e:	9317      	str	r3, [sp, #92]	; 0x5c
 8000740:	9318      	str	r3, [sp, #96]	; 0x60
  htim2.Instance = TIM2;
 8000742:	4872      	ldr	r0, [pc, #456]	; (800090c <main+0x5d8>)
 8000744:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000748:	f8c0 2148 	str.w	r2, [r0, #328]	; 0x148
  htim2.Init.Prescaler = 59999;
 800074c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000750:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000754:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
  htim2.Init.Period = 0xffff-1;
 8000758:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800075c:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000764:	f8c0 2158 	str.w	r2, [r0, #344]	; 0x158
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000768:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800076c:	f500 70a4 	add.w	r0, r0, #328	; 0x148
 8000770:	f004 fff0 	bl	8005754 <HAL_TIM_Base_Init>
 8000774:	2800      	cmp	r0, #0
 8000776:	f040 811f 	bne.w	80009b8 <main+0x684>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077e:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000780:	a919      	add	r1, sp, #100	; 0x64
 8000782:	4868      	ldr	r0, [pc, #416]	; (8000924 <main+0x5f0>)
 8000784:	f005 f8a6 	bl	80058d4 <HAL_TIM_ConfigClockSource>
 8000788:	2800      	cmp	r0, #0
 800078a:	f040 8117 	bne.w	80009bc <main+0x688>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078e:	2300      	movs	r3, #0
 8000790:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000792:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000794:	a916      	add	r1, sp, #88	; 0x58
 8000796:	4863      	ldr	r0, [pc, #396]	; (8000924 <main+0x5f0>)
 8000798:	f005 fa9a 	bl	8005cd0 <HAL_TIMEx_MasterConfigSynchronization>
 800079c:	2800      	cmp	r0, #0
 800079e:	f040 810f 	bne.w	80009c0 <main+0x68c>
  hi2c1.Instance = I2C1;
 80007a2:	485a      	ldr	r0, [pc, #360]	; (800090c <main+0x5d8>)
 80007a4:	4b60      	ldr	r3, [pc, #384]	; (8000928 <main+0x5f4>)
 80007a6:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
  hi2c1.Init.Timing = 0x307075B1;
 80007aa:	f1a3 6378 	sub.w	r3, r3, #260046848	; 0xf800000
 80007ae:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 80007b2:	f6a3 634f 	subw	r3, r3, #3663	; 0xe4f
 80007b6:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
  hi2c1.Init.OwnAddress1 = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	f8c0 319c 	str.w	r3, [r0, #412]	; 0x19c
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c0:	2201      	movs	r2, #1
 80007c2:	f8c0 21a0 	str.w	r2, [r0, #416]	; 0x1a0
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c6:	f8c0 31a4 	str.w	r3, [r0, #420]	; 0x1a4
  hi2c1.Init.OwnAddress2 = 0;
 80007ca:	f8c0 31a8 	str.w	r3, [r0, #424]	; 0x1a8
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ce:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d2:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d6:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007da:	f500 70ca 	add.w	r0, r0, #404	; 0x194
 80007de:	f002 fe59 	bl	8003494 <HAL_I2C_Init>
 80007e2:	2800      	cmp	r0, #0
 80007e4:	f040 80ee 	bne.w	80009c4 <main+0x690>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e8:	2100      	movs	r1, #0
 80007ea:	4850      	ldr	r0, [pc, #320]	; (800092c <main+0x5f8>)
 80007ec:	f002 fee1 	bl	80035b2 <HAL_I2CEx_ConfigAnalogFilter>
 80007f0:	2800      	cmp	r0, #0
 80007f2:	f040 80e9 	bne.w	80009c8 <main+0x694>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007f6:	2100      	movs	r1, #0
 80007f8:	484c      	ldr	r0, [pc, #304]	; (800092c <main+0x5f8>)
 80007fa:	f002 ff25 	bl	8003648 <HAL_I2CEx_ConfigDigitalFilter>
 80007fe:	2800      	cmp	r0, #0
 8000800:	f040 80e4 	bne.w	80009cc <main+0x698>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000804:	2300      	movs	r3, #0
 8000806:	9319      	str	r3, [sp, #100]	; 0x64
 8000808:	931a      	str	r3, [sp, #104]	; 0x68
 800080a:	931b      	str	r3, [sp, #108]	; 0x6c
 800080c:	931c      	str	r3, [sp, #112]	; 0x70
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080e:	9316      	str	r3, [sp, #88]	; 0x58
 8000810:	9317      	str	r3, [sp, #92]	; 0x5c
 8000812:	9318      	str	r3, [sp, #96]	; 0x60
  htim5.Instance = TIM5;
 8000814:	483d      	ldr	r0, [pc, #244]	; (800090c <main+0x5d8>)
 8000816:	4a46      	ldr	r2, [pc, #280]	; (8000930 <main+0x5fc>)
 8000818:	f8c0 21e0 	str.w	r2, [r0, #480]	; 0x1e0
  htim5.Init.Prescaler = 119;
 800081c:	2277      	movs	r2, #119	; 0x77
 800081e:	f8c0 21e4 	str.w	r2, [r0, #484]	; 0x1e4
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000822:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
  htim5.Init.Period = 4294967295;
 8000826:	f04f 32ff 	mov.w	r2, #4294967295
 800082a:	f8c0 21ec 	str.w	r2, [r0, #492]	; 0x1ec
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082e:	f8c0 31f0 	str.w	r3, [r0, #496]	; 0x1f0
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000832:	f8c0 31f8 	str.w	r3, [r0, #504]	; 0x1f8
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000836:	f500 70f0 	add.w	r0, r0, #480	; 0x1e0
 800083a:	f004 ff8b 	bl	8005754 <HAL_TIM_Base_Init>
 800083e:	2800      	cmp	r0, #0
 8000840:	f040 80c6 	bne.w	80009d0 <main+0x69c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000848:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800084a:	a919      	add	r1, sp, #100	; 0x64
 800084c:	4839      	ldr	r0, [pc, #228]	; (8000934 <main+0x600>)
 800084e:	f005 f841 	bl	80058d4 <HAL_TIM_ConfigClockSource>
 8000852:	2800      	cmp	r0, #0
 8000854:	f040 80be 	bne.w	80009d4 <main+0x6a0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085c:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800085e:	a916      	add	r1, sp, #88	; 0x58
 8000860:	4834      	ldr	r0, [pc, #208]	; (8000934 <main+0x600>)
 8000862:	f005 fa35 	bl	8005cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000866:	2800      	cmp	r0, #0
 8000868:	f040 80b6 	bne.w	80009d8 <main+0x6a4>
  step_init(&htim2, 1, A0_GPIO, A0_PIN, A1_GPIO, A1_PIN, A2_GPIO, A2_PIN, A3_GPIO, A3_PIN, B0_GPIO, B0_PIN, B1_GPIO, B1_PIN, B2_GPIO, B2_PIN, B3_GPIO, B3_PIN);
 800086c:	4c27      	ldr	r4, [pc, #156]	; (800090c <main+0x5d8>)
 800086e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000872:	930d      	str	r3, [sp, #52]	; 0x34
 8000874:	4b30      	ldr	r3, [pc, #192]	; (8000938 <main+0x604>)
 8000876:	930c      	str	r3, [sp, #48]	; 0x30
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	920b      	str	r2, [sp, #44]	; 0x2c
 800087c:	930a      	str	r3, [sp, #40]	; 0x28
 800087e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000882:	9209      	str	r2, [sp, #36]	; 0x24
 8000884:	9308      	str	r3, [sp, #32]
 8000886:	2302      	movs	r3, #2
 8000888:	9307      	str	r3, [sp, #28]
 800088a:	4b2c      	ldr	r3, [pc, #176]	; (800093c <main+0x608>)
 800088c:	9306      	str	r3, [sp, #24]
 800088e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000892:	9305      	str	r3, [sp, #20]
 8000894:	f103 4390 	add.w	r3, r3, #1207959552	; 0x48000000
 8000898:	9304      	str	r3, [sp, #16]
 800089a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800089e:	9203      	str	r2, [sp, #12]
 80008a0:	9302      	str	r3, [sp, #8]
 80008a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008a6:	9201      	str	r2, [sp, #4]
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ae:	4a24      	ldr	r2, [pc, #144]	; (8000940 <main+0x60c>)
 80008b0:	2101      	movs	r1, #1
 80008b2:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 80008b6:	f001 f97b 	bl	8001bb0 <step_init>
  setSpeed(200); //yes 300, not above incl. 325
 80008ba:	20c8      	movs	r0, #200	; 0xc8
 80008bc:	f001 f9e2 	bl	8001c84 <setSpeed>
  N64_init(&htim4, &htim5, n64_GPIO, n64_PIN, n64_DEBUG_GPIO, n64_DEBUG_PIN, n64_INT_GPIO, n64_INT_PIN);
 80008c0:	4a20      	ldr	r2, [pc, #128]	; (8000944 <main+0x610>)
 80008c2:	8913      	ldrh	r3, [r2, #8]
 80008c4:	9303      	str	r3, [sp, #12]
 80008c6:	68d3      	ldr	r3, [r2, #12]
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	8a13      	ldrh	r3, [r2, #16]
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	6953      	ldr	r3, [r2, #20]
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	8813      	ldrh	r3, [r2, #0]
 80008d4:	6852      	ldr	r2, [r2, #4]
 80008d6:	f504 71f0 	add.w	r1, r4, #480	; 0x1e0
 80008da:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80008de:	f001 f929 	bl	8001b34 <N64_init>
  printf("Initing...\n\r");
 80008e2:	4819      	ldr	r0, [pc, #100]	; (8000948 <main+0x614>)
 80008e4:	f006 fdc2 	bl	800746c <iprintf>
  HAL_Delay(200);
 80008e8:	20c8      	movs	r0, #200	; 0xc8
 80008ea:	f002 fadb 	bl	8002ea4 <HAL_Delay>
  drawPlotBounds();
 80008ee:	f7ff fcc9 	bl	8000284 <drawPlotBounds>
  movePlot((TRAVEL_X_CM * STEP_PER_CM / 2),(TRAVEL_Y_CM * STEP_PER_CM / 2));
 80008f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008f6:	4608      	mov	r0, r1
 80008f8:	f7ff fc82 	bl	8000200 <movePlot>
  printf("Starting...\n\r");
 80008fc:	4813      	ldr	r0, [pc, #76]	; (800094c <main+0x618>)
 80008fe:	f006 fdb5 	bl	800746c <iprintf>
	  printf("N64 read X: %d,Y: %d\n\r", xval, yval);
 8000902:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8000950 <main+0x61c>
	  LCD_rect(XCenter - rectRadius, YCenter - rectRadius, XCenter + rectRadius, YCenter + rectRadius, HX8357_BLACK);
 8000906:	2700      	movs	r7, #0
	  HAL_Delay(50);
 8000908:	2632      	movs	r6, #50	; 0x32
 800090a:	e023      	b.n	8000954 <main+0x620>
 800090c:	20000230 	.word	0x20000230
 8000910:	40013000 	.word	0x40013000
 8000914:	40000800 	.word	0x40000800
 8000918:	2000029c 	.word	0x2000029c
 800091c:	40008000 	.word	0x40008000
 8000920:	200002e8 	.word	0x200002e8
 8000924:	20000378 	.word	0x20000378
 8000928:	40005400 	.word	0x40005400
 800092c:	200003c4 	.word	0x200003c4
 8000930:	40000c00 	.word	0x40000c00
 8000934:	20000410 	.word	0x20000410
 8000938:	48001400 	.word	0x48001400
 800093c:	48001800 	.word	0x48001800
 8000940:	48000400 	.word	0x48000400
 8000944:	20000000 	.word	0x20000000
 8000948:	08009634 	.word	0x08009634
 800094c:	08009644 	.word	0x08009644
 8000950:	08009654 	.word	0x08009654
	  vals = intRead(); // intRead();
 8000954:	f001 f850 	bl	80019f8 <intRead>
	  signed char xval = (vals >> 8) & 0xff; //both were signed
 8000958:	f340 2507 	sbfx	r5, r0, #8, #8
	  signed char yval = vals & 0xff;
 800095c:	b244      	sxtb	r4, r0
	  printf("N64 read X: %d,Y: %d\n\r", xval, yval);
 800095e:	4622      	mov	r2, r4
 8000960:	4629      	mov	r1, r5
 8000962:	4640      	mov	r0, r8
 8000964:	f006 fd82 	bl	800746c <iprintf>
	  uint16_t XCenter = xval + (HX8357_TFTWIDTH/2);
 8000968:	b2a8      	uxth	r0, r5
	  uint16_t YCenter = -yval + (HX8357_TFTHEIGHT/2);
 800096a:	b2a1      	uxth	r1, r4
	  LCD_rect(XCenter - rectRadius, YCenter - rectRadius, XCenter + rectRadius, YCenter + rectRadius, HX8357_BLACK);
 800096c:	f1c1 03f2 	rsb	r3, r1, #242	; 0xf2
 8000970:	f100 02a2 	add.w	r2, r0, #162	; 0xa2
 8000974:	f1c1 01ee 	rsb	r1, r1, #238	; 0xee
 8000978:	309e      	adds	r0, #158	; 0x9e
 800097a:	9700      	str	r7, [sp, #0]
 800097c:	b29b      	uxth	r3, r3
 800097e:	b292      	uxth	r2, r2
 8000980:	b289      	uxth	r1, r1
 8000982:	b280      	uxth	r0, r0
 8000984:	f000 ff94 	bl	80018b0 <LCD_rect>
	  scaleN64Plot(xval, yval);
 8000988:	4621      	mov	r1, r4
 800098a:	4628      	mov	r0, r5
 800098c:	f7ff fc5a 	bl	8000244 <scaleN64Plot>
	  HAL_Delay(50);
 8000990:	4630      	mov	r0, r6
 8000992:	f002 fa87 	bl	8002ea4 <HAL_Delay>
  while (1)
 8000996:	e7dd      	b.n	8000954 <main+0x620>
 8000998:	b672      	cpsid	i
  while (1)
 800099a:	e7fe      	b.n	800099a <main+0x666>
 800099c:	b672      	cpsid	i
 800099e:	e7fe      	b.n	800099e <main+0x66a>
 80009a0:	b672      	cpsid	i
 80009a2:	e7fe      	b.n	80009a2 <main+0x66e>
 80009a4:	b672      	cpsid	i
 80009a6:	e7fe      	b.n	80009a6 <main+0x672>
 80009a8:	b672      	cpsid	i
 80009aa:	e7fe      	b.n	80009aa <main+0x676>
 80009ac:	b672      	cpsid	i
 80009ae:	e7fe      	b.n	80009ae <main+0x67a>
 80009b0:	b672      	cpsid	i
 80009b2:	e7fe      	b.n	80009b2 <main+0x67e>
 80009b4:	b672      	cpsid	i
 80009b6:	e7fe      	b.n	80009b6 <main+0x682>
 80009b8:	b672      	cpsid	i
 80009ba:	e7fe      	b.n	80009ba <main+0x686>
 80009bc:	b672      	cpsid	i
 80009be:	e7fe      	b.n	80009be <main+0x68a>
 80009c0:	b672      	cpsid	i
 80009c2:	e7fe      	b.n	80009c2 <main+0x68e>
 80009c4:	b672      	cpsid	i
 80009c6:	e7fe      	b.n	80009c6 <main+0x692>
 80009c8:	b672      	cpsid	i
 80009ca:	e7fe      	b.n	80009ca <main+0x696>
 80009cc:	b672      	cpsid	i
 80009ce:	e7fe      	b.n	80009ce <main+0x69a>
 80009d0:	b672      	cpsid	i
 80009d2:	e7fe      	b.n	80009d2 <main+0x69e>
 80009d4:	b672      	cpsid	i
 80009d6:	e7fe      	b.n	80009d6 <main+0x6a2>
 80009d8:	b672      	cpsid	i
 80009da:	e7fe      	b.n	80009da <main+0x6a6>

080009dc <__io_putchar>:
{
 80009dc:	b500      	push	{lr}
 80009de:	b083      	sub	sp, #12
 80009e0:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80009e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e6:	2201      	movs	r2, #1
 80009e8:	a901      	add	r1, sp, #4
 80009ea:	4803      	ldr	r0, [pc, #12]	; (80009f8 <__io_putchar+0x1c>)
 80009ec:	f005 fa48 	bl	8005e80 <HAL_UART_Transmit>
}
 80009f0:	9801      	ldr	r0, [sp, #4]
 80009f2:	b003      	add	sp, #12
 80009f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80009f8:	200002e8 	.word	0x200002e8

080009fc <Error_Handler>:
 80009fc:	b672      	cpsid	i
  while (1)
 80009fe:	e7fe      	b.n	80009fe <Error_Handler+0x2>

08000a00 <strlen>:
 8000a00:	4603      	mov	r3, r0
 8000a02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a06:	2a00      	cmp	r2, #0
 8000a08:	d1fb      	bne.n	8000a02 <strlen+0x2>
 8000a0a:	1a18      	subs	r0, r3, r0
 8000a0c:	3801      	subs	r0, #1
 8000a0e:	4770      	bx	lr

08000a10 <memchr>:
 8000a10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000a14:	2a10      	cmp	r2, #16
 8000a16:	db2b      	blt.n	8000a70 <memchr+0x60>
 8000a18:	f010 0f07 	tst.w	r0, #7
 8000a1c:	d008      	beq.n	8000a30 <memchr+0x20>
 8000a1e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000a22:	3a01      	subs	r2, #1
 8000a24:	428b      	cmp	r3, r1
 8000a26:	d02d      	beq.n	8000a84 <memchr+0x74>
 8000a28:	f010 0f07 	tst.w	r0, #7
 8000a2c:	b342      	cbz	r2, 8000a80 <memchr+0x70>
 8000a2e:	d1f6      	bne.n	8000a1e <memchr+0xe>
 8000a30:	b4f0      	push	{r4, r5, r6, r7}
 8000a32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000a36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000a3a:	f022 0407 	bic.w	r4, r2, #7
 8000a3e:	f07f 0700 	mvns.w	r7, #0
 8000a42:	2300      	movs	r3, #0
 8000a44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000a48:	3c08      	subs	r4, #8
 8000a4a:	ea85 0501 	eor.w	r5, r5, r1
 8000a4e:	ea86 0601 	eor.w	r6, r6, r1
 8000a52:	fa85 f547 	uadd8	r5, r5, r7
 8000a56:	faa3 f587 	sel	r5, r3, r7
 8000a5a:	fa86 f647 	uadd8	r6, r6, r7
 8000a5e:	faa5 f687 	sel	r6, r5, r7
 8000a62:	b98e      	cbnz	r6, 8000a88 <memchr+0x78>
 8000a64:	d1ee      	bne.n	8000a44 <memchr+0x34>
 8000a66:	bcf0      	pop	{r4, r5, r6, r7}
 8000a68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000a6c:	f002 0207 	and.w	r2, r2, #7
 8000a70:	b132      	cbz	r2, 8000a80 <memchr+0x70>
 8000a72:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000a76:	3a01      	subs	r2, #1
 8000a78:	ea83 0301 	eor.w	r3, r3, r1
 8000a7c:	b113      	cbz	r3, 8000a84 <memchr+0x74>
 8000a7e:	d1f8      	bne.n	8000a72 <memchr+0x62>
 8000a80:	2000      	movs	r0, #0
 8000a82:	4770      	bx	lr
 8000a84:	3801      	subs	r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	2d00      	cmp	r5, #0
 8000a8a:	bf06      	itte	eq
 8000a8c:	4635      	moveq	r5, r6
 8000a8e:	3803      	subeq	r0, #3
 8000a90:	3807      	subne	r0, #7
 8000a92:	f015 0f01 	tst.w	r5, #1
 8000a96:	d107      	bne.n	8000aa8 <memchr+0x98>
 8000a98:	3001      	adds	r0, #1
 8000a9a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000a9e:	bf02      	ittt	eq
 8000aa0:	3001      	addeq	r0, #1
 8000aa2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000aa6:	3001      	addeq	r0, #1
 8000aa8:	bcf0      	pop	{r4, r5, r6, r7}
 8000aaa:	3801      	subs	r0, #1
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_drsub>:
 8000ab0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000ab4:	e002      	b.n	8000abc <__adddf3>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dsub>:
 8000ab8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000abc <__adddf3>:
 8000abc:	b530      	push	{r4, r5, lr}
 8000abe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000ac2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000ac6:	ea94 0f05 	teq	r4, r5
 8000aca:	bf08      	it	eq
 8000acc:	ea90 0f02 	teqeq	r0, r2
 8000ad0:	bf1f      	itttt	ne
 8000ad2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000ad6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000ada:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000ade:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000ae2:	f000 80e2 	beq.w	8000caa <__adddf3+0x1ee>
 8000ae6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000aea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000aee:	bfb8      	it	lt
 8000af0:	426d      	neglt	r5, r5
 8000af2:	dd0c      	ble.n	8000b0e <__adddf3+0x52>
 8000af4:	442c      	add	r4, r5
 8000af6:	ea80 0202 	eor.w	r2, r0, r2
 8000afa:	ea81 0303 	eor.w	r3, r1, r3
 8000afe:	ea82 0000 	eor.w	r0, r2, r0
 8000b02:	ea83 0101 	eor.w	r1, r3, r1
 8000b06:	ea80 0202 	eor.w	r2, r0, r2
 8000b0a:	ea81 0303 	eor.w	r3, r1, r3
 8000b0e:	2d36      	cmp	r5, #54	; 0x36
 8000b10:	bf88      	it	hi
 8000b12:	bd30      	pophi	{r4, r5, pc}
 8000b14:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b18:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b1c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000b20:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000b24:	d002      	beq.n	8000b2c <__adddf3+0x70>
 8000b26:	4240      	negs	r0, r0
 8000b28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000b30:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b34:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000b38:	d002      	beq.n	8000b40 <__adddf3+0x84>
 8000b3a:	4252      	negs	r2, r2
 8000b3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b40:	ea94 0f05 	teq	r4, r5
 8000b44:	f000 80a7 	beq.w	8000c96 <__adddf3+0x1da>
 8000b48:	f1a4 0401 	sub.w	r4, r4, #1
 8000b4c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000b50:	db0d      	blt.n	8000b6e <__adddf3+0xb2>
 8000b52:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000b56:	fa22 f205 	lsr.w	r2, r2, r5
 8000b5a:	1880      	adds	r0, r0, r2
 8000b5c:	f141 0100 	adc.w	r1, r1, #0
 8000b60:	fa03 f20e 	lsl.w	r2, r3, lr
 8000b64:	1880      	adds	r0, r0, r2
 8000b66:	fa43 f305 	asr.w	r3, r3, r5
 8000b6a:	4159      	adcs	r1, r3
 8000b6c:	e00e      	b.n	8000b8c <__adddf3+0xd0>
 8000b6e:	f1a5 0520 	sub.w	r5, r5, #32
 8000b72:	f10e 0e20 	add.w	lr, lr, #32
 8000b76:	2a01      	cmp	r2, #1
 8000b78:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000b7c:	bf28      	it	cs
 8000b7e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000b82:	fa43 f305 	asr.w	r3, r3, r5
 8000b86:	18c0      	adds	r0, r0, r3
 8000b88:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000b8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000b90:	d507      	bpl.n	8000ba2 <__adddf3+0xe6>
 8000b92:	f04f 0e00 	mov.w	lr, #0
 8000b96:	f1dc 0c00 	rsbs	ip, ip, #0
 8000b9a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000b9e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000ba2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000ba6:	d31b      	bcc.n	8000be0 <__adddf3+0x124>
 8000ba8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000bac:	d30c      	bcc.n	8000bc8 <__adddf3+0x10c>
 8000bae:	0849      	lsrs	r1, r1, #1
 8000bb0:	ea5f 0030 	movs.w	r0, r0, rrx
 8000bb4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000bb8:	f104 0401 	add.w	r4, r4, #1
 8000bbc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000bc0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000bc4:	f080 809a 	bcs.w	8000cfc <__adddf3+0x240>
 8000bc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bd2:	f150 0000 	adcs.w	r0, r0, #0
 8000bd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bda:	ea41 0105 	orr.w	r1, r1, r5
 8000bde:	bd30      	pop	{r4, r5, pc}
 8000be0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000be4:	4140      	adcs	r0, r0
 8000be6:	eb41 0101 	adc.w	r1, r1, r1
 8000bea:	3c01      	subs	r4, #1
 8000bec:	bf28      	it	cs
 8000bee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000bf2:	d2e9      	bcs.n	8000bc8 <__adddf3+0x10c>
 8000bf4:	f091 0f00 	teq	r1, #0
 8000bf8:	bf04      	itt	eq
 8000bfa:	4601      	moveq	r1, r0
 8000bfc:	2000      	moveq	r0, #0
 8000bfe:	fab1 f381 	clz	r3, r1
 8000c02:	bf08      	it	eq
 8000c04:	3320      	addeq	r3, #32
 8000c06:	f1a3 030b 	sub.w	r3, r3, #11
 8000c0a:	f1b3 0220 	subs.w	r2, r3, #32
 8000c0e:	da0c      	bge.n	8000c2a <__adddf3+0x16e>
 8000c10:	320c      	adds	r2, #12
 8000c12:	dd08      	ble.n	8000c26 <__adddf3+0x16a>
 8000c14:	f102 0c14 	add.w	ip, r2, #20
 8000c18:	f1c2 020c 	rsb	r2, r2, #12
 8000c1c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000c20:	fa21 f102 	lsr.w	r1, r1, r2
 8000c24:	e00c      	b.n	8000c40 <__adddf3+0x184>
 8000c26:	f102 0214 	add.w	r2, r2, #20
 8000c2a:	bfd8      	it	le
 8000c2c:	f1c2 0c20 	rsble	ip, r2, #32
 8000c30:	fa01 f102 	lsl.w	r1, r1, r2
 8000c34:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c38:	bfdc      	itt	le
 8000c3a:	ea41 010c 	orrle.w	r1, r1, ip
 8000c3e:	4090      	lslle	r0, r2
 8000c40:	1ae4      	subs	r4, r4, r3
 8000c42:	bfa2      	ittt	ge
 8000c44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000c48:	4329      	orrge	r1, r5
 8000c4a:	bd30      	popge	{r4, r5, pc}
 8000c4c:	ea6f 0404 	mvn.w	r4, r4
 8000c50:	3c1f      	subs	r4, #31
 8000c52:	da1c      	bge.n	8000c8e <__adddf3+0x1d2>
 8000c54:	340c      	adds	r4, #12
 8000c56:	dc0e      	bgt.n	8000c76 <__adddf3+0x1ba>
 8000c58:	f104 0414 	add.w	r4, r4, #20
 8000c5c:	f1c4 0220 	rsb	r2, r4, #32
 8000c60:	fa20 f004 	lsr.w	r0, r0, r4
 8000c64:	fa01 f302 	lsl.w	r3, r1, r2
 8000c68:	ea40 0003 	orr.w	r0, r0, r3
 8000c6c:	fa21 f304 	lsr.w	r3, r1, r4
 8000c70:	ea45 0103 	orr.w	r1, r5, r3
 8000c74:	bd30      	pop	{r4, r5, pc}
 8000c76:	f1c4 040c 	rsb	r4, r4, #12
 8000c7a:	f1c4 0220 	rsb	r2, r4, #32
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	fa01 f304 	lsl.w	r3, r1, r4
 8000c86:	ea40 0003 	orr.w	r0, r0, r3
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	bd30      	pop	{r4, r5, pc}
 8000c8e:	fa21 f004 	lsr.w	r0, r1, r4
 8000c92:	4629      	mov	r1, r5
 8000c94:	bd30      	pop	{r4, r5, pc}
 8000c96:	f094 0f00 	teq	r4, #0
 8000c9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000c9e:	bf06      	itte	eq
 8000ca0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000ca4:	3401      	addeq	r4, #1
 8000ca6:	3d01      	subne	r5, #1
 8000ca8:	e74e      	b.n	8000b48 <__adddf3+0x8c>
 8000caa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000cae:	bf18      	it	ne
 8000cb0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000cb4:	d029      	beq.n	8000d0a <__adddf3+0x24e>
 8000cb6:	ea94 0f05 	teq	r4, r5
 8000cba:	bf08      	it	eq
 8000cbc:	ea90 0f02 	teqeq	r0, r2
 8000cc0:	d005      	beq.n	8000cce <__adddf3+0x212>
 8000cc2:	ea54 0c00 	orrs.w	ip, r4, r0
 8000cc6:	bf04      	itt	eq
 8000cc8:	4619      	moveq	r1, r3
 8000cca:	4610      	moveq	r0, r2
 8000ccc:	bd30      	pop	{r4, r5, pc}
 8000cce:	ea91 0f03 	teq	r1, r3
 8000cd2:	bf1e      	ittt	ne
 8000cd4:	2100      	movne	r1, #0
 8000cd6:	2000      	movne	r0, #0
 8000cd8:	bd30      	popne	{r4, r5, pc}
 8000cda:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000cde:	d105      	bne.n	8000cec <__adddf3+0x230>
 8000ce0:	0040      	lsls	r0, r0, #1
 8000ce2:	4149      	adcs	r1, r1
 8000ce4:	bf28      	it	cs
 8000ce6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000cea:	bd30      	pop	{r4, r5, pc}
 8000cec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000cf0:	bf3c      	itt	cc
 8000cf2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000cf6:	bd30      	popcc	{r4, r5, pc}
 8000cf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000cfc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000d00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000d04:	f04f 0000 	mov.w	r0, #0
 8000d08:	bd30      	pop	{r4, r5, pc}
 8000d0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000d0e:	bf1a      	itte	ne
 8000d10:	4619      	movne	r1, r3
 8000d12:	4610      	movne	r0, r2
 8000d14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000d18:	bf1c      	itt	ne
 8000d1a:	460b      	movne	r3, r1
 8000d1c:	4602      	movne	r2, r0
 8000d1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000d22:	bf06      	itte	eq
 8000d24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000d28:	ea91 0f03 	teqeq	r1, r3
 8000d2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000d30:	bd30      	pop	{r4, r5, pc}
 8000d32:	bf00      	nop

08000d34 <__aeabi_ui2d>:
 8000d34:	f090 0f00 	teq	r0, #0
 8000d38:	bf04      	itt	eq
 8000d3a:	2100      	moveq	r1, #0
 8000d3c:	4770      	bxeq	lr
 8000d3e:	b530      	push	{r4, r5, lr}
 8000d40:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000d44:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000d48:	f04f 0500 	mov.w	r5, #0
 8000d4c:	f04f 0100 	mov.w	r1, #0
 8000d50:	e750      	b.n	8000bf4 <__adddf3+0x138>
 8000d52:	bf00      	nop

08000d54 <__aeabi_i2d>:
 8000d54:	f090 0f00 	teq	r0, #0
 8000d58:	bf04      	itt	eq
 8000d5a:	2100      	moveq	r1, #0
 8000d5c:	4770      	bxeq	lr
 8000d5e:	b530      	push	{r4, r5, lr}
 8000d60:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000d64:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000d68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000d6c:	bf48      	it	mi
 8000d6e:	4240      	negmi	r0, r0
 8000d70:	f04f 0100 	mov.w	r1, #0
 8000d74:	e73e      	b.n	8000bf4 <__adddf3+0x138>
 8000d76:	bf00      	nop

08000d78 <__aeabi_f2d>:
 8000d78:	0042      	lsls	r2, r0, #1
 8000d7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000d7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d82:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000d86:	bf1f      	itttt	ne
 8000d88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000d8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000d90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000d94:	4770      	bxne	lr
 8000d96:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000d9a:	bf08      	it	eq
 8000d9c:	4770      	bxeq	lr
 8000d9e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000da2:	bf04      	itt	eq
 8000da4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000da8:	4770      	bxeq	lr
 8000daa:	b530      	push	{r4, r5, lr}
 8000dac:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000db0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000db4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000db8:	e71c      	b.n	8000bf4 <__adddf3+0x138>
 8000dba:	bf00      	nop

08000dbc <__aeabi_ul2d>:
 8000dbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	b530      	push	{r4, r5, lr}
 8000dc6:	f04f 0500 	mov.w	r5, #0
 8000dca:	e00a      	b.n	8000de2 <__aeabi_l2d+0x16>

08000dcc <__aeabi_l2d>:
 8000dcc:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd0:	bf08      	it	eq
 8000dd2:	4770      	bxeq	lr
 8000dd4:	b530      	push	{r4, r5, lr}
 8000dd6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000dda:	d502      	bpl.n	8000de2 <__aeabi_l2d+0x16>
 8000ddc:	4240      	negs	r0, r0
 8000dde:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000de6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000dea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000dee:	f43f aed8 	beq.w	8000ba2 <__adddf3+0xe6>
 8000df2:	f04f 0203 	mov.w	r2, #3
 8000df6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000dfa:	bf18      	it	ne
 8000dfc:	3203      	addne	r2, #3
 8000dfe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000e02:	bf18      	it	ne
 8000e04:	3203      	addne	r2, #3
 8000e06:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000e0a:	f1c2 0320 	rsb	r3, r2, #32
 8000e0e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e12:	fa20 f002 	lsr.w	r0, r0, r2
 8000e16:	fa01 fe03 	lsl.w	lr, r1, r3
 8000e1a:	ea40 000e 	orr.w	r0, r0, lr
 8000e1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e22:	4414      	add	r4, r2
 8000e24:	e6bd      	b.n	8000ba2 <__adddf3+0xe6>
 8000e26:	bf00      	nop

08000e28 <__aeabi_dmul>:
 8000e28:	b570      	push	{r4, r5, r6, lr}
 8000e2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000e32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000e36:	bf1d      	ittte	ne
 8000e38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000e3c:	ea94 0f0c 	teqne	r4, ip
 8000e40:	ea95 0f0c 	teqne	r5, ip
 8000e44:	f000 f8de 	bleq	8001004 <__aeabi_dmul+0x1dc>
 8000e48:	442c      	add	r4, r5
 8000e4a:	ea81 0603 	eor.w	r6, r1, r3
 8000e4e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000e52:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000e56:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000e5a:	bf18      	it	ne
 8000e5c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000e60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000e64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e68:	d038      	beq.n	8000edc <__aeabi_dmul+0xb4>
 8000e6a:	fba0 ce02 	umull	ip, lr, r0, r2
 8000e6e:	f04f 0500 	mov.w	r5, #0
 8000e72:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000e76:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000e7a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000e7e:	f04f 0600 	mov.w	r6, #0
 8000e82:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000e86:	f09c 0f00 	teq	ip, #0
 8000e8a:	bf18      	it	ne
 8000e8c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000e90:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000e94:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000e98:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000e9c:	d204      	bcs.n	8000ea8 <__aeabi_dmul+0x80>
 8000e9e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000ea2:	416d      	adcs	r5, r5
 8000ea4:	eb46 0606 	adc.w	r6, r6, r6
 8000ea8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000eac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000eb0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000eb4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000eb8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000ebc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000ec0:	bf88      	it	hi
 8000ec2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000ec6:	d81e      	bhi.n	8000f06 <__aeabi_dmul+0xde>
 8000ec8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000ecc:	bf08      	it	eq
 8000ece:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000ed2:	f150 0000 	adcs.w	r0, r0, #0
 8000ed6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000eda:	bd70      	pop	{r4, r5, r6, pc}
 8000edc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000ee0:	ea46 0101 	orr.w	r1, r6, r1
 8000ee4:	ea40 0002 	orr.w	r0, r0, r2
 8000ee8:	ea81 0103 	eor.w	r1, r1, r3
 8000eec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000ef0:	bfc2      	ittt	gt
 8000ef2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ef6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000efa:	bd70      	popgt	{r4, r5, r6, pc}
 8000efc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000f00:	f04f 0e00 	mov.w	lr, #0
 8000f04:	3c01      	subs	r4, #1
 8000f06:	f300 80ab 	bgt.w	8001060 <__aeabi_dmul+0x238>
 8000f0a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000f0e:	bfde      	ittt	le
 8000f10:	2000      	movle	r0, #0
 8000f12:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000f16:	bd70      	pople	{r4, r5, r6, pc}
 8000f18:	f1c4 0400 	rsb	r4, r4, #0
 8000f1c:	3c20      	subs	r4, #32
 8000f1e:	da35      	bge.n	8000f8c <__aeabi_dmul+0x164>
 8000f20:	340c      	adds	r4, #12
 8000f22:	dc1b      	bgt.n	8000f5c <__aeabi_dmul+0x134>
 8000f24:	f104 0414 	add.w	r4, r4, #20
 8000f28:	f1c4 0520 	rsb	r5, r4, #32
 8000f2c:	fa00 f305 	lsl.w	r3, r0, r5
 8000f30:	fa20 f004 	lsr.w	r0, r0, r4
 8000f34:	fa01 f205 	lsl.w	r2, r1, r5
 8000f38:	ea40 0002 	orr.w	r0, r0, r2
 8000f3c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000f40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000f44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000f48:	fa21 f604 	lsr.w	r6, r1, r4
 8000f4c:	eb42 0106 	adc.w	r1, r2, r6
 8000f50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000f54:	bf08      	it	eq
 8000f56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000f5a:	bd70      	pop	{r4, r5, r6, pc}
 8000f5c:	f1c4 040c 	rsb	r4, r4, #12
 8000f60:	f1c4 0520 	rsb	r5, r4, #32
 8000f64:	fa00 f304 	lsl.w	r3, r0, r4
 8000f68:	fa20 f005 	lsr.w	r0, r0, r5
 8000f6c:	fa01 f204 	lsl.w	r2, r1, r4
 8000f70:	ea40 0002 	orr.w	r0, r0, r2
 8000f74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000f78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000f7c:	f141 0100 	adc.w	r1, r1, #0
 8000f80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000f84:	bf08      	it	eq
 8000f86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000f8a:	bd70      	pop	{r4, r5, r6, pc}
 8000f8c:	f1c4 0520 	rsb	r5, r4, #32
 8000f90:	fa00 f205 	lsl.w	r2, r0, r5
 8000f94:	ea4e 0e02 	orr.w	lr, lr, r2
 8000f98:	fa20 f304 	lsr.w	r3, r0, r4
 8000f9c:	fa01 f205 	lsl.w	r2, r1, r5
 8000fa0:	ea43 0302 	orr.w	r3, r3, r2
 8000fa4:	fa21 f004 	lsr.w	r0, r1, r4
 8000fa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000fac:	fa21 f204 	lsr.w	r2, r1, r4
 8000fb0:	ea20 0002 	bic.w	r0, r0, r2
 8000fb4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000fb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000fbc:	bf08      	it	eq
 8000fbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000fc2:	bd70      	pop	{r4, r5, r6, pc}
 8000fc4:	f094 0f00 	teq	r4, #0
 8000fc8:	d10f      	bne.n	8000fea <__aeabi_dmul+0x1c2>
 8000fca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000fce:	0040      	lsls	r0, r0, #1
 8000fd0:	eb41 0101 	adc.w	r1, r1, r1
 8000fd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000fd8:	bf08      	it	eq
 8000fda:	3c01      	subeq	r4, #1
 8000fdc:	d0f7      	beq.n	8000fce <__aeabi_dmul+0x1a6>
 8000fde:	ea41 0106 	orr.w	r1, r1, r6
 8000fe2:	f095 0f00 	teq	r5, #0
 8000fe6:	bf18      	it	ne
 8000fe8:	4770      	bxne	lr
 8000fea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000fee:	0052      	lsls	r2, r2, #1
 8000ff0:	eb43 0303 	adc.w	r3, r3, r3
 8000ff4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000ff8:	bf08      	it	eq
 8000ffa:	3d01      	subeq	r5, #1
 8000ffc:	d0f7      	beq.n	8000fee <__aeabi_dmul+0x1c6>
 8000ffe:	ea43 0306 	orr.w	r3, r3, r6
 8001002:	4770      	bx	lr
 8001004:	ea94 0f0c 	teq	r4, ip
 8001008:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800100c:	bf18      	it	ne
 800100e:	ea95 0f0c 	teqne	r5, ip
 8001012:	d00c      	beq.n	800102e <__aeabi_dmul+0x206>
 8001014:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001018:	bf18      	it	ne
 800101a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800101e:	d1d1      	bne.n	8000fc4 <__aeabi_dmul+0x19c>
 8001020:	ea81 0103 	eor.w	r1, r1, r3
 8001024:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001028:	f04f 0000 	mov.w	r0, #0
 800102c:	bd70      	pop	{r4, r5, r6, pc}
 800102e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001032:	bf06      	itte	eq
 8001034:	4610      	moveq	r0, r2
 8001036:	4619      	moveq	r1, r3
 8001038:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800103c:	d019      	beq.n	8001072 <__aeabi_dmul+0x24a>
 800103e:	ea94 0f0c 	teq	r4, ip
 8001042:	d102      	bne.n	800104a <__aeabi_dmul+0x222>
 8001044:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8001048:	d113      	bne.n	8001072 <__aeabi_dmul+0x24a>
 800104a:	ea95 0f0c 	teq	r5, ip
 800104e:	d105      	bne.n	800105c <__aeabi_dmul+0x234>
 8001050:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001054:	bf1c      	itt	ne
 8001056:	4610      	movne	r0, r2
 8001058:	4619      	movne	r1, r3
 800105a:	d10a      	bne.n	8001072 <__aeabi_dmul+0x24a>
 800105c:	ea81 0103 	eor.w	r1, r1, r3
 8001060:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001064:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001068:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800106c:	f04f 0000 	mov.w	r0, #0
 8001070:	bd70      	pop	{r4, r5, r6, pc}
 8001072:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001076:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800107a:	bd70      	pop	{r4, r5, r6, pc}

0800107c <__aeabi_ddiv>:
 800107c:	b570      	push	{r4, r5, r6, lr}
 800107e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001082:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001086:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800108a:	bf1d      	ittte	ne
 800108c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001090:	ea94 0f0c 	teqne	r4, ip
 8001094:	ea95 0f0c 	teqne	r5, ip
 8001098:	f000 f8a7 	bleq	80011ea <__aeabi_ddiv+0x16e>
 800109c:	eba4 0405 	sub.w	r4, r4, r5
 80010a0:	ea81 0e03 	eor.w	lr, r1, r3
 80010a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80010a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80010ac:	f000 8088 	beq.w	80011c0 <__aeabi_ddiv+0x144>
 80010b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80010b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80010b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80010bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80010c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80010c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80010c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80010cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80010d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80010d4:	429d      	cmp	r5, r3
 80010d6:	bf08      	it	eq
 80010d8:	4296      	cmpeq	r6, r2
 80010da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80010de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80010e2:	d202      	bcs.n	80010ea <__aeabi_ddiv+0x6e>
 80010e4:	085b      	lsrs	r3, r3, #1
 80010e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80010ea:	1ab6      	subs	r6, r6, r2
 80010ec:	eb65 0503 	sbc.w	r5, r5, r3
 80010f0:	085b      	lsrs	r3, r3, #1
 80010f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80010f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80010fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80010fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8001102:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001106:	bf22      	ittt	cs
 8001108:	1ab6      	subcs	r6, r6, r2
 800110a:	4675      	movcs	r5, lr
 800110c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001110:	085b      	lsrs	r3, r3, #1
 8001112:	ea4f 0232 	mov.w	r2, r2, rrx
 8001116:	ebb6 0e02 	subs.w	lr, r6, r2
 800111a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800111e:	bf22      	ittt	cs
 8001120:	1ab6      	subcs	r6, r6, r2
 8001122:	4675      	movcs	r5, lr
 8001124:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001128:	085b      	lsrs	r3, r3, #1
 800112a:	ea4f 0232 	mov.w	r2, r2, rrx
 800112e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001132:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001136:	bf22      	ittt	cs
 8001138:	1ab6      	subcs	r6, r6, r2
 800113a:	4675      	movcs	r5, lr
 800113c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001140:	085b      	lsrs	r3, r3, #1
 8001142:	ea4f 0232 	mov.w	r2, r2, rrx
 8001146:	ebb6 0e02 	subs.w	lr, r6, r2
 800114a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800114e:	bf22      	ittt	cs
 8001150:	1ab6      	subcs	r6, r6, r2
 8001152:	4675      	movcs	r5, lr
 8001154:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001158:	ea55 0e06 	orrs.w	lr, r5, r6
 800115c:	d018      	beq.n	8001190 <__aeabi_ddiv+0x114>
 800115e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8001162:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8001166:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800116a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800116e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8001172:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8001176:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800117a:	d1c0      	bne.n	80010fe <__aeabi_ddiv+0x82>
 800117c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001180:	d10b      	bne.n	800119a <__aeabi_ddiv+0x11e>
 8001182:	ea41 0100 	orr.w	r1, r1, r0
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800118e:	e7b6      	b.n	80010fe <__aeabi_ddiv+0x82>
 8001190:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001194:	bf04      	itt	eq
 8001196:	4301      	orreq	r1, r0
 8001198:	2000      	moveq	r0, #0
 800119a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800119e:	bf88      	it	hi
 80011a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80011a4:	f63f aeaf 	bhi.w	8000f06 <__aeabi_dmul+0xde>
 80011a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80011ac:	bf04      	itt	eq
 80011ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80011b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80011b6:	f150 0000 	adcs.w	r0, r0, #0
 80011ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80011be:	bd70      	pop	{r4, r5, r6, pc}
 80011c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80011c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80011c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80011cc:	bfc2      	ittt	gt
 80011ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80011d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80011d6:	bd70      	popgt	{r4, r5, r6, pc}
 80011d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80011dc:	f04f 0e00 	mov.w	lr, #0
 80011e0:	3c01      	subs	r4, #1
 80011e2:	e690      	b.n	8000f06 <__aeabi_dmul+0xde>
 80011e4:	ea45 0e06 	orr.w	lr, r5, r6
 80011e8:	e68d      	b.n	8000f06 <__aeabi_dmul+0xde>
 80011ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80011ee:	ea94 0f0c 	teq	r4, ip
 80011f2:	bf08      	it	eq
 80011f4:	ea95 0f0c 	teqeq	r5, ip
 80011f8:	f43f af3b 	beq.w	8001072 <__aeabi_dmul+0x24a>
 80011fc:	ea94 0f0c 	teq	r4, ip
 8001200:	d10a      	bne.n	8001218 <__aeabi_ddiv+0x19c>
 8001202:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001206:	f47f af34 	bne.w	8001072 <__aeabi_dmul+0x24a>
 800120a:	ea95 0f0c 	teq	r5, ip
 800120e:	f47f af25 	bne.w	800105c <__aeabi_dmul+0x234>
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	e72c      	b.n	8001072 <__aeabi_dmul+0x24a>
 8001218:	ea95 0f0c 	teq	r5, ip
 800121c:	d106      	bne.n	800122c <__aeabi_ddiv+0x1b0>
 800121e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001222:	f43f aefd 	beq.w	8001020 <__aeabi_dmul+0x1f8>
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	e722      	b.n	8001072 <__aeabi_dmul+0x24a>
 800122c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001230:	bf18      	it	ne
 8001232:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001236:	f47f aec5 	bne.w	8000fc4 <__aeabi_dmul+0x19c>
 800123a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800123e:	f47f af0d 	bne.w	800105c <__aeabi_dmul+0x234>
 8001242:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001246:	f47f aeeb 	bne.w	8001020 <__aeabi_dmul+0x1f8>
 800124a:	e712      	b.n	8001072 <__aeabi_dmul+0x24a>

0800124c <__gedf2>:
 800124c:	f04f 3cff 	mov.w	ip, #4294967295
 8001250:	e006      	b.n	8001260 <__cmpdf2+0x4>
 8001252:	bf00      	nop

08001254 <__ledf2>:
 8001254:	f04f 0c01 	mov.w	ip, #1
 8001258:	e002      	b.n	8001260 <__cmpdf2+0x4>
 800125a:	bf00      	nop

0800125c <__cmpdf2>:
 800125c:	f04f 0c01 	mov.w	ip, #1
 8001260:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001264:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001268:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800126c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001270:	bf18      	it	ne
 8001272:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8001276:	d01b      	beq.n	80012b0 <__cmpdf2+0x54>
 8001278:	b001      	add	sp, #4
 800127a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800127e:	bf0c      	ite	eq
 8001280:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8001284:	ea91 0f03 	teqne	r1, r3
 8001288:	bf02      	ittt	eq
 800128a:	ea90 0f02 	teqeq	r0, r2
 800128e:	2000      	moveq	r0, #0
 8001290:	4770      	bxeq	lr
 8001292:	f110 0f00 	cmn.w	r0, #0
 8001296:	ea91 0f03 	teq	r1, r3
 800129a:	bf58      	it	pl
 800129c:	4299      	cmppl	r1, r3
 800129e:	bf08      	it	eq
 80012a0:	4290      	cmpeq	r0, r2
 80012a2:	bf2c      	ite	cs
 80012a4:	17d8      	asrcs	r0, r3, #31
 80012a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80012aa:	f040 0001 	orr.w	r0, r0, #1
 80012ae:	4770      	bx	lr
 80012b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80012b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80012b8:	d102      	bne.n	80012c0 <__cmpdf2+0x64>
 80012ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80012be:	d107      	bne.n	80012d0 <__cmpdf2+0x74>
 80012c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80012c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80012c8:	d1d6      	bne.n	8001278 <__cmpdf2+0x1c>
 80012ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80012ce:	d0d3      	beq.n	8001278 <__cmpdf2+0x1c>
 80012d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop

080012d8 <__aeabi_cdrcmple>:
 80012d8:	4684      	mov	ip, r0
 80012da:	4610      	mov	r0, r2
 80012dc:	4662      	mov	r2, ip
 80012de:	468c      	mov	ip, r1
 80012e0:	4619      	mov	r1, r3
 80012e2:	4663      	mov	r3, ip
 80012e4:	e000      	b.n	80012e8 <__aeabi_cdcmpeq>
 80012e6:	bf00      	nop

080012e8 <__aeabi_cdcmpeq>:
 80012e8:	b501      	push	{r0, lr}
 80012ea:	f7ff ffb7 	bl	800125c <__cmpdf2>
 80012ee:	2800      	cmp	r0, #0
 80012f0:	bf48      	it	mi
 80012f2:	f110 0f00 	cmnmi.w	r0, #0
 80012f6:	bd01      	pop	{r0, pc}

080012f8 <__aeabi_dcmpeq>:
 80012f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80012fc:	f7ff fff4 	bl	80012e8 <__aeabi_cdcmpeq>
 8001300:	bf0c      	ite	eq
 8001302:	2001      	moveq	r0, #1
 8001304:	2000      	movne	r0, #0
 8001306:	f85d fb08 	ldr.w	pc, [sp], #8
 800130a:	bf00      	nop

0800130c <__aeabi_dcmplt>:
 800130c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001310:	f7ff ffea 	bl	80012e8 <__aeabi_cdcmpeq>
 8001314:	bf34      	ite	cc
 8001316:	2001      	movcc	r0, #1
 8001318:	2000      	movcs	r0, #0
 800131a:	f85d fb08 	ldr.w	pc, [sp], #8
 800131e:	bf00      	nop

08001320 <__aeabi_dcmple>:
 8001320:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001324:	f7ff ffe0 	bl	80012e8 <__aeabi_cdcmpeq>
 8001328:	bf94      	ite	ls
 800132a:	2001      	movls	r0, #1
 800132c:	2000      	movhi	r0, #0
 800132e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001332:	bf00      	nop

08001334 <__aeabi_dcmpge>:
 8001334:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001338:	f7ff ffce 	bl	80012d8 <__aeabi_cdrcmple>
 800133c:	bf94      	ite	ls
 800133e:	2001      	movls	r0, #1
 8001340:	2000      	movhi	r0, #0
 8001342:	f85d fb08 	ldr.w	pc, [sp], #8
 8001346:	bf00      	nop

08001348 <__aeabi_dcmpgt>:
 8001348:	f84d ed08 	str.w	lr, [sp, #-8]!
 800134c:	f7ff ffc4 	bl	80012d8 <__aeabi_cdrcmple>
 8001350:	bf34      	ite	cc
 8001352:	2001      	movcc	r0, #1
 8001354:	2000      	movcs	r0, #0
 8001356:	f85d fb08 	ldr.w	pc, [sp], #8
 800135a:	bf00      	nop

0800135c <__aeabi_dcmpun>:
 800135c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001360:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001364:	d102      	bne.n	800136c <__aeabi_dcmpun+0x10>
 8001366:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800136a:	d10a      	bne.n	8001382 <__aeabi_dcmpun+0x26>
 800136c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001370:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001374:	d102      	bne.n	800137c <__aeabi_dcmpun+0x20>
 8001376:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800137a:	d102      	bne.n	8001382 <__aeabi_dcmpun+0x26>
 800137c:	f04f 0000 	mov.w	r0, #0
 8001380:	4770      	bx	lr
 8001382:	f04f 0001 	mov.w	r0, #1
 8001386:	4770      	bx	lr

08001388 <__aeabi_d2iz>:
 8001388:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800138c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001390:	d215      	bcs.n	80013be <__aeabi_d2iz+0x36>
 8001392:	d511      	bpl.n	80013b8 <__aeabi_d2iz+0x30>
 8001394:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001398:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800139c:	d912      	bls.n	80013c4 <__aeabi_d2iz+0x3c>
 800139e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80013a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80013a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80013aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80013ae:	fa23 f002 	lsr.w	r0, r3, r2
 80013b2:	bf18      	it	ne
 80013b4:	4240      	negne	r0, r0
 80013b6:	4770      	bx	lr
 80013b8:	f04f 0000 	mov.w	r0, #0
 80013bc:	4770      	bx	lr
 80013be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80013c2:	d105      	bne.n	80013d0 <__aeabi_d2iz+0x48>
 80013c4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80013c8:	bf08      	it	eq
 80013ca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80013ce:	4770      	bx	lr
 80013d0:	f04f 0000 	mov.w	r0, #0
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop

080013d8 <__aeabi_uldivmod>:
 80013d8:	b953      	cbnz	r3, 80013f0 <__aeabi_uldivmod+0x18>
 80013da:	b94a      	cbnz	r2, 80013f0 <__aeabi_uldivmod+0x18>
 80013dc:	2900      	cmp	r1, #0
 80013de:	bf08      	it	eq
 80013e0:	2800      	cmpeq	r0, #0
 80013e2:	bf1c      	itt	ne
 80013e4:	f04f 31ff 	movne.w	r1, #4294967295
 80013e8:	f04f 30ff 	movne.w	r0, #4294967295
 80013ec:	f000 b974 	b.w	80016d8 <__aeabi_idiv0>
 80013f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80013f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80013f8:	f000 f806 	bl	8001408 <__udivmoddi4>
 80013fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001404:	b004      	add	sp, #16
 8001406:	4770      	bx	lr

08001408 <__udivmoddi4>:
 8001408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800140c:	9d08      	ldr	r5, [sp, #32]
 800140e:	4604      	mov	r4, r0
 8001410:	468e      	mov	lr, r1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d14d      	bne.n	80014b2 <__udivmoddi4+0xaa>
 8001416:	428a      	cmp	r2, r1
 8001418:	4694      	mov	ip, r2
 800141a:	d969      	bls.n	80014f0 <__udivmoddi4+0xe8>
 800141c:	fab2 f282 	clz	r2, r2
 8001420:	b152      	cbz	r2, 8001438 <__udivmoddi4+0x30>
 8001422:	fa01 f302 	lsl.w	r3, r1, r2
 8001426:	f1c2 0120 	rsb	r1, r2, #32
 800142a:	fa20 f101 	lsr.w	r1, r0, r1
 800142e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001432:	ea41 0e03 	orr.w	lr, r1, r3
 8001436:	4094      	lsls	r4, r2
 8001438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800143c:	0c21      	lsrs	r1, r4, #16
 800143e:	fbbe f6f8 	udiv	r6, lr, r8
 8001442:	fa1f f78c 	uxth.w	r7, ip
 8001446:	fb08 e316 	mls	r3, r8, r6, lr
 800144a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800144e:	fb06 f107 	mul.w	r1, r6, r7
 8001452:	4299      	cmp	r1, r3
 8001454:	d90a      	bls.n	800146c <__udivmoddi4+0x64>
 8001456:	eb1c 0303 	adds.w	r3, ip, r3
 800145a:	f106 30ff 	add.w	r0, r6, #4294967295
 800145e:	f080 811f 	bcs.w	80016a0 <__udivmoddi4+0x298>
 8001462:	4299      	cmp	r1, r3
 8001464:	f240 811c 	bls.w	80016a0 <__udivmoddi4+0x298>
 8001468:	3e02      	subs	r6, #2
 800146a:	4463      	add	r3, ip
 800146c:	1a5b      	subs	r3, r3, r1
 800146e:	b2a4      	uxth	r4, r4
 8001470:	fbb3 f0f8 	udiv	r0, r3, r8
 8001474:	fb08 3310 	mls	r3, r8, r0, r3
 8001478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800147c:	fb00 f707 	mul.w	r7, r0, r7
 8001480:	42a7      	cmp	r7, r4
 8001482:	d90a      	bls.n	800149a <__udivmoddi4+0x92>
 8001484:	eb1c 0404 	adds.w	r4, ip, r4
 8001488:	f100 33ff 	add.w	r3, r0, #4294967295
 800148c:	f080 810a 	bcs.w	80016a4 <__udivmoddi4+0x29c>
 8001490:	42a7      	cmp	r7, r4
 8001492:	f240 8107 	bls.w	80016a4 <__udivmoddi4+0x29c>
 8001496:	4464      	add	r4, ip
 8001498:	3802      	subs	r0, #2
 800149a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800149e:	1be4      	subs	r4, r4, r7
 80014a0:	2600      	movs	r6, #0
 80014a2:	b11d      	cbz	r5, 80014ac <__udivmoddi4+0xa4>
 80014a4:	40d4      	lsrs	r4, r2
 80014a6:	2300      	movs	r3, #0
 80014a8:	e9c5 4300 	strd	r4, r3, [r5]
 80014ac:	4631      	mov	r1, r6
 80014ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014b2:	428b      	cmp	r3, r1
 80014b4:	d909      	bls.n	80014ca <__udivmoddi4+0xc2>
 80014b6:	2d00      	cmp	r5, #0
 80014b8:	f000 80ef 	beq.w	800169a <__udivmoddi4+0x292>
 80014bc:	2600      	movs	r6, #0
 80014be:	e9c5 0100 	strd	r0, r1, [r5]
 80014c2:	4630      	mov	r0, r6
 80014c4:	4631      	mov	r1, r6
 80014c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014ca:	fab3 f683 	clz	r6, r3
 80014ce:	2e00      	cmp	r6, #0
 80014d0:	d14a      	bne.n	8001568 <__udivmoddi4+0x160>
 80014d2:	428b      	cmp	r3, r1
 80014d4:	d302      	bcc.n	80014dc <__udivmoddi4+0xd4>
 80014d6:	4282      	cmp	r2, r0
 80014d8:	f200 80f9 	bhi.w	80016ce <__udivmoddi4+0x2c6>
 80014dc:	1a84      	subs	r4, r0, r2
 80014de:	eb61 0303 	sbc.w	r3, r1, r3
 80014e2:	2001      	movs	r0, #1
 80014e4:	469e      	mov	lr, r3
 80014e6:	2d00      	cmp	r5, #0
 80014e8:	d0e0      	beq.n	80014ac <__udivmoddi4+0xa4>
 80014ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80014ee:	e7dd      	b.n	80014ac <__udivmoddi4+0xa4>
 80014f0:	b902      	cbnz	r2, 80014f4 <__udivmoddi4+0xec>
 80014f2:	deff      	udf	#255	; 0xff
 80014f4:	fab2 f282 	clz	r2, r2
 80014f8:	2a00      	cmp	r2, #0
 80014fa:	f040 8092 	bne.w	8001622 <__udivmoddi4+0x21a>
 80014fe:	eba1 010c 	sub.w	r1, r1, ip
 8001502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001506:	fa1f fe8c 	uxth.w	lr, ip
 800150a:	2601      	movs	r6, #1
 800150c:	0c20      	lsrs	r0, r4, #16
 800150e:	fbb1 f3f7 	udiv	r3, r1, r7
 8001512:	fb07 1113 	mls	r1, r7, r3, r1
 8001516:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800151a:	fb0e f003 	mul.w	r0, lr, r3
 800151e:	4288      	cmp	r0, r1
 8001520:	d908      	bls.n	8001534 <__udivmoddi4+0x12c>
 8001522:	eb1c 0101 	adds.w	r1, ip, r1
 8001526:	f103 38ff 	add.w	r8, r3, #4294967295
 800152a:	d202      	bcs.n	8001532 <__udivmoddi4+0x12a>
 800152c:	4288      	cmp	r0, r1
 800152e:	f200 80cb 	bhi.w	80016c8 <__udivmoddi4+0x2c0>
 8001532:	4643      	mov	r3, r8
 8001534:	1a09      	subs	r1, r1, r0
 8001536:	b2a4      	uxth	r4, r4
 8001538:	fbb1 f0f7 	udiv	r0, r1, r7
 800153c:	fb07 1110 	mls	r1, r7, r0, r1
 8001540:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001544:	fb0e fe00 	mul.w	lr, lr, r0
 8001548:	45a6      	cmp	lr, r4
 800154a:	d908      	bls.n	800155e <__udivmoddi4+0x156>
 800154c:	eb1c 0404 	adds.w	r4, ip, r4
 8001550:	f100 31ff 	add.w	r1, r0, #4294967295
 8001554:	d202      	bcs.n	800155c <__udivmoddi4+0x154>
 8001556:	45a6      	cmp	lr, r4
 8001558:	f200 80bb 	bhi.w	80016d2 <__udivmoddi4+0x2ca>
 800155c:	4608      	mov	r0, r1
 800155e:	eba4 040e 	sub.w	r4, r4, lr
 8001562:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001566:	e79c      	b.n	80014a2 <__udivmoddi4+0x9a>
 8001568:	f1c6 0720 	rsb	r7, r6, #32
 800156c:	40b3      	lsls	r3, r6
 800156e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001572:	ea4c 0c03 	orr.w	ip, ip, r3
 8001576:	fa20 f407 	lsr.w	r4, r0, r7
 800157a:	fa01 f306 	lsl.w	r3, r1, r6
 800157e:	431c      	orrs	r4, r3
 8001580:	40f9      	lsrs	r1, r7
 8001582:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001586:	fa00 f306 	lsl.w	r3, r0, r6
 800158a:	fbb1 f8f9 	udiv	r8, r1, r9
 800158e:	0c20      	lsrs	r0, r4, #16
 8001590:	fa1f fe8c 	uxth.w	lr, ip
 8001594:	fb09 1118 	mls	r1, r9, r8, r1
 8001598:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800159c:	fb08 f00e 	mul.w	r0, r8, lr
 80015a0:	4288      	cmp	r0, r1
 80015a2:	fa02 f206 	lsl.w	r2, r2, r6
 80015a6:	d90b      	bls.n	80015c0 <__udivmoddi4+0x1b8>
 80015a8:	eb1c 0101 	adds.w	r1, ip, r1
 80015ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80015b0:	f080 8088 	bcs.w	80016c4 <__udivmoddi4+0x2bc>
 80015b4:	4288      	cmp	r0, r1
 80015b6:	f240 8085 	bls.w	80016c4 <__udivmoddi4+0x2bc>
 80015ba:	f1a8 0802 	sub.w	r8, r8, #2
 80015be:	4461      	add	r1, ip
 80015c0:	1a09      	subs	r1, r1, r0
 80015c2:	b2a4      	uxth	r4, r4
 80015c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80015c8:	fb09 1110 	mls	r1, r9, r0, r1
 80015cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80015d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80015d4:	458e      	cmp	lr, r1
 80015d6:	d908      	bls.n	80015ea <__udivmoddi4+0x1e2>
 80015d8:	eb1c 0101 	adds.w	r1, ip, r1
 80015dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80015e0:	d26c      	bcs.n	80016bc <__udivmoddi4+0x2b4>
 80015e2:	458e      	cmp	lr, r1
 80015e4:	d96a      	bls.n	80016bc <__udivmoddi4+0x2b4>
 80015e6:	3802      	subs	r0, #2
 80015e8:	4461      	add	r1, ip
 80015ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80015ee:	fba0 9402 	umull	r9, r4, r0, r2
 80015f2:	eba1 010e 	sub.w	r1, r1, lr
 80015f6:	42a1      	cmp	r1, r4
 80015f8:	46c8      	mov	r8, r9
 80015fa:	46a6      	mov	lr, r4
 80015fc:	d356      	bcc.n	80016ac <__udivmoddi4+0x2a4>
 80015fe:	d053      	beq.n	80016a8 <__udivmoddi4+0x2a0>
 8001600:	b15d      	cbz	r5, 800161a <__udivmoddi4+0x212>
 8001602:	ebb3 0208 	subs.w	r2, r3, r8
 8001606:	eb61 010e 	sbc.w	r1, r1, lr
 800160a:	fa01 f707 	lsl.w	r7, r1, r7
 800160e:	fa22 f306 	lsr.w	r3, r2, r6
 8001612:	40f1      	lsrs	r1, r6
 8001614:	431f      	orrs	r7, r3
 8001616:	e9c5 7100 	strd	r7, r1, [r5]
 800161a:	2600      	movs	r6, #0
 800161c:	4631      	mov	r1, r6
 800161e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001622:	f1c2 0320 	rsb	r3, r2, #32
 8001626:	40d8      	lsrs	r0, r3
 8001628:	fa0c fc02 	lsl.w	ip, ip, r2
 800162c:	fa21 f303 	lsr.w	r3, r1, r3
 8001630:	4091      	lsls	r1, r2
 8001632:	4301      	orrs	r1, r0
 8001634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001638:	fa1f fe8c 	uxth.w	lr, ip
 800163c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001640:	fb07 3610 	mls	r6, r7, r0, r3
 8001644:	0c0b      	lsrs	r3, r1, #16
 8001646:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800164a:	fb00 f60e 	mul.w	r6, r0, lr
 800164e:	429e      	cmp	r6, r3
 8001650:	fa04 f402 	lsl.w	r4, r4, r2
 8001654:	d908      	bls.n	8001668 <__udivmoddi4+0x260>
 8001656:	eb1c 0303 	adds.w	r3, ip, r3
 800165a:	f100 38ff 	add.w	r8, r0, #4294967295
 800165e:	d22f      	bcs.n	80016c0 <__udivmoddi4+0x2b8>
 8001660:	429e      	cmp	r6, r3
 8001662:	d92d      	bls.n	80016c0 <__udivmoddi4+0x2b8>
 8001664:	3802      	subs	r0, #2
 8001666:	4463      	add	r3, ip
 8001668:	1b9b      	subs	r3, r3, r6
 800166a:	b289      	uxth	r1, r1
 800166c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001670:	fb07 3316 	mls	r3, r7, r6, r3
 8001674:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001678:	fb06 f30e 	mul.w	r3, r6, lr
 800167c:	428b      	cmp	r3, r1
 800167e:	d908      	bls.n	8001692 <__udivmoddi4+0x28a>
 8001680:	eb1c 0101 	adds.w	r1, ip, r1
 8001684:	f106 38ff 	add.w	r8, r6, #4294967295
 8001688:	d216      	bcs.n	80016b8 <__udivmoddi4+0x2b0>
 800168a:	428b      	cmp	r3, r1
 800168c:	d914      	bls.n	80016b8 <__udivmoddi4+0x2b0>
 800168e:	3e02      	subs	r6, #2
 8001690:	4461      	add	r1, ip
 8001692:	1ac9      	subs	r1, r1, r3
 8001694:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001698:	e738      	b.n	800150c <__udivmoddi4+0x104>
 800169a:	462e      	mov	r6, r5
 800169c:	4628      	mov	r0, r5
 800169e:	e705      	b.n	80014ac <__udivmoddi4+0xa4>
 80016a0:	4606      	mov	r6, r0
 80016a2:	e6e3      	b.n	800146c <__udivmoddi4+0x64>
 80016a4:	4618      	mov	r0, r3
 80016a6:	e6f8      	b.n	800149a <__udivmoddi4+0x92>
 80016a8:	454b      	cmp	r3, r9
 80016aa:	d2a9      	bcs.n	8001600 <__udivmoddi4+0x1f8>
 80016ac:	ebb9 0802 	subs.w	r8, r9, r2
 80016b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80016b4:	3801      	subs	r0, #1
 80016b6:	e7a3      	b.n	8001600 <__udivmoddi4+0x1f8>
 80016b8:	4646      	mov	r6, r8
 80016ba:	e7ea      	b.n	8001692 <__udivmoddi4+0x28a>
 80016bc:	4620      	mov	r0, r4
 80016be:	e794      	b.n	80015ea <__udivmoddi4+0x1e2>
 80016c0:	4640      	mov	r0, r8
 80016c2:	e7d1      	b.n	8001668 <__udivmoddi4+0x260>
 80016c4:	46d0      	mov	r8, sl
 80016c6:	e77b      	b.n	80015c0 <__udivmoddi4+0x1b8>
 80016c8:	3b02      	subs	r3, #2
 80016ca:	4461      	add	r1, ip
 80016cc:	e732      	b.n	8001534 <__udivmoddi4+0x12c>
 80016ce:	4630      	mov	r0, r6
 80016d0:	e709      	b.n	80014e6 <__udivmoddi4+0xde>
 80016d2:	4464      	add	r4, ip
 80016d4:	3802      	subs	r0, #2
 80016d6:	e742      	b.n	800155e <__udivmoddi4+0x156>

080016d8 <__aeabi_idiv0>:
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop

080016dc <LCD_sendCommand>:





void LCD_sendCommand(uint8_t com){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
    uint8_t tmpCmd = com;
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 0);
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <LCD_sendCommand+0x54>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <LCD_sendCommand+0x58>)
 80016f0:	8811      	ldrh	r1, [r2, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f001 fe9d 	bl	8003434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <LCD_sendCommand+0x5c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a0f      	ldr	r2, [pc, #60]	; (800173c <LCD_sendCommand+0x60>)
 8001700:	8811      	ldrh	r1, [r2, #0]
 8001702:	2200      	movs	r2, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f001 fe95 	bl	8003434 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 1);
 800170a:	f107 010f 	add.w	r1, r7, #15
 800170e:	2301      	movs	r3, #1
 8001710:	2201      	movs	r2, #1
 8001712:	480b      	ldr	r0, [pc, #44]	; (8001740 <LCD_sendCommand+0x64>)
 8001714:	f003 fd4b 	bl	80051ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <LCD_sendCommand+0x5c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <LCD_sendCommand+0x60>)
 800171e:	8811      	ldrh	r1, [r2, #0]
 8001720:	2201      	movs	r2, #1
 8001722:	4618      	mov	r0, r3
 8001724:	f001 fe86 	bl	8003434 <HAL_GPIO_WritePin>
}
 8001728:	bf00      	nop
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200004c8 	.word	0x200004c8
 8001734:	200004cc 	.word	0x200004cc
 8001738:	200004c0 	.word	0x200004c0
 800173c:	200004c4 	.word	0x200004c4
 8001740:	2000045c 	.word	0x2000045c

08001744 <LCD_sendData_NoCS>:
    uint8_t tmpCmd = com;
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 0);
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 1);
}

void LCD_sendData_NoCS(uint8_t data){
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmpDat = data;
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 1);
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <LCD_sendData_NoCS+0x34>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a09      	ldr	r2, [pc, #36]	; (800177c <LCD_sendData_NoCS+0x38>)
 8001758:	8811      	ldrh	r1, [r2, #0]
 800175a:	2201      	movs	r2, #1
 800175c:	4618      	mov	r0, r3
 800175e:	f001 fe69 	bl	8003434 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpDat, 1, 1);
 8001762:	f107 010f 	add.w	r1, r7, #15
 8001766:	2301      	movs	r3, #1
 8001768:	2201      	movs	r2, #1
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <LCD_sendData_NoCS+0x3c>)
 800176c:	f003 fd1f 	bl	80051ae <HAL_SPI_Transmit>
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200004c8 	.word	0x200004c8
 800177c:	200004cc 	.word	0x200004cc
 8001780:	2000045c 	.word	0x2000045c

08001784 <LCD_sendCommandArg>:

void LCD_sendCommandArg(uint8_t command, uint8_t *dataBytes, uint8_t dataLen){
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
 8001790:	4613      	mov	r3, r2
 8001792:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 8001794:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <LCD_sendCommandArg+0x90>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <LCD_sendCommandArg+0x94>)
 800179a:	8811      	ldrh	r1, [r2, #0]
 800179c:	2200      	movs	r2, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f001 fe48 	bl	8003434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 0); //0 for command
 80017a4:	4b1d      	ldr	r3, [pc, #116]	; (800181c <LCD_sendCommandArg+0x98>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <LCD_sendCommandArg+0x9c>)
 80017aa:	8811      	ldrh	r1, [r2, #0]
 80017ac:	2200      	movs	r2, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f001 fe40 	bl	8003434 <HAL_GPIO_WritePin>
    uint8_t buf = command;
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&lcdSPIhandle, &buf, 1, 1);
 80017b8:	f107 010b 	add.w	r1, r7, #11
 80017bc:	2301      	movs	r3, #1
 80017be:	2201      	movs	r2, #1
 80017c0:	4818      	ldr	r0, [pc, #96]	; (8001824 <LCD_sendCommandArg+0xa0>)
 80017c2:	f003 fcf4 	bl	80051ae <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 1); //start writing args
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <LCD_sendCommandArg+0x98>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a15      	ldr	r2, [pc, #84]	; (8001820 <LCD_sendCommandArg+0x9c>)
 80017cc:	8811      	ldrh	r1, [r2, #0]
 80017ce:	2201      	movs	r2, #1
 80017d0:	4618      	mov	r0, r3
 80017d2:	f001 fe2f 	bl	8003434 <HAL_GPIO_WritePin>
    for(int i = 0; i < dataLen; ++i){
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	e00b      	b.n	80017f4 <LCD_sendCommandArg+0x70>
        HAL_SPI_Transmit(&lcdSPIhandle, dataBytes, 1, 1);
 80017dc:	2301      	movs	r3, #1
 80017de:	2201      	movs	r2, #1
 80017e0:	6839      	ldr	r1, [r7, #0]
 80017e2:	4810      	ldr	r0, [pc, #64]	; (8001824 <LCD_sendCommandArg+0xa0>)
 80017e4:	f003 fce3 	bl	80051ae <HAL_SPI_Transmit>
        dataBytes++;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	603b      	str	r3, [r7, #0]
    for(int i = 0; i < dataLen; ++i){
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	3301      	adds	r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	dbef      	blt.n	80017dc <LCD_sendCommandArg+0x58>
    }  
    HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <LCD_sendCommandArg+0x90>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a05      	ldr	r2, [pc, #20]	; (8001818 <LCD_sendCommandArg+0x94>)
 8001802:	8811      	ldrh	r1, [r2, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	4618      	mov	r0, r3
 8001808:	f001 fe14 	bl	8003434 <HAL_GPIO_WritePin>
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200004c0 	.word	0x200004c0
 8001818:	200004c4 	.word	0x200004c4
 800181c:	200004c8 	.word	0x200004c8
 8001820:	200004cc 	.word	0x200004cc
 8001824:	2000045c 	.word	0x2000045c

08001828 <LCD_setCursorPosition>:
    LCD_sendCommand(HX8357_DISPON);
    HAL_Delay(50);
}

//Graphics function prototypes
void LCD_setCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	4604      	mov	r4, r0
 8001830:	4608      	mov	r0, r1
 8001832:	4611      	mov	r1, r2
 8001834:	461a      	mov	r2, r3
 8001836:	4623      	mov	r3, r4
 8001838:	80fb      	strh	r3, [r7, #6]
 800183a:	4603      	mov	r3, r0
 800183c:	80bb      	strh	r3, [r7, #4]
 800183e:	460b      	mov	r3, r1
 8001840:	807b      	strh	r3, [r7, #2]
 8001842:	4613      	mov	r3, r2
 8001844:	803b      	strh	r3, [r7, #0]
  uint8_t setCASET[] = {x1 >> 8, x1 & 0xFF, x2 >> 8, x2 & 0xFF};
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	b29b      	uxth	r3, r3
 800184c:	b2db      	uxtb	r3, r3
 800184e:	733b      	strb	r3, [r7, #12]
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	737b      	strb	r3, [r7, #13]
 8001856:	887b      	ldrh	r3, [r7, #2]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	b29b      	uxth	r3, r3
 800185c:	b2db      	uxtb	r3, r3
 800185e:	73bb      	strb	r3, [r7, #14]
 8001860:	887b      	ldrh	r3, [r7, #2]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	73fb      	strb	r3, [r7, #15]
  LCD_sendCommandArg(HX8357_CASET, setCASET, 4);
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	2204      	movs	r2, #4
 800186c:	4619      	mov	r1, r3
 800186e:	202a      	movs	r0, #42	; 0x2a
 8001870:	f7ff ff88 	bl	8001784 <LCD_sendCommandArg>
  uint8_t setPASET[] = {y1 >> 8, y1 & 0xFF, y2 >> 8, y2 & 0xFF};
 8001874:	88bb      	ldrh	r3, [r7, #4]
 8001876:	0a1b      	lsrs	r3, r3, #8
 8001878:	b29b      	uxth	r3, r3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	723b      	strb	r3, [r7, #8]
 800187e:	88bb      	ldrh	r3, [r7, #4]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	727b      	strb	r3, [r7, #9]
 8001884:	883b      	ldrh	r3, [r7, #0]
 8001886:	0a1b      	lsrs	r3, r3, #8
 8001888:	b29b      	uxth	r3, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	72bb      	strb	r3, [r7, #10]
 800188e:	883b      	ldrh	r3, [r7, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	72fb      	strb	r3, [r7, #11]
  LCD_sendCommandArg(HX8357_PASET, setPASET, 4);
 8001894:	f107 0308 	add.w	r3, r7, #8
 8001898:	2204      	movs	r2, #4
 800189a:	4619      	mov	r1, r3
 800189c:	202b      	movs	r0, #43	; 0x2b
 800189e:	f7ff ff71 	bl	8001784 <LCD_sendCommandArg>
  LCD_sendCommand(HX8357_RAMWR);
 80018a2:	202c      	movs	r0, #44	; 0x2c
 80018a4:	f7ff ff1a 	bl	80016dc <LCD_sendCommand>
  //TODO needs write immediately after (RAMWR)
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd90      	pop	{r4, r7, pc}

080018b0 <LCD_rect>:
  LCD_setCursorPosition(x, y, x, y);
  uint8_t setRAMWR[] = {color >> 8, color & 0xFF};
  LCD_sendCommandArg(HX8357_RAMWR, setRAMWR, 2);
}

void LCD_rect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4604      	mov	r4, r0
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	80fb      	strh	r3, [r7, #6]
 80018c2:	4603      	mov	r3, r0
 80018c4:	80bb      	strh	r3, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	807b      	strh	r3, [r7, #2]
 80018ca:	4613      	mov	r3, r2
 80018cc:	803b      	strh	r3, [r7, #0]
	uint32_t n = (x2 - x1 + 1) * (y2 - y1 + 1);
 80018ce:	887a      	ldrh	r2, [r7, #2]
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	3301      	adds	r3, #1
 80018d6:	8839      	ldrh	r1, [r7, #0]
 80018d8:	88ba      	ldrh	r2, [r7, #4]
 80018da:	1a8a      	subs	r2, r1, r2
 80018dc:	3201      	adds	r2, #1
 80018de:	fb02 f303 	mul.w	r3, r2, r3
 80018e2:	60fb      	str	r3, [r7, #12]
	LCD_setCursorPosition(x1, y1, x2, y2);
 80018e4:	883b      	ldrh	r3, [r7, #0]
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	88b9      	ldrh	r1, [r7, #4]
 80018ea:	88f8      	ldrh	r0, [r7, #6]
 80018ec:	f7ff ff9c 	bl	8001828 <LCD_setCursorPosition>

	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <LCD_rect+0x90>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a13      	ldr	r2, [pc, #76]	; (8001944 <LCD_rect+0x94>)
 80018f6:	8811      	ldrh	r1, [r2, #0]
 80018f8:	2200      	movs	r2, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f001 fd9a 	bl	8003434 <HAL_GPIO_WritePin>
	while (n) {
 8001900:	e00e      	b.n	8001920 <LCD_rect+0x70>
		n--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3b01      	subs	r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
		LCD_sendData_NoCS(color>>8);
 8001908:	8c3b      	ldrh	r3, [r7, #32]
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	b29b      	uxth	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff17 	bl	8001744 <LCD_sendData_NoCS>
		LCD_sendData_NoCS(color&0xff);
 8001916:	8c3b      	ldrh	r3, [r7, #32]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff12 	bl	8001744 <LCD_sendData_NoCS>
	while (n) {
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1ed      	bne.n	8001902 <LCD_rect+0x52>
	}
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <LCD_rect+0x90>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a06      	ldr	r2, [pc, #24]	; (8001944 <LCD_rect+0x94>)
 800192c:	8811      	ldrh	r1, [r2, #0]
 800192e:	2201      	movs	r2, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f001 fd7f 	bl	8003434 <HAL_GPIO_WritePin>
}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bd90      	pop	{r4, r7, pc}
 800193e:	bf00      	nop
 8001940:	200004c0 	.word	0x200004c0
 8001944:	200004c4 	.word	0x200004c4

08001948 <delay_us>:
//For interrupts
static uint32_t currentRead;
static uint8_t numRead;
static int shouldRead = 0;
void delay_us(uint16_t us) // blocking delay
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(countTim, 0); // set the counter value a 0
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <delay_us+0x34>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2200      	movs	r2, #0
 800195a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(countTim) < us); // wait for the counter to reach the us input in the parameter
 800195c:	bf00      	nop
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <delay_us+0x34>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	429a      	cmp	r2, r3
 800196a:	d3f8      	bcc.n	800195e <delay_us+0x16>
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	200004d0 	.word	0x200004d0

08001980 <writeOne>:

void writeOne()
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
	uint32_t *writeAdd = (uint32_t *)(GPIOC_ADDR + ODR_OFFSET);
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <writeOne+0x38>)
 8001988:	607b      	str	r3, [r7, #4]
	*writeAdd &= ~(1 << 6);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	601a      	str	r2, [r3, #0]
	delay_us(5);
 8001996:	2005      	movs	r0, #5
 8001998:	f7ff ffd6 	bl	8001948 <delay_us>
	*writeAdd |= (1 << 6);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	601a      	str	r2, [r3, #0]
	delay_us(15);
 80019a8:	200f      	movs	r0, #15
 80019aa:	f7ff ffcd 	bl	8001948 <delay_us>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	48000814 	.word	0x48000814

080019bc <writeZero>:

void writeZero()
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
	uint32_t *writeAdd = (uint32_t *)(GPIOC_ADDR + ODR_OFFSET);
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <writeZero+0x38>)
 80019c4:	607b      	str	r3, [r7, #4]
	*writeAdd &= ~(1 << 6);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	601a      	str	r2, [r3, #0]
	// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
	delay_us(15); // 3.125
 80019d2:	200f      	movs	r0, #15
 80019d4:	f7ff ffb8 	bl	8001948 <delay_us>
	*writeAdd |= (1 << 6);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	601a      	str	r2, [r3, #0]
	// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
	delay_us(5); // 1.375
 80019e4:	2005      	movs	r0, #5
 80019e6:	f7ff ffaf 	bl	8001948 <delay_us>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	48000814 	.word	0x48000814

080019f8 <intRead>:
	buttonVals |= (*readAdd >> 6) & 1;
	delay_us(15);
	return buttonVals;
}

uint32_t intRead(){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
	volatile uint32_t *writeAdd = (uint32_t *)(GPIOC_ADDR + ODR_OFFSET);
 80019fe:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <intRead+0xa8>)
 8001a00:	607b      	str	r3, [r7, #4]
	writeZero();
 8001a02:	f7ff ffdb 	bl	80019bc <writeZero>
	writeZero();
 8001a06:	f7ff ffd9 	bl	80019bc <writeZero>
	writeZero();
 8001a0a:	f7ff ffd7 	bl	80019bc <writeZero>
	writeZero();
 8001a0e:	f7ff ffd5 	bl	80019bc <writeZero>
	writeZero();
 8001a12:	f7ff ffd3 	bl	80019bc <writeZero>
	writeZero();
 8001a16:	f7ff ffd1 	bl	80019bc <writeZero>
	writeZero();
 8001a1a:	f7ff ffcf 	bl	80019bc <writeZero>
	writeOne();
 8001a1e:	f7ff ffaf 	bl	8001980 <writeOne>
	*writeAdd &= ~(1 << 6);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	601a      	str	r2, [r3, #0]
	delay_us(5);
 8001a2e:	2005      	movs	r0, #5
 8001a30:	f7ff ff8a 	bl	8001948 <delay_us>
	*writeAdd |= (1 << 6);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	601a      	str	r2, [r3, #0]
	delay_us(10);
 8001a40:	200a      	movs	r0, #10
 8001a42:	f7ff ff81 	bl	8001948 <delay_us>
	shouldRead = 1;
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <intRead+0xac>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(watchdogTim, 0); // 1MHz timer
 8001a4c:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <intRead+0xb0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24
	while (numRead < 32 && __HAL_TIM_GET_COUNTER(watchdogTim) < 130); //watchDog timeout
 8001a56:	bf00      	nop
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <intRead+0xb4>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b1f      	cmp	r3, #31
 8001a5e:	d805      	bhi.n	8001a6c <intRead+0x74>
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <intRead+0xb0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	2b81      	cmp	r3, #129	; 0x81
 8001a6a:	d9f5      	bls.n	8001a58 <intRead+0x60>
	if(numRead < 32){
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <intRead+0xb4>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b1f      	cmp	r3, #31
 8001a72:	d809      	bhi.n	8001a88 <intRead+0x90>
		currentRead = currentRead << (32 - numRead); //attempt to fix the transmission
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <intRead+0xb8>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <intRead+0xb4>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	f1c3 0320 	rsb	r3, r3, #32
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <intRead+0xb8>)
 8001a86:	6013      	str	r3, [r2, #0]
	}
	numRead = 0;
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <intRead+0xb4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
	shouldRead = 0;
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <intRead+0xac>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
	return currentRead;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <intRead+0xb8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	48000814 	.word	0x48000814
 8001aa4:	200004f8 	.word	0x200004f8
 8001aa8:	200004d4 	.word	0x200004d4
 8001aac:	200004f4 	.word	0x200004f4
 8001ab0:	200004f0 	.word	0x200004f0

08001ab4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	80fb      	strh	r3, [r7, #6]
	//used by n64 intRead()
	//Falling edge trigger. delay 1.7us then read into static var
	  volatile uint32_t *readAdd = (uint32_t *)(GPIOC_ADDR + IDR_OFFSET);
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x68>)
 8001ac0:	60fb      	str	r3, [r7, #12]

	if(shouldRead){
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d023      	beq.n	8001b12 <HAL_GPIO_EXTI_Callback+0x5e>
	  delay_us(3); //??
 8001aca:	2003      	movs	r0, #3
 8001acc:	f7ff ff3c 	bl	8001948 <delay_us>
	  numRead++;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_GPIO_EXTI_Callback+0x70>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_GPIO_EXTI_Callback+0x70>)
 8001ada:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(n64_DEBUG_GPIO, n64_DEBUG_PIN, 1);
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_GPIO_EXTI_Callback+0x74>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x78>)
 8001ae2:	8811      	ldrh	r1, [r2, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 fca4 	bl	8003434 <HAL_GPIO_WritePin>
	  currentRead = (currentRead << 1) | ((*readAdd >> 6) & 1);
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	005a      	lsls	r2, r3, #1
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	099b      	lsrs	r3, r3, #6
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	4313      	orrs	r3, r2
 8001afe:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001b00:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(n64_DEBUG_GPIO, n64_DEBUG_PIN, 0);
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_GPIO_EXTI_Callback+0x74>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x78>)
 8001b08:	8811      	ldrh	r1, [r2, #0]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f001 fc91 	bl	8003434 <HAL_GPIO_WritePin>
	}
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	48000810 	.word	0x48000810
 8001b20:	200004f8 	.word	0x200004f8
 8001b24:	200004f4 	.word	0x200004f4
 8001b28:	200004e0 	.word	0x200004e0
 8001b2c:	200004e4 	.word	0x200004e4
 8001b30:	200004f0 	.word	0x200004f0

08001b34 <N64_init>:

void N64_init(TIM_HandleTypeDef *countTimer, TIM_HandleTypeDef *watchdogTimer, GPIO_TypeDef *Data_GPIO, uint16_t Data_PIN, GPIO_TypeDef *Debug_GPIO, uint16_t Debug_PIN, GPIO_TypeDef *Int_GPIO, uint16_t Int_PIN)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	807b      	strh	r3, [r7, #2]
	countTim = countTimer;
 8001b42:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <N64_init+0x5c>)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6013      	str	r3, [r2, #0]
	watchdogTim = watchdogTimer;
 8001b48:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <N64_init+0x60>)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	6013      	str	r3, [r2, #0]
	n64_GPIO = Data_GPIO; // due to nature of making C6 inout by registers, this pin assignment does not matter
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <N64_init+0x64>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6013      	str	r3, [r2, #0]
	n64_PIN = Data_PIN;
 8001b54:	4a11      	ldr	r2, [pc, #68]	; (8001b9c <N64_init+0x68>)
 8001b56:	887b      	ldrh	r3, [r7, #2]
 8001b58:	8013      	strh	r3, [r2, #0]
	n64_DEBUG_GPIO = Debug_GPIO;
 8001b5a:	4a11      	ldr	r2, [pc, #68]	; (8001ba0 <N64_init+0x6c>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6013      	str	r3, [r2, #0]
	n64_DEBUG_PIN = Debug_PIN;
 8001b60:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <N64_init+0x70>)
 8001b62:	8bbb      	ldrh	r3, [r7, #28]
 8001b64:	8013      	strh	r3, [r2, #0]
	n64_INT_GPIO = Int_GPIO;
 8001b66:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <N64_init+0x74>)
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	6013      	str	r3, [r2, #0]
	n64_INT_PIN = Int_PIN;
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <N64_init+0x78>)
 8001b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b70:	8013      	strh	r3, [r2, #0]
	HAL_TIM_Base_Start(countTim);
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <N64_init+0x5c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fe44 	bl	8005804 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(watchdogTim);
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <N64_init+0x60>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f003 fe3f 	bl	8005804 <HAL_TIM_Base_Start>
}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200004d0 	.word	0x200004d0
 8001b94:	200004d4 	.word	0x200004d4
 8001b98:	200004d8 	.word	0x200004d8
 8001b9c:	200004dc 	.word	0x200004dc
 8001ba0:	200004e0 	.word	0x200004e0
 8001ba4:	200004e4 	.word	0x200004e4
 8001ba8:	200004e8 	.word	0x200004e8
 8001bac:	200004ec 	.word	0x200004ec

08001bb0 <step_init>:
void step_init(TIM_HandleTypeDef *countTimer, int mode, 
GPIO_TypeDef *A0GPIO, uint16_t A0PIN,GPIO_TypeDef *A1GPIO, uint16_t A1PIN,
GPIO_TypeDef *A2GPIO, uint16_t A2PIN,GPIO_TypeDef *A3GPIO, uint16_t A3PIN,
GPIO_TypeDef *B0GPIO, uint16_t B0PIN,GPIO_TypeDef *B1GPIO, uint16_t B1PIN,
GPIO_TypeDef *B2GPIO, uint16_t B2PIN,GPIO_TypeDef *B3GPIO, uint16_t B3PIN)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	807b      	strh	r3, [r7, #2]
	countTim = countTimer;
 8001bbe:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <step_init+0x8c>)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6013      	str	r3, [r2, #0]
	stepMode = mode;
 8001bc4:	4a1e      	ldr	r2, [pc, #120]	; (8001c40 <step_init+0x90>)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	6013      	str	r3, [r2, #0]
	A0_GPIO = A0GPIO;
 8001bca:	4a1e      	ldr	r2, [pc, #120]	; (8001c44 <step_init+0x94>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6013      	str	r3, [r2, #0]
	A0_PIN = A0PIN;
 8001bd0:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <step_init+0x98>)
 8001bd2:	887b      	ldrh	r3, [r7, #2]
 8001bd4:	8013      	strh	r3, [r2, #0]
	A1_GPIO = A1GPIO;
 8001bd6:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <step_init+0x9c>)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	6013      	str	r3, [r2, #0]
	A1_PIN = A1PIN;
 8001bdc:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <step_init+0xa0>)
 8001bde:	8bbb      	ldrh	r3, [r7, #28]
 8001be0:	8013      	strh	r3, [r2, #0]
	A2_GPIO = A2GPIO;
 8001be2:	4a1c      	ldr	r2, [pc, #112]	; (8001c54 <step_init+0xa4>)
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	6013      	str	r3, [r2, #0]
	A2_PIN = A2PIN;
 8001be8:	4a1b      	ldr	r2, [pc, #108]	; (8001c58 <step_init+0xa8>)
 8001bea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bec:	8013      	strh	r3, [r2, #0]
	A3_GPIO = A3GPIO;
 8001bee:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <step_init+0xac>)
 8001bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf2:	6013      	str	r3, [r2, #0]
	A3_PIN = A3PIN;
 8001bf4:	4a1a      	ldr	r2, [pc, #104]	; (8001c60 <step_init+0xb0>)
 8001bf6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001bf8:	8013      	strh	r3, [r2, #0]
	B0_GPIO = B0GPIO;
 8001bfa:	4a1a      	ldr	r2, [pc, #104]	; (8001c64 <step_init+0xb4>)
 8001bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfe:	6013      	str	r3, [r2, #0]
	B0_PIN = B0PIN;
 8001c00:	4a19      	ldr	r2, [pc, #100]	; (8001c68 <step_init+0xb8>)
 8001c02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001c04:	8013      	strh	r3, [r2, #0]
	B1_GPIO = B1GPIO;
 8001c06:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <step_init+0xbc>)
 8001c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c0a:	6013      	str	r3, [r2, #0]
	B1_PIN = B1PIN;
 8001c0c:	4a18      	ldr	r2, [pc, #96]	; (8001c70 <step_init+0xc0>)
 8001c0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001c10:	8013      	strh	r3, [r2, #0]
	B2_GPIO = B2GPIO;
 8001c12:	4a18      	ldr	r2, [pc, #96]	; (8001c74 <step_init+0xc4>)
 8001c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c16:	6013      	str	r3, [r2, #0]
	B2_PIN = B2PIN;
 8001c18:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <step_init+0xc8>)
 8001c1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001c1e:	8013      	strh	r3, [r2, #0]
	B3_GPIO = B3GPIO;
 8001c20:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <step_init+0xcc>)
 8001c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c24:	6013      	str	r3, [r2, #0]
	B3_PIN = B3PIN;
 8001c26:	4a16      	ldr	r2, [pc, #88]	; (8001c80 <step_init+0xd0>)
 8001c28:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001c2c:	8013      	strh	r3, [r2, #0]
	
	HAL_TIM_Base_Start(countTimer);
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f003 fde8 	bl	8005804 <HAL_TIM_Base_Start>
}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	200004fc 	.word	0x200004fc
 8001c40:	20000034 	.word	0x20000034
 8001c44:	20000520 	.word	0x20000520
 8001c48:	20000524 	.word	0x20000524
 8001c4c:	20000528 	.word	0x20000528
 8001c50:	2000052c 	.word	0x2000052c
 8001c54:	20000530 	.word	0x20000530
 8001c58:	20000534 	.word	0x20000534
 8001c5c:	20000538 	.word	0x20000538
 8001c60:	2000053c 	.word	0x2000053c
 8001c64:	20000540 	.word	0x20000540
 8001c68:	20000544 	.word	0x20000544
 8001c6c:	20000548 	.word	0x20000548
 8001c70:	2000054c 	.word	0x2000054c
 8001c74:	20000550 	.word	0x20000550
 8001c78:	20000554 	.word	0x20000554
 8001c7c:	20000558 	.word	0x20000558
 8001c80:	2000055c 	.word	0x2000055c

08001c84 <setSpeed>:

void setSpeed(long whatSpeed)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	step_delay = (long)60 * 2 * (long)1000 / number_of_steps / whatSpeed;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <setSpeed+0x2c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <setSpeed+0x30>)
 8001c92:	fb92 f2f3 	sdiv	r2, r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <setSpeed+0x34>)
 8001ca0:	601a      	str	r2, [r3, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000030 	.word	0x20000030
 8001cb4:	0001d4c0 	.word	0x0001d4c0
 8001cb8:	20000500 	.word	0x20000500

08001cbc <stopStep>:
{
	stepMode = mode;
}

void stopStep(int axis)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	if (!axis)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d120      	bne.n	8001d0c <stopStep+0x50>
	{
		HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 0); // d
 8001cca:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <stopStep+0x98>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a22      	ldr	r2, [pc, #136]	; (8001d58 <stopStep+0x9c>)
 8001cd0:	8811      	ldrh	r1, [r2, #0]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f001 fbad 	bl	8003434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 0); // b
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <stopStep+0xa0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a20      	ldr	r2, [pc, #128]	; (8001d60 <stopStep+0xa4>)
 8001ce0:	8811      	ldrh	r1, [r2, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f001 fba5 	bl	8003434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 0); // a
 8001cea:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <stopStep+0xa8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1e      	ldr	r2, [pc, #120]	; (8001d68 <stopStep+0xac>)
 8001cf0:	8811      	ldrh	r1, [r2, #0]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 fb9d 	bl	8003434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 0); // c
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <stopStep+0xb0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1c      	ldr	r2, [pc, #112]	; (8001d70 <stopStep+0xb4>)
 8001d00:	8811      	ldrh	r1, [r2, #0]
 8001d02:	2200      	movs	r2, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 fb95 	bl	8003434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
		HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
		HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
		HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
	}
}
 8001d0a:	e01f      	b.n	8001d4c <stopStep+0x90>
		HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <stopStep+0xb8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <stopStep+0xbc>)
 8001d12:	8811      	ldrh	r1, [r2, #0]
 8001d14:	2200      	movs	r2, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fb8c 	bl	8003434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <stopStep+0xc0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <stopStep+0xc4>)
 8001d22:	8811      	ldrh	r1, [r2, #0]
 8001d24:	2200      	movs	r2, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f001 fb84 	bl	8003434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <stopStep+0xc8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a15      	ldr	r2, [pc, #84]	; (8001d88 <stopStep+0xcc>)
 8001d32:	8811      	ldrh	r1, [r2, #0]
 8001d34:	2200      	movs	r2, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 fb7c 	bl	8003434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <stopStep+0xd0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a13      	ldr	r2, [pc, #76]	; (8001d90 <stopStep+0xd4>)
 8001d42:	8811      	ldrh	r1, [r2, #0]
 8001d44:	2200      	movs	r2, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f001 fb74 	bl	8003434 <HAL_GPIO_WritePin>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000520 	.word	0x20000520
 8001d58:	20000524 	.word	0x20000524
 8001d5c:	20000528 	.word	0x20000528
 8001d60:	2000052c 	.word	0x2000052c
 8001d64:	20000530 	.word	0x20000530
 8001d68:	20000534 	.word	0x20000534
 8001d6c:	20000538 	.word	0x20000538
 8001d70:	2000053c 	.word	0x2000053c
 8001d74:	20000540 	.word	0x20000540
 8001d78:	20000544 	.word	0x20000544
 8001d7c:	20000548 	.word	0x20000548
 8001d80:	2000054c 	.word	0x2000054c
 8001d84:	20000550 	.word	0x20000550
 8001d88:	20000554 	.word	0x20000554
 8001d8c:	20000558 	.word	0x20000558
 8001d90:	2000055c 	.word	0x2000055c

08001d94 <stepDiag>:

void stepDiag(int x_steps_to_move, int y_steps_to_move)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
	int lastMov = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]

	int x_steps_left = abs(x_steps_to_move);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bfb8      	it	lt
 8001da8:	425b      	neglt	r3, r3
 8001daa:	613b      	str	r3, [r7, #16]
	int y_steps_left = abs(y_steps_to_move);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bfb8      	it	lt
 8001db2:	425b      	neglt	r3, r3
 8001db4:	60fb      	str	r3, [r7, #12]
	if (x_steps_to_move > 0)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	dd02      	ble.n	8001dc2 <stepDiag+0x2e>
	{
		xdirection = 1;
 8001dbc:	4b6a      	ldr	r3, [pc, #424]	; (8001f68 <stepDiag+0x1d4>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
	}
	if (x_steps_to_move < 0)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	da02      	bge.n	8001dce <stepDiag+0x3a>
	{
		xdirection = 0;
 8001dc8:	4b67      	ldr	r3, [pc, #412]	; (8001f68 <stepDiag+0x1d4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
	}
	if (y_steps_to_move > 0)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	dd02      	ble.n	8001dda <stepDiag+0x46>
	{
		ydirection = 1;
 8001dd4:	4b65      	ldr	r3, [pc, #404]	; (8001f6c <stepDiag+0x1d8>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
	}
	if (y_steps_to_move < 0)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f280 80b5 	bge.w	8001f4c <stepDiag+0x1b8>
	{
		ydirection = 0;
 8001de2:	4b62      	ldr	r3, [pc, #392]	; (8001f6c <stepDiag+0x1d8>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
	}
	while (x_steps_left > 0 || y_steps_left > 0)
 8001de8:	e0b0      	b.n	8001f4c <stepDiag+0x1b8>
	{
		unsigned long now = __HAL_TIM_GET_COUNTER(countTim);
 8001dea:	4b61      	ldr	r3, [pc, #388]	; (8001f70 <stepDiag+0x1dc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	60bb      	str	r3, [r7, #8]
		if (now - last_step_time >= step_delay)
 8001df4:	4b5f      	ldr	r3, [pc, #380]	; (8001f74 <stepDiag+0x1e0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	1ad2      	subs	r2, r2, r3
 8001dfc:	4b5e      	ldr	r3, [pc, #376]	; (8001f78 <stepDiag+0x1e4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f0c0 80a3 	bcc.w	8001f4c <stepDiag+0x1b8>
		{
			last_step_time = now;
 8001e06:	4a5b      	ldr	r2, [pc, #364]	; (8001f74 <stepDiag+0x1e0>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	6013      	str	r3, [r2, #0]
			if (!lastMov || y_steps_left == 0)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <stepDiag+0x84>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d143      	bne.n	8001ea0 <stepDiag+0x10c>
			{
				lastMov = 1;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
				if (xdirection == 1)
 8001e1c:	4b52      	ldr	r3, [pc, #328]	; (8001f68 <stepDiag+0x1d4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d10e      	bne.n	8001e42 <stepDiag+0xae>
				{
					x_step_number++;
 8001e24:	4b55      	ldr	r3, [pc, #340]	; (8001f7c <stepDiag+0x1e8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	4a54      	ldr	r2, [pc, #336]	; (8001f7c <stepDiag+0x1e8>)
 8001e2c:	6013      	str	r3, [r2, #0]
					if (x_step_number == number_of_steps)
 8001e2e:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <stepDiag+0x1e8>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	4b53      	ldr	r3, [pc, #332]	; (8001f80 <stepDiag+0x1ec>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d110      	bne.n	8001e5c <stepDiag+0xc8>
					{
						x_step_number = 0;
 8001e3a:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <stepDiag+0x1e8>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e00c      	b.n	8001e5c <stepDiag+0xc8>
					}
				}
				else
				{
					if (x_step_number == 0)
 8001e42:	4b4e      	ldr	r3, [pc, #312]	; (8001f7c <stepDiag+0x1e8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d103      	bne.n	8001e52 <stepDiag+0xbe>
					{
						x_step_number = number_of_steps;
 8001e4a:	4b4d      	ldr	r3, [pc, #308]	; (8001f80 <stepDiag+0x1ec>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a4b      	ldr	r2, [pc, #300]	; (8001f7c <stepDiag+0x1e8>)
 8001e50:	6013      	str	r3, [r2, #0]
					}
					x_step_number--;
 8001e52:	4b4a      	ldr	r3, [pc, #296]	; (8001f7c <stepDiag+0x1e8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	4a48      	ldr	r2, [pc, #288]	; (8001f7c <stepDiag+0x1e8>)
 8001e5a:	6013      	str	r3, [r2, #0]
				}
				x_steps_left--;
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	613b      	str	r3, [r7, #16]
				if (stepMode)
 8001e62:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <stepDiag+0x1f0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00d      	beq.n	8001e86 <stepDiag+0xf2>
				{
					stepMotor(x_step_number % 4, 0);
 8001e6a:	4b44      	ldr	r3, [pc, #272]	; (8001f7c <stepDiag+0x1e8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	425a      	negs	r2, r3
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	f002 0203 	and.w	r2, r2, #3
 8001e78:	bf58      	it	pl
 8001e7a:	4253      	negpl	r3, r2
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 f914 	bl	80020ac <stepMotor>
 8001e84:	e00c      	b.n	8001ea0 <stepDiag+0x10c>
				}
				else
				{
					stepMotor(x_step_number % 8, 0);
 8001e86:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <stepDiag+0x1e8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	425a      	negs	r2, r3
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	f002 0207 	and.w	r2, r2, #7
 8001e94:	bf58      	it	pl
 8001e96:	4253      	negpl	r3, r2
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f906 	bl	80020ac <stepMotor>
				}
			}
			if (lastMov || x_steps_left == 0)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <stepDiag+0x118>
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d143      	bne.n	8001f34 <stepDiag+0x1a0>
			{
				lastMov = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
				if (ydirection == 1)
 8001eb0:	4b2e      	ldr	r3, [pc, #184]	; (8001f6c <stepDiag+0x1d8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d10e      	bne.n	8001ed6 <stepDiag+0x142>
				{
					y_step_number++;
 8001eb8:	4b33      	ldr	r3, [pc, #204]	; (8001f88 <stepDiag+0x1f4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	4a32      	ldr	r2, [pc, #200]	; (8001f88 <stepDiag+0x1f4>)
 8001ec0:	6013      	str	r3, [r2, #0]
					if (y_step_number == number_of_steps)
 8001ec2:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <stepDiag+0x1f4>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4b2e      	ldr	r3, [pc, #184]	; (8001f80 <stepDiag+0x1ec>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d110      	bne.n	8001ef0 <stepDiag+0x15c>
					{
						y_step_number = 0;
 8001ece:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <stepDiag+0x1f4>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	e00c      	b.n	8001ef0 <stepDiag+0x15c>
					}
				}
				else
				{
					if (y_step_number == 0)
 8001ed6:	4b2c      	ldr	r3, [pc, #176]	; (8001f88 <stepDiag+0x1f4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d103      	bne.n	8001ee6 <stepDiag+0x152>
					{
						y_step_number = number_of_steps;
 8001ede:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <stepDiag+0x1ec>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a29      	ldr	r2, [pc, #164]	; (8001f88 <stepDiag+0x1f4>)
 8001ee4:	6013      	str	r3, [r2, #0]
					}
					y_step_number--;
 8001ee6:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <stepDiag+0x1f4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	4a26      	ldr	r2, [pc, #152]	; (8001f88 <stepDiag+0x1f4>)
 8001eee:	6013      	str	r3, [r2, #0]
				}
				y_steps_left--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	60fb      	str	r3, [r7, #12]
				if (stepMode)
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <stepDiag+0x1f0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00d      	beq.n	8001f1a <stepDiag+0x186>
				{
					stepMotor(y_step_number % 4, 1);
 8001efe:	4b22      	ldr	r3, [pc, #136]	; (8001f88 <stepDiag+0x1f4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	425a      	negs	r2, r3
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	f002 0203 	and.w	r2, r2, #3
 8001f0c:	bf58      	it	pl
 8001f0e:	4253      	negpl	r3, r2
 8001f10:	2101      	movs	r1, #1
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f8ca 	bl	80020ac <stepMotor>
 8001f18:	e00c      	b.n	8001f34 <stepDiag+0x1a0>
				}
				else
				{
					stepMotor(y_step_number % 8, 1);
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <stepDiag+0x1f4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	425a      	negs	r2, r3
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	f002 0207 	and.w	r2, r2, #7
 8001f28:	bf58      	it	pl
 8001f2a:	4253      	negpl	r3, r2
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f8bc 	bl	80020ac <stepMotor>
				}
			}
			if (x_steps_left == 0)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <stepDiag+0x1ac>
			{
				stopStep(0);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff febe 	bl	8001cbc <stopStep>
			}
			if (y_steps_left == 0)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d102      	bne.n	8001f4c <stepDiag+0x1b8>
			{
				stopStep(1);
 8001f46:	2001      	movs	r0, #1
 8001f48:	f7ff feb8 	bl	8001cbc <stopStep>
	while (x_steps_left > 0 || y_steps_left > 0)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f73f af4b 	bgt.w	8001dea <stepDiag+0x56>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f73f af47 	bgt.w	8001dea <stepDiag+0x56>
			}
		}
	}
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000510 	.word	0x20000510
 8001f6c:	20000514 	.word	0x20000514
 8001f70:	200004fc 	.word	0x200004fc
 8001f74:	2000050c 	.word	0x2000050c
 8001f78:	20000500 	.word	0x20000500
 8001f7c:	20000518 	.word	0x20000518
 8001f80:	20000030 	.word	0x20000030
 8001f84:	20000034 	.word	0x20000034
 8001f88:	2000051c 	.word	0x2000051c

08001f8c <step>:

void step(int steps_to_move, int axis)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
	int steps_left = abs(steps_to_move);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bfb8      	it	lt
 8001f9c:	425b      	neglt	r3, r3
 8001f9e:	60fb      	str	r3, [r7, #12]
	if (steps_to_move > 0)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	dd03      	ble.n	8001fae <step+0x22>
	{
		direction = 1;
 8001fa6:	4b32      	ldr	r3, [pc, #200]	; (8002070 <step+0xe4>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e058      	b.n	8002060 <step+0xd4>
	}
	else if (steps_to_move < 0)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	da55      	bge.n	8002060 <step+0xd4>
	{
		direction = 0;
 8001fb4:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <step+0xe4>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
	}

	while (steps_left > 0)
 8001fba:	e051      	b.n	8002060 <step+0xd4>
	{
		unsigned long now = __HAL_TIM_GET_COUNTER(countTim);
 8001fbc:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <step+0xe8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	60bb      	str	r3, [r7, #8]
		if (now - last_step_time >= step_delay)
 8001fc6:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <step+0xec>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	1ad2      	subs	r2, r2, r3
 8001fce:	4b2b      	ldr	r3, [pc, #172]	; (800207c <step+0xf0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d344      	bcc.n	8002060 <step+0xd4>
		{
			last_step_time = now;
 8001fd6:	4a28      	ldr	r2, [pc, #160]	; (8002078 <step+0xec>)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	6013      	str	r3, [r2, #0]
			if (direction == 1)
 8001fdc:	4b24      	ldr	r3, [pc, #144]	; (8002070 <step+0xe4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d10e      	bne.n	8002002 <step+0x76>
			{
				step_number++;
 8001fe4:	4b26      	ldr	r3, [pc, #152]	; (8002080 <step+0xf4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	4a25      	ldr	r2, [pc, #148]	; (8002080 <step+0xf4>)
 8001fec:	6013      	str	r3, [r2, #0]
				if (step_number == number_of_steps)
 8001fee:	4b24      	ldr	r3, [pc, #144]	; (8002080 <step+0xf4>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <step+0xf8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d110      	bne.n	800201c <step+0x90>
				{
					step_number = 0;
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <step+0xf4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e00c      	b.n	800201c <step+0x90>
				}
			}
			else
			{
				if (step_number == 0)
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <step+0xf4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d103      	bne.n	8002012 <step+0x86>
				{
					step_number = number_of_steps;
 800200a:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <step+0xf8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <step+0xf4>)
 8002010:	6013      	str	r3, [r2, #0]
				}
				step_number--;
 8002012:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <step+0xf4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3b01      	subs	r3, #1
 8002018:	4a19      	ldr	r2, [pc, #100]	; (8002080 <step+0xf4>)
 800201a:	6013      	str	r3, [r2, #0]
			}
			steps_left--;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3b01      	subs	r3, #1
 8002020:	60fb      	str	r3, [r7, #12]
			if (stepMode)
 8002022:	4b19      	ldr	r3, [pc, #100]	; (8002088 <step+0xfc>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00d      	beq.n	8002046 <step+0xba>
			{
				stepMotor(step_number % 4, axis);
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <step+0xf4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	425a      	negs	r2, r3
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	f002 0203 	and.w	r2, r2, #3
 8002038:	bf58      	it	pl
 800203a:	4253      	negpl	r3, r2
 800203c:	6839      	ldr	r1, [r7, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f834 	bl	80020ac <stepMotor>
 8002044:	e00c      	b.n	8002060 <step+0xd4>
			}
			else
			{
				stepMotor(step_number % 8, axis); // was 7
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <step+0xf4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	425a      	negs	r2, r3
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	f002 0207 	and.w	r2, r2, #7
 8002054:	bf58      	it	pl
 8002056:	4253      	negpl	r3, r2
 8002058:	6839      	ldr	r1, [r7, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f826 	bl	80020ac <stepMotor>
	while (steps_left > 0)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	dcaa      	bgt.n	8001fbc <step+0x30>
			}
		}
	}
	// why can't I put stopStep() here??
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000504 	.word	0x20000504
 8002074:	200004fc 	.word	0x200004fc
 8002078:	2000050c 	.word	0x2000050c
 800207c:	20000500 	.word	0x20000500
 8002080:	20000508 	.word	0x20000508
 8002084:	20000030 	.word	0x20000030
 8002088:	20000034 	.word	0x20000034

0800208c <stepStop>:

void stepStop(int steps, int axis)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
	step(steps, axis); // doesn't work either
 8002096:	6839      	ldr	r1, [r7, #0]
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ff77 	bl	8001f8c <step>
	stopStep(axis);
 800209e:	6838      	ldr	r0, [r7, #0]
 80020a0:	f7ff fe0c 	bl	8001cbc <stopStep>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <stepMotor>:

void stepMotor(int thisStep, int axis)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
	if (!axis)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f040 81cc 	bne.w	8002456 <stepMotor+0x3aa>
	{
		if (stepMode)
 80020be:	4bab      	ldr	r3, [pc, #684]	; (800236c <stepMotor+0x2c0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8094 	beq.w	80021f0 <stepMotor+0x144>
		{
			// lettering is notationaly consistant with http://www.idc-online.com/technical_references/pdfs/electrical_engineering/Step_Sequence_of_Stepper_Motor.pdf
			switch (thisStep)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	f200 839e 	bhi.w	800280c <stepMotor+0x760>
 80020d0:	a201      	add	r2, pc, #4	; (adr r2, 80020d8 <stepMotor+0x2c>)
 80020d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d6:	bf00      	nop
 80020d8:	080020e9 	.word	0x080020e9
 80020dc:	0800212b 	.word	0x0800212b
 80020e0:	0800216d 	.word	0x0800216d
 80020e4:	080021af 	.word	0x080021af
			{
			case 0:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 1); // d
 80020e8:	4ba1      	ldr	r3, [pc, #644]	; (8002370 <stepMotor+0x2c4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4aa1      	ldr	r2, [pc, #644]	; (8002374 <stepMotor+0x2c8>)
 80020ee:	8811      	ldrh	r1, [r2, #0]
 80020f0:	2201      	movs	r2, #1
 80020f2:	4618      	mov	r0, r3
 80020f4:	f001 f99e 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 0); // b
 80020f8:	4b9f      	ldr	r3, [pc, #636]	; (8002378 <stepMotor+0x2cc>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a9f      	ldr	r2, [pc, #636]	; (800237c <stepMotor+0x2d0>)
 80020fe:	8811      	ldrh	r1, [r2, #0]
 8002100:	2200      	movs	r2, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f001 f996 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 1); // a
 8002108:	4b9d      	ldr	r3, [pc, #628]	; (8002380 <stepMotor+0x2d4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a9d      	ldr	r2, [pc, #628]	; (8002384 <stepMotor+0x2d8>)
 800210e:	8811      	ldrh	r1, [r2, #0]
 8002110:	2201      	movs	r2, #1
 8002112:	4618      	mov	r0, r3
 8002114:	f001 f98e 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 0); // c
 8002118:	4b9b      	ldr	r3, [pc, #620]	; (8002388 <stepMotor+0x2dc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a9b      	ldr	r2, [pc, #620]	; (800238c <stepMotor+0x2e0>)
 800211e:	8811      	ldrh	r1, [r2, #0]
 8002120:	2200      	movs	r2, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f001 f986 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 8002128:	e370      	b.n	800280c <stepMotor+0x760>

			case 1:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 0); // d
 800212a:	4b91      	ldr	r3, [pc, #580]	; (8002370 <stepMotor+0x2c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a91      	ldr	r2, [pc, #580]	; (8002374 <stepMotor+0x2c8>)
 8002130:	8811      	ldrh	r1, [r2, #0]
 8002132:	2200      	movs	r2, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f001 f97d 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 1); // b
 800213a:	4b8f      	ldr	r3, [pc, #572]	; (8002378 <stepMotor+0x2cc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a8f      	ldr	r2, [pc, #572]	; (800237c <stepMotor+0x2d0>)
 8002140:	8811      	ldrh	r1, [r2, #0]
 8002142:	2201      	movs	r2, #1
 8002144:	4618      	mov	r0, r3
 8002146:	f001 f975 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 1); // a
 800214a:	4b8d      	ldr	r3, [pc, #564]	; (8002380 <stepMotor+0x2d4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a8d      	ldr	r2, [pc, #564]	; (8002384 <stepMotor+0x2d8>)
 8002150:	8811      	ldrh	r1, [r2, #0]
 8002152:	2201      	movs	r2, #1
 8002154:	4618      	mov	r0, r3
 8002156:	f001 f96d 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 0); // c
 800215a:	4b8b      	ldr	r3, [pc, #556]	; (8002388 <stepMotor+0x2dc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a8b      	ldr	r2, [pc, #556]	; (800238c <stepMotor+0x2e0>)
 8002160:	8811      	ldrh	r1, [r2, #0]
 8002162:	2200      	movs	r2, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f001 f965 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 800216a:	e34f      	b.n	800280c <stepMotor+0x760>

			case 2:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 0); // d
 800216c:	4b80      	ldr	r3, [pc, #512]	; (8002370 <stepMotor+0x2c4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a80      	ldr	r2, [pc, #512]	; (8002374 <stepMotor+0x2c8>)
 8002172:	8811      	ldrh	r1, [r2, #0]
 8002174:	2200      	movs	r2, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f001 f95c 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 1); // b
 800217c:	4b7e      	ldr	r3, [pc, #504]	; (8002378 <stepMotor+0x2cc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a7e      	ldr	r2, [pc, #504]	; (800237c <stepMotor+0x2d0>)
 8002182:	8811      	ldrh	r1, [r2, #0]
 8002184:	2201      	movs	r2, #1
 8002186:	4618      	mov	r0, r3
 8002188:	f001 f954 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 0); // a
 800218c:	4b7c      	ldr	r3, [pc, #496]	; (8002380 <stepMotor+0x2d4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a7c      	ldr	r2, [pc, #496]	; (8002384 <stepMotor+0x2d8>)
 8002192:	8811      	ldrh	r1, [r2, #0]
 8002194:	2200      	movs	r2, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f001 f94c 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 1); // c
 800219c:	4b7a      	ldr	r3, [pc, #488]	; (8002388 <stepMotor+0x2dc>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a7a      	ldr	r2, [pc, #488]	; (800238c <stepMotor+0x2e0>)
 80021a2:	8811      	ldrh	r1, [r2, #0]
 80021a4:	2201      	movs	r2, #1
 80021a6:	4618      	mov	r0, r3
 80021a8:	f001 f944 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 80021ac:	e32e      	b.n	800280c <stepMotor+0x760>

			case 3:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 1); // d
 80021ae:	4b70      	ldr	r3, [pc, #448]	; (8002370 <stepMotor+0x2c4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a70      	ldr	r2, [pc, #448]	; (8002374 <stepMotor+0x2c8>)
 80021b4:	8811      	ldrh	r1, [r2, #0]
 80021b6:	2201      	movs	r2, #1
 80021b8:	4618      	mov	r0, r3
 80021ba:	f001 f93b 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 0); // b
 80021be:	4b6e      	ldr	r3, [pc, #440]	; (8002378 <stepMotor+0x2cc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a6e      	ldr	r2, [pc, #440]	; (800237c <stepMotor+0x2d0>)
 80021c4:	8811      	ldrh	r1, [r2, #0]
 80021c6:	2200      	movs	r2, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f001 f933 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 0); // a
 80021ce:	4b6c      	ldr	r3, [pc, #432]	; (8002380 <stepMotor+0x2d4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a6c      	ldr	r2, [pc, #432]	; (8002384 <stepMotor+0x2d8>)
 80021d4:	8811      	ldrh	r1, [r2, #0]
 80021d6:	2200      	movs	r2, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f001 f92b 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 1); // c
 80021de:	4b6a      	ldr	r3, [pc, #424]	; (8002388 <stepMotor+0x2dc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a6a      	ldr	r2, [pc, #424]	; (800238c <stepMotor+0x2e0>)
 80021e4:	8811      	ldrh	r1, [r2, #0]
 80021e6:	2201      	movs	r2, #1
 80021e8:	4618      	mov	r0, r3
 80021ea:	f001 f923 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 80021ee:	e30d      	b.n	800280c <stepMotor+0x760>
			}
		}
		else
		{
			switch (thisStep)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b07      	cmp	r3, #7
 80021f4:	f200 830a 	bhi.w	800280c <stepMotor+0x760>
 80021f8:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <stepMotor+0x154>)
 80021fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fe:	bf00      	nop
 8002200:	08002221 	.word	0x08002221
 8002204:	08002263 	.word	0x08002263
 8002208:	080022a5 	.word	0x080022a5
 800220c:	080022e7 	.word	0x080022e7
 8002210:	08002329 	.word	0x08002329
 8002214:	08002391 	.word	0x08002391
 8002218:	080023d3 	.word	0x080023d3
 800221c:	08002415 	.word	0x08002415
			{
			case 0:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 1); // d
 8002220:	4b53      	ldr	r3, [pc, #332]	; (8002370 <stepMotor+0x2c4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a53      	ldr	r2, [pc, #332]	; (8002374 <stepMotor+0x2c8>)
 8002226:	8811      	ldrh	r1, [r2, #0]
 8002228:	2201      	movs	r2, #1
 800222a:	4618      	mov	r0, r3
 800222c:	f001 f902 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 0); // b
 8002230:	4b51      	ldr	r3, [pc, #324]	; (8002378 <stepMotor+0x2cc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a51      	ldr	r2, [pc, #324]	; (800237c <stepMotor+0x2d0>)
 8002236:	8811      	ldrh	r1, [r2, #0]
 8002238:	2200      	movs	r2, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f001 f8fa 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 1); // a
 8002240:	4b4f      	ldr	r3, [pc, #316]	; (8002380 <stepMotor+0x2d4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a4f      	ldr	r2, [pc, #316]	; (8002384 <stepMotor+0x2d8>)
 8002246:	8811      	ldrh	r1, [r2, #0]
 8002248:	2201      	movs	r2, #1
 800224a:	4618      	mov	r0, r3
 800224c:	f001 f8f2 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 0); // c
 8002250:	4b4d      	ldr	r3, [pc, #308]	; (8002388 <stepMotor+0x2dc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a4d      	ldr	r2, [pc, #308]	; (800238c <stepMotor+0x2e0>)
 8002256:	8811      	ldrh	r1, [r2, #0]
 8002258:	2200      	movs	r2, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f001 f8ea 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 8002260:	e2d4      	b.n	800280c <stepMotor+0x760>

			case 1:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 0); // d
 8002262:	4b43      	ldr	r3, [pc, #268]	; (8002370 <stepMotor+0x2c4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a43      	ldr	r2, [pc, #268]	; (8002374 <stepMotor+0x2c8>)
 8002268:	8811      	ldrh	r1, [r2, #0]
 800226a:	2200      	movs	r2, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f001 f8e1 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 0); // b
 8002272:	4b41      	ldr	r3, [pc, #260]	; (8002378 <stepMotor+0x2cc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a41      	ldr	r2, [pc, #260]	; (800237c <stepMotor+0x2d0>)
 8002278:	8811      	ldrh	r1, [r2, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f001 f8d9 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 1); // a
 8002282:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <stepMotor+0x2d4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a3f      	ldr	r2, [pc, #252]	; (8002384 <stepMotor+0x2d8>)
 8002288:	8811      	ldrh	r1, [r2, #0]
 800228a:	2201      	movs	r2, #1
 800228c:	4618      	mov	r0, r3
 800228e:	f001 f8d1 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 0); // c
 8002292:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <stepMotor+0x2dc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a3d      	ldr	r2, [pc, #244]	; (800238c <stepMotor+0x2e0>)
 8002298:	8811      	ldrh	r1, [r2, #0]
 800229a:	2200      	movs	r2, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f001 f8c9 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 80022a2:	e2b3      	b.n	800280c <stepMotor+0x760>

			case 2:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 0); // d
 80022a4:	4b32      	ldr	r3, [pc, #200]	; (8002370 <stepMotor+0x2c4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a32      	ldr	r2, [pc, #200]	; (8002374 <stepMotor+0x2c8>)
 80022aa:	8811      	ldrh	r1, [r2, #0]
 80022ac:	2200      	movs	r2, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f001 f8c0 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 1); // b
 80022b4:	4b30      	ldr	r3, [pc, #192]	; (8002378 <stepMotor+0x2cc>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a30      	ldr	r2, [pc, #192]	; (800237c <stepMotor+0x2d0>)
 80022ba:	8811      	ldrh	r1, [r2, #0]
 80022bc:	2201      	movs	r2, #1
 80022be:	4618      	mov	r0, r3
 80022c0:	f001 f8b8 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 1); // a
 80022c4:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <stepMotor+0x2d4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2e      	ldr	r2, [pc, #184]	; (8002384 <stepMotor+0x2d8>)
 80022ca:	8811      	ldrh	r1, [r2, #0]
 80022cc:	2201      	movs	r2, #1
 80022ce:	4618      	mov	r0, r3
 80022d0:	f001 f8b0 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 0); // c
 80022d4:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <stepMotor+0x2dc>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a2c      	ldr	r2, [pc, #176]	; (800238c <stepMotor+0x2e0>)
 80022da:	8811      	ldrh	r1, [r2, #0]
 80022dc:	2200      	movs	r2, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	f001 f8a8 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 80022e4:	e292      	b.n	800280c <stepMotor+0x760>

			case 3:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 0); // d
 80022e6:	4b22      	ldr	r3, [pc, #136]	; (8002370 <stepMotor+0x2c4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a22      	ldr	r2, [pc, #136]	; (8002374 <stepMotor+0x2c8>)
 80022ec:	8811      	ldrh	r1, [r2, #0]
 80022ee:	2200      	movs	r2, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 f89f 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 1); // b
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <stepMotor+0x2cc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a20      	ldr	r2, [pc, #128]	; (800237c <stepMotor+0x2d0>)
 80022fc:	8811      	ldrh	r1, [r2, #0]
 80022fe:	2201      	movs	r2, #1
 8002300:	4618      	mov	r0, r3
 8002302:	f001 f897 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 0); // a
 8002306:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <stepMotor+0x2d4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a1e      	ldr	r2, [pc, #120]	; (8002384 <stepMotor+0x2d8>)
 800230c:	8811      	ldrh	r1, [r2, #0]
 800230e:	2200      	movs	r2, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f001 f88f 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 0); // c
 8002316:	4b1c      	ldr	r3, [pc, #112]	; (8002388 <stepMotor+0x2dc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a1c      	ldr	r2, [pc, #112]	; (800238c <stepMotor+0x2e0>)
 800231c:	8811      	ldrh	r1, [r2, #0]
 800231e:	2200      	movs	r2, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f001 f887 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 8002326:	e271      	b.n	800280c <stepMotor+0x760>
			case 4:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 0); // d
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <stepMotor+0x2c4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a11      	ldr	r2, [pc, #68]	; (8002374 <stepMotor+0x2c8>)
 800232e:	8811      	ldrh	r1, [r2, #0]
 8002330:	2200      	movs	r2, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f001 f87e 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 1); // b
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <stepMotor+0x2cc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0f      	ldr	r2, [pc, #60]	; (800237c <stepMotor+0x2d0>)
 800233e:	8811      	ldrh	r1, [r2, #0]
 8002340:	2201      	movs	r2, #1
 8002342:	4618      	mov	r0, r3
 8002344:	f001 f876 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 0); // a
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <stepMotor+0x2d4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <stepMotor+0x2d8>)
 800234e:	8811      	ldrh	r1, [r2, #0]
 8002350:	2200      	movs	r2, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f001 f86e 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 1); // c
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <stepMotor+0x2dc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0b      	ldr	r2, [pc, #44]	; (800238c <stepMotor+0x2e0>)
 800235e:	8811      	ldrh	r1, [r2, #0]
 8002360:	2201      	movs	r2, #1
 8002362:	4618      	mov	r0, r3
 8002364:	f001 f866 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 8002368:	e250      	b.n	800280c <stepMotor+0x760>
 800236a:	bf00      	nop
 800236c:	20000034 	.word	0x20000034
 8002370:	20000520 	.word	0x20000520
 8002374:	20000524 	.word	0x20000524
 8002378:	20000528 	.word	0x20000528
 800237c:	2000052c 	.word	0x2000052c
 8002380:	20000530 	.word	0x20000530
 8002384:	20000534 	.word	0x20000534
 8002388:	20000538 	.word	0x20000538
 800238c:	2000053c 	.word	0x2000053c
			case 5:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 0); // d
 8002390:	4baa      	ldr	r3, [pc, #680]	; (800263c <stepMotor+0x590>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4aaa      	ldr	r2, [pc, #680]	; (8002640 <stepMotor+0x594>)
 8002396:	8811      	ldrh	r1, [r2, #0]
 8002398:	2200      	movs	r2, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f001 f84a 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 0); // b
 80023a0:	4ba8      	ldr	r3, [pc, #672]	; (8002644 <stepMotor+0x598>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4aa8      	ldr	r2, [pc, #672]	; (8002648 <stepMotor+0x59c>)
 80023a6:	8811      	ldrh	r1, [r2, #0]
 80023a8:	2200      	movs	r2, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f001 f842 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 0); // a
 80023b0:	4ba6      	ldr	r3, [pc, #664]	; (800264c <stepMotor+0x5a0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4aa6      	ldr	r2, [pc, #664]	; (8002650 <stepMotor+0x5a4>)
 80023b6:	8811      	ldrh	r1, [r2, #0]
 80023b8:	2200      	movs	r2, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f001 f83a 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 1); // c
 80023c0:	4ba4      	ldr	r3, [pc, #656]	; (8002654 <stepMotor+0x5a8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4aa4      	ldr	r2, [pc, #656]	; (8002658 <stepMotor+0x5ac>)
 80023c6:	8811      	ldrh	r1, [r2, #0]
 80023c8:	2201      	movs	r2, #1
 80023ca:	4618      	mov	r0, r3
 80023cc:	f001 f832 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 80023d0:	e21c      	b.n	800280c <stepMotor+0x760>
			case 6:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 1); // d
 80023d2:	4b9a      	ldr	r3, [pc, #616]	; (800263c <stepMotor+0x590>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a9a      	ldr	r2, [pc, #616]	; (8002640 <stepMotor+0x594>)
 80023d8:	8811      	ldrh	r1, [r2, #0]
 80023da:	2201      	movs	r2, #1
 80023dc:	4618      	mov	r0, r3
 80023de:	f001 f829 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 0); // b
 80023e2:	4b98      	ldr	r3, [pc, #608]	; (8002644 <stepMotor+0x598>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a98      	ldr	r2, [pc, #608]	; (8002648 <stepMotor+0x59c>)
 80023e8:	8811      	ldrh	r1, [r2, #0]
 80023ea:	2200      	movs	r2, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f001 f821 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 0); // a
 80023f2:	4b96      	ldr	r3, [pc, #600]	; (800264c <stepMotor+0x5a0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a96      	ldr	r2, [pc, #600]	; (8002650 <stepMotor+0x5a4>)
 80023f8:	8811      	ldrh	r1, [r2, #0]
 80023fa:	2200      	movs	r2, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f001 f819 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 1); // c
 8002402:	4b94      	ldr	r3, [pc, #592]	; (8002654 <stepMotor+0x5a8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a94      	ldr	r2, [pc, #592]	; (8002658 <stepMotor+0x5ac>)
 8002408:	8811      	ldrh	r1, [r2, #0]
 800240a:	2201      	movs	r2, #1
 800240c:	4618      	mov	r0, r3
 800240e:	f001 f811 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 8002412:	e1fb      	b.n	800280c <stepMotor+0x760>
			case 7:
				HAL_GPIO_WritePin(A0_GPIO, A0_PIN, 1); // d
 8002414:	4b89      	ldr	r3, [pc, #548]	; (800263c <stepMotor+0x590>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a89      	ldr	r2, [pc, #548]	; (8002640 <stepMotor+0x594>)
 800241a:	8811      	ldrh	r1, [r2, #0]
 800241c:	2201      	movs	r2, #1
 800241e:	4618      	mov	r0, r3
 8002420:	f001 f808 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A1_GPIO, A1_PIN, 0); // b
 8002424:	4b87      	ldr	r3, [pc, #540]	; (8002644 <stepMotor+0x598>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a87      	ldr	r2, [pc, #540]	; (8002648 <stepMotor+0x59c>)
 800242a:	8811      	ldrh	r1, [r2, #0]
 800242c:	2200      	movs	r2, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f001 f800 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A2_GPIO, A2_PIN, 0); // a
 8002434:	4b85      	ldr	r3, [pc, #532]	; (800264c <stepMotor+0x5a0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a85      	ldr	r2, [pc, #532]	; (8002650 <stepMotor+0x5a4>)
 800243a:	8811      	ldrh	r1, [r2, #0]
 800243c:	2200      	movs	r2, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fff8 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A3_GPIO, A3_PIN, 0); // c
 8002444:	4b83      	ldr	r3, [pc, #524]	; (8002654 <stepMotor+0x5a8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a83      	ldr	r2, [pc, #524]	; (8002658 <stepMotor+0x5ac>)
 800244a:	8811      	ldrh	r1, [r2, #0]
 800244c:	2200      	movs	r2, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fff0 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 8002454:	e1da      	b.n	800280c <stepMotor+0x760>
			}
		}
	}
	else
	{
		if (stepMode)
 8002456:	4b81      	ldr	r3, [pc, #516]	; (800265c <stepMotor+0x5b0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8094 	beq.w	8002588 <stepMotor+0x4dc>
		{
			switch (thisStep)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b03      	cmp	r3, #3
 8002464:	f200 81d2 	bhi.w	800280c <stepMotor+0x760>
 8002468:	a201      	add	r2, pc, #4	; (adr r2, 8002470 <stepMotor+0x3c4>)
 800246a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246e:	bf00      	nop
 8002470:	08002481 	.word	0x08002481
 8002474:	080024c3 	.word	0x080024c3
 8002478:	08002505 	.word	0x08002505
 800247c:	08002547 	.word	0x08002547
			{
				// lettering is notationaly consistant with http://www.idc-online.com/technical_references/pdfs/electrical_engineering/Step_Sequence_of_Stepper_Motor.pdf
			case 0:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 1); // d
 8002480:	4b77      	ldr	r3, [pc, #476]	; (8002660 <stepMotor+0x5b4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a77      	ldr	r2, [pc, #476]	; (8002664 <stepMotor+0x5b8>)
 8002486:	8811      	ldrh	r1, [r2, #0]
 8002488:	2201      	movs	r2, #1
 800248a:	4618      	mov	r0, r3
 800248c:	f000 ffd2 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
 8002490:	4b75      	ldr	r3, [pc, #468]	; (8002668 <stepMotor+0x5bc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a75      	ldr	r2, [pc, #468]	; (800266c <stepMotor+0x5c0>)
 8002496:	8811      	ldrh	r1, [r2, #0]
 8002498:	2200      	movs	r2, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f000 ffca 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 1); // a
 80024a0:	4b73      	ldr	r3, [pc, #460]	; (8002670 <stepMotor+0x5c4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a73      	ldr	r2, [pc, #460]	; (8002674 <stepMotor+0x5c8>)
 80024a6:	8811      	ldrh	r1, [r2, #0]
 80024a8:	2201      	movs	r2, #1
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 ffc2 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
 80024b0:	4b71      	ldr	r3, [pc, #452]	; (8002678 <stepMotor+0x5cc>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a71      	ldr	r2, [pc, #452]	; (800267c <stepMotor+0x5d0>)
 80024b6:	8811      	ldrh	r1, [r2, #0]
 80024b8:	2200      	movs	r2, #0
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 ffba 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 80024c0:	e1a4      	b.n	800280c <stepMotor+0x760>

			case 1:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
 80024c2:	4b67      	ldr	r3, [pc, #412]	; (8002660 <stepMotor+0x5b4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a67      	ldr	r2, [pc, #412]	; (8002664 <stepMotor+0x5b8>)
 80024c8:	8811      	ldrh	r1, [r2, #0]
 80024ca:	2200      	movs	r2, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 ffb1 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 1); // b
 80024d2:	4b65      	ldr	r3, [pc, #404]	; (8002668 <stepMotor+0x5bc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a65      	ldr	r2, [pc, #404]	; (800266c <stepMotor+0x5c0>)
 80024d8:	8811      	ldrh	r1, [r2, #0]
 80024da:	2201      	movs	r2, #1
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 ffa9 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 1); // a
 80024e2:	4b63      	ldr	r3, [pc, #396]	; (8002670 <stepMotor+0x5c4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a63      	ldr	r2, [pc, #396]	; (8002674 <stepMotor+0x5c8>)
 80024e8:	8811      	ldrh	r1, [r2, #0]
 80024ea:	2201      	movs	r2, #1
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 ffa1 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
 80024f2:	4b61      	ldr	r3, [pc, #388]	; (8002678 <stepMotor+0x5cc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a61      	ldr	r2, [pc, #388]	; (800267c <stepMotor+0x5d0>)
 80024f8:	8811      	ldrh	r1, [r2, #0]
 80024fa:	2200      	movs	r2, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 ff99 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 8002502:	e183      	b.n	800280c <stepMotor+0x760>

			case 2:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
 8002504:	4b56      	ldr	r3, [pc, #344]	; (8002660 <stepMotor+0x5b4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a56      	ldr	r2, [pc, #344]	; (8002664 <stepMotor+0x5b8>)
 800250a:	8811      	ldrh	r1, [r2, #0]
 800250c:	2200      	movs	r2, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f000 ff90 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 1); // b
 8002514:	4b54      	ldr	r3, [pc, #336]	; (8002668 <stepMotor+0x5bc>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a54      	ldr	r2, [pc, #336]	; (800266c <stepMotor+0x5c0>)
 800251a:	8811      	ldrh	r1, [r2, #0]
 800251c:	2201      	movs	r2, #1
 800251e:	4618      	mov	r0, r3
 8002520:	f000 ff88 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
 8002524:	4b52      	ldr	r3, [pc, #328]	; (8002670 <stepMotor+0x5c4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a52      	ldr	r2, [pc, #328]	; (8002674 <stepMotor+0x5c8>)
 800252a:	8811      	ldrh	r1, [r2, #0]
 800252c:	2200      	movs	r2, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f000 ff80 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 1); // c
 8002534:	4b50      	ldr	r3, [pc, #320]	; (8002678 <stepMotor+0x5cc>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a50      	ldr	r2, [pc, #320]	; (800267c <stepMotor+0x5d0>)
 800253a:	8811      	ldrh	r1, [r2, #0]
 800253c:	2201      	movs	r2, #1
 800253e:	4618      	mov	r0, r3
 8002540:	f000 ff78 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 8002544:	e162      	b.n	800280c <stepMotor+0x760>

			case 3:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 1); // d
 8002546:	4b46      	ldr	r3, [pc, #280]	; (8002660 <stepMotor+0x5b4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a46      	ldr	r2, [pc, #280]	; (8002664 <stepMotor+0x5b8>)
 800254c:	8811      	ldrh	r1, [r2, #0]
 800254e:	2201      	movs	r2, #1
 8002550:	4618      	mov	r0, r3
 8002552:	f000 ff6f 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
 8002556:	4b44      	ldr	r3, [pc, #272]	; (8002668 <stepMotor+0x5bc>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a44      	ldr	r2, [pc, #272]	; (800266c <stepMotor+0x5c0>)
 800255c:	8811      	ldrh	r1, [r2, #0]
 800255e:	2200      	movs	r2, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f000 ff67 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
 8002566:	4b42      	ldr	r3, [pc, #264]	; (8002670 <stepMotor+0x5c4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a42      	ldr	r2, [pc, #264]	; (8002674 <stepMotor+0x5c8>)
 800256c:	8811      	ldrh	r1, [r2, #0]
 800256e:	2200      	movs	r2, #0
 8002570:	4618      	mov	r0, r3
 8002572:	f000 ff5f 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 1); // c
 8002576:	4b40      	ldr	r3, [pc, #256]	; (8002678 <stepMotor+0x5cc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a40      	ldr	r2, [pc, #256]	; (800267c <stepMotor+0x5d0>)
 800257c:	8811      	ldrh	r1, [r2, #0]
 800257e:	2201      	movs	r2, #1
 8002580:	4618      	mov	r0, r3
 8002582:	f000 ff57 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 8002586:	e141      	b.n	800280c <stepMotor+0x760>
			}
		}
		else
		{
			switch (thisStep)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b07      	cmp	r3, #7
 800258c:	f200 813e 	bhi.w	800280c <stepMotor+0x760>
 8002590:	a201      	add	r2, pc, #4	; (adr r2, 8002598 <stepMotor+0x4ec>)
 8002592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002596:	bf00      	nop
 8002598:	080025b9 	.word	0x080025b9
 800259c:	080025fb 	.word	0x080025fb
 80025a0:	08002681 	.word	0x08002681
 80025a4:	080026c3 	.word	0x080026c3
 80025a8:	08002705 	.word	0x08002705
 80025ac:	08002747 	.word	0x08002747
 80025b0:	08002789 	.word	0x08002789
 80025b4:	080027cb 	.word	0x080027cb
			{
			case 0:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 1); // d
 80025b8:	4b29      	ldr	r3, [pc, #164]	; (8002660 <stepMotor+0x5b4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a29      	ldr	r2, [pc, #164]	; (8002664 <stepMotor+0x5b8>)
 80025be:	8811      	ldrh	r1, [r2, #0]
 80025c0:	2201      	movs	r2, #1
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 ff36 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
 80025c8:	4b27      	ldr	r3, [pc, #156]	; (8002668 <stepMotor+0x5bc>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a27      	ldr	r2, [pc, #156]	; (800266c <stepMotor+0x5c0>)
 80025ce:	8811      	ldrh	r1, [r2, #0]
 80025d0:	2200      	movs	r2, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 ff2e 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 1); // a
 80025d8:	4b25      	ldr	r3, [pc, #148]	; (8002670 <stepMotor+0x5c4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a25      	ldr	r2, [pc, #148]	; (8002674 <stepMotor+0x5c8>)
 80025de:	8811      	ldrh	r1, [r2, #0]
 80025e0:	2201      	movs	r2, #1
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 ff26 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
 80025e8:	4b23      	ldr	r3, [pc, #140]	; (8002678 <stepMotor+0x5cc>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a23      	ldr	r2, [pc, #140]	; (800267c <stepMotor+0x5d0>)
 80025ee:	8811      	ldrh	r1, [r2, #0]
 80025f0:	2200      	movs	r2, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 ff1e 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 80025f8:	e108      	b.n	800280c <stepMotor+0x760>

			case 1:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
 80025fa:	4b19      	ldr	r3, [pc, #100]	; (8002660 <stepMotor+0x5b4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a19      	ldr	r2, [pc, #100]	; (8002664 <stepMotor+0x5b8>)
 8002600:	8811      	ldrh	r1, [r2, #0]
 8002602:	2200      	movs	r2, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f000 ff15 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <stepMotor+0x5bc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a17      	ldr	r2, [pc, #92]	; (800266c <stepMotor+0x5c0>)
 8002610:	8811      	ldrh	r1, [r2, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f000 ff0d 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 1); // a
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <stepMotor+0x5c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a15      	ldr	r2, [pc, #84]	; (8002674 <stepMotor+0x5c8>)
 8002620:	8811      	ldrh	r1, [r2, #0]
 8002622:	2201      	movs	r2, #1
 8002624:	4618      	mov	r0, r3
 8002626:	f000 ff05 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <stepMotor+0x5cc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a13      	ldr	r2, [pc, #76]	; (800267c <stepMotor+0x5d0>)
 8002630:	8811      	ldrh	r1, [r2, #0]
 8002632:	2200      	movs	r2, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f000 fefd 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 800263a:	e0e7      	b.n	800280c <stepMotor+0x760>
 800263c:	20000520 	.word	0x20000520
 8002640:	20000524 	.word	0x20000524
 8002644:	20000528 	.word	0x20000528
 8002648:	2000052c 	.word	0x2000052c
 800264c:	20000530 	.word	0x20000530
 8002650:	20000534 	.word	0x20000534
 8002654:	20000538 	.word	0x20000538
 8002658:	2000053c 	.word	0x2000053c
 800265c:	20000034 	.word	0x20000034
 8002660:	20000540 	.word	0x20000540
 8002664:	20000544 	.word	0x20000544
 8002668:	20000548 	.word	0x20000548
 800266c:	2000054c 	.word	0x2000054c
 8002670:	20000550 	.word	0x20000550
 8002674:	20000554 	.word	0x20000554
 8002678:	20000558 	.word	0x20000558
 800267c:	2000055c 	.word	0x2000055c

			case 2:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
 8002680:	4b64      	ldr	r3, [pc, #400]	; (8002814 <stepMotor+0x768>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a64      	ldr	r2, [pc, #400]	; (8002818 <stepMotor+0x76c>)
 8002686:	8811      	ldrh	r1, [r2, #0]
 8002688:	2200      	movs	r2, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fed2 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 1); // b
 8002690:	4b62      	ldr	r3, [pc, #392]	; (800281c <stepMotor+0x770>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a62      	ldr	r2, [pc, #392]	; (8002820 <stepMotor+0x774>)
 8002696:	8811      	ldrh	r1, [r2, #0]
 8002698:	2201      	movs	r2, #1
 800269a:	4618      	mov	r0, r3
 800269c:	f000 feca 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 1); // a
 80026a0:	4b60      	ldr	r3, [pc, #384]	; (8002824 <stepMotor+0x778>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a60      	ldr	r2, [pc, #384]	; (8002828 <stepMotor+0x77c>)
 80026a6:	8811      	ldrh	r1, [r2, #0]
 80026a8:	2201      	movs	r2, #1
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fec2 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
 80026b0:	4b5e      	ldr	r3, [pc, #376]	; (800282c <stepMotor+0x780>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a5e      	ldr	r2, [pc, #376]	; (8002830 <stepMotor+0x784>)
 80026b6:	8811      	ldrh	r1, [r2, #0]
 80026b8:	2200      	movs	r2, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 feba 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 80026c0:	e0a4      	b.n	800280c <stepMotor+0x760>

			case 3:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
 80026c2:	4b54      	ldr	r3, [pc, #336]	; (8002814 <stepMotor+0x768>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a54      	ldr	r2, [pc, #336]	; (8002818 <stepMotor+0x76c>)
 80026c8:	8811      	ldrh	r1, [r2, #0]
 80026ca:	2200      	movs	r2, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 feb1 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 1); // b
 80026d2:	4b52      	ldr	r3, [pc, #328]	; (800281c <stepMotor+0x770>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a52      	ldr	r2, [pc, #328]	; (8002820 <stepMotor+0x774>)
 80026d8:	8811      	ldrh	r1, [r2, #0]
 80026da:	2201      	movs	r2, #1
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 fea9 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
 80026e2:	4b50      	ldr	r3, [pc, #320]	; (8002824 <stepMotor+0x778>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a50      	ldr	r2, [pc, #320]	; (8002828 <stepMotor+0x77c>)
 80026e8:	8811      	ldrh	r1, [r2, #0]
 80026ea:	2200      	movs	r2, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fea1 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
 80026f2:	4b4e      	ldr	r3, [pc, #312]	; (800282c <stepMotor+0x780>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a4e      	ldr	r2, [pc, #312]	; (8002830 <stepMotor+0x784>)
 80026f8:	8811      	ldrh	r1, [r2, #0]
 80026fa:	2200      	movs	r2, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fe99 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 8002702:	e083      	b.n	800280c <stepMotor+0x760>
			case 4:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
 8002704:	4b43      	ldr	r3, [pc, #268]	; (8002814 <stepMotor+0x768>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a43      	ldr	r2, [pc, #268]	; (8002818 <stepMotor+0x76c>)
 800270a:	8811      	ldrh	r1, [r2, #0]
 800270c:	2200      	movs	r2, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fe90 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 1); // b
 8002714:	4b41      	ldr	r3, [pc, #260]	; (800281c <stepMotor+0x770>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a41      	ldr	r2, [pc, #260]	; (8002820 <stepMotor+0x774>)
 800271a:	8811      	ldrh	r1, [r2, #0]
 800271c:	2201      	movs	r2, #1
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fe88 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
 8002724:	4b3f      	ldr	r3, [pc, #252]	; (8002824 <stepMotor+0x778>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a3f      	ldr	r2, [pc, #252]	; (8002828 <stepMotor+0x77c>)
 800272a:	8811      	ldrh	r1, [r2, #0]
 800272c:	2200      	movs	r2, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fe80 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 1); // c
 8002734:	4b3d      	ldr	r3, [pc, #244]	; (800282c <stepMotor+0x780>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a3d      	ldr	r2, [pc, #244]	; (8002830 <stepMotor+0x784>)
 800273a:	8811      	ldrh	r1, [r2, #0]
 800273c:	2201      	movs	r2, #1
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fe78 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 8002744:	e062      	b.n	800280c <stepMotor+0x760>
			case 5:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 0); // d
 8002746:	4b33      	ldr	r3, [pc, #204]	; (8002814 <stepMotor+0x768>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a33      	ldr	r2, [pc, #204]	; (8002818 <stepMotor+0x76c>)
 800274c:	8811      	ldrh	r1, [r2, #0]
 800274e:	2200      	movs	r2, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fe6f 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
 8002756:	4b31      	ldr	r3, [pc, #196]	; (800281c <stepMotor+0x770>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a31      	ldr	r2, [pc, #196]	; (8002820 <stepMotor+0x774>)
 800275c:	8811      	ldrh	r1, [r2, #0]
 800275e:	2200      	movs	r2, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fe67 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
 8002766:	4b2f      	ldr	r3, [pc, #188]	; (8002824 <stepMotor+0x778>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a2f      	ldr	r2, [pc, #188]	; (8002828 <stepMotor+0x77c>)
 800276c:	8811      	ldrh	r1, [r2, #0]
 800276e:	2200      	movs	r2, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fe5f 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 1); // c
 8002776:	4b2d      	ldr	r3, [pc, #180]	; (800282c <stepMotor+0x780>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a2d      	ldr	r2, [pc, #180]	; (8002830 <stepMotor+0x784>)
 800277c:	8811      	ldrh	r1, [r2, #0]
 800277e:	2201      	movs	r2, #1
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fe57 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 8002786:	e041      	b.n	800280c <stepMotor+0x760>
			case 6:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 1); // d
 8002788:	4b22      	ldr	r3, [pc, #136]	; (8002814 <stepMotor+0x768>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a22      	ldr	r2, [pc, #136]	; (8002818 <stepMotor+0x76c>)
 800278e:	8811      	ldrh	r1, [r2, #0]
 8002790:	2201      	movs	r2, #1
 8002792:	4618      	mov	r0, r3
 8002794:	f000 fe4e 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
 8002798:	4b20      	ldr	r3, [pc, #128]	; (800281c <stepMotor+0x770>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a20      	ldr	r2, [pc, #128]	; (8002820 <stepMotor+0x774>)
 800279e:	8811      	ldrh	r1, [r2, #0]
 80027a0:	2200      	movs	r2, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fe46 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
 80027a8:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <stepMotor+0x778>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1e      	ldr	r2, [pc, #120]	; (8002828 <stepMotor+0x77c>)
 80027ae:	8811      	ldrh	r1, [r2, #0]
 80027b0:	2200      	movs	r2, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fe3e 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 1); // c
 80027b8:	4b1c      	ldr	r3, [pc, #112]	; (800282c <stepMotor+0x780>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a1c      	ldr	r2, [pc, #112]	; (8002830 <stepMotor+0x784>)
 80027be:	8811      	ldrh	r1, [r2, #0]
 80027c0:	2201      	movs	r2, #1
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fe36 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 80027c8:	e020      	b.n	800280c <stepMotor+0x760>
			case 7:
				HAL_GPIO_WritePin(B0_GPIO, B0_PIN, 1); // d
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <stepMotor+0x768>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a12      	ldr	r2, [pc, #72]	; (8002818 <stepMotor+0x76c>)
 80027d0:	8811      	ldrh	r1, [r2, #0]
 80027d2:	2201      	movs	r2, #1
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 fe2d 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B1_GPIO, B1_PIN, 0); // b
 80027da:	4b10      	ldr	r3, [pc, #64]	; (800281c <stepMotor+0x770>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a10      	ldr	r2, [pc, #64]	; (8002820 <stepMotor+0x774>)
 80027e0:	8811      	ldrh	r1, [r2, #0]
 80027e2:	2200      	movs	r2, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fe25 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B2_GPIO, B2_PIN, 0); // a
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <stepMotor+0x778>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a0e      	ldr	r2, [pc, #56]	; (8002828 <stepMotor+0x77c>)
 80027f0:	8811      	ldrh	r1, [r2, #0]
 80027f2:	2200      	movs	r2, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 fe1d 	bl	8003434 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B3_GPIO, B3_PIN, 0); // c
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <stepMotor+0x780>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <stepMotor+0x784>)
 8002800:	8811      	ldrh	r1, [r2, #0]
 8002802:	2200      	movs	r2, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f000 fe15 	bl	8003434 <HAL_GPIO_WritePin>
				break;
 800280a:	bf00      	nop
			}
		}
	}
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000540 	.word	0x20000540
 8002818:	20000544 	.word	0x20000544
 800281c:	20000548 	.word	0x20000548
 8002820:	2000054c 	.word	0x2000054c
 8002824:	20000550 	.word	0x20000550
 8002828:	20000554 	.word	0x20000554
 800282c:	20000558 	.word	0x20000558
 8002830:	2000055c 	.word	0x2000055c

08002834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <HAL_MspInit+0x44>)
 800283c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283e:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <HAL_MspInit+0x44>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6613      	str	r3, [r2, #96]	; 0x60
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <HAL_MspInit+0x44>)
 8002848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_MspInit+0x44>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	4a08      	ldr	r2, [pc, #32]	; (8002878 <HAL_MspInit+0x44>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285c:	6593      	str	r3, [r2, #88]	; 0x58
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_MspInit+0x44>)
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000

0800287c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b0ae      	sub	sp, #184	; 0xb8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002894:	f107 0310 	add.w	r3, r7, #16
 8002898:	2294      	movs	r2, #148	; 0x94
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f004 f973 	bl	8006b88 <memset>
  if(hi2c->Instance==I2C1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a21      	ldr	r2, [pc, #132]	; (800292c <HAL_I2C_MspInit+0xb0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d13b      	bne.n	8002924 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80028ac:	2340      	movs	r3, #64	; 0x40
 80028ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80028b0:	2300      	movs	r3, #0
 80028b2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 febd 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80028c4:	f7fe f89a 	bl	80009fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c8:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_I2C_MspInit+0xb4>)
 80028ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028cc:	4a18      	ldr	r2, [pc, #96]	; (8002930 <HAL_I2C_MspInit+0xb4>)
 80028ce:	f043 0302 	orr.w	r3, r3, #2
 80028d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028d4:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_I2C_MspInit+0xb4>)
 80028d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e8:	2312      	movs	r3, #18
 80028ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f4:	2303      	movs	r3, #3
 80028f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028fa:	2304      	movs	r3, #4
 80028fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002900:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002904:	4619      	mov	r1, r3
 8002906:	480b      	ldr	r0, [pc, #44]	; (8002934 <HAL_I2C_MspInit+0xb8>)
 8002908:	f000 fc02 	bl	8003110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <HAL_I2C_MspInit+0xb4>)
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	4a07      	ldr	r2, [pc, #28]	; (8002930 <HAL_I2C_MspInit+0xb4>)
 8002912:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002916:	6593      	str	r3, [r2, #88]	; 0x58
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_I2C_MspInit+0xb4>)
 800291a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002924:	bf00      	nop
 8002926:	37b8      	adds	r7, #184	; 0xb8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40005400 	.word	0x40005400
 8002930:	40021000 	.word	0x40021000
 8002934:	48000400 	.word	0x48000400

08002938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b0ae      	sub	sp, #184	; 0xb8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002950:	f107 0310 	add.w	r3, r7, #16
 8002954:	2294      	movs	r2, #148	; 0x94
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f004 f915 	bl	8006b88 <memset>
  if(huart->Instance==LPUART1)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a23      	ldr	r2, [pc, #140]	; (80029f0 <HAL_UART_MspInit+0xb8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d13e      	bne.n	80029e6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002968:	2320      	movs	r3, #32
 800296a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 800296c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002970:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002972:	f107 0310 	add.w	r3, r7, #16
 8002976:	4618      	mov	r0, r3
 8002978:	f001 fe5e 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002982:	f7fe f83b 	bl	80009fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002986:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <HAL_UART_MspInit+0xbc>)
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	4a1a      	ldr	r2, [pc, #104]	; (80029f4 <HAL_UART_MspInit+0xbc>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002992:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <HAL_UART_MspInit+0xbc>)
 8002994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800299e:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <HAL_UART_MspInit+0xbc>)
 80029a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a2:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <HAL_UART_MspInit+0xbc>)
 80029a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029aa:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <HAL_UART_MspInit+0xbc>)
 80029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80029b6:	f000 ff57 	bl	8003868 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80029ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80029be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ce:	2303      	movs	r3, #3
 80029d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80029d4:	2308      	movs	r3, #8
 80029d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80029de:	4619      	mov	r1, r3
 80029e0:	4805      	ldr	r0, [pc, #20]	; (80029f8 <HAL_UART_MspInit+0xc0>)
 80029e2:	f000 fb95 	bl	8003110 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80029e6:	bf00      	nop
 80029e8:	37b8      	adds	r7, #184	; 0xb8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40008000 	.word	0x40008000
 80029f4:	40021000 	.word	0x40021000
 80029f8:	48001800 	.word	0x48001800

080029fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <HAL_SPI_MspInit+0x7c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d128      	bne.n	8002a70 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <HAL_SPI_MspInit+0x80>)
 8002a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a22:	4a16      	ldr	r2, [pc, #88]	; (8002a7c <HAL_SPI_MspInit+0x80>)
 8002a24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a28:	6613      	str	r3, [r2, #96]	; 0x60
 8002a2a:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <HAL_SPI_MspInit+0x80>)
 8002a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <HAL_SPI_MspInit+0x80>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3a:	4a10      	ldr	r2, [pc, #64]	; (8002a7c <HAL_SPI_MspInit+0x80>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <HAL_SPI_MspInit+0x80>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a4e:	23f0      	movs	r3, #240	; 0xf0
 8002a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a52:	2302      	movs	r3, #2
 8002a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a5e:	2305      	movs	r3, #5
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a62:	f107 0314 	add.w	r3, r7, #20
 8002a66:	4619      	mov	r1, r3
 8002a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a6c:	f000 fb50 	bl	8003110 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a70:	bf00      	nop
 8002a72:	3728      	adds	r7, #40	; 0x28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40013000 	.word	0x40013000
 8002a7c:	40021000 	.word	0x40021000

08002a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08c      	sub	sp, #48	; 0x30
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 031c 	add.w	r3, r7, #28
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa0:	d10c      	bne.n	8002abc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002aa2:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <HAL_TIM_Base_MspInit+0xc4>)
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	4a27      	ldr	r2, [pc, #156]	; (8002b44 <HAL_TIM_Base_MspInit+0xc4>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6593      	str	r3, [r2, #88]	; 0x58
 8002aae:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <HAL_TIM_Base_MspInit+0xc4>)
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	61bb      	str	r3, [r7, #24]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002aba:	e03e      	b.n	8002b3a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM4)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a21      	ldr	r2, [pc, #132]	; (8002b48 <HAL_TIM_Base_MspInit+0xc8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d128      	bne.n	8002b18 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ac6:	4b1f      	ldr	r3, [pc, #124]	; (8002b44 <HAL_TIM_Base_MspInit+0xc4>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <HAL_TIM_Base_MspInit+0xc4>)
 8002acc:	f043 0304 	orr.w	r3, r3, #4
 8002ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <HAL_TIM_Base_MspInit+0xc4>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_TIM_Base_MspInit+0xc4>)
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae2:	4a18      	ldr	r2, [pc, #96]	; (8002b44 <HAL_TIM_Base_MspInit+0xc4>)
 8002ae4:	f043 0310 	orr.w	r3, r3, #16
 8002ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aea:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <HAL_TIM_Base_MspInit+0xc4>)
 8002aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002af6:	2301      	movs	r3, #1
 8002af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b02:	2300      	movs	r3, #0
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b06:	2302      	movs	r3, #2
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b0a:	f107 031c 	add.w	r3, r7, #28
 8002b0e:	4619      	mov	r1, r3
 8002b10:	480e      	ldr	r0, [pc, #56]	; (8002b4c <HAL_TIM_Base_MspInit+0xcc>)
 8002b12:	f000 fafd 	bl	8003110 <HAL_GPIO_Init>
}
 8002b16:	e010      	b.n	8002b3a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0c      	ldr	r2, [pc, #48]	; (8002b50 <HAL_TIM_Base_MspInit+0xd0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d10b      	bne.n	8002b3a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <HAL_TIM_Base_MspInit+0xc4>)
 8002b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b26:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <HAL_TIM_Base_MspInit+0xc4>)
 8002b28:	f043 0308 	orr.w	r3, r3, #8
 8002b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_TIM_Base_MspInit+0xc4>)
 8002b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
}
 8002b3a:	bf00      	nop
 8002b3c:	3730      	adds	r7, #48	; 0x30
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40000800 	.word	0x40000800
 8002b4c:	48001000 	.word	0x48001000
 8002b50:	40000c00 	.word	0x40000c00

08002b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b58:	e7fe      	b.n	8002b58 <NMI_Handler+0x4>

08002b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b5e:	e7fe      	b.n	8002b5e <HardFault_Handler+0x4>

08002b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b64:	e7fe      	b.n	8002b64 <MemManage_Handler+0x4>

08002b66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b66:	b480      	push	{r7}
 8002b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b6a:	e7fe      	b.n	8002b6a <BusFault_Handler+0x4>

08002b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b70:	e7fe      	b.n	8002b70 <UsageFault_Handler+0x4>

08002b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ba0:	f000 f960 	bl	8002e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002bac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002bb0:	f000 fc58 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bb4:	bf00      	nop
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
	return 1;
 8002bbc:	2301      	movs	r3, #1
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_kill>:

int _kill(int pid, int sig)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002bd2:	f003 ffa1 	bl	8006b18 <__errno>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2216      	movs	r2, #22
 8002bda:	601a      	str	r2, [r3, #0]
	return -1;
 8002bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <_exit>:

void _exit (int status)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ffe7 	bl	8002bc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bfa:	e7fe      	b.n	8002bfa <_exit+0x12>

08002bfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	e00a      	b.n	8002c24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c0e:	f3af 8000 	nop.w
 8002c12:	4601      	mov	r1, r0
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	60ba      	str	r2, [r7, #8]
 8002c1a:	b2ca      	uxtb	r2, r1
 8002c1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	3301      	adds	r3, #1
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	dbf0      	blt.n	8002c0e <_read+0x12>
	}

return len;
 8002c2c:	687b      	ldr	r3, [r7, #4]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b086      	sub	sp, #24
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	e009      	b.n	8002c5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	60ba      	str	r2, [r7, #8]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fec3 	bl	80009dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	dbf1      	blt.n	8002c48 <_write+0x12>
	}
	return len;
 8002c64:	687b      	ldr	r3, [r7, #4]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <_close>:

int _close(int file)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
	return -1;
 8002c76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c96:	605a      	str	r2, [r3, #4]
	return 0;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <_isatty>:

int _isatty(int file)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
	return 1;
 8002cae:	2301      	movs	r3, #1
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
	return 0;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce0:	4a14      	ldr	r2, [pc, #80]	; (8002d34 <_sbrk+0x5c>)
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <_sbrk+0x60>)
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cec:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <_sbrk+0x64>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d102      	bne.n	8002cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cf4:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <_sbrk+0x64>)
 8002cf6:	4a12      	ldr	r2, [pc, #72]	; (8002d40 <_sbrk+0x68>)
 8002cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cfa:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <_sbrk+0x64>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d207      	bcs.n	8002d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d08:	f003 ff06 	bl	8006b18 <__errno>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	220c      	movs	r2, #12
 8002d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d12:	f04f 33ff 	mov.w	r3, #4294967295
 8002d16:	e009      	b.n	8002d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <_sbrk+0x64>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d1e:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <_sbrk+0x64>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <_sbrk+0x64>)
 8002d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200a0000 	.word	0x200a0000
 8002d38:	00000400 	.word	0x00000400
 8002d3c:	20000560 	.word	0x20000560
 8002d40:	20000578 	.word	0x20000578

08002d44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <SystemInit+0x20>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <SystemInit+0x20>)
 8002d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002da0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d6c:	f7ff ffea 	bl	8002d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d70:	480c      	ldr	r0, [pc, #48]	; (8002da4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d72:	490d      	ldr	r1, [pc, #52]	; (8002da8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d74:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <LoopForever+0xe>)
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d78:	e002      	b.n	8002d80 <LoopCopyDataInit>

08002d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d7e:	3304      	adds	r3, #4

08002d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d84:	d3f9      	bcc.n	8002d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d86:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d88:	4c0a      	ldr	r4, [pc, #40]	; (8002db4 <LoopForever+0x16>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d8c:	e001      	b.n	8002d92 <LoopFillZerobss>

08002d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d90:	3204      	adds	r2, #4

08002d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d94:	d3fb      	bcc.n	8002d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d96:	f003 fec5 	bl	8006b24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d9a:	f7fd facb 	bl	8000334 <main>

08002d9e <LoopForever>:

LoopForever:
    b LoopForever
 8002d9e:	e7fe      	b.n	8002d9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002da0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da8:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002dac:	08009ac4 	.word	0x08009ac4
  ldr r2, =_sbss
 8002db0:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8002db4:	20000578 	.word	0x20000578

08002db8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002db8:	e7fe      	b.n	8002db8 <ADC1_IRQHandler>

08002dba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc4:	2003      	movs	r0, #3
 8002dc6:	f000 f961 	bl	800308c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f000 f80e 	bl	8002dec <HAL_InitTick>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	71fb      	strb	r3, [r7, #7]
 8002dda:	e001      	b.n	8002de0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ddc:	f7ff fd2a 	bl	8002834 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002de0:	79fb      	ldrb	r3, [r7, #7]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002df8:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <HAL_InitTick+0x6c>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d023      	beq.n	8002e48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e00:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <HAL_InitTick+0x70>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <HAL_InitTick+0x6c>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f96d 	bl	80030f6 <HAL_SYSTICK_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10f      	bne.n	8002e42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b0f      	cmp	r3, #15
 8002e26:	d809      	bhi.n	8002e3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e30:	f000 f937 	bl	80030a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e34:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <HAL_InitTick+0x74>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e007      	b.n	8002e4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
 8002e40:	e004      	b.n	8002e4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	73fb      	strb	r3, [r7, #15]
 8002e46:	e001      	b.n	8002e4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000040 	.word	0x20000040
 8002e5c:	20000038 	.word	0x20000038
 8002e60:	2000003c 	.word	0x2000003c

08002e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_IncTick+0x20>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_IncTick+0x24>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4413      	add	r3, r2
 8002e74:	4a04      	ldr	r2, [pc, #16]	; (8002e88 <HAL_IncTick+0x24>)
 8002e76:	6013      	str	r3, [r2, #0]
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000040 	.word	0x20000040
 8002e88:	20000564 	.word	0x20000564

08002e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <HAL_GetTick+0x14>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000564 	.word	0x20000564

08002ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eac:	f7ff ffee 	bl	8002e8c <HAL_GetTick>
 8002eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d005      	beq.n	8002eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <HAL_Delay+0x44>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eca:	bf00      	nop
 8002ecc:	f7ff ffde 	bl	8002e8c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d8f7      	bhi.n	8002ecc <HAL_Delay+0x28>
  {
  }
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000040 	.word	0x20000040

08002eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1e:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	60d3      	str	r3, [r2, #12]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <__NVIC_GetPriorityGrouping+0x18>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	f003 0307 	and.w	r3, r3, #7
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	db0b      	blt.n	8002f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	4907      	ldr	r1, [pc, #28]	; (8002f88 <__NVIC_EnableIRQ+0x38>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2001      	movs	r0, #1
 8002f72:	fa00 f202 	lsl.w	r2, r0, r2
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000e100 	.word	0xe000e100

08002f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db0a      	blt.n	8002fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	490c      	ldr	r1, [pc, #48]	; (8002fd8 <__NVIC_SetPriority+0x4c>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb4:	e00a      	b.n	8002fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4908      	ldr	r1, [pc, #32]	; (8002fdc <__NVIC_SetPriority+0x50>)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	0112      	lsls	r2, r2, #4
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	440b      	add	r3, r1
 8002fca:	761a      	strb	r2, [r3, #24]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000e100 	.word	0xe000e100
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f1c3 0307 	rsb	r3, r3, #7
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	bf28      	it	cs
 8002ffe:	2304      	movcs	r3, #4
 8003000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3304      	adds	r3, #4
 8003006:	2b06      	cmp	r3, #6
 8003008:	d902      	bls.n	8003010 <NVIC_EncodePriority+0x30>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3b03      	subs	r3, #3
 800300e:	e000      	b.n	8003012 <NVIC_EncodePriority+0x32>
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	401a      	ands	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003028:	f04f 31ff 	mov.w	r1, #4294967295
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	43d9      	mvns	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	4313      	orrs	r3, r2
         );
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003058:	d301      	bcc.n	800305e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800305a:	2301      	movs	r3, #1
 800305c:	e00f      	b.n	800307e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <SysTick_Config+0x40>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003066:	210f      	movs	r1, #15
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	f7ff ff8e 	bl	8002f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <SysTick_Config+0x40>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <SysTick_Config+0x40>)
 8003078:	2207      	movs	r2, #7
 800307a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	e000e010 	.word	0xe000e010

0800308c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff29 	bl	8002eec <__NVIC_SetPriorityGrouping>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030b4:	f7ff ff3e 	bl	8002f34 <__NVIC_GetPriorityGrouping>
 80030b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	6978      	ldr	r0, [r7, #20]
 80030c0:	f7ff ff8e 	bl	8002fe0 <NVIC_EncodePriority>
 80030c4:	4602      	mov	r2, r0
 80030c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff5d 	bl	8002f8c <__NVIC_SetPriority>
}
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	4603      	mov	r3, r0
 80030e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff ff31 	bl	8002f50 <__NVIC_EnableIRQ>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff ffa2 	bl	8003048 <SysTick_Config>
 8003104:	4603      	mov	r3, r0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800311e:	e166      	b.n	80033ee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	2101      	movs	r1, #1
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	4013      	ands	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8158 	beq.w	80033e8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d005      	beq.n	8003150 <HAL_GPIO_Init+0x40>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d130      	bne.n	80031b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4013      	ands	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003186:	2201      	movs	r2, #1
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	f003 0201 	and.w	r2, r3, #1
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d017      	beq.n	80031ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	2203      	movs	r2, #3
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d123      	bne.n	8003242 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	08da      	lsrs	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3208      	adds	r2, #8
 8003202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003206:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	220f      	movs	r2, #15
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4013      	ands	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	08da      	lsrs	r2, r3, #3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3208      	adds	r2, #8
 800323c:	6939      	ldr	r1, [r7, #16]
 800323e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	2203      	movs	r2, #3
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 0203 	and.w	r2, r3, #3
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80b2 	beq.w	80033e8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003284:	4b61      	ldr	r3, [pc, #388]	; (800340c <HAL_GPIO_Init+0x2fc>)
 8003286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003288:	4a60      	ldr	r2, [pc, #384]	; (800340c <HAL_GPIO_Init+0x2fc>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	6613      	str	r3, [r2, #96]	; 0x60
 8003290:	4b5e      	ldr	r3, [pc, #376]	; (800340c <HAL_GPIO_Init+0x2fc>)
 8003292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800329c:	4a5c      	ldr	r2, [pc, #368]	; (8003410 <HAL_GPIO_Init+0x300>)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	089b      	lsrs	r3, r3, #2
 80032a2:	3302      	adds	r3, #2
 80032a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	220f      	movs	r2, #15
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4013      	ands	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032c6:	d02b      	beq.n	8003320 <HAL_GPIO_Init+0x210>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a52      	ldr	r2, [pc, #328]	; (8003414 <HAL_GPIO_Init+0x304>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d025      	beq.n	800331c <HAL_GPIO_Init+0x20c>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a51      	ldr	r2, [pc, #324]	; (8003418 <HAL_GPIO_Init+0x308>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d01f      	beq.n	8003318 <HAL_GPIO_Init+0x208>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a50      	ldr	r2, [pc, #320]	; (800341c <HAL_GPIO_Init+0x30c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d019      	beq.n	8003314 <HAL_GPIO_Init+0x204>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a4f      	ldr	r2, [pc, #316]	; (8003420 <HAL_GPIO_Init+0x310>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d013      	beq.n	8003310 <HAL_GPIO_Init+0x200>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a4e      	ldr	r2, [pc, #312]	; (8003424 <HAL_GPIO_Init+0x314>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00d      	beq.n	800330c <HAL_GPIO_Init+0x1fc>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a4d      	ldr	r2, [pc, #308]	; (8003428 <HAL_GPIO_Init+0x318>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d007      	beq.n	8003308 <HAL_GPIO_Init+0x1f8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a4c      	ldr	r2, [pc, #304]	; (800342c <HAL_GPIO_Init+0x31c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d101      	bne.n	8003304 <HAL_GPIO_Init+0x1f4>
 8003300:	2307      	movs	r3, #7
 8003302:	e00e      	b.n	8003322 <HAL_GPIO_Init+0x212>
 8003304:	2308      	movs	r3, #8
 8003306:	e00c      	b.n	8003322 <HAL_GPIO_Init+0x212>
 8003308:	2306      	movs	r3, #6
 800330a:	e00a      	b.n	8003322 <HAL_GPIO_Init+0x212>
 800330c:	2305      	movs	r3, #5
 800330e:	e008      	b.n	8003322 <HAL_GPIO_Init+0x212>
 8003310:	2304      	movs	r3, #4
 8003312:	e006      	b.n	8003322 <HAL_GPIO_Init+0x212>
 8003314:	2303      	movs	r3, #3
 8003316:	e004      	b.n	8003322 <HAL_GPIO_Init+0x212>
 8003318:	2302      	movs	r3, #2
 800331a:	e002      	b.n	8003322 <HAL_GPIO_Init+0x212>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <HAL_GPIO_Init+0x212>
 8003320:	2300      	movs	r3, #0
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	f002 0203 	and.w	r2, r2, #3
 8003328:	0092      	lsls	r2, r2, #2
 800332a:	4093      	lsls	r3, r2
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003332:	4937      	ldr	r1, [pc, #220]	; (8003410 <HAL_GPIO_Init+0x300>)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	3302      	adds	r3, #2
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003340:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <HAL_GPIO_Init+0x320>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	43db      	mvns	r3, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003364:	4a32      	ldr	r2, [pc, #200]	; (8003430 <HAL_GPIO_Init+0x320>)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800336a:	4b31      	ldr	r3, [pc, #196]	; (8003430 <HAL_GPIO_Init+0x320>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	43db      	mvns	r3, r3
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800338e:	4a28      	ldr	r2, [pc, #160]	; (8003430 <HAL_GPIO_Init+0x320>)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003394:	4b26      	ldr	r3, [pc, #152]	; (8003430 <HAL_GPIO_Init+0x320>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	43db      	mvns	r3, r3
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4013      	ands	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033b8:	4a1d      	ldr	r2, [pc, #116]	; (8003430 <HAL_GPIO_Init+0x320>)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033be:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <HAL_GPIO_Init+0x320>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4013      	ands	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033e2:	4a13      	ldr	r2, [pc, #76]	; (8003430 <HAL_GPIO_Init+0x320>)
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	3301      	adds	r3, #1
 80033ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f47f ae91 	bne.w	8003120 <HAL_GPIO_Init+0x10>
  }
}
 80033fe:	bf00      	nop
 8003400:	bf00      	nop
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	40021000 	.word	0x40021000
 8003410:	40010000 	.word	0x40010000
 8003414:	48000400 	.word	0x48000400
 8003418:	48000800 	.word	0x48000800
 800341c:	48000c00 	.word	0x48000c00
 8003420:	48001000 	.word	0x48001000
 8003424:	48001400 	.word	0x48001400
 8003428:	48001800 	.word	0x48001800
 800342c:	48001c00 	.word	0x48001c00
 8003430:	40010400 	.word	0x40010400

08003434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	807b      	strh	r3, [r7, #2]
 8003440:	4613      	mov	r3, r2
 8003442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003444:	787b      	ldrb	r3, [r7, #1]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800344a:	887a      	ldrh	r2, [r7, #2]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003450:	e002      	b.n	8003458 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800346e:	4b08      	ldr	r3, [pc, #32]	; (8003490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	4013      	ands	r3, r2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d006      	beq.n	8003488 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800347a:	4a05      	ldr	r2, [pc, #20]	; (8003490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe fb16 	bl	8001ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40010400 	.word	0x40010400

08003494 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e081      	b.n	80035aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff f9de 	bl	800287c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2224      	movs	r2, #36	; 0x24
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0201 	bic.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d107      	bne.n	800350e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	e006      	b.n	800351c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800351a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b02      	cmp	r3, #2
 8003522:	d104      	bne.n	800352e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800352c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800353c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003540:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003550:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69d9      	ldr	r1, [r3, #28]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1a      	ldr	r2, [r3, #32]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d138      	bne.n	800363a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e032      	b.n	800363c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2224      	movs	r2, #36	; 0x24
 80035e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003604:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6819      	ldr	r1, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	e000      	b.n	800363c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800363a:	2302      	movs	r3, #2
  }
}
 800363c:	4618      	mov	r0, r3
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b20      	cmp	r3, #32
 800365c:	d139      	bne.n	80036d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003668:	2302      	movs	r3, #2
 800366a:	e033      	b.n	80036d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2224      	movs	r2, #36	; 0x24
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800369a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036e4:	4b0d      	ldr	r3, [pc, #52]	; (800371c <HAL_PWREx_GetVoltageRange+0x3c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f0:	d102      	bne.n	80036f8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80036f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036f6:	e00b      	b.n	8003710 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80036f8:	4b08      	ldr	r3, [pc, #32]	; (800371c <HAL_PWREx_GetVoltageRange+0x3c>)
 80036fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003706:	d102      	bne.n	800370e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800370c:	e000      	b.n	8003710 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800370e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40007000 	.word	0x40007000

08003720 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d141      	bne.n	80037b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800372e:	4b4b      	ldr	r3, [pc, #300]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373a:	d131      	bne.n	80037a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800373c:	4b47      	ldr	r3, [pc, #284]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003742:	4a46      	ldr	r2, [pc, #280]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003748:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800374c:	4b43      	ldr	r3, [pc, #268]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003754:	4a41      	ldr	r2, [pc, #260]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800375a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800375c:	4b40      	ldr	r3, [pc, #256]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2232      	movs	r2, #50	; 0x32
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	4a3f      	ldr	r2, [pc, #252]	; (8003864 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	0c9b      	lsrs	r3, r3, #18
 800376e:	3301      	adds	r3, #1
 8003770:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003772:	e002      	b.n	800377a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	3b01      	subs	r3, #1
 8003778:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800377a:	4b38      	ldr	r3, [pc, #224]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003786:	d102      	bne.n	800378e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f2      	bne.n	8003774 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800378e:	4b33      	ldr	r3, [pc, #204]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379a:	d158      	bne.n	800384e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e057      	b.n	8003850 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037a0:	4b2e      	ldr	r3, [pc, #184]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a6:	4a2d      	ldr	r2, [pc, #180]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037b0:	e04d      	b.n	800384e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b8:	d141      	bne.n	800383e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037ba:	4b28      	ldr	r3, [pc, #160]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c6:	d131      	bne.n	800382c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037c8:	4b24      	ldr	r3, [pc, #144]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ce:	4a23      	ldr	r2, [pc, #140]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037d8:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037e0:	4a1e      	ldr	r2, [pc, #120]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80037e8:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2232      	movs	r2, #50	; 0x32
 80037ee:	fb02 f303 	mul.w	r3, r2, r3
 80037f2:	4a1c      	ldr	r2, [pc, #112]	; (8003864 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037f4:	fba2 2303 	umull	r2, r3, r2, r3
 80037f8:	0c9b      	lsrs	r3, r3, #18
 80037fa:	3301      	adds	r3, #1
 80037fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037fe:	e002      	b.n	8003806 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	3b01      	subs	r3, #1
 8003804:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003806:	4b15      	ldr	r3, [pc, #84]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003812:	d102      	bne.n	800381a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f2      	bne.n	8003800 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003826:	d112      	bne.n	800384e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e011      	b.n	8003850 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003832:	4a0a      	ldr	r2, [pc, #40]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003838:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800383c:	e007      	b.n	800384e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800383e:	4b07      	ldr	r3, [pc, #28]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003846:	4a05      	ldr	r2, [pc, #20]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003848:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800384c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	40007000 	.word	0x40007000
 8003860:	20000038 	.word	0x20000038
 8003864:	431bde83 	.word	0x431bde83

08003868 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <HAL_PWREx_EnableVddIO2+0x1c>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4a04      	ldr	r2, [pc, #16]	; (8003884 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003876:	6053      	str	r3, [r2, #4]
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40007000 	.word	0x40007000

08003888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f000 bc16 	b.w	80040c8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800389c:	4b96      	ldr	r3, [pc, #600]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a6:	4b94      	ldr	r3, [pc, #592]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80e4 	beq.w	8003a86 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d007      	beq.n	80038d4 <HAL_RCC_OscConfig+0x4c>
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b0c      	cmp	r3, #12
 80038c8:	f040 808b 	bne.w	80039e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	f040 8087 	bne.w	80039e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038d4:	4b88      	ldr	r3, [pc, #544]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_OscConfig+0x64>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e3ed      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1a      	ldr	r2, [r3, #32]
 80038f0:	4b81      	ldr	r3, [pc, #516]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <HAL_RCC_OscConfig+0x7e>
 80038fc:	4b7e      	ldr	r3, [pc, #504]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003904:	e005      	b.n	8003912 <HAL_RCC_OscConfig+0x8a>
 8003906:	4b7c      	ldr	r3, [pc, #496]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003912:	4293      	cmp	r3, r2
 8003914:	d223      	bcs.n	800395e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fdca 	bl	80044b4 <RCC_SetFlashLatencyFromMSIRange>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e3ce      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800392a:	4b73      	ldr	r3, [pc, #460]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a72      	ldr	r2, [pc, #456]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003930:	f043 0308 	orr.w	r3, r3, #8
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b70      	ldr	r3, [pc, #448]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	496d      	ldr	r1, [pc, #436]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003944:	4313      	orrs	r3, r2
 8003946:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003948:	4b6b      	ldr	r3, [pc, #428]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	4968      	ldr	r1, [pc, #416]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
 800395c:	e025      	b.n	80039aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800395e:	4b66      	ldr	r3, [pc, #408]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a65      	ldr	r2, [pc, #404]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003964:	f043 0308 	orr.w	r3, r3, #8
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	4b63      	ldr	r3, [pc, #396]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	4960      	ldr	r1, [pc, #384]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003978:	4313      	orrs	r3, r2
 800397a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800397c:	4b5e      	ldr	r3, [pc, #376]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	495b      	ldr	r1, [pc, #364]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fd8a 	bl	80044b4 <RCC_SetFlashLatencyFromMSIRange>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e38e      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039aa:	f000 fcbf 	bl	800432c <HAL_RCC_GetSysClockFreq>
 80039ae:	4602      	mov	r2, r0
 80039b0:	4b51      	ldr	r3, [pc, #324]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	4950      	ldr	r1, [pc, #320]	; (8003afc <HAL_RCC_OscConfig+0x274>)
 80039bc:	5ccb      	ldrb	r3, [r1, r3]
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	fa22 f303 	lsr.w	r3, r2, r3
 80039c6:	4a4e      	ldr	r2, [pc, #312]	; (8003b00 <HAL_RCC_OscConfig+0x278>)
 80039c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039ca:	4b4e      	ldr	r3, [pc, #312]	; (8003b04 <HAL_RCC_OscConfig+0x27c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff fa0c 	bl	8002dec <HAL_InitTick>
 80039d4:	4603      	mov	r3, r0
 80039d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d052      	beq.n	8003a84 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	e372      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d032      	beq.n	8003a50 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039ea:	4b43      	ldr	r3, [pc, #268]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a42      	ldr	r2, [pc, #264]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039f6:	f7ff fa49 	bl	8002e8c <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039fe:	f7ff fa45 	bl	8002e8c <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e35b      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a10:	4b39      	ldr	r3, [pc, #228]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f0      	beq.n	80039fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a1c:	4b36      	ldr	r3, [pc, #216]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a35      	ldr	r2, [pc, #212]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a22:	f043 0308 	orr.w	r3, r3, #8
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	4b33      	ldr	r3, [pc, #204]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	4930      	ldr	r1, [pc, #192]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a3a:	4b2f      	ldr	r3, [pc, #188]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	492b      	ldr	r1, [pc, #172]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	604b      	str	r3, [r1, #4]
 8003a4e:	e01a      	b.n	8003a86 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a50:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a28      	ldr	r2, [pc, #160]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a56:	f023 0301 	bic.w	r3, r3, #1
 8003a5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a5c:	f7ff fa16 	bl	8002e8c <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a64:	f7ff fa12 	bl	8002e8c <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e328      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a76:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x1dc>
 8003a82:	e000      	b.n	8003a86 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d073      	beq.n	8003b7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x21c>
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2b0c      	cmp	r3, #12
 8003a9c:	d10e      	bne.n	8003abc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d10b      	bne.n	8003abc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa4:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d063      	beq.n	8003b78 <HAL_RCC_OscConfig+0x2f0>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d15f      	bne.n	8003b78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e305      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac4:	d106      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x24c>
 8003ac6:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a0b      	ldr	r2, [pc, #44]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	e025      	b.n	8003b20 <HAL_RCC_OscConfig+0x298>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003adc:	d114      	bne.n	8003b08 <HAL_RCC_OscConfig+0x280>
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a05      	ldr	r2, [pc, #20]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a02      	ldr	r2, [pc, #8]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	e013      	b.n	8003b20 <HAL_RCC_OscConfig+0x298>
 8003af8:	40021000 	.word	0x40021000
 8003afc:	0800966c 	.word	0x0800966c
 8003b00:	20000038 	.word	0x20000038
 8003b04:	2000003c 	.word	0x2000003c
 8003b08:	4ba0      	ldr	r3, [pc, #640]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a9f      	ldr	r2, [pc, #636]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	4b9d      	ldr	r3, [pc, #628]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a9c      	ldr	r2, [pc, #624]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d013      	beq.n	8003b50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7ff f9b0 	bl	8002e8c <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b30:	f7ff f9ac 	bl	8002e8c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	; 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e2c2      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b42:	4b92      	ldr	r3, [pc, #584]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0x2a8>
 8003b4e:	e014      	b.n	8003b7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7ff f99c 	bl	8002e8c <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b58:	f7ff f998 	bl	8002e8c <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e2ae      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b6a:	4b88      	ldr	r3, [pc, #544]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x2d0>
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d060      	beq.n	8003c48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d005      	beq.n	8003b98 <HAL_RCC_OscConfig+0x310>
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	2b0c      	cmp	r3, #12
 8003b90:	d119      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d116      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b98:	4b7c      	ldr	r3, [pc, #496]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x328>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e28b      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb0:	4b76      	ldr	r3, [pc, #472]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	061b      	lsls	r3, r3, #24
 8003bbe:	4973      	ldr	r1, [pc, #460]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc4:	e040      	b.n	8003c48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d023      	beq.n	8003c16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bce:	4b6f      	ldr	r3, [pc, #444]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a6e      	ldr	r2, [pc, #440]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bda:	f7ff f957 	bl	8002e8c <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be2:	f7ff f953 	bl	8002e8c <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e269      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bf4:	4b65      	ldr	r3, [pc, #404]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c00:	4b62      	ldr	r3, [pc, #392]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	061b      	lsls	r3, r3, #24
 8003c0e:	495f      	ldr	r1, [pc, #380]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
 8003c14:	e018      	b.n	8003c48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c16:	4b5d      	ldr	r3, [pc, #372]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a5c      	ldr	r2, [pc, #368]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c22:	f7ff f933 	bl	8002e8c <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c2a:	f7ff f92f 	bl	8002e8c <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e245      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c3c:	4b53      	ldr	r3, [pc, #332]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f0      	bne.n	8003c2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d03c      	beq.n	8003cce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01c      	beq.n	8003c96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c5c:	4b4b      	ldr	r3, [pc, #300]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c62:	4a4a      	ldr	r2, [pc, #296]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6c:	f7ff f90e 	bl	8002e8c <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c74:	f7ff f90a 	bl	8002e8c <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e220      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c86:	4b41      	ldr	r3, [pc, #260]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0ef      	beq.n	8003c74 <HAL_RCC_OscConfig+0x3ec>
 8003c94:	e01b      	b.n	8003cce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c96:	4b3d      	ldr	r3, [pc, #244]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9c:	4a3b      	ldr	r2, [pc, #236]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca6:	f7ff f8f1 	bl	8002e8c <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cae:	f7ff f8ed 	bl	8002e8c <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e203      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cc0:	4b32      	ldr	r3, [pc, #200]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1ef      	bne.n	8003cae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 80a6 	beq.w	8003e28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ce0:	4b2a      	ldr	r3, [pc, #168]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10d      	bne.n	8003d08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cec:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	4a26      	ldr	r2, [pc, #152]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8003cf8:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d04:	2301      	movs	r3, #1
 8003d06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d08:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <HAL_RCC_OscConfig+0x508>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d118      	bne.n	8003d46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d14:	4b1e      	ldr	r3, [pc, #120]	; (8003d90 <HAL_RCC_OscConfig+0x508>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1d      	ldr	r2, [pc, #116]	; (8003d90 <HAL_RCC_OscConfig+0x508>)
 8003d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d20:	f7ff f8b4 	bl	8002e8c <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d28:	f7ff f8b0 	bl	8002e8c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e1c6      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <HAL_RCC_OscConfig+0x508>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d108      	bne.n	8003d60 <HAL_RCC_OscConfig+0x4d8>
 8003d4e:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d54:	4a0d      	ldr	r2, [pc, #52]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d5e:	e029      	b.n	8003db4 <HAL_RCC_OscConfig+0x52c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b05      	cmp	r3, #5
 8003d66:	d115      	bne.n	8003d94 <HAL_RCC_OscConfig+0x50c>
 8003d68:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d70:	f043 0304 	orr.w	r3, r3, #4
 8003d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	4a03      	ldr	r2, [pc, #12]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d88:	e014      	b.n	8003db4 <HAL_RCC_OscConfig+0x52c>
 8003d8a:	bf00      	nop
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40007000 	.word	0x40007000
 8003d94:	4b9d      	ldr	r3, [pc, #628]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	4a9c      	ldr	r2, [pc, #624]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003da4:	4b99      	ldr	r3, [pc, #612]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003daa:	4a98      	ldr	r2, [pc, #608]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003dac:	f023 0304 	bic.w	r3, r3, #4
 8003db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d016      	beq.n	8003dea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbc:	f7ff f866 	bl	8002e8c <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc4:	f7ff f862 	bl	8002e8c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e176      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dda:	4b8c      	ldr	r3, [pc, #560]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0ed      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x53c>
 8003de8:	e015      	b.n	8003e16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dea:	f7ff f84f 	bl	8002e8c <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df2:	f7ff f84b 	bl	8002e8c <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e15f      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e08:	4b80      	ldr	r3, [pc, #512]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1ed      	bne.n	8003df2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e16:	7ffb      	ldrb	r3, [r7, #31]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d105      	bne.n	8003e28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e1c:	4b7b      	ldr	r3, [pc, #492]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e20:	4a7a      	ldr	r2, [pc, #488]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e26:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d03c      	beq.n	8003eae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01c      	beq.n	8003e76 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e3c:	4b73      	ldr	r3, [pc, #460]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003e3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e42:	4a72      	ldr	r2, [pc, #456]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7ff f81e 	bl	8002e8c <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e54:	f7ff f81a 	bl	8002e8c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e130      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e66:	4b69      	ldr	r3, [pc, #420]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003e68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0ef      	beq.n	8003e54 <HAL_RCC_OscConfig+0x5cc>
 8003e74:	e01b      	b.n	8003eae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e76:	4b65      	ldr	r3, [pc, #404]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e7c:	4a63      	ldr	r2, [pc, #396]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f7ff f801 	bl	8002e8c <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e8e:	f7fe fffd 	bl	8002e8c <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e113      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ea0:	4b5a      	ldr	r3, [pc, #360]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003ea2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1ef      	bne.n	8003e8e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 8107 	beq.w	80040c6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	f040 80cf 	bne.w	8004060 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ec2:	4b52      	ldr	r3, [pc, #328]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f003 0203 	and.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d12c      	bne.n	8003f30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d123      	bne.n	8003f30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d11b      	bne.n	8003f30 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d113      	bne.n	8003f30 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	3b01      	subs	r3, #1
 8003f16:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d109      	bne.n	8003f30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	085b      	lsrs	r3, r3, #1
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d071      	beq.n	8004014 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b0c      	cmp	r3, #12
 8003f34:	d068      	beq.n	8004008 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f36:	4b35      	ldr	r3, [pc, #212]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d105      	bne.n	8003f4e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f42:	4b32      	ldr	r3, [pc, #200]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e0ba      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f52:	4b2e      	ldr	r3, [pc, #184]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a2d      	ldr	r2, [pc, #180]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003f58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f5c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f5e:	f7fe ff95 	bl	8002e8c <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f66:	f7fe ff91 	bl	8002e8c <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e0a7      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f78:	4b24      	ldr	r3, [pc, #144]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1f0      	bne.n	8003f66 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f84:	4b21      	ldr	r3, [pc, #132]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	4b21      	ldr	r3, [pc, #132]	; (8004010 <HAL_RCC_OscConfig+0x788>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f94:	3a01      	subs	r2, #1
 8003f96:	0112      	lsls	r2, r2, #4
 8003f98:	4311      	orrs	r1, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f9e:	0212      	lsls	r2, r2, #8
 8003fa0:	4311      	orrs	r1, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fa6:	0852      	lsrs	r2, r2, #1
 8003fa8:	3a01      	subs	r2, #1
 8003faa:	0552      	lsls	r2, r2, #21
 8003fac:	4311      	orrs	r1, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fb2:	0852      	lsrs	r2, r2, #1
 8003fb4:	3a01      	subs	r2, #1
 8003fb6:	0652      	lsls	r2, r2, #25
 8003fb8:	4311      	orrs	r1, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fbe:	06d2      	lsls	r2, r2, #27
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	4912      	ldr	r1, [pc, #72]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fc8:	4b10      	ldr	r3, [pc, #64]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a0f      	ldr	r2, [pc, #60]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fd4:	4b0d      	ldr	r3, [pc, #52]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	4a0c      	ldr	r2, [pc, #48]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003fda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fe0:	f7fe ff54 	bl	8002e8c <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe8:	f7fe ff50 	bl	8002e8c <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e066      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ffa:	4b04      	ldr	r3, [pc, #16]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004006:	e05e      	b.n	80040c6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e05d      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
 800400c:	40021000 	.word	0x40021000
 8004010:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004014:	4b2e      	ldr	r3, [pc, #184]	; (80040d0 <HAL_RCC_OscConfig+0x848>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d152      	bne.n	80040c6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004020:	4b2b      	ldr	r3, [pc, #172]	; (80040d0 <HAL_RCC_OscConfig+0x848>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a2a      	ldr	r2, [pc, #168]	; (80040d0 <HAL_RCC_OscConfig+0x848>)
 8004026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800402a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800402c:	4b28      	ldr	r3, [pc, #160]	; (80040d0 <HAL_RCC_OscConfig+0x848>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4a27      	ldr	r2, [pc, #156]	; (80040d0 <HAL_RCC_OscConfig+0x848>)
 8004032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004036:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004038:	f7fe ff28 	bl	8002e8c <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004040:	f7fe ff24 	bl	8002e8c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e03a      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004052:	4b1f      	ldr	r3, [pc, #124]	; (80040d0 <HAL_RCC_OscConfig+0x848>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0x7b8>
 800405e:	e032      	b.n	80040c6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b0c      	cmp	r3, #12
 8004064:	d02d      	beq.n	80040c2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004066:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <HAL_RCC_OscConfig+0x848>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a19      	ldr	r2, [pc, #100]	; (80040d0 <HAL_RCC_OscConfig+0x848>)
 800406c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004070:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004072:	4b17      	ldr	r3, [pc, #92]	; (80040d0 <HAL_RCC_OscConfig+0x848>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d105      	bne.n	800408a <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800407e:	4b14      	ldr	r3, [pc, #80]	; (80040d0 <HAL_RCC_OscConfig+0x848>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <HAL_RCC_OscConfig+0x848>)
 8004084:	f023 0303 	bic.w	r3, r3, #3
 8004088:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800408a:	4b11      	ldr	r3, [pc, #68]	; (80040d0 <HAL_RCC_OscConfig+0x848>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	4a10      	ldr	r2, [pc, #64]	; (80040d0 <HAL_RCC_OscConfig+0x848>)
 8004090:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004098:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409a:	f7fe fef7 	bl	8002e8c <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a2:	f7fe fef3 	bl	8002e8c <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e009      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <HAL_RCC_OscConfig+0x848>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f0      	bne.n	80040a2 <HAL_RCC_OscConfig+0x81a>
 80040c0:	e001      	b.n	80040c6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40021000 	.word	0x40021000

080040d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e10f      	b.n	800430c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040ec:	4b89      	ldr	r3, [pc, #548]	; (8004314 <HAL_RCC_ClockConfig+0x240>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d910      	bls.n	800411c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fa:	4b86      	ldr	r3, [pc, #536]	; (8004314 <HAL_RCC_ClockConfig+0x240>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 020f 	bic.w	r2, r3, #15
 8004102:	4984      	ldr	r1, [pc, #528]	; (8004314 <HAL_RCC_ClockConfig+0x240>)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	4313      	orrs	r3, r2
 8004108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410a:	4b82      	ldr	r3, [pc, #520]	; (8004314 <HAL_RCC_ClockConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d001      	beq.n	800411c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0f7      	b.n	800430c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8089 	beq.w	800423c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d133      	bne.n	800419a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004132:	4b79      	ldr	r3, [pc, #484]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e0e4      	b.n	800430c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004142:	f000 fa11 	bl	8004568 <RCC_GetSysClockFreqFromPLLSource>
 8004146:	4603      	mov	r3, r0
 8004148:	4a74      	ldr	r2, [pc, #464]	; (800431c <HAL_RCC_ClockConfig+0x248>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d955      	bls.n	80041fa <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800414e:	4b72      	ldr	r3, [pc, #456]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10a      	bne.n	8004170 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800415a:	4b6f      	ldr	r3, [pc, #444]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004162:	4a6d      	ldr	r2, [pc, #436]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004168:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800416a:	2380      	movs	r3, #128	; 0x80
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	e044      	b.n	80041fa <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d03e      	beq.n	80041fa <HAL_RCC_ClockConfig+0x126>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d13a      	bne.n	80041fa <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004184:	4b64      	ldr	r3, [pc, #400]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800418c:	4a62      	ldr	r2, [pc, #392]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 800418e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004192:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004194:	2380      	movs	r3, #128	; 0x80
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	e02f      	b.n	80041fa <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d107      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041a2:	4b5d      	ldr	r3, [pc, #372]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d115      	bne.n	80041da <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e0ac      	b.n	800430c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d107      	bne.n	80041ca <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041ba:	4b57      	ldr	r3, [pc, #348]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e0a0      	b.n	800430c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ca:	4b53      	ldr	r3, [pc, #332]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e098      	b.n	800430c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80041da:	f000 f8a7 	bl	800432c <HAL_RCC_GetSysClockFreq>
 80041de:	4603      	mov	r3, r0
 80041e0:	4a4e      	ldr	r2, [pc, #312]	; (800431c <HAL_RCC_ClockConfig+0x248>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d909      	bls.n	80041fa <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041e6:	4b4c      	ldr	r3, [pc, #304]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ee:	4a4a      	ldr	r2, [pc, #296]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80041f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041fa:	4b47      	ldr	r3, [pc, #284]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f023 0203 	bic.w	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	4944      	ldr	r1, [pc, #272]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004208:	4313      	orrs	r3, r2
 800420a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420c:	f7fe fe3e 	bl	8002e8c <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004212:	e00a      	b.n	800422a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004214:	f7fe fe3a 	bl	8002e8c <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e070      	b.n	800430c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	4b3b      	ldr	r3, [pc, #236]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 020c 	and.w	r2, r3, #12
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	429a      	cmp	r2, r3
 800423a:	d1eb      	bne.n	8004214 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d009      	beq.n	800425c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004248:	4b33      	ldr	r3, [pc, #204]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4930      	ldr	r1, [pc, #192]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004256:	4313      	orrs	r3, r2
 8004258:	608b      	str	r3, [r1, #8]
 800425a:	e008      	b.n	800426e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	2b80      	cmp	r3, #128	; 0x80
 8004260:	d105      	bne.n	800426e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004262:	4b2d      	ldr	r3, [pc, #180]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	4a2c      	ldr	r2, [pc, #176]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004268:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800426c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800426e:	4b29      	ldr	r3, [pc, #164]	; (8004314 <HAL_RCC_ClockConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d210      	bcs.n	800429e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427c:	4b25      	ldr	r3, [pc, #148]	; (8004314 <HAL_RCC_ClockConfig+0x240>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f023 020f 	bic.w	r2, r3, #15
 8004284:	4923      	ldr	r1, [pc, #140]	; (8004314 <HAL_RCC_ClockConfig+0x240>)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	4313      	orrs	r3, r2
 800428a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800428c:	4b21      	ldr	r3, [pc, #132]	; (8004314 <HAL_RCC_ClockConfig+0x240>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d001      	beq.n	800429e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e036      	b.n	800430c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d008      	beq.n	80042bc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042aa:	4b1b      	ldr	r3, [pc, #108]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	4918      	ldr	r1, [pc, #96]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042c8:	4b13      	ldr	r3, [pc, #76]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	4910      	ldr	r1, [pc, #64]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042dc:	f000 f826 	bl	800432c <HAL_RCC_GetSysClockFreq>
 80042e0:	4602      	mov	r2, r0
 80042e2:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	490c      	ldr	r1, [pc, #48]	; (8004320 <HAL_RCC_ClockConfig+0x24c>)
 80042ee:	5ccb      	ldrb	r3, [r1, r3]
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
 80042f8:	4a0a      	ldr	r2, [pc, #40]	; (8004324 <HAL_RCC_ClockConfig+0x250>)
 80042fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042fc:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <HAL_RCC_ClockConfig+0x254>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe fd73 	bl	8002dec <HAL_InitTick>
 8004306:	4603      	mov	r3, r0
 8004308:	73fb      	strb	r3, [r7, #15]

  return status;
 800430a:	7bfb      	ldrb	r3, [r7, #15]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40022000 	.word	0x40022000
 8004318:	40021000 	.word	0x40021000
 800431c:	04c4b400 	.word	0x04c4b400
 8004320:	0800966c 	.word	0x0800966c
 8004324:	20000038 	.word	0x20000038
 8004328:	2000003c 	.word	0x2000003c

0800432c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800432c:	b480      	push	{r7}
 800432e:	b089      	sub	sp, #36	; 0x24
 8004330:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	2300      	movs	r3, #0
 8004338:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800433a:	4b3e      	ldr	r3, [pc, #248]	; (8004434 <HAL_RCC_GetSysClockFreq+0x108>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004344:	4b3b      	ldr	r3, [pc, #236]	; (8004434 <HAL_RCC_GetSysClockFreq+0x108>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0303 	and.w	r3, r3, #3
 800434c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_RCC_GetSysClockFreq+0x34>
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	2b0c      	cmp	r3, #12
 8004358:	d121      	bne.n	800439e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d11e      	bne.n	800439e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004360:	4b34      	ldr	r3, [pc, #208]	; (8004434 <HAL_RCC_GetSysClockFreq+0x108>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d107      	bne.n	800437c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800436c:	4b31      	ldr	r3, [pc, #196]	; (8004434 <HAL_RCC_GetSysClockFreq+0x108>)
 800436e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004372:	0a1b      	lsrs	r3, r3, #8
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	e005      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800437c:	4b2d      	ldr	r3, [pc, #180]	; (8004434 <HAL_RCC_GetSysClockFreq+0x108>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	091b      	lsrs	r3, r3, #4
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004388:	4a2b      	ldr	r2, [pc, #172]	; (8004438 <HAL_RCC_GetSysClockFreq+0x10c>)
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004390:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10d      	bne.n	80043b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800439c:	e00a      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d102      	bne.n	80043aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043a4:	4b25      	ldr	r3, [pc, #148]	; (800443c <HAL_RCC_GetSysClockFreq+0x110>)
 80043a6:	61bb      	str	r3, [r7, #24]
 80043a8:	e004      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d101      	bne.n	80043b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043b0:	4b23      	ldr	r3, [pc, #140]	; (8004440 <HAL_RCC_GetSysClockFreq+0x114>)
 80043b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b0c      	cmp	r3, #12
 80043b8:	d134      	bne.n	8004424 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043ba:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <HAL_RCC_GetSysClockFreq+0x108>)
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d003      	beq.n	80043d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d003      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0xac>
 80043d0:	e005      	b.n	80043de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043d2:	4b1a      	ldr	r3, [pc, #104]	; (800443c <HAL_RCC_GetSysClockFreq+0x110>)
 80043d4:	617b      	str	r3, [r7, #20]
      break;
 80043d6:	e005      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043d8:	4b19      	ldr	r3, [pc, #100]	; (8004440 <HAL_RCC_GetSysClockFreq+0x114>)
 80043da:	617b      	str	r3, [r7, #20]
      break;
 80043dc:	e002      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	617b      	str	r3, [r7, #20]
      break;
 80043e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043e4:	4b13      	ldr	r3, [pc, #76]	; (8004434 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	3301      	adds	r3, #1
 80043f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043f2:	4b10      	ldr	r3, [pc, #64]	; (8004434 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	0a1b      	lsrs	r3, r3, #8
 80043f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	fb03 f202 	mul.w	r2, r3, r2
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	fbb2 f3f3 	udiv	r3, r2, r3
 8004408:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800440a:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <HAL_RCC_GetSysClockFreq+0x108>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	0e5b      	lsrs	r3, r3, #25
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	3301      	adds	r3, #1
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004422:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004424:	69bb      	ldr	r3, [r7, #24]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3724      	adds	r7, #36	; 0x24
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40021000 	.word	0x40021000
 8004438:	08009684 	.word	0x08009684
 800443c:	00f42400 	.word	0x00f42400
 8004440:	007a1200 	.word	0x007a1200

08004444 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004448:	4b03      	ldr	r3, [pc, #12]	; (8004458 <HAL_RCC_GetHCLKFreq+0x14>)
 800444a:	681b      	ldr	r3, [r3, #0]
}
 800444c:	4618      	mov	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000038 	.word	0x20000038

0800445c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004460:	f7ff fff0 	bl	8004444 <HAL_RCC_GetHCLKFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	0a1b      	lsrs	r3, r3, #8
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	4904      	ldr	r1, [pc, #16]	; (8004484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40021000 	.word	0x40021000
 8004484:	0800967c 	.word	0x0800967c

08004488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800448c:	f7ff ffda 	bl	8004444 <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	0adb      	lsrs	r3, r3, #11
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4904      	ldr	r1, [pc, #16]	; (80044b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	f003 031f 	and.w	r3, r3, #31
 80044a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000
 80044b0:	0800967c 	.word	0x0800967c

080044b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044bc:	2300      	movs	r3, #0
 80044be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044c0:	4b27      	ldr	r3, [pc, #156]	; (8004560 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044cc:	f7ff f908 	bl	80036e0 <HAL_PWREx_GetVoltageRange>
 80044d0:	6178      	str	r0, [r7, #20]
 80044d2:	e014      	b.n	80044fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044d4:	4b22      	ldr	r3, [pc, #136]	; (8004560 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d8:	4a21      	ldr	r2, [pc, #132]	; (8004560 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044de:	6593      	str	r3, [r2, #88]	; 0x58
 80044e0:	4b1f      	ldr	r3, [pc, #124]	; (8004560 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044ec:	f7ff f8f8 	bl	80036e0 <HAL_PWREx_GetVoltageRange>
 80044f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044f2:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f6:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004504:	d10b      	bne.n	800451e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b80      	cmp	r3, #128	; 0x80
 800450a:	d913      	bls.n	8004534 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2ba0      	cmp	r3, #160	; 0xa0
 8004510:	d902      	bls.n	8004518 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004512:	2302      	movs	r3, #2
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	e00d      	b.n	8004534 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004518:	2301      	movs	r3, #1
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	e00a      	b.n	8004534 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b7f      	cmp	r3, #127	; 0x7f
 8004522:	d902      	bls.n	800452a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004524:	2302      	movs	r3, #2
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	e004      	b.n	8004534 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b70      	cmp	r3, #112	; 0x70
 800452e:	d101      	bne.n	8004534 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004530:	2301      	movs	r3, #1
 8004532:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f023 020f 	bic.w	r2, r3, #15
 800453c:	4909      	ldr	r1, [pc, #36]	; (8004564 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004544:	4b07      	ldr	r3, [pc, #28]	; (8004564 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 030f 	and.w	r3, r3, #15
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	429a      	cmp	r2, r3
 8004550:	d001      	beq.n	8004556 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40021000 	.word	0x40021000
 8004564:	40022000 	.word	0x40022000

08004568 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004572:	4b2d      	ldr	r3, [pc, #180]	; (8004628 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b01      	cmp	r3, #1
 800457c:	d118      	bne.n	80045b0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800457e:	4b2a      	ldr	r3, [pc, #168]	; (8004628 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d107      	bne.n	800459a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800458a:	4b27      	ldr	r3, [pc, #156]	; (8004628 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800458c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004590:	0a1b      	lsrs	r3, r3, #8
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	e005      	b.n	80045a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800459a:	4b23      	ldr	r3, [pc, #140]	; (8004628 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	091b      	lsrs	r3, r3, #4
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045a6:	4a21      	ldr	r2, [pc, #132]	; (800462c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ae:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045b0:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d003      	beq.n	80045c8 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d003      	beq.n	80045ce <RCC_GetSysClockFreqFromPLLSource+0x66>
 80045c6:	e005      	b.n	80045d4 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80045c8:	4b19      	ldr	r3, [pc, #100]	; (8004630 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80045ca:	613b      	str	r3, [r7, #16]
    break;
 80045cc:	e005      	b.n	80045da <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80045ce:	4b19      	ldr	r3, [pc, #100]	; (8004634 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80045d0:	613b      	str	r3, [r7, #16]
    break;
 80045d2:	e002      	b.n	80045da <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	613b      	str	r3, [r7, #16]
    break;
 80045d8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045da:	4b13      	ldr	r3, [pc, #76]	; (8004628 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	091b      	lsrs	r3, r3, #4
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	3301      	adds	r3, #1
 80045e6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045e8:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	0a1b      	lsrs	r3, r3, #8
 80045ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	fb03 f202 	mul.w	r2, r3, r2
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fe:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004600:	4b09      	ldr	r3, [pc, #36]	; (8004628 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	0e5b      	lsrs	r3, r3, #25
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	3301      	adds	r3, #1
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	fbb2 f3f3 	udiv	r3, r2, r3
 8004618:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800461a:	683b      	ldr	r3, [r7, #0]
}
 800461c:	4618      	mov	r0, r3
 800461e:	371c      	adds	r7, #28
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	40021000 	.word	0x40021000
 800462c:	08009684 	.word	0x08009684
 8004630:	00f42400 	.word	0x00f42400
 8004634:	007a1200 	.word	0x007a1200

08004638 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004640:	2300      	movs	r3, #0
 8004642:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004644:	2300      	movs	r3, #0
 8004646:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004650:	2b00      	cmp	r3, #0
 8004652:	d040      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004658:	2b80      	cmp	r3, #128	; 0x80
 800465a:	d02a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800465c:	2b80      	cmp	r3, #128	; 0x80
 800465e:	d825      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004660:	2b60      	cmp	r3, #96	; 0x60
 8004662:	d026      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004664:	2b60      	cmp	r3, #96	; 0x60
 8004666:	d821      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004668:	2b40      	cmp	r3, #64	; 0x40
 800466a:	d006      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d81d      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004674:	2b20      	cmp	r3, #32
 8004676:	d010      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004678:	e018      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800467a:	4b89      	ldr	r3, [pc, #548]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	4a88      	ldr	r2, [pc, #544]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004684:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004686:	e015      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	2100      	movs	r1, #0
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fb02 	bl	8004c98 <RCCEx_PLLSAI1_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004698:	e00c      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3320      	adds	r3, #32
 800469e:	2100      	movs	r1, #0
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fbed 	bl	8004e80 <RCCEx_PLLSAI2_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046aa:	e003      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	74fb      	strb	r3, [r7, #19]
      break;
 80046b0:	e000      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80046b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10b      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046ba:	4b79      	ldr	r3, [pc, #484]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046c0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046c8:	4975      	ldr	r1, [pc, #468]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80046d0:	e001      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d2:	7cfb      	ldrb	r3, [r7, #19]
 80046d4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d047      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ea:	d030      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80046ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f0:	d82a      	bhi.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046f6:	d02a      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80046f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046fc:	d824      	bhi.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004702:	d008      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004708:	d81e      	bhi.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800470e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004712:	d010      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004714:	e018      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004716:	4b62      	ldr	r3, [pc, #392]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	4a61      	ldr	r2, [pc, #388]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800471c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004720:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004722:	e015      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	2100      	movs	r1, #0
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fab4 	bl	8004c98 <RCCEx_PLLSAI1_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004734:	e00c      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3320      	adds	r3, #32
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fb9f 	bl	8004e80 <RCCEx_PLLSAI2_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004746:	e003      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	74fb      	strb	r3, [r7, #19]
      break;
 800474c:	e000      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800474e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004750:	7cfb      	ldrb	r3, [r7, #19]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10b      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004756:	4b52      	ldr	r3, [pc, #328]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004758:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800475c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004764:	494e      	ldr	r1, [pc, #312]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800476c:	e001      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476e:	7cfb      	ldrb	r3, [r7, #19]
 8004770:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 809f 	beq.w	80048be <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004780:	2300      	movs	r3, #0
 8004782:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004784:	4b46      	ldr	r3, [pc, #280]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004794:	2300      	movs	r3, #0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00d      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479a:	4b41      	ldr	r3, [pc, #260]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800479c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479e:	4a40      	ldr	r2, [pc, #256]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a4:	6593      	str	r3, [r2, #88]	; 0x58
 80047a6:	4b3e      	ldr	r3, [pc, #248]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ae:	60bb      	str	r3, [r7, #8]
 80047b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047b2:	2301      	movs	r3, #1
 80047b4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047b6:	4b3b      	ldr	r3, [pc, #236]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a3a      	ldr	r2, [pc, #232]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047c2:	f7fe fb63 	bl	8002e8c <HAL_GetTick>
 80047c6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047c8:	e009      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ca:	f7fe fb5f 	bl	8002e8c <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d902      	bls.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	74fb      	strb	r3, [r7, #19]
        break;
 80047dc:	e005      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047de:	4b31      	ldr	r3, [pc, #196]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0ef      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80047ea:	7cfb      	ldrb	r3, [r7, #19]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d15b      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047f0:	4b2b      	ldr	r3, [pc, #172]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047fa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01f      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	429a      	cmp	r2, r3
 800480c:	d019      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800480e:	4b24      	ldr	r3, [pc, #144]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004818:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800481a:	4b21      	ldr	r3, [pc, #132]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004820:	4a1f      	ldr	r2, [pc, #124]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800482a:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	4a1b      	ldr	r2, [pc, #108]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800483a:	4a19      	ldr	r2, [pc, #100]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d016      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fe fb1e 	bl	8002e8c <HAL_GetTick>
 8004850:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004852:	e00b      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004854:	f7fe fb1a 	bl	8002e8c <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004862:	4293      	cmp	r3, r2
 8004864:	d902      	bls.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	74fb      	strb	r3, [r7, #19]
            break;
 800486a:	e006      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800486c:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0ec      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800487a:	7cfb      	ldrb	r3, [r7, #19]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10c      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004880:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004886:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004890:	4903      	ldr	r1, [pc, #12]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004898:	e008      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800489a:	7cfb      	ldrb	r3, [r7, #19]
 800489c:	74bb      	strb	r3, [r7, #18]
 800489e:	e005      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x274>
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a8:	7cfb      	ldrb	r3, [r7, #19]
 80048aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ac:	7c7b      	ldrb	r3, [r7, #17]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d105      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b2:	4ba0      	ldr	r3, [pc, #640]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b6:	4a9f      	ldr	r2, [pc, #636]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ca:	4b9a      	ldr	r3, [pc, #616]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	f023 0203 	bic.w	r2, r3, #3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d8:	4996      	ldr	r1, [pc, #600]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048ec:	4b91      	ldr	r3, [pc, #580]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f2:	f023 020c 	bic.w	r2, r3, #12
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	498e      	ldr	r1, [pc, #568]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800490e:	4b89      	ldr	r3, [pc, #548]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491c:	4985      	ldr	r1, [pc, #532]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004930:	4b80      	ldr	r3, [pc, #512]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493e:	497d      	ldr	r1, [pc, #500]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004952:	4b78      	ldr	r3, [pc, #480]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004960:	4974      	ldr	r1, [pc, #464]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004974:	4b6f      	ldr	r3, [pc, #444]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004982:	496c      	ldr	r1, [pc, #432]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004996:	4b67      	ldr	r3, [pc, #412]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049a4:	4963      	ldr	r1, [pc, #396]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049b8:	4b5e      	ldr	r3, [pc, #376]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049c6:	495b      	ldr	r1, [pc, #364]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049da:	4b56      	ldr	r3, [pc, #344]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e8:	4952      	ldr	r1, [pc, #328]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049fc:	4b4d      	ldr	r3, [pc, #308]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0a:	494a      	ldr	r1, [pc, #296]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a1e:	4b45      	ldr	r3, [pc, #276]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2c:	4941      	ldr	r1, [pc, #260]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a40:	4b3c      	ldr	r3, [pc, #240]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a46:	f023 0203 	bic.w	r2, r3, #3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4e:	4939      	ldr	r1, [pc, #228]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d028      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a62:	4b34      	ldr	r3, [pc, #208]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a70:	4930      	ldr	r1, [pc, #192]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a80:	d106      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a82:	4b2c      	ldr	r3, [pc, #176]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	4a2b      	ldr	r2, [pc, #172]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a8c:	60d3      	str	r3, [r2, #12]
 8004a8e:	e011      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 f8f9 	bl	8004c98 <RCCEx_PLLSAI1_Config>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004ab0:	7cfb      	ldrb	r3, [r7, #19]
 8004ab2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d04d      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ac4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ac8:	d108      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004aca:	4b1a      	ldr	r3, [pc, #104]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004acc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ad0:	4a18      	ldr	r2, [pc, #96]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ad2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ad6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004ada:	e012      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004adc:	4b15      	ldr	r3, [pc, #84]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ade:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ae2:	4a14      	ldr	r2, [pc, #80]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ae4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ae8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004aec:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004afa:	490e      	ldr	r1, [pc, #56]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b0a:	d106      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b0c:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4a08      	ldr	r2, [pc, #32]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b16:	60d3      	str	r3, [r2, #12]
 8004b18:	e020      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b22:	d109      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b24:	4b03      	ldr	r3, [pc, #12]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4a02      	ldr	r2, [pc, #8]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b2e:	60d3      	str	r3, [r2, #12]
 8004b30:	e014      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004b32:	bf00      	nop
 8004b34:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3304      	adds	r3, #4
 8004b46:	2101      	movs	r1, #1
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 f8a5 	bl	8004c98 <RCCEx_PLLSAI1_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b52:	7cfb      	ldrb	r3, [r7, #19]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004b58:	7cfb      	ldrb	r3, [r7, #19]
 8004b5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d028      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b68:	4b4a      	ldr	r3, [pc, #296]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b76:	4947      	ldr	r1, [pc, #284]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b86:	d106      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b88:	4b42      	ldr	r3, [pc, #264]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	4a41      	ldr	r2, [pc, #260]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b92:	60d3      	str	r3, [r2, #12]
 8004b94:	e011      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b9e:	d10c      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 f876 	bl	8004c98 <RCCEx_PLLSAI1_Config>
 8004bac:	4603      	mov	r3, r0
 8004bae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bb0:	7cfb      	ldrb	r3, [r7, #19]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004bb6:	7cfb      	ldrb	r3, [r7, #19]
 8004bb8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d01e      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bc6:	4b33      	ldr	r3, [pc, #204]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bcc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bd6:	492f      	ldr	r1, [pc, #188]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004be4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004be8:	d10c      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3304      	adds	r3, #4
 8004bee:	2102      	movs	r1, #2
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 f851 	bl	8004c98 <RCCEx_PLLSAI1_Config>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bfa:	7cfb      	ldrb	r3, [r7, #19]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004c00:	7cfb      	ldrb	r3, [r7, #19]
 8004c02:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00b      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c10:	4b20      	ldr	r3, [pc, #128]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c16:	f023 0204 	bic.w	r2, r3, #4
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c20:	491c      	ldr	r1, [pc, #112]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00b      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c34:	4b17      	ldr	r3, [pc, #92]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c3a:	f023 0218 	bic.w	r2, r3, #24
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c44:	4913      	ldr	r1, [pc, #76]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d017      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004c58:	4b0e      	ldr	r3, [pc, #56]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c68:	490a      	ldr	r1, [pc, #40]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c7a:	d105      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c7c:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c88:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000

08004c98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ca6:	4b72      	ldr	r3, [pc, #456]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00e      	beq.n	8004cd0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cb2:	4b6f      	ldr	r3, [pc, #444]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f003 0203 	and.w	r2, r3, #3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d103      	bne.n	8004cca <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
       ||
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d142      	bne.n	8004d50 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	73fb      	strb	r3, [r7, #15]
 8004cce:	e03f      	b.n	8004d50 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d018      	beq.n	8004d0a <RCCEx_PLLSAI1_Config+0x72>
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d825      	bhi.n	8004d28 <RCCEx_PLLSAI1_Config+0x90>
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d002      	beq.n	8004ce6 <RCCEx_PLLSAI1_Config+0x4e>
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d009      	beq.n	8004cf8 <RCCEx_PLLSAI1_Config+0x60>
 8004ce4:	e020      	b.n	8004d28 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ce6:	4b62      	ldr	r3, [pc, #392]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d11d      	bne.n	8004d2e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cf6:	e01a      	b.n	8004d2e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cf8:	4b5d      	ldr	r3, [pc, #372]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d116      	bne.n	8004d32 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d08:	e013      	b.n	8004d32 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d0a:	4b59      	ldr	r3, [pc, #356]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10f      	bne.n	8004d36 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d16:	4b56      	ldr	r3, [pc, #344]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d109      	bne.n	8004d36 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d26:	e006      	b.n	8004d36 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d2c:	e004      	b.n	8004d38 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d2e:	bf00      	nop
 8004d30:	e002      	b.n	8004d38 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d32:	bf00      	nop
 8004d34:	e000      	b.n	8004d38 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d36:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d108      	bne.n	8004d50 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004d3e:	4b4c      	ldr	r3, [pc, #304]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f023 0203 	bic.w	r2, r3, #3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4949      	ldr	r1, [pc, #292]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f040 8086 	bne.w	8004e64 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d58:	4b45      	ldr	r3, [pc, #276]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a44      	ldr	r2, [pc, #272]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d64:	f7fe f892 	bl	8002e8c <HAL_GetTick>
 8004d68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d6a:	e009      	b.n	8004d80 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d6c:	f7fe f88e 	bl	8002e8c <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d902      	bls.n	8004d80 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d7e:	e005      	b.n	8004d8c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d80:	4b3b      	ldr	r3, [pc, #236]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1ef      	bne.n	8004d6c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d168      	bne.n	8004e64 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d113      	bne.n	8004dc0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d98:	4b35      	ldr	r3, [pc, #212]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	4b35      	ldr	r3, [pc, #212]	; (8004e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6892      	ldr	r2, [r2, #8]
 8004da4:	0211      	lsls	r1, r2, #8
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	68d2      	ldr	r2, [r2, #12]
 8004daa:	06d2      	lsls	r2, r2, #27
 8004dac:	4311      	orrs	r1, r2
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6852      	ldr	r2, [r2, #4]
 8004db2:	3a01      	subs	r2, #1
 8004db4:	0112      	lsls	r2, r2, #4
 8004db6:	430a      	orrs	r2, r1
 8004db8:	492d      	ldr	r1, [pc, #180]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	610b      	str	r3, [r1, #16]
 8004dbe:	e02d      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d115      	bne.n	8004df2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dc6:	4b2a      	ldr	r3, [pc, #168]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	4b2b      	ldr	r3, [pc, #172]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6892      	ldr	r2, [r2, #8]
 8004dd2:	0211      	lsls	r1, r2, #8
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6912      	ldr	r2, [r2, #16]
 8004dd8:	0852      	lsrs	r2, r2, #1
 8004dda:	3a01      	subs	r2, #1
 8004ddc:	0552      	lsls	r2, r2, #21
 8004dde:	4311      	orrs	r1, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6852      	ldr	r2, [r2, #4]
 8004de4:	3a01      	subs	r2, #1
 8004de6:	0112      	lsls	r2, r2, #4
 8004de8:	430a      	orrs	r2, r1
 8004dea:	4921      	ldr	r1, [pc, #132]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	610b      	str	r3, [r1, #16]
 8004df0:	e014      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004df2:	4b1f      	ldr	r3, [pc, #124]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	4b21      	ldr	r3, [pc, #132]	; (8004e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6892      	ldr	r2, [r2, #8]
 8004dfe:	0211      	lsls	r1, r2, #8
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6952      	ldr	r2, [r2, #20]
 8004e04:	0852      	lsrs	r2, r2, #1
 8004e06:	3a01      	subs	r2, #1
 8004e08:	0652      	lsls	r2, r2, #25
 8004e0a:	4311      	orrs	r1, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6852      	ldr	r2, [r2, #4]
 8004e10:	3a01      	subs	r2, #1
 8004e12:	0112      	lsls	r2, r2, #4
 8004e14:	430a      	orrs	r2, r1
 8004e16:	4916      	ldr	r1, [pc, #88]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e1c:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a13      	ldr	r2, [pc, #76]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e28:	f7fe f830 	bl	8002e8c <HAL_GetTick>
 8004e2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e2e:	e009      	b.n	8004e44 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e30:	f7fe f82c 	bl	8002e8c <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d902      	bls.n	8004e44 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	73fb      	strb	r3, [r7, #15]
          break;
 8004e42:	e005      	b.n	8004e50 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e44:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0ef      	beq.n	8004e30 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	4904      	ldr	r1, [pc, #16]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40021000 	.word	0x40021000
 8004e74:	07ff800f 	.word	0x07ff800f
 8004e78:	ff9f800f 	.word	0xff9f800f
 8004e7c:	f9ff800f 	.word	0xf9ff800f

08004e80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e8e:	4b72      	ldr	r3, [pc, #456]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00e      	beq.n	8004eb8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e9a:	4b6f      	ldr	r3, [pc, #444]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f003 0203 	and.w	r2, r3, #3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d103      	bne.n	8004eb2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
       ||
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d142      	bne.n	8004f38 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	73fb      	strb	r3, [r7, #15]
 8004eb6:	e03f      	b.n	8004f38 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d018      	beq.n	8004ef2 <RCCEx_PLLSAI2_Config+0x72>
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d825      	bhi.n	8004f10 <RCCEx_PLLSAI2_Config+0x90>
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d002      	beq.n	8004ece <RCCEx_PLLSAI2_Config+0x4e>
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d009      	beq.n	8004ee0 <RCCEx_PLLSAI2_Config+0x60>
 8004ecc:	e020      	b.n	8004f10 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ece:	4b62      	ldr	r3, [pc, #392]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d11d      	bne.n	8004f16 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ede:	e01a      	b.n	8004f16 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ee0:	4b5d      	ldr	r3, [pc, #372]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d116      	bne.n	8004f1a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ef0:	e013      	b.n	8004f1a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ef2:	4b59      	ldr	r3, [pc, #356]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10f      	bne.n	8004f1e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004efe:	4b56      	ldr	r3, [pc, #344]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d109      	bne.n	8004f1e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f0e:	e006      	b.n	8004f1e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	73fb      	strb	r3, [r7, #15]
      break;
 8004f14:	e004      	b.n	8004f20 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f16:	bf00      	nop
 8004f18:	e002      	b.n	8004f20 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f1a:	bf00      	nop
 8004f1c:	e000      	b.n	8004f20 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d108      	bne.n	8004f38 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004f26:	4b4c      	ldr	r3, [pc, #304]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f023 0203 	bic.w	r2, r3, #3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4949      	ldr	r1, [pc, #292]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f040 8086 	bne.w	800504c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f40:	4b45      	ldr	r3, [pc, #276]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a44      	ldr	r2, [pc, #272]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f4c:	f7fd ff9e 	bl	8002e8c <HAL_GetTick>
 8004f50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f52:	e009      	b.n	8004f68 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f54:	f7fd ff9a 	bl	8002e8c <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d902      	bls.n	8004f68 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	73fb      	strb	r3, [r7, #15]
        break;
 8004f66:	e005      	b.n	8004f74 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f68:	4b3b      	ldr	r3, [pc, #236]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1ef      	bne.n	8004f54 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d168      	bne.n	800504c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d113      	bne.n	8004fa8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f80:	4b35      	ldr	r3, [pc, #212]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f82:	695a      	ldr	r2, [r3, #20]
 8004f84:	4b35      	ldr	r3, [pc, #212]	; (800505c <RCCEx_PLLSAI2_Config+0x1dc>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6892      	ldr	r2, [r2, #8]
 8004f8c:	0211      	lsls	r1, r2, #8
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	68d2      	ldr	r2, [r2, #12]
 8004f92:	06d2      	lsls	r2, r2, #27
 8004f94:	4311      	orrs	r1, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6852      	ldr	r2, [r2, #4]
 8004f9a:	3a01      	subs	r2, #1
 8004f9c:	0112      	lsls	r2, r2, #4
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	492d      	ldr	r1, [pc, #180]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	614b      	str	r3, [r1, #20]
 8004fa6:	e02d      	b.n	8005004 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d115      	bne.n	8004fda <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fae:	4b2a      	ldr	r3, [pc, #168]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fb0:	695a      	ldr	r2, [r3, #20]
 8004fb2:	4b2b      	ldr	r3, [pc, #172]	; (8005060 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6892      	ldr	r2, [r2, #8]
 8004fba:	0211      	lsls	r1, r2, #8
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6912      	ldr	r2, [r2, #16]
 8004fc0:	0852      	lsrs	r2, r2, #1
 8004fc2:	3a01      	subs	r2, #1
 8004fc4:	0552      	lsls	r2, r2, #21
 8004fc6:	4311      	orrs	r1, r2
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6852      	ldr	r2, [r2, #4]
 8004fcc:	3a01      	subs	r2, #1
 8004fce:	0112      	lsls	r2, r2, #4
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	4921      	ldr	r1, [pc, #132]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	614b      	str	r3, [r1, #20]
 8004fd8:	e014      	b.n	8005004 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fda:	4b1f      	ldr	r3, [pc, #124]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fdc:	695a      	ldr	r2, [r3, #20]
 8004fde:	4b21      	ldr	r3, [pc, #132]	; (8005064 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6892      	ldr	r2, [r2, #8]
 8004fe6:	0211      	lsls	r1, r2, #8
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6952      	ldr	r2, [r2, #20]
 8004fec:	0852      	lsrs	r2, r2, #1
 8004fee:	3a01      	subs	r2, #1
 8004ff0:	0652      	lsls	r2, r2, #25
 8004ff2:	4311      	orrs	r1, r2
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6852      	ldr	r2, [r2, #4]
 8004ff8:	3a01      	subs	r2, #1
 8004ffa:	0112      	lsls	r2, r2, #4
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	4916      	ldr	r1, [pc, #88]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005000:	4313      	orrs	r3, r2
 8005002:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005004:	4b14      	ldr	r3, [pc, #80]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a13      	ldr	r2, [pc, #76]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 800500a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800500e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005010:	f7fd ff3c 	bl	8002e8c <HAL_GetTick>
 8005014:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005016:	e009      	b.n	800502c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005018:	f7fd ff38 	bl	8002e8c <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d902      	bls.n	800502c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	73fb      	strb	r3, [r7, #15]
          break;
 800502a:	e005      	b.n	8005038 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800502c:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0ef      	beq.n	8005018 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800503e:	4b06      	ldr	r3, [pc, #24]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005040:	695a      	ldr	r2, [r3, #20]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	4904      	ldr	r1, [pc, #16]	; (8005058 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005048:	4313      	orrs	r3, r2
 800504a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800504c:	7bfb      	ldrb	r3, [r7, #15]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40021000 	.word	0x40021000
 800505c:	07ff800f 	.word	0x07ff800f
 8005060:	ff9f800f 	.word	0xff9f800f
 8005064:	f9ff800f 	.word	0xf9ff800f

08005068 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e095      	b.n	80051a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	2b00      	cmp	r3, #0
 8005080:	d108      	bne.n	8005094 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800508a:	d009      	beq.n	80050a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	61da      	str	r2, [r3, #28]
 8005092:	e005      	b.n	80050a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fd fc9e 	bl	80029fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050e0:	d902      	bls.n	80050e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	e002      	b.n	80050ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050f6:	d007      	beq.n	8005108 <HAL_SPI_Init+0xa0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005100:	d002      	beq.n	8005108 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005118:	431a      	orrs	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	ea42 0103 	orr.w	r1, r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	0c1b      	lsrs	r3, r3, #16
 8005164:	f003 0204 	and.w	r2, r3, #4
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005184:	ea42 0103 	orr.w	r1, r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b088      	sub	sp, #32
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	603b      	str	r3, [r7, #0]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_SPI_Transmit+0x22>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e158      	b.n	8005482 <HAL_SPI_Transmit+0x2d4>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051d8:	f7fd fe58 	bl	8002e8c <HAL_GetTick>
 80051dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d002      	beq.n	80051f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80051ee:	2302      	movs	r3, #2
 80051f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051f2:	e13d      	b.n	8005470 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <HAL_SPI_Transmit+0x52>
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005204:	e134      	b.n	8005470 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2203      	movs	r2, #3
 800520a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	88fa      	ldrh	r2, [r7, #6]
 800521e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	88fa      	ldrh	r2, [r7, #6]
 8005224:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005250:	d10f      	bne.n	8005272 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005260:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005270:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d007      	beq.n	8005290 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800528e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005298:	d94b      	bls.n	8005332 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <HAL_SPI_Transmit+0xfa>
 80052a2:	8afb      	ldrh	r3, [r7, #22]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d13e      	bne.n	8005326 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	881a      	ldrh	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	1c9a      	adds	r2, r3, #2
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052cc:	e02b      	b.n	8005326 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d112      	bne.n	8005302 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	881a      	ldrh	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	1c9a      	adds	r2, r3, #2
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005300:	e011      	b.n	8005326 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005302:	f7fd fdc3 	bl	8002e8c <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d803      	bhi.n	800531a <HAL_SPI_Transmit+0x16c>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005318:	d102      	bne.n	8005320 <HAL_SPI_Transmit+0x172>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d102      	bne.n	8005326 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005324:	e0a4      	b.n	8005470 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800532a:	b29b      	uxth	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1ce      	bne.n	80052ce <HAL_SPI_Transmit+0x120>
 8005330:	e07c      	b.n	800542c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <HAL_SPI_Transmit+0x192>
 800533a:	8afb      	ldrh	r3, [r7, #22]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d170      	bne.n	8005422 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b01      	cmp	r3, #1
 8005348:	d912      	bls.n	8005370 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	881a      	ldrh	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	1c9a      	adds	r2, r3, #2
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b02      	subs	r3, #2
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800536e:	e058      	b.n	8005422 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	330c      	adds	r3, #12
 800537a:	7812      	ldrb	r2, [r2, #0]
 800537c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005396:	e044      	b.n	8005422 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d12b      	bne.n	80053fe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d912      	bls.n	80053d6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	881a      	ldrh	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	1c9a      	adds	r2, r3, #2
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3b02      	subs	r3, #2
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053d4:	e025      	b.n	8005422 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	330c      	adds	r3, #12
 80053e0:	7812      	ldrb	r2, [r2, #0]
 80053e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053fc:	e011      	b.n	8005422 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053fe:	f7fd fd45 	bl	8002e8c <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d803      	bhi.n	8005416 <HAL_SPI_Transmit+0x268>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d102      	bne.n	800541c <HAL_SPI_Transmit+0x26e>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d102      	bne.n	8005422 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005420:	e026      	b.n	8005470 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1b5      	bne.n	8005398 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 f949 	bl	80056c8 <SPI_EndRxTxTransaction>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10a      	bne.n	8005460 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800544a:	2300      	movs	r3, #0
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	613b      	str	r3, [r7, #16]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e000      	b.n	8005470 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800546e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005480:	7ffb      	ldrb	r3, [r7, #31]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3720      	adds	r7, #32
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800549c:	f7fd fcf6 	bl	8002e8c <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	4413      	add	r3, r2
 80054aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054ac:	f7fd fcee 	bl	8002e8c <HAL_GetTick>
 80054b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054b2:	4b39      	ldr	r3, [pc, #228]	; (8005598 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	015b      	lsls	r3, r3, #5
 80054b8:	0d1b      	lsrs	r3, r3, #20
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	fb02 f303 	mul.w	r3, r2, r3
 80054c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054c2:	e054      	b.n	800556e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ca:	d050      	beq.n	800556e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054cc:	f7fd fcde 	bl	8002e8c <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d902      	bls.n	80054e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d13d      	bne.n	800555e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054fa:	d111      	bne.n	8005520 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005504:	d004      	beq.n	8005510 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550e:	d107      	bne.n	8005520 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800551e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005528:	d10f      	bne.n	800554a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e017      	b.n	800558e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	3b01      	subs	r3, #1
 800556c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4013      	ands	r3, r2
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	429a      	cmp	r2, r3
 800557c:	bf0c      	ite	eq
 800557e:	2301      	moveq	r3, #1
 8005580:	2300      	movne	r3, #0
 8005582:	b2db      	uxtb	r3, r3
 8005584:	461a      	mov	r2, r3
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	429a      	cmp	r2, r3
 800558a:	d19b      	bne.n	80054c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3720      	adds	r7, #32
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000038 	.word	0x20000038

0800559c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08a      	sub	sp, #40	; 0x28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80055ae:	f7fd fc6d 	bl	8002e8c <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	1a9b      	subs	r3, r3, r2
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	4413      	add	r3, r2
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80055be:	f7fd fc65 	bl	8002e8c <HAL_GetTick>
 80055c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	330c      	adds	r3, #12
 80055ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80055cc:	4b3d      	ldr	r3, [pc, #244]	; (80056c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	00da      	lsls	r2, r3, #3
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	0d1b      	lsrs	r3, r3, #20
 80055dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055de:	fb02 f303 	mul.w	r3, r2, r3
 80055e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80055e4:	e060      	b.n	80056a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80055ec:	d107      	bne.n	80055fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80055fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005604:	d050      	beq.n	80056a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005606:	f7fd fc41 	bl	8002e8c <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005612:	429a      	cmp	r2, r3
 8005614:	d902      	bls.n	800561c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	2b00      	cmp	r3, #0
 800561a:	d13d      	bne.n	8005698 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800562a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005634:	d111      	bne.n	800565a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800563e:	d004      	beq.n	800564a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005648:	d107      	bne.n	800565a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005658:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005662:	d10f      	bne.n	8005684 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005682:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e010      	b.n	80056ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	4013      	ands	r3, r2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d196      	bne.n	80055e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3728      	adds	r7, #40	; 0x28
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000038 	.word	0x20000038

080056c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2200      	movs	r2, #0
 80056dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f7ff ff5b 	bl	800559c <SPI_WaitFifoStateUntilTimeout>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d007      	beq.n	80056fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f0:	f043 0220 	orr.w	r2, r3, #32
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e027      	b.n	800574c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2200      	movs	r2, #0
 8005704:	2180      	movs	r1, #128	; 0x80
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7ff fec0 	bl	800548c <SPI_WaitFlagStateUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005716:	f043 0220 	orr.w	r2, r3, #32
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e014      	b.n	800574c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2200      	movs	r2, #0
 800572a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f7ff ff34 	bl	800559c <SPI_WaitFifoStateUntilTimeout>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d007      	beq.n	800574a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573e:	f043 0220 	orr.w	r2, r3, #32
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e000      	b.n	800574c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e049      	b.n	80057fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fd f980 	bl	8002a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3304      	adds	r3, #4
 8005790:	4619      	mov	r1, r3
 8005792:	4610      	mov	r0, r2
 8005794:	f000 f968 	bl	8005a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	d001      	beq.n	800581c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e047      	b.n	80058ac <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a23      	ldr	r2, [pc, #140]	; (80058b8 <HAL_TIM_Base_Start+0xb4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d01d      	beq.n	800586a <HAL_TIM_Base_Start+0x66>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005836:	d018      	beq.n	800586a <HAL_TIM_Base_Start+0x66>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a1f      	ldr	r2, [pc, #124]	; (80058bc <HAL_TIM_Base_Start+0xb8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d013      	beq.n	800586a <HAL_TIM_Base_Start+0x66>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1e      	ldr	r2, [pc, #120]	; (80058c0 <HAL_TIM_Base_Start+0xbc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00e      	beq.n	800586a <HAL_TIM_Base_Start+0x66>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1c      	ldr	r2, [pc, #112]	; (80058c4 <HAL_TIM_Base_Start+0xc0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d009      	beq.n	800586a <HAL_TIM_Base_Start+0x66>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <HAL_TIM_Base_Start+0xc4>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d004      	beq.n	800586a <HAL_TIM_Base_Start+0x66>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a19      	ldr	r2, [pc, #100]	; (80058cc <HAL_TIM_Base_Start+0xc8>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d115      	bne.n	8005896 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	4b17      	ldr	r3, [pc, #92]	; (80058d0 <HAL_TIM_Base_Start+0xcc>)
 8005872:	4013      	ands	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b06      	cmp	r3, #6
 800587a:	d015      	beq.n	80058a8 <HAL_TIM_Base_Start+0xa4>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005882:	d011      	beq.n	80058a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005894:	e008      	b.n	80058a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0201 	orr.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	e000      	b.n	80058aa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	40012c00 	.word	0x40012c00
 80058bc:	40000400 	.word	0x40000400
 80058c0:	40000800 	.word	0x40000800
 80058c4:	40000c00 	.word	0x40000c00
 80058c8:	40013400 	.word	0x40013400
 80058cc:	40014000 	.word	0x40014000
 80058d0:	00010007 	.word	0x00010007

080058d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_TIM_ConfigClockSource+0x1c>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e0b6      	b.n	8005a5e <HAL_TIM_ConfigClockSource+0x18a>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800590e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800591a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800592c:	d03e      	beq.n	80059ac <HAL_TIM_ConfigClockSource+0xd8>
 800592e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005932:	f200 8087 	bhi.w	8005a44 <HAL_TIM_ConfigClockSource+0x170>
 8005936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800593a:	f000 8086 	beq.w	8005a4a <HAL_TIM_ConfigClockSource+0x176>
 800593e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005942:	d87f      	bhi.n	8005a44 <HAL_TIM_ConfigClockSource+0x170>
 8005944:	2b70      	cmp	r3, #112	; 0x70
 8005946:	d01a      	beq.n	800597e <HAL_TIM_ConfigClockSource+0xaa>
 8005948:	2b70      	cmp	r3, #112	; 0x70
 800594a:	d87b      	bhi.n	8005a44 <HAL_TIM_ConfigClockSource+0x170>
 800594c:	2b60      	cmp	r3, #96	; 0x60
 800594e:	d050      	beq.n	80059f2 <HAL_TIM_ConfigClockSource+0x11e>
 8005950:	2b60      	cmp	r3, #96	; 0x60
 8005952:	d877      	bhi.n	8005a44 <HAL_TIM_ConfigClockSource+0x170>
 8005954:	2b50      	cmp	r3, #80	; 0x50
 8005956:	d03c      	beq.n	80059d2 <HAL_TIM_ConfigClockSource+0xfe>
 8005958:	2b50      	cmp	r3, #80	; 0x50
 800595a:	d873      	bhi.n	8005a44 <HAL_TIM_ConfigClockSource+0x170>
 800595c:	2b40      	cmp	r3, #64	; 0x40
 800595e:	d058      	beq.n	8005a12 <HAL_TIM_ConfigClockSource+0x13e>
 8005960:	2b40      	cmp	r3, #64	; 0x40
 8005962:	d86f      	bhi.n	8005a44 <HAL_TIM_ConfigClockSource+0x170>
 8005964:	2b30      	cmp	r3, #48	; 0x30
 8005966:	d064      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x15e>
 8005968:	2b30      	cmp	r3, #48	; 0x30
 800596a:	d86b      	bhi.n	8005a44 <HAL_TIM_ConfigClockSource+0x170>
 800596c:	2b20      	cmp	r3, #32
 800596e:	d060      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x15e>
 8005970:	2b20      	cmp	r3, #32
 8005972:	d867      	bhi.n	8005a44 <HAL_TIM_ConfigClockSource+0x170>
 8005974:	2b00      	cmp	r3, #0
 8005976:	d05c      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x15e>
 8005978:	2b10      	cmp	r3, #16
 800597a:	d05a      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x15e>
 800597c:	e062      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6899      	ldr	r1, [r3, #8]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f000 f97f 	bl	8005c90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	609a      	str	r2, [r3, #8]
      break;
 80059aa:	e04f      	b.n	8005a4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6818      	ldr	r0, [r3, #0]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	6899      	ldr	r1, [r3, #8]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f000 f968 	bl	8005c90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059ce:	609a      	str	r2, [r3, #8]
      break;
 80059d0:	e03c      	b.n	8005a4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6818      	ldr	r0, [r3, #0]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	6859      	ldr	r1, [r3, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	461a      	mov	r2, r3
 80059e0:	f000 f8dc 	bl	8005b9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2150      	movs	r1, #80	; 0x50
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 f935 	bl	8005c5a <TIM_ITRx_SetConfig>
      break;
 80059f0:	e02c      	b.n	8005a4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6818      	ldr	r0, [r3, #0]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	6859      	ldr	r1, [r3, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	461a      	mov	r2, r3
 8005a00:	f000 f8fb 	bl	8005bfa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2160      	movs	r1, #96	; 0x60
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 f925 	bl	8005c5a <TIM_ITRx_SetConfig>
      break;
 8005a10:	e01c      	b.n	8005a4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6818      	ldr	r0, [r3, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	6859      	ldr	r1, [r3, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f000 f8bc 	bl	8005b9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2140      	movs	r1, #64	; 0x40
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 f915 	bl	8005c5a <TIM_ITRx_SetConfig>
      break;
 8005a30:	e00c      	b.n	8005a4c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	f000 f90c 	bl	8005c5a <TIM_ITRx_SetConfig>
      break;
 8005a42:	e003      	b.n	8005a4c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	73fb      	strb	r3, [r7, #15]
      break;
 8005a48:	e000      	b.n	8005a4c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005a4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a40      	ldr	r2, [pc, #256]	; (8005b7c <TIM_Base_SetConfig+0x114>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d013      	beq.n	8005aa8 <TIM_Base_SetConfig+0x40>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a86:	d00f      	beq.n	8005aa8 <TIM_Base_SetConfig+0x40>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a3d      	ldr	r2, [pc, #244]	; (8005b80 <TIM_Base_SetConfig+0x118>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00b      	beq.n	8005aa8 <TIM_Base_SetConfig+0x40>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a3c      	ldr	r2, [pc, #240]	; (8005b84 <TIM_Base_SetConfig+0x11c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d007      	beq.n	8005aa8 <TIM_Base_SetConfig+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a3b      	ldr	r2, [pc, #236]	; (8005b88 <TIM_Base_SetConfig+0x120>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_Base_SetConfig+0x40>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a3a      	ldr	r2, [pc, #232]	; (8005b8c <TIM_Base_SetConfig+0x124>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d108      	bne.n	8005aba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a2f      	ldr	r2, [pc, #188]	; (8005b7c <TIM_Base_SetConfig+0x114>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d01f      	beq.n	8005b02 <TIM_Base_SetConfig+0x9a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac8:	d01b      	beq.n	8005b02 <TIM_Base_SetConfig+0x9a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a2c      	ldr	r2, [pc, #176]	; (8005b80 <TIM_Base_SetConfig+0x118>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d017      	beq.n	8005b02 <TIM_Base_SetConfig+0x9a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2b      	ldr	r2, [pc, #172]	; (8005b84 <TIM_Base_SetConfig+0x11c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d013      	beq.n	8005b02 <TIM_Base_SetConfig+0x9a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a2a      	ldr	r2, [pc, #168]	; (8005b88 <TIM_Base_SetConfig+0x120>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d00f      	beq.n	8005b02 <TIM_Base_SetConfig+0x9a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a29      	ldr	r2, [pc, #164]	; (8005b8c <TIM_Base_SetConfig+0x124>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00b      	beq.n	8005b02 <TIM_Base_SetConfig+0x9a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a28      	ldr	r2, [pc, #160]	; (8005b90 <TIM_Base_SetConfig+0x128>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d007      	beq.n	8005b02 <TIM_Base_SetConfig+0x9a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a27      	ldr	r2, [pc, #156]	; (8005b94 <TIM_Base_SetConfig+0x12c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d003      	beq.n	8005b02 <TIM_Base_SetConfig+0x9a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a26      	ldr	r2, [pc, #152]	; (8005b98 <TIM_Base_SetConfig+0x130>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d108      	bne.n	8005b14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a10      	ldr	r2, [pc, #64]	; (8005b7c <TIM_Base_SetConfig+0x114>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00f      	beq.n	8005b60 <TIM_Base_SetConfig+0xf8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a12      	ldr	r2, [pc, #72]	; (8005b8c <TIM_Base_SetConfig+0x124>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00b      	beq.n	8005b60 <TIM_Base_SetConfig+0xf8>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a11      	ldr	r2, [pc, #68]	; (8005b90 <TIM_Base_SetConfig+0x128>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d007      	beq.n	8005b60 <TIM_Base_SetConfig+0xf8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a10      	ldr	r2, [pc, #64]	; (8005b94 <TIM_Base_SetConfig+0x12c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d003      	beq.n	8005b60 <TIM_Base_SetConfig+0xf8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a0f      	ldr	r2, [pc, #60]	; (8005b98 <TIM_Base_SetConfig+0x130>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d103      	bne.n	8005b68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	615a      	str	r2, [r3, #20]
}
 8005b6e:	bf00      	nop
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40012c00 	.word	0x40012c00
 8005b80:	40000400 	.word	0x40000400
 8005b84:	40000800 	.word	0x40000800
 8005b88:	40000c00 	.word	0x40000c00
 8005b8c:	40013400 	.word	0x40013400
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40014400 	.word	0x40014400
 8005b98:	40014800 	.word	0x40014800

08005b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f023 0201 	bic.w	r2, r3, #1
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f023 030a 	bic.w	r3, r3, #10
 8005bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	621a      	str	r2, [r3, #32]
}
 8005bee:	bf00      	nop
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b087      	sub	sp, #28
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	f023 0210 	bic.w	r2, r3, #16
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	031b      	lsls	r3, r3, #12
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	f043 0307 	orr.w	r3, r3, #7
 8005c7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	609a      	str	r2, [r3, #8]
}
 8005c84:	bf00      	nop
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005caa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	021a      	lsls	r2, r3, #8
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	609a      	str	r2, [r3, #8]
}
 8005cc4:	bf00      	nop
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e068      	b.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a2e      	ldr	r2, [pc, #184]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d004      	beq.n	8005d1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a2d      	ldr	r2, [pc, #180]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d108      	bne.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a1e      	ldr	r2, [pc, #120]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d01d      	beq.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5a:	d018      	beq.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1b      	ldr	r2, [pc, #108]	; (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d013      	beq.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1a      	ldr	r2, [pc, #104]	; (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00e      	beq.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a18      	ldr	r2, [pc, #96]	; (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d009      	beq.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a13      	ldr	r2, [pc, #76]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d004      	beq.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a14      	ldr	r2, [pc, #80]	; (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d10c      	bne.n	8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40012c00 	.word	0x40012c00
 8005dcc:	40013400 	.word	0x40013400
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40000800 	.word	0x40000800
 8005dd8:	40000c00 	.word	0x40000c00
 8005ddc:	40014000 	.word	0x40014000

08005de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e042      	b.n	8005e78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d106      	bne.n	8005e0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7fc fd97 	bl	8002938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2224      	movs	r2, #36	; 0x24
 8005e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0201 	bic.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f8c4 	bl	8005fb0 <UART_SetConfig>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d101      	bne.n	8005e32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e022      	b.n	8005e78 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fbb4 	bl	80065a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fc3b 	bl	80066ec <UART_CheckIdleState>
 8005e76:	4603      	mov	r3, r0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08a      	sub	sp, #40	; 0x28
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e96:	2b20      	cmp	r3, #32
 8005e98:	f040 8084 	bne.w	8005fa4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <HAL_UART_Transmit+0x28>
 8005ea2:	88fb      	ldrh	r3, [r7, #6]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e07c      	b.n	8005fa6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d101      	bne.n	8005eba <HAL_UART_Transmit+0x3a>
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	e075      	b.n	8005fa6 <HAL_UART_Transmit+0x126>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2221      	movs	r2, #33	; 0x21
 8005ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ed2:	f7fc ffdb 	bl	8002e8c <HAL_GetTick>
 8005ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	88fa      	ldrh	r2, [r7, #6]
 8005edc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	88fa      	ldrh	r2, [r7, #6]
 8005ee4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef0:	d108      	bne.n	8005f04 <HAL_UART_Transmit+0x84>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d104      	bne.n	8005f04 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	61bb      	str	r3, [r7, #24]
 8005f02:	e003      	b.n	8005f0c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005f14:	e02d      	b.n	8005f72 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	2180      	movs	r1, #128	; 0x80
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 fc2e 	bl	8006782 <UART_WaitOnFlagUntilTimeout>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e03a      	b.n	8005fa6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10b      	bne.n	8005f4e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	881a      	ldrh	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f42:	b292      	uxth	r2, r2
 8005f44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	3302      	adds	r3, #2
 8005f4a:	61bb      	str	r3, [r7, #24]
 8005f4c:	e008      	b.n	8005f60 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	781a      	ldrb	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	b292      	uxth	r2, r2
 8005f58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1cb      	bne.n	8005f16 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2200      	movs	r2, #0
 8005f86:	2140      	movs	r1, #64	; 0x40
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 fbfa 	bl	8006782 <UART_WaitOnFlagUntilTimeout>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e006      	b.n	8005fa6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e000      	b.n	8005fa6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005fa4:	2302      	movs	r3, #2
  }
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3720      	adds	r7, #32
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fb4:	b08c      	sub	sp, #48	; 0x30
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4baa      	ldr	r3, [pc, #680]	; (8006288 <UART_SetConfig+0x2d8>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	6812      	ldr	r2, [r2, #0]
 8005fe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a9f      	ldr	r2, [pc, #636]	; (800628c <UART_SetConfig+0x2dc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d004      	beq.n	800601c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006018:	4313      	orrs	r3, r2
 800601a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006026:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	6812      	ldr	r2, [r2, #0]
 800602e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006030:	430b      	orrs	r3, r1
 8006032:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	f023 010f 	bic.w	r1, r3, #15
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a90      	ldr	r2, [pc, #576]	; (8006290 <UART_SetConfig+0x2e0>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d125      	bne.n	80060a0 <UART_SetConfig+0xf0>
 8006054:	4b8f      	ldr	r3, [pc, #572]	; (8006294 <UART_SetConfig+0x2e4>)
 8006056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	2b03      	cmp	r3, #3
 8006060:	d81a      	bhi.n	8006098 <UART_SetConfig+0xe8>
 8006062:	a201      	add	r2, pc, #4	; (adr r2, 8006068 <UART_SetConfig+0xb8>)
 8006064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006068:	08006079 	.word	0x08006079
 800606c:	08006089 	.word	0x08006089
 8006070:	08006081 	.word	0x08006081
 8006074:	08006091 	.word	0x08006091
 8006078:	2301      	movs	r3, #1
 800607a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800607e:	e116      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006080:	2302      	movs	r3, #2
 8006082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006086:	e112      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006088:	2304      	movs	r3, #4
 800608a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800608e:	e10e      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006090:	2308      	movs	r3, #8
 8006092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006096:	e10a      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006098:	2310      	movs	r3, #16
 800609a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800609e:	e106      	b.n	80062ae <UART_SetConfig+0x2fe>
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a7c      	ldr	r2, [pc, #496]	; (8006298 <UART_SetConfig+0x2e8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d138      	bne.n	800611c <UART_SetConfig+0x16c>
 80060aa:	4b7a      	ldr	r3, [pc, #488]	; (8006294 <UART_SetConfig+0x2e4>)
 80060ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b0:	f003 030c 	and.w	r3, r3, #12
 80060b4:	2b0c      	cmp	r3, #12
 80060b6:	d82d      	bhi.n	8006114 <UART_SetConfig+0x164>
 80060b8:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <UART_SetConfig+0x110>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	080060f5 	.word	0x080060f5
 80060c4:	08006115 	.word	0x08006115
 80060c8:	08006115 	.word	0x08006115
 80060cc:	08006115 	.word	0x08006115
 80060d0:	08006105 	.word	0x08006105
 80060d4:	08006115 	.word	0x08006115
 80060d8:	08006115 	.word	0x08006115
 80060dc:	08006115 	.word	0x08006115
 80060e0:	080060fd 	.word	0x080060fd
 80060e4:	08006115 	.word	0x08006115
 80060e8:	08006115 	.word	0x08006115
 80060ec:	08006115 	.word	0x08006115
 80060f0:	0800610d 	.word	0x0800610d
 80060f4:	2300      	movs	r3, #0
 80060f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060fa:	e0d8      	b.n	80062ae <UART_SetConfig+0x2fe>
 80060fc:	2302      	movs	r3, #2
 80060fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006102:	e0d4      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006104:	2304      	movs	r3, #4
 8006106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800610a:	e0d0      	b.n	80062ae <UART_SetConfig+0x2fe>
 800610c:	2308      	movs	r3, #8
 800610e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006112:	e0cc      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006114:	2310      	movs	r3, #16
 8006116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800611a:	e0c8      	b.n	80062ae <UART_SetConfig+0x2fe>
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a5e      	ldr	r2, [pc, #376]	; (800629c <UART_SetConfig+0x2ec>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d125      	bne.n	8006172 <UART_SetConfig+0x1c2>
 8006126:	4b5b      	ldr	r3, [pc, #364]	; (8006294 <UART_SetConfig+0x2e4>)
 8006128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006130:	2b30      	cmp	r3, #48	; 0x30
 8006132:	d016      	beq.n	8006162 <UART_SetConfig+0x1b2>
 8006134:	2b30      	cmp	r3, #48	; 0x30
 8006136:	d818      	bhi.n	800616a <UART_SetConfig+0x1ba>
 8006138:	2b20      	cmp	r3, #32
 800613a:	d00a      	beq.n	8006152 <UART_SetConfig+0x1a2>
 800613c:	2b20      	cmp	r3, #32
 800613e:	d814      	bhi.n	800616a <UART_SetConfig+0x1ba>
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <UART_SetConfig+0x19a>
 8006144:	2b10      	cmp	r3, #16
 8006146:	d008      	beq.n	800615a <UART_SetConfig+0x1aa>
 8006148:	e00f      	b.n	800616a <UART_SetConfig+0x1ba>
 800614a:	2300      	movs	r3, #0
 800614c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006150:	e0ad      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006152:	2302      	movs	r3, #2
 8006154:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006158:	e0a9      	b.n	80062ae <UART_SetConfig+0x2fe>
 800615a:	2304      	movs	r3, #4
 800615c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006160:	e0a5      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006162:	2308      	movs	r3, #8
 8006164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006168:	e0a1      	b.n	80062ae <UART_SetConfig+0x2fe>
 800616a:	2310      	movs	r3, #16
 800616c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006170:	e09d      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a4a      	ldr	r2, [pc, #296]	; (80062a0 <UART_SetConfig+0x2f0>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d125      	bne.n	80061c8 <UART_SetConfig+0x218>
 800617c:	4b45      	ldr	r3, [pc, #276]	; (8006294 <UART_SetConfig+0x2e4>)
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006182:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006186:	2bc0      	cmp	r3, #192	; 0xc0
 8006188:	d016      	beq.n	80061b8 <UART_SetConfig+0x208>
 800618a:	2bc0      	cmp	r3, #192	; 0xc0
 800618c:	d818      	bhi.n	80061c0 <UART_SetConfig+0x210>
 800618e:	2b80      	cmp	r3, #128	; 0x80
 8006190:	d00a      	beq.n	80061a8 <UART_SetConfig+0x1f8>
 8006192:	2b80      	cmp	r3, #128	; 0x80
 8006194:	d814      	bhi.n	80061c0 <UART_SetConfig+0x210>
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <UART_SetConfig+0x1f0>
 800619a:	2b40      	cmp	r3, #64	; 0x40
 800619c:	d008      	beq.n	80061b0 <UART_SetConfig+0x200>
 800619e:	e00f      	b.n	80061c0 <UART_SetConfig+0x210>
 80061a0:	2300      	movs	r3, #0
 80061a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061a6:	e082      	b.n	80062ae <UART_SetConfig+0x2fe>
 80061a8:	2302      	movs	r3, #2
 80061aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ae:	e07e      	b.n	80062ae <UART_SetConfig+0x2fe>
 80061b0:	2304      	movs	r3, #4
 80061b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061b6:	e07a      	b.n	80062ae <UART_SetConfig+0x2fe>
 80061b8:	2308      	movs	r3, #8
 80061ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061be:	e076      	b.n	80062ae <UART_SetConfig+0x2fe>
 80061c0:	2310      	movs	r3, #16
 80061c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061c6:	e072      	b.n	80062ae <UART_SetConfig+0x2fe>
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a35      	ldr	r2, [pc, #212]	; (80062a4 <UART_SetConfig+0x2f4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d12a      	bne.n	8006228 <UART_SetConfig+0x278>
 80061d2:	4b30      	ldr	r3, [pc, #192]	; (8006294 <UART_SetConfig+0x2e4>)
 80061d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061e0:	d01a      	beq.n	8006218 <UART_SetConfig+0x268>
 80061e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061e6:	d81b      	bhi.n	8006220 <UART_SetConfig+0x270>
 80061e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ec:	d00c      	beq.n	8006208 <UART_SetConfig+0x258>
 80061ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f2:	d815      	bhi.n	8006220 <UART_SetConfig+0x270>
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <UART_SetConfig+0x250>
 80061f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061fc:	d008      	beq.n	8006210 <UART_SetConfig+0x260>
 80061fe:	e00f      	b.n	8006220 <UART_SetConfig+0x270>
 8006200:	2300      	movs	r3, #0
 8006202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006206:	e052      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006208:	2302      	movs	r3, #2
 800620a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800620e:	e04e      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006210:	2304      	movs	r3, #4
 8006212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006216:	e04a      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006218:	2308      	movs	r3, #8
 800621a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800621e:	e046      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006220:	2310      	movs	r3, #16
 8006222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006226:	e042      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a17      	ldr	r2, [pc, #92]	; (800628c <UART_SetConfig+0x2dc>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d13a      	bne.n	80062a8 <UART_SetConfig+0x2f8>
 8006232:	4b18      	ldr	r3, [pc, #96]	; (8006294 <UART_SetConfig+0x2e4>)
 8006234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006238:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800623c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006240:	d01a      	beq.n	8006278 <UART_SetConfig+0x2c8>
 8006242:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006246:	d81b      	bhi.n	8006280 <UART_SetConfig+0x2d0>
 8006248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800624c:	d00c      	beq.n	8006268 <UART_SetConfig+0x2b8>
 800624e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006252:	d815      	bhi.n	8006280 <UART_SetConfig+0x2d0>
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <UART_SetConfig+0x2b0>
 8006258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800625c:	d008      	beq.n	8006270 <UART_SetConfig+0x2c0>
 800625e:	e00f      	b.n	8006280 <UART_SetConfig+0x2d0>
 8006260:	2300      	movs	r3, #0
 8006262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006266:	e022      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006268:	2302      	movs	r3, #2
 800626a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800626e:	e01e      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006270:	2304      	movs	r3, #4
 8006272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006276:	e01a      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006278:	2308      	movs	r3, #8
 800627a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800627e:	e016      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006280:	2310      	movs	r3, #16
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006286:	e012      	b.n	80062ae <UART_SetConfig+0x2fe>
 8006288:	cfff69f3 	.word	0xcfff69f3
 800628c:	40008000 	.word	0x40008000
 8006290:	40013800 	.word	0x40013800
 8006294:	40021000 	.word	0x40021000
 8006298:	40004400 	.word	0x40004400
 800629c:	40004800 	.word	0x40004800
 80062a0:	40004c00 	.word	0x40004c00
 80062a4:	40005000 	.word	0x40005000
 80062a8:	2310      	movs	r3, #16
 80062aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4aae      	ldr	r2, [pc, #696]	; (800656c <UART_SetConfig+0x5bc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	f040 8097 	bne.w	80063e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d823      	bhi.n	800630a <UART_SetConfig+0x35a>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <UART_SetConfig+0x318>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062ed 	.word	0x080062ed
 80062cc:	0800630b 	.word	0x0800630b
 80062d0:	080062f5 	.word	0x080062f5
 80062d4:	0800630b 	.word	0x0800630b
 80062d8:	080062fb 	.word	0x080062fb
 80062dc:	0800630b 	.word	0x0800630b
 80062e0:	0800630b 	.word	0x0800630b
 80062e4:	0800630b 	.word	0x0800630b
 80062e8:	08006303 	.word	0x08006303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062ec:	f7fe f8b6 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 80062f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062f2:	e010      	b.n	8006316 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062f4:	4b9e      	ldr	r3, [pc, #632]	; (8006570 <UART_SetConfig+0x5c0>)
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062f8:	e00d      	b.n	8006316 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062fa:	f7fe f817 	bl	800432c <HAL_RCC_GetSysClockFreq>
 80062fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006300:	e009      	b.n	8006316 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006306:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006308:	e005      	b.n	8006316 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006314:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 8130 	beq.w	800657e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	4a94      	ldr	r2, [pc, #592]	; (8006574 <UART_SetConfig+0x5c4>)
 8006324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006328:	461a      	mov	r2, r3
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006330:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	4613      	mov	r3, r2
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	4413      	add	r3, r2
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	429a      	cmp	r2, r3
 8006340:	d305      	bcc.n	800634e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	429a      	cmp	r2, r3
 800634c:	d903      	bls.n	8006356 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006354:	e113      	b.n	800657e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	2200      	movs	r2, #0
 800635a:	60bb      	str	r3, [r7, #8]
 800635c:	60fa      	str	r2, [r7, #12]
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	4a84      	ldr	r2, [pc, #528]	; (8006574 <UART_SetConfig+0x5c4>)
 8006364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006368:	b29b      	uxth	r3, r3
 800636a:	2200      	movs	r2, #0
 800636c:	603b      	str	r3, [r7, #0]
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006374:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006378:	f7fb f82e 	bl	80013d8 <__aeabi_uldivmod>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4610      	mov	r0, r2
 8006382:	4619      	mov	r1, r3
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	020b      	lsls	r3, r1, #8
 800638e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006392:	0202      	lsls	r2, r0, #8
 8006394:	6979      	ldr	r1, [r7, #20]
 8006396:	6849      	ldr	r1, [r1, #4]
 8006398:	0849      	lsrs	r1, r1, #1
 800639a:	2000      	movs	r0, #0
 800639c:	460c      	mov	r4, r1
 800639e:	4605      	mov	r5, r0
 80063a0:	eb12 0804 	adds.w	r8, r2, r4
 80063a4:	eb43 0905 	adc.w	r9, r3, r5
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	469a      	mov	sl, r3
 80063b0:	4693      	mov	fp, r2
 80063b2:	4652      	mov	r2, sl
 80063b4:	465b      	mov	r3, fp
 80063b6:	4640      	mov	r0, r8
 80063b8:	4649      	mov	r1, r9
 80063ba:	f7fb f80d 	bl	80013d8 <__aeabi_uldivmod>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4613      	mov	r3, r2
 80063c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063cc:	d308      	bcc.n	80063e0 <UART_SetConfig+0x430>
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063d4:	d204      	bcs.n	80063e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6a3a      	ldr	r2, [r7, #32]
 80063dc:	60da      	str	r2, [r3, #12]
 80063de:	e0ce      	b.n	800657e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063e6:	e0ca      	b.n	800657e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063f0:	d166      	bne.n	80064c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80063f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063f6:	2b08      	cmp	r3, #8
 80063f8:	d827      	bhi.n	800644a <UART_SetConfig+0x49a>
 80063fa:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <UART_SetConfig+0x450>)
 80063fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006400:	08006425 	.word	0x08006425
 8006404:	0800642d 	.word	0x0800642d
 8006408:	08006435 	.word	0x08006435
 800640c:	0800644b 	.word	0x0800644b
 8006410:	0800643b 	.word	0x0800643b
 8006414:	0800644b 	.word	0x0800644b
 8006418:	0800644b 	.word	0x0800644b
 800641c:	0800644b 	.word	0x0800644b
 8006420:	08006443 	.word	0x08006443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006424:	f7fe f81a 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 8006428:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800642a:	e014      	b.n	8006456 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800642c:	f7fe f82c 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 8006430:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006432:	e010      	b.n	8006456 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006434:	4b4e      	ldr	r3, [pc, #312]	; (8006570 <UART_SetConfig+0x5c0>)
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006438:	e00d      	b.n	8006456 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800643a:	f7fd ff77 	bl	800432c <HAL_RCC_GetSysClockFreq>
 800643e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006440:	e009      	b.n	8006456 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006448:	e005      	b.n	8006456 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006454:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 8090 	beq.w	800657e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	4a44      	ldr	r2, [pc, #272]	; (8006574 <UART_SetConfig+0x5c4>)
 8006464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006468:	461a      	mov	r2, r3
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006470:	005a      	lsls	r2, r3, #1
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	085b      	lsrs	r3, r3, #1
 8006478:	441a      	add	r2, r3
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006482:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	2b0f      	cmp	r3, #15
 8006488:	d916      	bls.n	80064b8 <UART_SetConfig+0x508>
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006490:	d212      	bcs.n	80064b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	b29b      	uxth	r3, r3
 8006496:	f023 030f 	bic.w	r3, r3, #15
 800649a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	085b      	lsrs	r3, r3, #1
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	8bfb      	ldrh	r3, [r7, #30]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	8bfa      	ldrh	r2, [r7, #30]
 80064b4:	60da      	str	r2, [r3, #12]
 80064b6:	e062      	b.n	800657e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80064be:	e05e      	b.n	800657e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d828      	bhi.n	800651a <UART_SetConfig+0x56a>
 80064c8:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <UART_SetConfig+0x520>)
 80064ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ce:	bf00      	nop
 80064d0:	080064f5 	.word	0x080064f5
 80064d4:	080064fd 	.word	0x080064fd
 80064d8:	08006505 	.word	0x08006505
 80064dc:	0800651b 	.word	0x0800651b
 80064e0:	0800650b 	.word	0x0800650b
 80064e4:	0800651b 	.word	0x0800651b
 80064e8:	0800651b 	.word	0x0800651b
 80064ec:	0800651b 	.word	0x0800651b
 80064f0:	08006513 	.word	0x08006513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f4:	f7fd ffb2 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 80064f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064fa:	e014      	b.n	8006526 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064fc:	f7fd ffc4 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 8006500:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006502:	e010      	b.n	8006526 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006504:	4b1a      	ldr	r3, [pc, #104]	; (8006570 <UART_SetConfig+0x5c0>)
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006508:	e00d      	b.n	8006526 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800650a:	f7fd ff0f 	bl	800432c <HAL_RCC_GetSysClockFreq>
 800650e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006510:	e009      	b.n	8006526 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006518:	e005      	b.n	8006526 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006524:	bf00      	nop
    }

    if (pclk != 0U)
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	2b00      	cmp	r3, #0
 800652a:	d028      	beq.n	800657e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	4a10      	ldr	r2, [pc, #64]	; (8006574 <UART_SetConfig+0x5c4>)
 8006532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006536:	461a      	mov	r2, r3
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	fbb3 f2f2 	udiv	r2, r3, r2
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	085b      	lsrs	r3, r3, #1
 8006544:	441a      	add	r2, r3
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	fbb2 f3f3 	udiv	r3, r2, r3
 800654e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	2b0f      	cmp	r3, #15
 8006554:	d910      	bls.n	8006578 <UART_SetConfig+0x5c8>
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655c:	d20c      	bcs.n	8006578 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	b29a      	uxth	r2, r3
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60da      	str	r2, [r3, #12]
 8006568:	e009      	b.n	800657e <UART_SetConfig+0x5ce>
 800656a:	bf00      	nop
 800656c:	40008000 	.word	0x40008000
 8006570:	00f42400 	.word	0x00f42400
 8006574:	080096b4 	.word	0x080096b4
      }
      else
      {
        ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2201      	movs	r2, #1
 8006582:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2201      	movs	r2, #1
 800658a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2200      	movs	r2, #0
 8006592:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2200      	movs	r2, #0
 8006598:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800659a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3730      	adds	r7, #48	; 0x30
 80065a2:	46bd      	mov	sp, r7
 80065a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080065a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00a      	beq.n	80065f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	430a      	orrs	r2, r1
 80065f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00a      	beq.n	8006616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661a:	f003 0308 	and.w	r3, r3, #8
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00a      	beq.n	8006638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663c:	f003 0310 	and.w	r3, r3, #16
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00a      	beq.n	800665a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01a      	beq.n	80066be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066a6:	d10a      	bne.n	80066be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	605a      	str	r2, [r3, #4]
  }
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af02      	add	r7, sp, #8
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066fc:	f7fc fbc6 	bl	8002e8c <HAL_GetTick>
 8006700:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0308 	and.w	r3, r3, #8
 800670c:	2b08      	cmp	r3, #8
 800670e:	d10e      	bne.n	800672e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006710:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f82f 	bl	8006782 <UART_WaitOnFlagUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e025      	b.n	800677a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b04      	cmp	r3, #4
 800673a:	d10e      	bne.n	800675a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800673c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f819 	bl	8006782 <UART_WaitOnFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e00f      	b.n	800677a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b09c      	sub	sp, #112	; 0x70
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	603b      	str	r3, [r7, #0]
 800678e:	4613      	mov	r3, r2
 8006790:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006792:	e0a9      	b.n	80068e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679a:	f000 80a5 	beq.w	80068e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800679e:	f7fc fb75 	bl	8002e8c <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d302      	bcc.n	80067b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80067ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d140      	bne.n	8006836 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067c8:	667b      	str	r3, [r7, #100]	; 0x64
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e6      	bne.n	80067b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3308      	adds	r3, #8
 80067ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f8:	f023 0301 	bic.w	r3, r3, #1
 80067fc:	663b      	str	r3, [r7, #96]	; 0x60
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3308      	adds	r3, #8
 8006804:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006806:	64ba      	str	r2, [r7, #72]	; 0x48
 8006808:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800680c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e5      	bne.n	80067e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2220      	movs	r2, #32
 800681e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2220      	movs	r2, #32
 8006826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e069      	b.n	800690a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d051      	beq.n	80068e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800684e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006852:	d149      	bne.n	80068e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800685c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	e853 3f00 	ldrex	r3, [r3]
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006872:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	461a      	mov	r2, r3
 800687a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800687c:	637b      	str	r3, [r7, #52]	; 0x34
 800687e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006884:	e841 2300 	strex	r3, r2, [r1]
 8006888:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1e6      	bne.n	800685e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3308      	adds	r3, #8
 8006896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	e853 3f00 	ldrex	r3, [r3]
 800689e:	613b      	str	r3, [r7, #16]
   return(result);
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f023 0301 	bic.w	r3, r3, #1
 80068a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3308      	adds	r3, #8
 80068ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068b0:	623a      	str	r2, [r7, #32]
 80068b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b4:	69f9      	ldr	r1, [r7, #28]
 80068b6:	6a3a      	ldr	r2, [r7, #32]
 80068b8:	e841 2300 	strex	r3, r2, [r1]
 80068bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1e5      	bne.n	8006890 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e010      	b.n	800690a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	69da      	ldr	r2, [r3, #28]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4013      	ands	r3, r2
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	bf0c      	ite	eq
 80068f8:	2301      	moveq	r3, #1
 80068fa:	2300      	movne	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	461a      	mov	r2, r3
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	429a      	cmp	r2, r3
 8006904:	f43f af46 	beq.w	8006794 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3770      	adds	r7, #112	; 0x70
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006912:	b480      	push	{r7}
 8006914:	b085      	sub	sp, #20
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_UARTEx_DisableFifoMode+0x16>
 8006924:	2302      	movs	r3, #2
 8006926:	e027      	b.n	8006978 <HAL_UARTEx_DisableFifoMode+0x66>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2224      	movs	r2, #36	; 0x24
 8006934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0201 	bic.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006956:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2220      	movs	r2, #32
 800696a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006994:	2b01      	cmp	r3, #1
 8006996:	d101      	bne.n	800699c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006998:	2302      	movs	r3, #2
 800699a:	e02d      	b.n	80069f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2224      	movs	r2, #36	; 0x24
 80069a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 0201 	bic.w	r2, r2, #1
 80069c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f84f 	bl	8006a7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a14:	2302      	movs	r3, #2
 8006a16:	e02d      	b.n	8006a74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2224      	movs	r2, #36	; 0x24
 8006a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0201 	bic.w	r2, r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f811 	bl	8006a7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d108      	bne.n	8006a9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a9c:	e031      	b.n	8006b02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a9e:	2308      	movs	r3, #8
 8006aa0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006aa2:	2308      	movs	r3, #8
 8006aa4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	0e5b      	lsrs	r3, r3, #25
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	0f5b      	lsrs	r3, r3, #29
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
 8006ac8:	7b3a      	ldrb	r2, [r7, #12]
 8006aca:	4911      	ldr	r1, [pc, #68]	; (8006b10 <UARTEx_SetNbDataToProcess+0x94>)
 8006acc:	5c8a      	ldrb	r2, [r1, r2]
 8006ace:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ad2:	7b3a      	ldrb	r2, [r7, #12]
 8006ad4:	490f      	ldr	r1, [pc, #60]	; (8006b14 <UARTEx_SetNbDataToProcess+0x98>)
 8006ad6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ad8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	7b7a      	ldrb	r2, [r7, #13]
 8006ae8:	4909      	ldr	r1, [pc, #36]	; (8006b10 <UARTEx_SetNbDataToProcess+0x94>)
 8006aea:	5c8a      	ldrb	r2, [r1, r2]
 8006aec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006af0:	7b7a      	ldrb	r2, [r7, #13]
 8006af2:	4908      	ldr	r1, [pc, #32]	; (8006b14 <UARTEx_SetNbDataToProcess+0x98>)
 8006af4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006af6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b02:	bf00      	nop
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	080096cc 	.word	0x080096cc
 8006b14:	080096d4 	.word	0x080096d4

08006b18 <__errno>:
 8006b18:	4b01      	ldr	r3, [pc, #4]	; (8006b20 <__errno+0x8>)
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	20000044 	.word	0x20000044

08006b24 <__libc_init_array>:
 8006b24:	b570      	push	{r4, r5, r6, lr}
 8006b26:	4d0d      	ldr	r5, [pc, #52]	; (8006b5c <__libc_init_array+0x38>)
 8006b28:	4c0d      	ldr	r4, [pc, #52]	; (8006b60 <__libc_init_array+0x3c>)
 8006b2a:	1b64      	subs	r4, r4, r5
 8006b2c:	10a4      	asrs	r4, r4, #2
 8006b2e:	2600      	movs	r6, #0
 8006b30:	42a6      	cmp	r6, r4
 8006b32:	d109      	bne.n	8006b48 <__libc_init_array+0x24>
 8006b34:	4d0b      	ldr	r5, [pc, #44]	; (8006b64 <__libc_init_array+0x40>)
 8006b36:	4c0c      	ldr	r4, [pc, #48]	; (8006b68 <__libc_init_array+0x44>)
 8006b38:	f002 fd50 	bl	80095dc <_init>
 8006b3c:	1b64      	subs	r4, r4, r5
 8006b3e:	10a4      	asrs	r4, r4, #2
 8006b40:	2600      	movs	r6, #0
 8006b42:	42a6      	cmp	r6, r4
 8006b44:	d105      	bne.n	8006b52 <__libc_init_array+0x2e>
 8006b46:	bd70      	pop	{r4, r5, r6, pc}
 8006b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b4c:	4798      	blx	r3
 8006b4e:	3601      	adds	r6, #1
 8006b50:	e7ee      	b.n	8006b30 <__libc_init_array+0xc>
 8006b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b56:	4798      	blx	r3
 8006b58:	3601      	adds	r6, #1
 8006b5a:	e7f2      	b.n	8006b42 <__libc_init_array+0x1e>
 8006b5c:	08009abc 	.word	0x08009abc
 8006b60:	08009abc 	.word	0x08009abc
 8006b64:	08009abc 	.word	0x08009abc
 8006b68:	08009ac0 	.word	0x08009ac0

08006b6c <memcpy>:
 8006b6c:	440a      	add	r2, r1
 8006b6e:	4291      	cmp	r1, r2
 8006b70:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b74:	d100      	bne.n	8006b78 <memcpy+0xc>
 8006b76:	4770      	bx	lr
 8006b78:	b510      	push	{r4, lr}
 8006b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b82:	4291      	cmp	r1, r2
 8006b84:	d1f9      	bne.n	8006b7a <memcpy+0xe>
 8006b86:	bd10      	pop	{r4, pc}

08006b88 <memset>:
 8006b88:	4402      	add	r2, r0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d100      	bne.n	8006b92 <memset+0xa>
 8006b90:	4770      	bx	lr
 8006b92:	f803 1b01 	strb.w	r1, [r3], #1
 8006b96:	e7f9      	b.n	8006b8c <memset+0x4>

08006b98 <__cvt>:
 8006b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b9c:	ec55 4b10 	vmov	r4, r5, d0
 8006ba0:	2d00      	cmp	r5, #0
 8006ba2:	460e      	mov	r6, r1
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	462b      	mov	r3, r5
 8006ba8:	bfbb      	ittet	lt
 8006baa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006bae:	461d      	movlt	r5, r3
 8006bb0:	2300      	movge	r3, #0
 8006bb2:	232d      	movlt	r3, #45	; 0x2d
 8006bb4:	700b      	strb	r3, [r1, #0]
 8006bb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bb8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006bbc:	4691      	mov	r9, r2
 8006bbe:	f023 0820 	bic.w	r8, r3, #32
 8006bc2:	bfbc      	itt	lt
 8006bc4:	4622      	movlt	r2, r4
 8006bc6:	4614      	movlt	r4, r2
 8006bc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bcc:	d005      	beq.n	8006bda <__cvt+0x42>
 8006bce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006bd2:	d100      	bne.n	8006bd6 <__cvt+0x3e>
 8006bd4:	3601      	adds	r6, #1
 8006bd6:	2102      	movs	r1, #2
 8006bd8:	e000      	b.n	8006bdc <__cvt+0x44>
 8006bda:	2103      	movs	r1, #3
 8006bdc:	ab03      	add	r3, sp, #12
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	ab02      	add	r3, sp, #8
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	ec45 4b10 	vmov	d0, r4, r5
 8006be8:	4653      	mov	r3, sl
 8006bea:	4632      	mov	r2, r6
 8006bec:	f000 fce4 	bl	80075b8 <_dtoa_r>
 8006bf0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006bf4:	4607      	mov	r7, r0
 8006bf6:	d102      	bne.n	8006bfe <__cvt+0x66>
 8006bf8:	f019 0f01 	tst.w	r9, #1
 8006bfc:	d022      	beq.n	8006c44 <__cvt+0xac>
 8006bfe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c02:	eb07 0906 	add.w	r9, r7, r6
 8006c06:	d110      	bne.n	8006c2a <__cvt+0x92>
 8006c08:	783b      	ldrb	r3, [r7, #0]
 8006c0a:	2b30      	cmp	r3, #48	; 0x30
 8006c0c:	d10a      	bne.n	8006c24 <__cvt+0x8c>
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2300      	movs	r3, #0
 8006c12:	4620      	mov	r0, r4
 8006c14:	4629      	mov	r1, r5
 8006c16:	f7fa fb6f 	bl	80012f8 <__aeabi_dcmpeq>
 8006c1a:	b918      	cbnz	r0, 8006c24 <__cvt+0x8c>
 8006c1c:	f1c6 0601 	rsb	r6, r6, #1
 8006c20:	f8ca 6000 	str.w	r6, [sl]
 8006c24:	f8da 3000 	ldr.w	r3, [sl]
 8006c28:	4499      	add	r9, r3
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4620      	mov	r0, r4
 8006c30:	4629      	mov	r1, r5
 8006c32:	f7fa fb61 	bl	80012f8 <__aeabi_dcmpeq>
 8006c36:	b108      	cbz	r0, 8006c3c <__cvt+0xa4>
 8006c38:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c3c:	2230      	movs	r2, #48	; 0x30
 8006c3e:	9b03      	ldr	r3, [sp, #12]
 8006c40:	454b      	cmp	r3, r9
 8006c42:	d307      	bcc.n	8006c54 <__cvt+0xbc>
 8006c44:	9b03      	ldr	r3, [sp, #12]
 8006c46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c48:	1bdb      	subs	r3, r3, r7
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	6013      	str	r3, [r2, #0]
 8006c4e:	b004      	add	sp, #16
 8006c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c54:	1c59      	adds	r1, r3, #1
 8006c56:	9103      	str	r1, [sp, #12]
 8006c58:	701a      	strb	r2, [r3, #0]
 8006c5a:	e7f0      	b.n	8006c3e <__cvt+0xa6>

08006c5c <__exponent>:
 8006c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2900      	cmp	r1, #0
 8006c62:	bfb8      	it	lt
 8006c64:	4249      	neglt	r1, r1
 8006c66:	f803 2b02 	strb.w	r2, [r3], #2
 8006c6a:	bfb4      	ite	lt
 8006c6c:	222d      	movlt	r2, #45	; 0x2d
 8006c6e:	222b      	movge	r2, #43	; 0x2b
 8006c70:	2909      	cmp	r1, #9
 8006c72:	7042      	strb	r2, [r0, #1]
 8006c74:	dd2a      	ble.n	8006ccc <__exponent+0x70>
 8006c76:	f10d 0407 	add.w	r4, sp, #7
 8006c7a:	46a4      	mov	ip, r4
 8006c7c:	270a      	movs	r7, #10
 8006c7e:	46a6      	mov	lr, r4
 8006c80:	460a      	mov	r2, r1
 8006c82:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c86:	fb07 1516 	mls	r5, r7, r6, r1
 8006c8a:	3530      	adds	r5, #48	; 0x30
 8006c8c:	2a63      	cmp	r2, #99	; 0x63
 8006c8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006c96:	4631      	mov	r1, r6
 8006c98:	dcf1      	bgt.n	8006c7e <__exponent+0x22>
 8006c9a:	3130      	adds	r1, #48	; 0x30
 8006c9c:	f1ae 0502 	sub.w	r5, lr, #2
 8006ca0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ca4:	1c44      	adds	r4, r0, #1
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4561      	cmp	r1, ip
 8006caa:	d30a      	bcc.n	8006cc2 <__exponent+0x66>
 8006cac:	f10d 0209 	add.w	r2, sp, #9
 8006cb0:	eba2 020e 	sub.w	r2, r2, lr
 8006cb4:	4565      	cmp	r5, ip
 8006cb6:	bf88      	it	hi
 8006cb8:	2200      	movhi	r2, #0
 8006cba:	4413      	add	r3, r2
 8006cbc:	1a18      	subs	r0, r3, r0
 8006cbe:	b003      	add	sp, #12
 8006cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cc6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006cca:	e7ed      	b.n	8006ca8 <__exponent+0x4c>
 8006ccc:	2330      	movs	r3, #48	; 0x30
 8006cce:	3130      	adds	r1, #48	; 0x30
 8006cd0:	7083      	strb	r3, [r0, #2]
 8006cd2:	70c1      	strb	r1, [r0, #3]
 8006cd4:	1d03      	adds	r3, r0, #4
 8006cd6:	e7f1      	b.n	8006cbc <__exponent+0x60>

08006cd8 <_printf_float>:
 8006cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cdc:	ed2d 8b02 	vpush	{d8}
 8006ce0:	b08d      	sub	sp, #52	; 0x34
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ce8:	4616      	mov	r6, r2
 8006cea:	461f      	mov	r7, r3
 8006cec:	4605      	mov	r5, r0
 8006cee:	f001 fb47 	bl	8008380 <_localeconv_r>
 8006cf2:	f8d0 a000 	ldr.w	sl, [r0]
 8006cf6:	4650      	mov	r0, sl
 8006cf8:	f7f9 fe82 	bl	8000a00 <strlen>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	930a      	str	r3, [sp, #40]	; 0x28
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	9305      	str	r3, [sp, #20]
 8006d04:	f8d8 3000 	ldr.w	r3, [r8]
 8006d08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d0c:	3307      	adds	r3, #7
 8006d0e:	f023 0307 	bic.w	r3, r3, #7
 8006d12:	f103 0208 	add.w	r2, r3, #8
 8006d16:	f8c8 2000 	str.w	r2, [r8]
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d2a:	9307      	str	r3, [sp, #28]
 8006d2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d30:	ee08 0a10 	vmov	s16, r0
 8006d34:	4b9f      	ldr	r3, [pc, #636]	; (8006fb4 <_printf_float+0x2dc>)
 8006d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d3e:	f7fa fb0d 	bl	800135c <__aeabi_dcmpun>
 8006d42:	bb88      	cbnz	r0, 8006da8 <_printf_float+0xd0>
 8006d44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d48:	4b9a      	ldr	r3, [pc, #616]	; (8006fb4 <_printf_float+0x2dc>)
 8006d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4e:	f7fa fae7 	bl	8001320 <__aeabi_dcmple>
 8006d52:	bb48      	cbnz	r0, 8006da8 <_printf_float+0xd0>
 8006d54:	2200      	movs	r2, #0
 8006d56:	2300      	movs	r3, #0
 8006d58:	4640      	mov	r0, r8
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	f7fa fad6 	bl	800130c <__aeabi_dcmplt>
 8006d60:	b110      	cbz	r0, 8006d68 <_printf_float+0x90>
 8006d62:	232d      	movs	r3, #45	; 0x2d
 8006d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d68:	4b93      	ldr	r3, [pc, #588]	; (8006fb8 <_printf_float+0x2e0>)
 8006d6a:	4894      	ldr	r0, [pc, #592]	; (8006fbc <_printf_float+0x2e4>)
 8006d6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d70:	bf94      	ite	ls
 8006d72:	4698      	movls	r8, r3
 8006d74:	4680      	movhi	r8, r0
 8006d76:	2303      	movs	r3, #3
 8006d78:	6123      	str	r3, [r4, #16]
 8006d7a:	9b05      	ldr	r3, [sp, #20]
 8006d7c:	f023 0204 	bic.w	r2, r3, #4
 8006d80:	6022      	str	r2, [r4, #0]
 8006d82:	f04f 0900 	mov.w	r9, #0
 8006d86:	9700      	str	r7, [sp, #0]
 8006d88:	4633      	mov	r3, r6
 8006d8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	4628      	mov	r0, r5
 8006d90:	f000 f9d8 	bl	8007144 <_printf_common>
 8006d94:	3001      	adds	r0, #1
 8006d96:	f040 8090 	bne.w	8006eba <_printf_float+0x1e2>
 8006d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9e:	b00d      	add	sp, #52	; 0x34
 8006da0:	ecbd 8b02 	vpop	{d8}
 8006da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da8:	4642      	mov	r2, r8
 8006daa:	464b      	mov	r3, r9
 8006dac:	4640      	mov	r0, r8
 8006dae:	4649      	mov	r1, r9
 8006db0:	f7fa fad4 	bl	800135c <__aeabi_dcmpun>
 8006db4:	b140      	cbz	r0, 8006dc8 <_printf_float+0xf0>
 8006db6:	464b      	mov	r3, r9
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	bfbc      	itt	lt
 8006dbc:	232d      	movlt	r3, #45	; 0x2d
 8006dbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006dc2:	487f      	ldr	r0, [pc, #508]	; (8006fc0 <_printf_float+0x2e8>)
 8006dc4:	4b7f      	ldr	r3, [pc, #508]	; (8006fc4 <_printf_float+0x2ec>)
 8006dc6:	e7d1      	b.n	8006d6c <_printf_float+0x94>
 8006dc8:	6863      	ldr	r3, [r4, #4]
 8006dca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006dce:	9206      	str	r2, [sp, #24]
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	d13f      	bne.n	8006e54 <_printf_float+0x17c>
 8006dd4:	2306      	movs	r3, #6
 8006dd6:	6063      	str	r3, [r4, #4]
 8006dd8:	9b05      	ldr	r3, [sp, #20]
 8006dda:	6861      	ldr	r1, [r4, #4]
 8006ddc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006de0:	2300      	movs	r3, #0
 8006de2:	9303      	str	r3, [sp, #12]
 8006de4:	ab0a      	add	r3, sp, #40	; 0x28
 8006de6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006dea:	ab09      	add	r3, sp, #36	; 0x24
 8006dec:	ec49 8b10 	vmov	d0, r8, r9
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	6022      	str	r2, [r4, #0]
 8006df4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f7ff fecd 	bl	8006b98 <__cvt>
 8006dfe:	9b06      	ldr	r3, [sp, #24]
 8006e00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e02:	2b47      	cmp	r3, #71	; 0x47
 8006e04:	4680      	mov	r8, r0
 8006e06:	d108      	bne.n	8006e1a <_printf_float+0x142>
 8006e08:	1cc8      	adds	r0, r1, #3
 8006e0a:	db02      	blt.n	8006e12 <_printf_float+0x13a>
 8006e0c:	6863      	ldr	r3, [r4, #4]
 8006e0e:	4299      	cmp	r1, r3
 8006e10:	dd41      	ble.n	8006e96 <_printf_float+0x1be>
 8006e12:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e16:	fa5f fb8b 	uxtb.w	fp, fp
 8006e1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e1e:	d820      	bhi.n	8006e62 <_printf_float+0x18a>
 8006e20:	3901      	subs	r1, #1
 8006e22:	465a      	mov	r2, fp
 8006e24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e28:	9109      	str	r1, [sp, #36]	; 0x24
 8006e2a:	f7ff ff17 	bl	8006c5c <__exponent>
 8006e2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e30:	1813      	adds	r3, r2, r0
 8006e32:	2a01      	cmp	r2, #1
 8006e34:	4681      	mov	r9, r0
 8006e36:	6123      	str	r3, [r4, #16]
 8006e38:	dc02      	bgt.n	8006e40 <_printf_float+0x168>
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	07d2      	lsls	r2, r2, #31
 8006e3e:	d501      	bpl.n	8006e44 <_printf_float+0x16c>
 8006e40:	3301      	adds	r3, #1
 8006e42:	6123      	str	r3, [r4, #16]
 8006e44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d09c      	beq.n	8006d86 <_printf_float+0xae>
 8006e4c:	232d      	movs	r3, #45	; 0x2d
 8006e4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e52:	e798      	b.n	8006d86 <_printf_float+0xae>
 8006e54:	9a06      	ldr	r2, [sp, #24]
 8006e56:	2a47      	cmp	r2, #71	; 0x47
 8006e58:	d1be      	bne.n	8006dd8 <_printf_float+0x100>
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1bc      	bne.n	8006dd8 <_printf_float+0x100>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e7b9      	b.n	8006dd6 <_printf_float+0xfe>
 8006e62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e66:	d118      	bne.n	8006e9a <_printf_float+0x1c2>
 8006e68:	2900      	cmp	r1, #0
 8006e6a:	6863      	ldr	r3, [r4, #4]
 8006e6c:	dd0b      	ble.n	8006e86 <_printf_float+0x1ae>
 8006e6e:	6121      	str	r1, [r4, #16]
 8006e70:	b913      	cbnz	r3, 8006e78 <_printf_float+0x1a0>
 8006e72:	6822      	ldr	r2, [r4, #0]
 8006e74:	07d0      	lsls	r0, r2, #31
 8006e76:	d502      	bpl.n	8006e7e <_printf_float+0x1a6>
 8006e78:	3301      	adds	r3, #1
 8006e7a:	440b      	add	r3, r1
 8006e7c:	6123      	str	r3, [r4, #16]
 8006e7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e80:	f04f 0900 	mov.w	r9, #0
 8006e84:	e7de      	b.n	8006e44 <_printf_float+0x16c>
 8006e86:	b913      	cbnz	r3, 8006e8e <_printf_float+0x1b6>
 8006e88:	6822      	ldr	r2, [r4, #0]
 8006e8a:	07d2      	lsls	r2, r2, #31
 8006e8c:	d501      	bpl.n	8006e92 <_printf_float+0x1ba>
 8006e8e:	3302      	adds	r3, #2
 8006e90:	e7f4      	b.n	8006e7c <_printf_float+0x1a4>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e7f2      	b.n	8006e7c <_printf_float+0x1a4>
 8006e96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e9c:	4299      	cmp	r1, r3
 8006e9e:	db05      	blt.n	8006eac <_printf_float+0x1d4>
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	6121      	str	r1, [r4, #16]
 8006ea4:	07d8      	lsls	r0, r3, #31
 8006ea6:	d5ea      	bpl.n	8006e7e <_printf_float+0x1a6>
 8006ea8:	1c4b      	adds	r3, r1, #1
 8006eaa:	e7e7      	b.n	8006e7c <_printf_float+0x1a4>
 8006eac:	2900      	cmp	r1, #0
 8006eae:	bfd4      	ite	le
 8006eb0:	f1c1 0202 	rsble	r2, r1, #2
 8006eb4:	2201      	movgt	r2, #1
 8006eb6:	4413      	add	r3, r2
 8006eb8:	e7e0      	b.n	8006e7c <_printf_float+0x1a4>
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	055a      	lsls	r2, r3, #21
 8006ebe:	d407      	bmi.n	8006ed0 <_printf_float+0x1f8>
 8006ec0:	6923      	ldr	r3, [r4, #16]
 8006ec2:	4642      	mov	r2, r8
 8006ec4:	4631      	mov	r1, r6
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	47b8      	blx	r7
 8006eca:	3001      	adds	r0, #1
 8006ecc:	d12c      	bne.n	8006f28 <_printf_float+0x250>
 8006ece:	e764      	b.n	8006d9a <_printf_float+0xc2>
 8006ed0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ed4:	f240 80e0 	bls.w	8007098 <_printf_float+0x3c0>
 8006ed8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006edc:	2200      	movs	r2, #0
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f7fa fa0a 	bl	80012f8 <__aeabi_dcmpeq>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d034      	beq.n	8006f52 <_printf_float+0x27a>
 8006ee8:	4a37      	ldr	r2, [pc, #220]	; (8006fc8 <_printf_float+0x2f0>)
 8006eea:	2301      	movs	r3, #1
 8006eec:	4631      	mov	r1, r6
 8006eee:	4628      	mov	r0, r5
 8006ef0:	47b8      	blx	r7
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	f43f af51 	beq.w	8006d9a <_printf_float+0xc2>
 8006ef8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006efc:	429a      	cmp	r2, r3
 8006efe:	db02      	blt.n	8006f06 <_printf_float+0x22e>
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	07d8      	lsls	r0, r3, #31
 8006f04:	d510      	bpl.n	8006f28 <_printf_float+0x250>
 8006f06:	ee18 3a10 	vmov	r3, s16
 8006f0a:	4652      	mov	r2, sl
 8006f0c:	4631      	mov	r1, r6
 8006f0e:	4628      	mov	r0, r5
 8006f10:	47b8      	blx	r7
 8006f12:	3001      	adds	r0, #1
 8006f14:	f43f af41 	beq.w	8006d9a <_printf_float+0xc2>
 8006f18:	f04f 0800 	mov.w	r8, #0
 8006f1c:	f104 091a 	add.w	r9, r4, #26
 8006f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f22:	3b01      	subs	r3, #1
 8006f24:	4543      	cmp	r3, r8
 8006f26:	dc09      	bgt.n	8006f3c <_printf_float+0x264>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	079b      	lsls	r3, r3, #30
 8006f2c:	f100 8105 	bmi.w	800713a <_printf_float+0x462>
 8006f30:	68e0      	ldr	r0, [r4, #12]
 8006f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f34:	4298      	cmp	r0, r3
 8006f36:	bfb8      	it	lt
 8006f38:	4618      	movlt	r0, r3
 8006f3a:	e730      	b.n	8006d9e <_printf_float+0xc6>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	464a      	mov	r2, r9
 8006f40:	4631      	mov	r1, r6
 8006f42:	4628      	mov	r0, r5
 8006f44:	47b8      	blx	r7
 8006f46:	3001      	adds	r0, #1
 8006f48:	f43f af27 	beq.w	8006d9a <_printf_float+0xc2>
 8006f4c:	f108 0801 	add.w	r8, r8, #1
 8006f50:	e7e6      	b.n	8006f20 <_printf_float+0x248>
 8006f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	dc39      	bgt.n	8006fcc <_printf_float+0x2f4>
 8006f58:	4a1b      	ldr	r2, [pc, #108]	; (8006fc8 <_printf_float+0x2f0>)
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4628      	mov	r0, r5
 8006f60:	47b8      	blx	r7
 8006f62:	3001      	adds	r0, #1
 8006f64:	f43f af19 	beq.w	8006d9a <_printf_float+0xc2>
 8006f68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	d102      	bne.n	8006f76 <_printf_float+0x29e>
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	07d9      	lsls	r1, r3, #31
 8006f74:	d5d8      	bpl.n	8006f28 <_printf_float+0x250>
 8006f76:	ee18 3a10 	vmov	r3, s16
 8006f7a:	4652      	mov	r2, sl
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	4628      	mov	r0, r5
 8006f80:	47b8      	blx	r7
 8006f82:	3001      	adds	r0, #1
 8006f84:	f43f af09 	beq.w	8006d9a <_printf_float+0xc2>
 8006f88:	f04f 0900 	mov.w	r9, #0
 8006f8c:	f104 0a1a 	add.w	sl, r4, #26
 8006f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f92:	425b      	negs	r3, r3
 8006f94:	454b      	cmp	r3, r9
 8006f96:	dc01      	bgt.n	8006f9c <_printf_float+0x2c4>
 8006f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f9a:	e792      	b.n	8006ec2 <_printf_float+0x1ea>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	4652      	mov	r2, sl
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	47b8      	blx	r7
 8006fa6:	3001      	adds	r0, #1
 8006fa8:	f43f aef7 	beq.w	8006d9a <_printf_float+0xc2>
 8006fac:	f109 0901 	add.w	r9, r9, #1
 8006fb0:	e7ee      	b.n	8006f90 <_printf_float+0x2b8>
 8006fb2:	bf00      	nop
 8006fb4:	7fefffff 	.word	0x7fefffff
 8006fb8:	080096e0 	.word	0x080096e0
 8006fbc:	080096e4 	.word	0x080096e4
 8006fc0:	080096ec 	.word	0x080096ec
 8006fc4:	080096e8 	.word	0x080096e8
 8006fc8:	080096f0 	.word	0x080096f0
 8006fcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	bfa8      	it	ge
 8006fd4:	461a      	movge	r2, r3
 8006fd6:	2a00      	cmp	r2, #0
 8006fd8:	4691      	mov	r9, r2
 8006fda:	dc37      	bgt.n	800704c <_printf_float+0x374>
 8006fdc:	f04f 0b00 	mov.w	fp, #0
 8006fe0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fe4:	f104 021a 	add.w	r2, r4, #26
 8006fe8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fea:	9305      	str	r3, [sp, #20]
 8006fec:	eba3 0309 	sub.w	r3, r3, r9
 8006ff0:	455b      	cmp	r3, fp
 8006ff2:	dc33      	bgt.n	800705c <_printf_float+0x384>
 8006ff4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	db3b      	blt.n	8007074 <_printf_float+0x39c>
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	07da      	lsls	r2, r3, #31
 8007000:	d438      	bmi.n	8007074 <_printf_float+0x39c>
 8007002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007004:	9a05      	ldr	r2, [sp, #20]
 8007006:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007008:	1a9a      	subs	r2, r3, r2
 800700a:	eba3 0901 	sub.w	r9, r3, r1
 800700e:	4591      	cmp	r9, r2
 8007010:	bfa8      	it	ge
 8007012:	4691      	movge	r9, r2
 8007014:	f1b9 0f00 	cmp.w	r9, #0
 8007018:	dc35      	bgt.n	8007086 <_printf_float+0x3ae>
 800701a:	f04f 0800 	mov.w	r8, #0
 800701e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007022:	f104 0a1a 	add.w	sl, r4, #26
 8007026:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800702a:	1a9b      	subs	r3, r3, r2
 800702c:	eba3 0309 	sub.w	r3, r3, r9
 8007030:	4543      	cmp	r3, r8
 8007032:	f77f af79 	ble.w	8006f28 <_printf_float+0x250>
 8007036:	2301      	movs	r3, #1
 8007038:	4652      	mov	r2, sl
 800703a:	4631      	mov	r1, r6
 800703c:	4628      	mov	r0, r5
 800703e:	47b8      	blx	r7
 8007040:	3001      	adds	r0, #1
 8007042:	f43f aeaa 	beq.w	8006d9a <_printf_float+0xc2>
 8007046:	f108 0801 	add.w	r8, r8, #1
 800704a:	e7ec      	b.n	8007026 <_printf_float+0x34e>
 800704c:	4613      	mov	r3, r2
 800704e:	4631      	mov	r1, r6
 8007050:	4642      	mov	r2, r8
 8007052:	4628      	mov	r0, r5
 8007054:	47b8      	blx	r7
 8007056:	3001      	adds	r0, #1
 8007058:	d1c0      	bne.n	8006fdc <_printf_float+0x304>
 800705a:	e69e      	b.n	8006d9a <_printf_float+0xc2>
 800705c:	2301      	movs	r3, #1
 800705e:	4631      	mov	r1, r6
 8007060:	4628      	mov	r0, r5
 8007062:	9205      	str	r2, [sp, #20]
 8007064:	47b8      	blx	r7
 8007066:	3001      	adds	r0, #1
 8007068:	f43f ae97 	beq.w	8006d9a <_printf_float+0xc2>
 800706c:	9a05      	ldr	r2, [sp, #20]
 800706e:	f10b 0b01 	add.w	fp, fp, #1
 8007072:	e7b9      	b.n	8006fe8 <_printf_float+0x310>
 8007074:	ee18 3a10 	vmov	r3, s16
 8007078:	4652      	mov	r2, sl
 800707a:	4631      	mov	r1, r6
 800707c:	4628      	mov	r0, r5
 800707e:	47b8      	blx	r7
 8007080:	3001      	adds	r0, #1
 8007082:	d1be      	bne.n	8007002 <_printf_float+0x32a>
 8007084:	e689      	b.n	8006d9a <_printf_float+0xc2>
 8007086:	9a05      	ldr	r2, [sp, #20]
 8007088:	464b      	mov	r3, r9
 800708a:	4442      	add	r2, r8
 800708c:	4631      	mov	r1, r6
 800708e:	4628      	mov	r0, r5
 8007090:	47b8      	blx	r7
 8007092:	3001      	adds	r0, #1
 8007094:	d1c1      	bne.n	800701a <_printf_float+0x342>
 8007096:	e680      	b.n	8006d9a <_printf_float+0xc2>
 8007098:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800709a:	2a01      	cmp	r2, #1
 800709c:	dc01      	bgt.n	80070a2 <_printf_float+0x3ca>
 800709e:	07db      	lsls	r3, r3, #31
 80070a0:	d538      	bpl.n	8007114 <_printf_float+0x43c>
 80070a2:	2301      	movs	r3, #1
 80070a4:	4642      	mov	r2, r8
 80070a6:	4631      	mov	r1, r6
 80070a8:	4628      	mov	r0, r5
 80070aa:	47b8      	blx	r7
 80070ac:	3001      	adds	r0, #1
 80070ae:	f43f ae74 	beq.w	8006d9a <_printf_float+0xc2>
 80070b2:	ee18 3a10 	vmov	r3, s16
 80070b6:	4652      	mov	r2, sl
 80070b8:	4631      	mov	r1, r6
 80070ba:	4628      	mov	r0, r5
 80070bc:	47b8      	blx	r7
 80070be:	3001      	adds	r0, #1
 80070c0:	f43f ae6b 	beq.w	8006d9a <_printf_float+0xc2>
 80070c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070c8:	2200      	movs	r2, #0
 80070ca:	2300      	movs	r3, #0
 80070cc:	f7fa f914 	bl	80012f8 <__aeabi_dcmpeq>
 80070d0:	b9d8      	cbnz	r0, 800710a <_printf_float+0x432>
 80070d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d4:	f108 0201 	add.w	r2, r8, #1
 80070d8:	3b01      	subs	r3, #1
 80070da:	4631      	mov	r1, r6
 80070dc:	4628      	mov	r0, r5
 80070de:	47b8      	blx	r7
 80070e0:	3001      	adds	r0, #1
 80070e2:	d10e      	bne.n	8007102 <_printf_float+0x42a>
 80070e4:	e659      	b.n	8006d9a <_printf_float+0xc2>
 80070e6:	2301      	movs	r3, #1
 80070e8:	4652      	mov	r2, sl
 80070ea:	4631      	mov	r1, r6
 80070ec:	4628      	mov	r0, r5
 80070ee:	47b8      	blx	r7
 80070f0:	3001      	adds	r0, #1
 80070f2:	f43f ae52 	beq.w	8006d9a <_printf_float+0xc2>
 80070f6:	f108 0801 	add.w	r8, r8, #1
 80070fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070fc:	3b01      	subs	r3, #1
 80070fe:	4543      	cmp	r3, r8
 8007100:	dcf1      	bgt.n	80070e6 <_printf_float+0x40e>
 8007102:	464b      	mov	r3, r9
 8007104:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007108:	e6dc      	b.n	8006ec4 <_printf_float+0x1ec>
 800710a:	f04f 0800 	mov.w	r8, #0
 800710e:	f104 0a1a 	add.w	sl, r4, #26
 8007112:	e7f2      	b.n	80070fa <_printf_float+0x422>
 8007114:	2301      	movs	r3, #1
 8007116:	4642      	mov	r2, r8
 8007118:	e7df      	b.n	80070da <_printf_float+0x402>
 800711a:	2301      	movs	r3, #1
 800711c:	464a      	mov	r2, r9
 800711e:	4631      	mov	r1, r6
 8007120:	4628      	mov	r0, r5
 8007122:	47b8      	blx	r7
 8007124:	3001      	adds	r0, #1
 8007126:	f43f ae38 	beq.w	8006d9a <_printf_float+0xc2>
 800712a:	f108 0801 	add.w	r8, r8, #1
 800712e:	68e3      	ldr	r3, [r4, #12]
 8007130:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007132:	1a5b      	subs	r3, r3, r1
 8007134:	4543      	cmp	r3, r8
 8007136:	dcf0      	bgt.n	800711a <_printf_float+0x442>
 8007138:	e6fa      	b.n	8006f30 <_printf_float+0x258>
 800713a:	f04f 0800 	mov.w	r8, #0
 800713e:	f104 0919 	add.w	r9, r4, #25
 8007142:	e7f4      	b.n	800712e <_printf_float+0x456>

08007144 <_printf_common>:
 8007144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007148:	4616      	mov	r6, r2
 800714a:	4699      	mov	r9, r3
 800714c:	688a      	ldr	r2, [r1, #8]
 800714e:	690b      	ldr	r3, [r1, #16]
 8007150:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007154:	4293      	cmp	r3, r2
 8007156:	bfb8      	it	lt
 8007158:	4613      	movlt	r3, r2
 800715a:	6033      	str	r3, [r6, #0]
 800715c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007160:	4607      	mov	r7, r0
 8007162:	460c      	mov	r4, r1
 8007164:	b10a      	cbz	r2, 800716a <_printf_common+0x26>
 8007166:	3301      	adds	r3, #1
 8007168:	6033      	str	r3, [r6, #0]
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	0699      	lsls	r1, r3, #26
 800716e:	bf42      	ittt	mi
 8007170:	6833      	ldrmi	r3, [r6, #0]
 8007172:	3302      	addmi	r3, #2
 8007174:	6033      	strmi	r3, [r6, #0]
 8007176:	6825      	ldr	r5, [r4, #0]
 8007178:	f015 0506 	ands.w	r5, r5, #6
 800717c:	d106      	bne.n	800718c <_printf_common+0x48>
 800717e:	f104 0a19 	add.w	sl, r4, #25
 8007182:	68e3      	ldr	r3, [r4, #12]
 8007184:	6832      	ldr	r2, [r6, #0]
 8007186:	1a9b      	subs	r3, r3, r2
 8007188:	42ab      	cmp	r3, r5
 800718a:	dc26      	bgt.n	80071da <_printf_common+0x96>
 800718c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007190:	1e13      	subs	r3, r2, #0
 8007192:	6822      	ldr	r2, [r4, #0]
 8007194:	bf18      	it	ne
 8007196:	2301      	movne	r3, #1
 8007198:	0692      	lsls	r2, r2, #26
 800719a:	d42b      	bmi.n	80071f4 <_printf_common+0xb0>
 800719c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071a0:	4649      	mov	r1, r9
 80071a2:	4638      	mov	r0, r7
 80071a4:	47c0      	blx	r8
 80071a6:	3001      	adds	r0, #1
 80071a8:	d01e      	beq.n	80071e8 <_printf_common+0xa4>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	68e5      	ldr	r5, [r4, #12]
 80071ae:	6832      	ldr	r2, [r6, #0]
 80071b0:	f003 0306 	and.w	r3, r3, #6
 80071b4:	2b04      	cmp	r3, #4
 80071b6:	bf08      	it	eq
 80071b8:	1aad      	subeq	r5, r5, r2
 80071ba:	68a3      	ldr	r3, [r4, #8]
 80071bc:	6922      	ldr	r2, [r4, #16]
 80071be:	bf0c      	ite	eq
 80071c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071c4:	2500      	movne	r5, #0
 80071c6:	4293      	cmp	r3, r2
 80071c8:	bfc4      	itt	gt
 80071ca:	1a9b      	subgt	r3, r3, r2
 80071cc:	18ed      	addgt	r5, r5, r3
 80071ce:	2600      	movs	r6, #0
 80071d0:	341a      	adds	r4, #26
 80071d2:	42b5      	cmp	r5, r6
 80071d4:	d11a      	bne.n	800720c <_printf_common+0xc8>
 80071d6:	2000      	movs	r0, #0
 80071d8:	e008      	b.n	80071ec <_printf_common+0xa8>
 80071da:	2301      	movs	r3, #1
 80071dc:	4652      	mov	r2, sl
 80071de:	4649      	mov	r1, r9
 80071e0:	4638      	mov	r0, r7
 80071e2:	47c0      	blx	r8
 80071e4:	3001      	adds	r0, #1
 80071e6:	d103      	bne.n	80071f0 <_printf_common+0xac>
 80071e8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f0:	3501      	adds	r5, #1
 80071f2:	e7c6      	b.n	8007182 <_printf_common+0x3e>
 80071f4:	18e1      	adds	r1, r4, r3
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	2030      	movs	r0, #48	; 0x30
 80071fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071fe:	4422      	add	r2, r4
 8007200:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007204:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007208:	3302      	adds	r3, #2
 800720a:	e7c7      	b.n	800719c <_printf_common+0x58>
 800720c:	2301      	movs	r3, #1
 800720e:	4622      	mov	r2, r4
 8007210:	4649      	mov	r1, r9
 8007212:	4638      	mov	r0, r7
 8007214:	47c0      	blx	r8
 8007216:	3001      	adds	r0, #1
 8007218:	d0e6      	beq.n	80071e8 <_printf_common+0xa4>
 800721a:	3601      	adds	r6, #1
 800721c:	e7d9      	b.n	80071d2 <_printf_common+0x8e>
	...

08007220 <_printf_i>:
 8007220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007224:	7e0f      	ldrb	r7, [r1, #24]
 8007226:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007228:	2f78      	cmp	r7, #120	; 0x78
 800722a:	4691      	mov	r9, r2
 800722c:	4680      	mov	r8, r0
 800722e:	460c      	mov	r4, r1
 8007230:	469a      	mov	sl, r3
 8007232:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007236:	d807      	bhi.n	8007248 <_printf_i+0x28>
 8007238:	2f62      	cmp	r7, #98	; 0x62
 800723a:	d80a      	bhi.n	8007252 <_printf_i+0x32>
 800723c:	2f00      	cmp	r7, #0
 800723e:	f000 80d8 	beq.w	80073f2 <_printf_i+0x1d2>
 8007242:	2f58      	cmp	r7, #88	; 0x58
 8007244:	f000 80a3 	beq.w	800738e <_printf_i+0x16e>
 8007248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800724c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007250:	e03a      	b.n	80072c8 <_printf_i+0xa8>
 8007252:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007256:	2b15      	cmp	r3, #21
 8007258:	d8f6      	bhi.n	8007248 <_printf_i+0x28>
 800725a:	a101      	add	r1, pc, #4	; (adr r1, 8007260 <_printf_i+0x40>)
 800725c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007260:	080072b9 	.word	0x080072b9
 8007264:	080072cd 	.word	0x080072cd
 8007268:	08007249 	.word	0x08007249
 800726c:	08007249 	.word	0x08007249
 8007270:	08007249 	.word	0x08007249
 8007274:	08007249 	.word	0x08007249
 8007278:	080072cd 	.word	0x080072cd
 800727c:	08007249 	.word	0x08007249
 8007280:	08007249 	.word	0x08007249
 8007284:	08007249 	.word	0x08007249
 8007288:	08007249 	.word	0x08007249
 800728c:	080073d9 	.word	0x080073d9
 8007290:	080072fd 	.word	0x080072fd
 8007294:	080073bb 	.word	0x080073bb
 8007298:	08007249 	.word	0x08007249
 800729c:	08007249 	.word	0x08007249
 80072a0:	080073fb 	.word	0x080073fb
 80072a4:	08007249 	.word	0x08007249
 80072a8:	080072fd 	.word	0x080072fd
 80072ac:	08007249 	.word	0x08007249
 80072b0:	08007249 	.word	0x08007249
 80072b4:	080073c3 	.word	0x080073c3
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	1d1a      	adds	r2, r3, #4
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	602a      	str	r2, [r5, #0]
 80072c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072c8:	2301      	movs	r3, #1
 80072ca:	e0a3      	b.n	8007414 <_printf_i+0x1f4>
 80072cc:	6820      	ldr	r0, [r4, #0]
 80072ce:	6829      	ldr	r1, [r5, #0]
 80072d0:	0606      	lsls	r6, r0, #24
 80072d2:	f101 0304 	add.w	r3, r1, #4
 80072d6:	d50a      	bpl.n	80072ee <_printf_i+0xce>
 80072d8:	680e      	ldr	r6, [r1, #0]
 80072da:	602b      	str	r3, [r5, #0]
 80072dc:	2e00      	cmp	r6, #0
 80072de:	da03      	bge.n	80072e8 <_printf_i+0xc8>
 80072e0:	232d      	movs	r3, #45	; 0x2d
 80072e2:	4276      	negs	r6, r6
 80072e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072e8:	485e      	ldr	r0, [pc, #376]	; (8007464 <_printf_i+0x244>)
 80072ea:	230a      	movs	r3, #10
 80072ec:	e019      	b.n	8007322 <_printf_i+0x102>
 80072ee:	680e      	ldr	r6, [r1, #0]
 80072f0:	602b      	str	r3, [r5, #0]
 80072f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072f6:	bf18      	it	ne
 80072f8:	b236      	sxthne	r6, r6
 80072fa:	e7ef      	b.n	80072dc <_printf_i+0xbc>
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	6820      	ldr	r0, [r4, #0]
 8007300:	1d19      	adds	r1, r3, #4
 8007302:	6029      	str	r1, [r5, #0]
 8007304:	0601      	lsls	r1, r0, #24
 8007306:	d501      	bpl.n	800730c <_printf_i+0xec>
 8007308:	681e      	ldr	r6, [r3, #0]
 800730a:	e002      	b.n	8007312 <_printf_i+0xf2>
 800730c:	0646      	lsls	r6, r0, #25
 800730e:	d5fb      	bpl.n	8007308 <_printf_i+0xe8>
 8007310:	881e      	ldrh	r6, [r3, #0]
 8007312:	4854      	ldr	r0, [pc, #336]	; (8007464 <_printf_i+0x244>)
 8007314:	2f6f      	cmp	r7, #111	; 0x6f
 8007316:	bf0c      	ite	eq
 8007318:	2308      	moveq	r3, #8
 800731a:	230a      	movne	r3, #10
 800731c:	2100      	movs	r1, #0
 800731e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007322:	6865      	ldr	r5, [r4, #4]
 8007324:	60a5      	str	r5, [r4, #8]
 8007326:	2d00      	cmp	r5, #0
 8007328:	bfa2      	ittt	ge
 800732a:	6821      	ldrge	r1, [r4, #0]
 800732c:	f021 0104 	bicge.w	r1, r1, #4
 8007330:	6021      	strge	r1, [r4, #0]
 8007332:	b90e      	cbnz	r6, 8007338 <_printf_i+0x118>
 8007334:	2d00      	cmp	r5, #0
 8007336:	d04d      	beq.n	80073d4 <_printf_i+0x1b4>
 8007338:	4615      	mov	r5, r2
 800733a:	fbb6 f1f3 	udiv	r1, r6, r3
 800733e:	fb03 6711 	mls	r7, r3, r1, r6
 8007342:	5dc7      	ldrb	r7, [r0, r7]
 8007344:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007348:	4637      	mov	r7, r6
 800734a:	42bb      	cmp	r3, r7
 800734c:	460e      	mov	r6, r1
 800734e:	d9f4      	bls.n	800733a <_printf_i+0x11a>
 8007350:	2b08      	cmp	r3, #8
 8007352:	d10b      	bne.n	800736c <_printf_i+0x14c>
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	07de      	lsls	r6, r3, #31
 8007358:	d508      	bpl.n	800736c <_printf_i+0x14c>
 800735a:	6923      	ldr	r3, [r4, #16]
 800735c:	6861      	ldr	r1, [r4, #4]
 800735e:	4299      	cmp	r1, r3
 8007360:	bfde      	ittt	le
 8007362:	2330      	movle	r3, #48	; 0x30
 8007364:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007368:	f105 35ff 	addle.w	r5, r5, #4294967295
 800736c:	1b52      	subs	r2, r2, r5
 800736e:	6122      	str	r2, [r4, #16]
 8007370:	f8cd a000 	str.w	sl, [sp]
 8007374:	464b      	mov	r3, r9
 8007376:	aa03      	add	r2, sp, #12
 8007378:	4621      	mov	r1, r4
 800737a:	4640      	mov	r0, r8
 800737c:	f7ff fee2 	bl	8007144 <_printf_common>
 8007380:	3001      	adds	r0, #1
 8007382:	d14c      	bne.n	800741e <_printf_i+0x1fe>
 8007384:	f04f 30ff 	mov.w	r0, #4294967295
 8007388:	b004      	add	sp, #16
 800738a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800738e:	4835      	ldr	r0, [pc, #212]	; (8007464 <_printf_i+0x244>)
 8007390:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007394:	6829      	ldr	r1, [r5, #0]
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	f851 6b04 	ldr.w	r6, [r1], #4
 800739c:	6029      	str	r1, [r5, #0]
 800739e:	061d      	lsls	r5, r3, #24
 80073a0:	d514      	bpl.n	80073cc <_printf_i+0x1ac>
 80073a2:	07df      	lsls	r7, r3, #31
 80073a4:	bf44      	itt	mi
 80073a6:	f043 0320 	orrmi.w	r3, r3, #32
 80073aa:	6023      	strmi	r3, [r4, #0]
 80073ac:	b91e      	cbnz	r6, 80073b6 <_printf_i+0x196>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	f023 0320 	bic.w	r3, r3, #32
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	2310      	movs	r3, #16
 80073b8:	e7b0      	b.n	800731c <_printf_i+0xfc>
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	f043 0320 	orr.w	r3, r3, #32
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	2378      	movs	r3, #120	; 0x78
 80073c4:	4828      	ldr	r0, [pc, #160]	; (8007468 <_printf_i+0x248>)
 80073c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073ca:	e7e3      	b.n	8007394 <_printf_i+0x174>
 80073cc:	0659      	lsls	r1, r3, #25
 80073ce:	bf48      	it	mi
 80073d0:	b2b6      	uxthmi	r6, r6
 80073d2:	e7e6      	b.n	80073a2 <_printf_i+0x182>
 80073d4:	4615      	mov	r5, r2
 80073d6:	e7bb      	b.n	8007350 <_printf_i+0x130>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	6826      	ldr	r6, [r4, #0]
 80073dc:	6961      	ldr	r1, [r4, #20]
 80073de:	1d18      	adds	r0, r3, #4
 80073e0:	6028      	str	r0, [r5, #0]
 80073e2:	0635      	lsls	r5, r6, #24
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	d501      	bpl.n	80073ec <_printf_i+0x1cc>
 80073e8:	6019      	str	r1, [r3, #0]
 80073ea:	e002      	b.n	80073f2 <_printf_i+0x1d2>
 80073ec:	0670      	lsls	r0, r6, #25
 80073ee:	d5fb      	bpl.n	80073e8 <_printf_i+0x1c8>
 80073f0:	8019      	strh	r1, [r3, #0]
 80073f2:	2300      	movs	r3, #0
 80073f4:	6123      	str	r3, [r4, #16]
 80073f6:	4615      	mov	r5, r2
 80073f8:	e7ba      	b.n	8007370 <_printf_i+0x150>
 80073fa:	682b      	ldr	r3, [r5, #0]
 80073fc:	1d1a      	adds	r2, r3, #4
 80073fe:	602a      	str	r2, [r5, #0]
 8007400:	681d      	ldr	r5, [r3, #0]
 8007402:	6862      	ldr	r2, [r4, #4]
 8007404:	2100      	movs	r1, #0
 8007406:	4628      	mov	r0, r5
 8007408:	f7f9 fb02 	bl	8000a10 <memchr>
 800740c:	b108      	cbz	r0, 8007412 <_printf_i+0x1f2>
 800740e:	1b40      	subs	r0, r0, r5
 8007410:	6060      	str	r0, [r4, #4]
 8007412:	6863      	ldr	r3, [r4, #4]
 8007414:	6123      	str	r3, [r4, #16]
 8007416:	2300      	movs	r3, #0
 8007418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800741c:	e7a8      	b.n	8007370 <_printf_i+0x150>
 800741e:	6923      	ldr	r3, [r4, #16]
 8007420:	462a      	mov	r2, r5
 8007422:	4649      	mov	r1, r9
 8007424:	4640      	mov	r0, r8
 8007426:	47d0      	blx	sl
 8007428:	3001      	adds	r0, #1
 800742a:	d0ab      	beq.n	8007384 <_printf_i+0x164>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	079b      	lsls	r3, r3, #30
 8007430:	d413      	bmi.n	800745a <_printf_i+0x23a>
 8007432:	68e0      	ldr	r0, [r4, #12]
 8007434:	9b03      	ldr	r3, [sp, #12]
 8007436:	4298      	cmp	r0, r3
 8007438:	bfb8      	it	lt
 800743a:	4618      	movlt	r0, r3
 800743c:	e7a4      	b.n	8007388 <_printf_i+0x168>
 800743e:	2301      	movs	r3, #1
 8007440:	4632      	mov	r2, r6
 8007442:	4649      	mov	r1, r9
 8007444:	4640      	mov	r0, r8
 8007446:	47d0      	blx	sl
 8007448:	3001      	adds	r0, #1
 800744a:	d09b      	beq.n	8007384 <_printf_i+0x164>
 800744c:	3501      	adds	r5, #1
 800744e:	68e3      	ldr	r3, [r4, #12]
 8007450:	9903      	ldr	r1, [sp, #12]
 8007452:	1a5b      	subs	r3, r3, r1
 8007454:	42ab      	cmp	r3, r5
 8007456:	dcf2      	bgt.n	800743e <_printf_i+0x21e>
 8007458:	e7eb      	b.n	8007432 <_printf_i+0x212>
 800745a:	2500      	movs	r5, #0
 800745c:	f104 0619 	add.w	r6, r4, #25
 8007460:	e7f5      	b.n	800744e <_printf_i+0x22e>
 8007462:	bf00      	nop
 8007464:	080096f2 	.word	0x080096f2
 8007468:	08009703 	.word	0x08009703

0800746c <iprintf>:
 800746c:	b40f      	push	{r0, r1, r2, r3}
 800746e:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <iprintf+0x2c>)
 8007470:	b513      	push	{r0, r1, r4, lr}
 8007472:	681c      	ldr	r4, [r3, #0]
 8007474:	b124      	cbz	r4, 8007480 <iprintf+0x14>
 8007476:	69a3      	ldr	r3, [r4, #24]
 8007478:	b913      	cbnz	r3, 8007480 <iprintf+0x14>
 800747a:	4620      	mov	r0, r4
 800747c:	f000 fee2 	bl	8008244 <__sinit>
 8007480:	ab05      	add	r3, sp, #20
 8007482:	9a04      	ldr	r2, [sp, #16]
 8007484:	68a1      	ldr	r1, [r4, #8]
 8007486:	9301      	str	r3, [sp, #4]
 8007488:	4620      	mov	r0, r4
 800748a:	f001 fc2d 	bl	8008ce8 <_vfiprintf_r>
 800748e:	b002      	add	sp, #8
 8007490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007494:	b004      	add	sp, #16
 8007496:	4770      	bx	lr
 8007498:	20000044 	.word	0x20000044

0800749c <quorem>:
 800749c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a0:	6903      	ldr	r3, [r0, #16]
 80074a2:	690c      	ldr	r4, [r1, #16]
 80074a4:	42a3      	cmp	r3, r4
 80074a6:	4607      	mov	r7, r0
 80074a8:	f2c0 8081 	blt.w	80075ae <quorem+0x112>
 80074ac:	3c01      	subs	r4, #1
 80074ae:	f101 0814 	add.w	r8, r1, #20
 80074b2:	f100 0514 	add.w	r5, r0, #20
 80074b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80074c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074c4:	3301      	adds	r3, #1
 80074c6:	429a      	cmp	r2, r3
 80074c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80074cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80074d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80074d4:	d331      	bcc.n	800753a <quorem+0x9e>
 80074d6:	f04f 0e00 	mov.w	lr, #0
 80074da:	4640      	mov	r0, r8
 80074dc:	46ac      	mov	ip, r5
 80074de:	46f2      	mov	sl, lr
 80074e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80074e4:	b293      	uxth	r3, r2
 80074e6:	fb06 e303 	mla	r3, r6, r3, lr
 80074ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	ebaa 0303 	sub.w	r3, sl, r3
 80074f4:	f8dc a000 	ldr.w	sl, [ip]
 80074f8:	0c12      	lsrs	r2, r2, #16
 80074fa:	fa13 f38a 	uxtah	r3, r3, sl
 80074fe:	fb06 e202 	mla	r2, r6, r2, lr
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	9b00      	ldr	r3, [sp, #0]
 8007506:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800750a:	b292      	uxth	r2, r2
 800750c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007510:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007514:	f8bd 3000 	ldrh.w	r3, [sp]
 8007518:	4581      	cmp	r9, r0
 800751a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800751e:	f84c 3b04 	str.w	r3, [ip], #4
 8007522:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007526:	d2db      	bcs.n	80074e0 <quorem+0x44>
 8007528:	f855 300b 	ldr.w	r3, [r5, fp]
 800752c:	b92b      	cbnz	r3, 800753a <quorem+0x9e>
 800752e:	9b01      	ldr	r3, [sp, #4]
 8007530:	3b04      	subs	r3, #4
 8007532:	429d      	cmp	r5, r3
 8007534:	461a      	mov	r2, r3
 8007536:	d32e      	bcc.n	8007596 <quorem+0xfa>
 8007538:	613c      	str	r4, [r7, #16]
 800753a:	4638      	mov	r0, r7
 800753c:	f001 f9b2 	bl	80088a4 <__mcmp>
 8007540:	2800      	cmp	r0, #0
 8007542:	db24      	blt.n	800758e <quorem+0xf2>
 8007544:	3601      	adds	r6, #1
 8007546:	4628      	mov	r0, r5
 8007548:	f04f 0c00 	mov.w	ip, #0
 800754c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007550:	f8d0 e000 	ldr.w	lr, [r0]
 8007554:	b293      	uxth	r3, r2
 8007556:	ebac 0303 	sub.w	r3, ip, r3
 800755a:	0c12      	lsrs	r2, r2, #16
 800755c:	fa13 f38e 	uxtah	r3, r3, lr
 8007560:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007564:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007568:	b29b      	uxth	r3, r3
 800756a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800756e:	45c1      	cmp	r9, r8
 8007570:	f840 3b04 	str.w	r3, [r0], #4
 8007574:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007578:	d2e8      	bcs.n	800754c <quorem+0xb0>
 800757a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800757e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007582:	b922      	cbnz	r2, 800758e <quorem+0xf2>
 8007584:	3b04      	subs	r3, #4
 8007586:	429d      	cmp	r5, r3
 8007588:	461a      	mov	r2, r3
 800758a:	d30a      	bcc.n	80075a2 <quorem+0x106>
 800758c:	613c      	str	r4, [r7, #16]
 800758e:	4630      	mov	r0, r6
 8007590:	b003      	add	sp, #12
 8007592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007596:	6812      	ldr	r2, [r2, #0]
 8007598:	3b04      	subs	r3, #4
 800759a:	2a00      	cmp	r2, #0
 800759c:	d1cc      	bne.n	8007538 <quorem+0x9c>
 800759e:	3c01      	subs	r4, #1
 80075a0:	e7c7      	b.n	8007532 <quorem+0x96>
 80075a2:	6812      	ldr	r2, [r2, #0]
 80075a4:	3b04      	subs	r3, #4
 80075a6:	2a00      	cmp	r2, #0
 80075a8:	d1f0      	bne.n	800758c <quorem+0xf0>
 80075aa:	3c01      	subs	r4, #1
 80075ac:	e7eb      	b.n	8007586 <quorem+0xea>
 80075ae:	2000      	movs	r0, #0
 80075b0:	e7ee      	b.n	8007590 <quorem+0xf4>
 80075b2:	0000      	movs	r0, r0
 80075b4:	0000      	movs	r0, r0
	...

080075b8 <_dtoa_r>:
 80075b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075bc:	ed2d 8b04 	vpush	{d8-d9}
 80075c0:	ec57 6b10 	vmov	r6, r7, d0
 80075c4:	b093      	sub	sp, #76	; 0x4c
 80075c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80075cc:	9106      	str	r1, [sp, #24]
 80075ce:	ee10 aa10 	vmov	sl, s0
 80075d2:	4604      	mov	r4, r0
 80075d4:	9209      	str	r2, [sp, #36]	; 0x24
 80075d6:	930c      	str	r3, [sp, #48]	; 0x30
 80075d8:	46bb      	mov	fp, r7
 80075da:	b975      	cbnz	r5, 80075fa <_dtoa_r+0x42>
 80075dc:	2010      	movs	r0, #16
 80075de:	f000 fed7 	bl	8008390 <malloc>
 80075e2:	4602      	mov	r2, r0
 80075e4:	6260      	str	r0, [r4, #36]	; 0x24
 80075e6:	b920      	cbnz	r0, 80075f2 <_dtoa_r+0x3a>
 80075e8:	4ba7      	ldr	r3, [pc, #668]	; (8007888 <_dtoa_r+0x2d0>)
 80075ea:	21ea      	movs	r1, #234	; 0xea
 80075ec:	48a7      	ldr	r0, [pc, #668]	; (800788c <_dtoa_r+0x2d4>)
 80075ee:	f001 fdd1 	bl	8009194 <__assert_func>
 80075f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80075f6:	6005      	str	r5, [r0, #0]
 80075f8:	60c5      	str	r5, [r0, #12]
 80075fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075fc:	6819      	ldr	r1, [r3, #0]
 80075fe:	b151      	cbz	r1, 8007616 <_dtoa_r+0x5e>
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	604a      	str	r2, [r1, #4]
 8007604:	2301      	movs	r3, #1
 8007606:	4093      	lsls	r3, r2
 8007608:	608b      	str	r3, [r1, #8]
 800760a:	4620      	mov	r0, r4
 800760c:	f000 ff08 	bl	8008420 <_Bfree>
 8007610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	1e3b      	subs	r3, r7, #0
 8007618:	bfaa      	itet	ge
 800761a:	2300      	movge	r3, #0
 800761c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007620:	f8c8 3000 	strge.w	r3, [r8]
 8007624:	4b9a      	ldr	r3, [pc, #616]	; (8007890 <_dtoa_r+0x2d8>)
 8007626:	bfbc      	itt	lt
 8007628:	2201      	movlt	r2, #1
 800762a:	f8c8 2000 	strlt.w	r2, [r8]
 800762e:	ea33 030b 	bics.w	r3, r3, fp
 8007632:	d11b      	bne.n	800766c <_dtoa_r+0xb4>
 8007634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007636:	f242 730f 	movw	r3, #9999	; 0x270f
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007640:	4333      	orrs	r3, r6
 8007642:	f000 8592 	beq.w	800816a <_dtoa_r+0xbb2>
 8007646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007648:	b963      	cbnz	r3, 8007664 <_dtoa_r+0xac>
 800764a:	4b92      	ldr	r3, [pc, #584]	; (8007894 <_dtoa_r+0x2dc>)
 800764c:	e022      	b.n	8007694 <_dtoa_r+0xdc>
 800764e:	4b92      	ldr	r3, [pc, #584]	; (8007898 <_dtoa_r+0x2e0>)
 8007650:	9301      	str	r3, [sp, #4]
 8007652:	3308      	adds	r3, #8
 8007654:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	9801      	ldr	r0, [sp, #4]
 800765a:	b013      	add	sp, #76	; 0x4c
 800765c:	ecbd 8b04 	vpop	{d8-d9}
 8007660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007664:	4b8b      	ldr	r3, [pc, #556]	; (8007894 <_dtoa_r+0x2dc>)
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	3303      	adds	r3, #3
 800766a:	e7f3      	b.n	8007654 <_dtoa_r+0x9c>
 800766c:	2200      	movs	r2, #0
 800766e:	2300      	movs	r3, #0
 8007670:	4650      	mov	r0, sl
 8007672:	4659      	mov	r1, fp
 8007674:	f7f9 fe40 	bl	80012f8 <__aeabi_dcmpeq>
 8007678:	ec4b ab19 	vmov	d9, sl, fp
 800767c:	4680      	mov	r8, r0
 800767e:	b158      	cbz	r0, 8007698 <_dtoa_r+0xe0>
 8007680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007682:	2301      	movs	r3, #1
 8007684:	6013      	str	r3, [r2, #0]
 8007686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 856b 	beq.w	8008164 <_dtoa_r+0xbac>
 800768e:	4883      	ldr	r0, [pc, #524]	; (800789c <_dtoa_r+0x2e4>)
 8007690:	6018      	str	r0, [r3, #0]
 8007692:	1e43      	subs	r3, r0, #1
 8007694:	9301      	str	r3, [sp, #4]
 8007696:	e7df      	b.n	8007658 <_dtoa_r+0xa0>
 8007698:	ec4b ab10 	vmov	d0, sl, fp
 800769c:	aa10      	add	r2, sp, #64	; 0x40
 800769e:	a911      	add	r1, sp, #68	; 0x44
 80076a0:	4620      	mov	r0, r4
 80076a2:	f001 f9a5 	bl	80089f0 <__d2b>
 80076a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80076aa:	ee08 0a10 	vmov	s16, r0
 80076ae:	2d00      	cmp	r5, #0
 80076b0:	f000 8084 	beq.w	80077bc <_dtoa_r+0x204>
 80076b4:	ee19 3a90 	vmov	r3, s19
 80076b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80076c0:	4656      	mov	r6, sl
 80076c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80076c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80076ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80076ce:	4b74      	ldr	r3, [pc, #464]	; (80078a0 <_dtoa_r+0x2e8>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	4630      	mov	r0, r6
 80076d4:	4639      	mov	r1, r7
 80076d6:	f7f9 f9ef 	bl	8000ab8 <__aeabi_dsub>
 80076da:	a365      	add	r3, pc, #404	; (adr r3, 8007870 <_dtoa_r+0x2b8>)
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	f7f9 fba2 	bl	8000e28 <__aeabi_dmul>
 80076e4:	a364      	add	r3, pc, #400	; (adr r3, 8007878 <_dtoa_r+0x2c0>)
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	f7f9 f9e7 	bl	8000abc <__adddf3>
 80076ee:	4606      	mov	r6, r0
 80076f0:	4628      	mov	r0, r5
 80076f2:	460f      	mov	r7, r1
 80076f4:	f7f9 fb2e 	bl	8000d54 <__aeabi_i2d>
 80076f8:	a361      	add	r3, pc, #388	; (adr r3, 8007880 <_dtoa_r+0x2c8>)
 80076fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fe:	f7f9 fb93 	bl	8000e28 <__aeabi_dmul>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4630      	mov	r0, r6
 8007708:	4639      	mov	r1, r7
 800770a:	f7f9 f9d7 	bl	8000abc <__adddf3>
 800770e:	4606      	mov	r6, r0
 8007710:	460f      	mov	r7, r1
 8007712:	f7f9 fe39 	bl	8001388 <__aeabi_d2iz>
 8007716:	2200      	movs	r2, #0
 8007718:	9000      	str	r0, [sp, #0]
 800771a:	2300      	movs	r3, #0
 800771c:	4630      	mov	r0, r6
 800771e:	4639      	mov	r1, r7
 8007720:	f7f9 fdf4 	bl	800130c <__aeabi_dcmplt>
 8007724:	b150      	cbz	r0, 800773c <_dtoa_r+0x184>
 8007726:	9800      	ldr	r0, [sp, #0]
 8007728:	f7f9 fb14 	bl	8000d54 <__aeabi_i2d>
 800772c:	4632      	mov	r2, r6
 800772e:	463b      	mov	r3, r7
 8007730:	f7f9 fde2 	bl	80012f8 <__aeabi_dcmpeq>
 8007734:	b910      	cbnz	r0, 800773c <_dtoa_r+0x184>
 8007736:	9b00      	ldr	r3, [sp, #0]
 8007738:	3b01      	subs	r3, #1
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	9b00      	ldr	r3, [sp, #0]
 800773e:	2b16      	cmp	r3, #22
 8007740:	d85a      	bhi.n	80077f8 <_dtoa_r+0x240>
 8007742:	9a00      	ldr	r2, [sp, #0]
 8007744:	4b57      	ldr	r3, [pc, #348]	; (80078a4 <_dtoa_r+0x2ec>)
 8007746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	ec51 0b19 	vmov	r0, r1, d9
 8007752:	f7f9 fddb 	bl	800130c <__aeabi_dcmplt>
 8007756:	2800      	cmp	r0, #0
 8007758:	d050      	beq.n	80077fc <_dtoa_r+0x244>
 800775a:	9b00      	ldr	r3, [sp, #0]
 800775c:	3b01      	subs	r3, #1
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	2300      	movs	r3, #0
 8007762:	930b      	str	r3, [sp, #44]	; 0x2c
 8007764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007766:	1b5d      	subs	r5, r3, r5
 8007768:	1e6b      	subs	r3, r5, #1
 800776a:	9305      	str	r3, [sp, #20]
 800776c:	bf45      	ittet	mi
 800776e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007772:	9304      	strmi	r3, [sp, #16]
 8007774:	2300      	movpl	r3, #0
 8007776:	2300      	movmi	r3, #0
 8007778:	bf4c      	ite	mi
 800777a:	9305      	strmi	r3, [sp, #20]
 800777c:	9304      	strpl	r3, [sp, #16]
 800777e:	9b00      	ldr	r3, [sp, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	db3d      	blt.n	8007800 <_dtoa_r+0x248>
 8007784:	9b05      	ldr	r3, [sp, #20]
 8007786:	9a00      	ldr	r2, [sp, #0]
 8007788:	920a      	str	r2, [sp, #40]	; 0x28
 800778a:	4413      	add	r3, r2
 800778c:	9305      	str	r3, [sp, #20]
 800778e:	2300      	movs	r3, #0
 8007790:	9307      	str	r3, [sp, #28]
 8007792:	9b06      	ldr	r3, [sp, #24]
 8007794:	2b09      	cmp	r3, #9
 8007796:	f200 8089 	bhi.w	80078ac <_dtoa_r+0x2f4>
 800779a:	2b05      	cmp	r3, #5
 800779c:	bfc4      	itt	gt
 800779e:	3b04      	subgt	r3, #4
 80077a0:	9306      	strgt	r3, [sp, #24]
 80077a2:	9b06      	ldr	r3, [sp, #24]
 80077a4:	f1a3 0302 	sub.w	r3, r3, #2
 80077a8:	bfcc      	ite	gt
 80077aa:	2500      	movgt	r5, #0
 80077ac:	2501      	movle	r5, #1
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	f200 8087 	bhi.w	80078c2 <_dtoa_r+0x30a>
 80077b4:	e8df f003 	tbb	[pc, r3]
 80077b8:	59383a2d 	.word	0x59383a2d
 80077bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80077c0:	441d      	add	r5, r3
 80077c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	bfc1      	itttt	gt
 80077ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80077ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80077d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80077d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80077da:	bfda      	itte	le
 80077dc:	f1c3 0320 	rsble	r3, r3, #32
 80077e0:	fa06 f003 	lslle.w	r0, r6, r3
 80077e4:	4318      	orrgt	r0, r3
 80077e6:	f7f9 faa5 	bl	8000d34 <__aeabi_ui2d>
 80077ea:	2301      	movs	r3, #1
 80077ec:	4606      	mov	r6, r0
 80077ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80077f2:	3d01      	subs	r5, #1
 80077f4:	930e      	str	r3, [sp, #56]	; 0x38
 80077f6:	e76a      	b.n	80076ce <_dtoa_r+0x116>
 80077f8:	2301      	movs	r3, #1
 80077fa:	e7b2      	b.n	8007762 <_dtoa_r+0x1aa>
 80077fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80077fe:	e7b1      	b.n	8007764 <_dtoa_r+0x1ac>
 8007800:	9b04      	ldr	r3, [sp, #16]
 8007802:	9a00      	ldr	r2, [sp, #0]
 8007804:	1a9b      	subs	r3, r3, r2
 8007806:	9304      	str	r3, [sp, #16]
 8007808:	4253      	negs	r3, r2
 800780a:	9307      	str	r3, [sp, #28]
 800780c:	2300      	movs	r3, #0
 800780e:	930a      	str	r3, [sp, #40]	; 0x28
 8007810:	e7bf      	b.n	8007792 <_dtoa_r+0x1da>
 8007812:	2300      	movs	r3, #0
 8007814:	9308      	str	r3, [sp, #32]
 8007816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007818:	2b00      	cmp	r3, #0
 800781a:	dc55      	bgt.n	80078c8 <_dtoa_r+0x310>
 800781c:	2301      	movs	r3, #1
 800781e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007822:	461a      	mov	r2, r3
 8007824:	9209      	str	r2, [sp, #36]	; 0x24
 8007826:	e00c      	b.n	8007842 <_dtoa_r+0x28a>
 8007828:	2301      	movs	r3, #1
 800782a:	e7f3      	b.n	8007814 <_dtoa_r+0x25c>
 800782c:	2300      	movs	r3, #0
 800782e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007830:	9308      	str	r3, [sp, #32]
 8007832:	9b00      	ldr	r3, [sp, #0]
 8007834:	4413      	add	r3, r2
 8007836:	9302      	str	r3, [sp, #8]
 8007838:	3301      	adds	r3, #1
 800783a:	2b01      	cmp	r3, #1
 800783c:	9303      	str	r3, [sp, #12]
 800783e:	bfb8      	it	lt
 8007840:	2301      	movlt	r3, #1
 8007842:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007844:	2200      	movs	r2, #0
 8007846:	6042      	str	r2, [r0, #4]
 8007848:	2204      	movs	r2, #4
 800784a:	f102 0614 	add.w	r6, r2, #20
 800784e:	429e      	cmp	r6, r3
 8007850:	6841      	ldr	r1, [r0, #4]
 8007852:	d93d      	bls.n	80078d0 <_dtoa_r+0x318>
 8007854:	4620      	mov	r0, r4
 8007856:	f000 fda3 	bl	80083a0 <_Balloc>
 800785a:	9001      	str	r0, [sp, #4]
 800785c:	2800      	cmp	r0, #0
 800785e:	d13b      	bne.n	80078d8 <_dtoa_r+0x320>
 8007860:	4b11      	ldr	r3, [pc, #68]	; (80078a8 <_dtoa_r+0x2f0>)
 8007862:	4602      	mov	r2, r0
 8007864:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007868:	e6c0      	b.n	80075ec <_dtoa_r+0x34>
 800786a:	2301      	movs	r3, #1
 800786c:	e7df      	b.n	800782e <_dtoa_r+0x276>
 800786e:	bf00      	nop
 8007870:	636f4361 	.word	0x636f4361
 8007874:	3fd287a7 	.word	0x3fd287a7
 8007878:	8b60c8b3 	.word	0x8b60c8b3
 800787c:	3fc68a28 	.word	0x3fc68a28
 8007880:	509f79fb 	.word	0x509f79fb
 8007884:	3fd34413 	.word	0x3fd34413
 8007888:	08009721 	.word	0x08009721
 800788c:	08009738 	.word	0x08009738
 8007890:	7ff00000 	.word	0x7ff00000
 8007894:	0800971d 	.word	0x0800971d
 8007898:	08009714 	.word	0x08009714
 800789c:	080096f1 	.word	0x080096f1
 80078a0:	3ff80000 	.word	0x3ff80000
 80078a4:	08009888 	.word	0x08009888
 80078a8:	08009793 	.word	0x08009793
 80078ac:	2501      	movs	r5, #1
 80078ae:	2300      	movs	r3, #0
 80078b0:	9306      	str	r3, [sp, #24]
 80078b2:	9508      	str	r5, [sp, #32]
 80078b4:	f04f 33ff 	mov.w	r3, #4294967295
 80078b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80078bc:	2200      	movs	r2, #0
 80078be:	2312      	movs	r3, #18
 80078c0:	e7b0      	b.n	8007824 <_dtoa_r+0x26c>
 80078c2:	2301      	movs	r3, #1
 80078c4:	9308      	str	r3, [sp, #32]
 80078c6:	e7f5      	b.n	80078b4 <_dtoa_r+0x2fc>
 80078c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80078ce:	e7b8      	b.n	8007842 <_dtoa_r+0x28a>
 80078d0:	3101      	adds	r1, #1
 80078d2:	6041      	str	r1, [r0, #4]
 80078d4:	0052      	lsls	r2, r2, #1
 80078d6:	e7b8      	b.n	800784a <_dtoa_r+0x292>
 80078d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078da:	9a01      	ldr	r2, [sp, #4]
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	9b03      	ldr	r3, [sp, #12]
 80078e0:	2b0e      	cmp	r3, #14
 80078e2:	f200 809d 	bhi.w	8007a20 <_dtoa_r+0x468>
 80078e6:	2d00      	cmp	r5, #0
 80078e8:	f000 809a 	beq.w	8007a20 <_dtoa_r+0x468>
 80078ec:	9b00      	ldr	r3, [sp, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	dd32      	ble.n	8007958 <_dtoa_r+0x3a0>
 80078f2:	4ab7      	ldr	r2, [pc, #732]	; (8007bd0 <_dtoa_r+0x618>)
 80078f4:	f003 030f 	and.w	r3, r3, #15
 80078f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80078fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007900:	9b00      	ldr	r3, [sp, #0]
 8007902:	05d8      	lsls	r0, r3, #23
 8007904:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007908:	d516      	bpl.n	8007938 <_dtoa_r+0x380>
 800790a:	4bb2      	ldr	r3, [pc, #712]	; (8007bd4 <_dtoa_r+0x61c>)
 800790c:	ec51 0b19 	vmov	r0, r1, d9
 8007910:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007914:	f7f9 fbb2 	bl	800107c <__aeabi_ddiv>
 8007918:	f007 070f 	and.w	r7, r7, #15
 800791c:	4682      	mov	sl, r0
 800791e:	468b      	mov	fp, r1
 8007920:	2503      	movs	r5, #3
 8007922:	4eac      	ldr	r6, [pc, #688]	; (8007bd4 <_dtoa_r+0x61c>)
 8007924:	b957      	cbnz	r7, 800793c <_dtoa_r+0x384>
 8007926:	4642      	mov	r2, r8
 8007928:	464b      	mov	r3, r9
 800792a:	4650      	mov	r0, sl
 800792c:	4659      	mov	r1, fp
 800792e:	f7f9 fba5 	bl	800107c <__aeabi_ddiv>
 8007932:	4682      	mov	sl, r0
 8007934:	468b      	mov	fp, r1
 8007936:	e028      	b.n	800798a <_dtoa_r+0x3d2>
 8007938:	2502      	movs	r5, #2
 800793a:	e7f2      	b.n	8007922 <_dtoa_r+0x36a>
 800793c:	07f9      	lsls	r1, r7, #31
 800793e:	d508      	bpl.n	8007952 <_dtoa_r+0x39a>
 8007940:	4640      	mov	r0, r8
 8007942:	4649      	mov	r1, r9
 8007944:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007948:	f7f9 fa6e 	bl	8000e28 <__aeabi_dmul>
 800794c:	3501      	adds	r5, #1
 800794e:	4680      	mov	r8, r0
 8007950:	4689      	mov	r9, r1
 8007952:	107f      	asrs	r7, r7, #1
 8007954:	3608      	adds	r6, #8
 8007956:	e7e5      	b.n	8007924 <_dtoa_r+0x36c>
 8007958:	f000 809b 	beq.w	8007a92 <_dtoa_r+0x4da>
 800795c:	9b00      	ldr	r3, [sp, #0]
 800795e:	4f9d      	ldr	r7, [pc, #628]	; (8007bd4 <_dtoa_r+0x61c>)
 8007960:	425e      	negs	r6, r3
 8007962:	4b9b      	ldr	r3, [pc, #620]	; (8007bd0 <_dtoa_r+0x618>)
 8007964:	f006 020f 	and.w	r2, r6, #15
 8007968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	ec51 0b19 	vmov	r0, r1, d9
 8007974:	f7f9 fa58 	bl	8000e28 <__aeabi_dmul>
 8007978:	1136      	asrs	r6, r6, #4
 800797a:	4682      	mov	sl, r0
 800797c:	468b      	mov	fp, r1
 800797e:	2300      	movs	r3, #0
 8007980:	2502      	movs	r5, #2
 8007982:	2e00      	cmp	r6, #0
 8007984:	d17a      	bne.n	8007a7c <_dtoa_r+0x4c4>
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1d3      	bne.n	8007932 <_dtoa_r+0x37a>
 800798a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 8082 	beq.w	8007a96 <_dtoa_r+0x4de>
 8007992:	4b91      	ldr	r3, [pc, #580]	; (8007bd8 <_dtoa_r+0x620>)
 8007994:	2200      	movs	r2, #0
 8007996:	4650      	mov	r0, sl
 8007998:	4659      	mov	r1, fp
 800799a:	f7f9 fcb7 	bl	800130c <__aeabi_dcmplt>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d079      	beq.n	8007a96 <_dtoa_r+0x4de>
 80079a2:	9b03      	ldr	r3, [sp, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d076      	beq.n	8007a96 <_dtoa_r+0x4de>
 80079a8:	9b02      	ldr	r3, [sp, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	dd36      	ble.n	8007a1c <_dtoa_r+0x464>
 80079ae:	9b00      	ldr	r3, [sp, #0]
 80079b0:	4650      	mov	r0, sl
 80079b2:	4659      	mov	r1, fp
 80079b4:	1e5f      	subs	r7, r3, #1
 80079b6:	2200      	movs	r2, #0
 80079b8:	4b88      	ldr	r3, [pc, #544]	; (8007bdc <_dtoa_r+0x624>)
 80079ba:	f7f9 fa35 	bl	8000e28 <__aeabi_dmul>
 80079be:	9e02      	ldr	r6, [sp, #8]
 80079c0:	4682      	mov	sl, r0
 80079c2:	468b      	mov	fp, r1
 80079c4:	3501      	adds	r5, #1
 80079c6:	4628      	mov	r0, r5
 80079c8:	f7f9 f9c4 	bl	8000d54 <__aeabi_i2d>
 80079cc:	4652      	mov	r2, sl
 80079ce:	465b      	mov	r3, fp
 80079d0:	f7f9 fa2a 	bl	8000e28 <__aeabi_dmul>
 80079d4:	4b82      	ldr	r3, [pc, #520]	; (8007be0 <_dtoa_r+0x628>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	f7f9 f870 	bl	8000abc <__adddf3>
 80079dc:	46d0      	mov	r8, sl
 80079de:	46d9      	mov	r9, fp
 80079e0:	4682      	mov	sl, r0
 80079e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80079e6:	2e00      	cmp	r6, #0
 80079e8:	d158      	bne.n	8007a9c <_dtoa_r+0x4e4>
 80079ea:	4b7e      	ldr	r3, [pc, #504]	; (8007be4 <_dtoa_r+0x62c>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	4640      	mov	r0, r8
 80079f0:	4649      	mov	r1, r9
 80079f2:	f7f9 f861 	bl	8000ab8 <__aeabi_dsub>
 80079f6:	4652      	mov	r2, sl
 80079f8:	465b      	mov	r3, fp
 80079fa:	4680      	mov	r8, r0
 80079fc:	4689      	mov	r9, r1
 80079fe:	f7f9 fca3 	bl	8001348 <__aeabi_dcmpgt>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	f040 8295 	bne.w	8007f32 <_dtoa_r+0x97a>
 8007a08:	4652      	mov	r2, sl
 8007a0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007a0e:	4640      	mov	r0, r8
 8007a10:	4649      	mov	r1, r9
 8007a12:	f7f9 fc7b 	bl	800130c <__aeabi_dcmplt>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	f040 8289 	bne.w	8007f2e <_dtoa_r+0x976>
 8007a1c:	ec5b ab19 	vmov	sl, fp, d9
 8007a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f2c0 8148 	blt.w	8007cb8 <_dtoa_r+0x700>
 8007a28:	9a00      	ldr	r2, [sp, #0]
 8007a2a:	2a0e      	cmp	r2, #14
 8007a2c:	f300 8144 	bgt.w	8007cb8 <_dtoa_r+0x700>
 8007a30:	4b67      	ldr	r3, [pc, #412]	; (8007bd0 <_dtoa_r+0x618>)
 8007a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f280 80d5 	bge.w	8007bec <_dtoa_r+0x634>
 8007a42:	9b03      	ldr	r3, [sp, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f300 80d1 	bgt.w	8007bec <_dtoa_r+0x634>
 8007a4a:	f040 826f 	bne.w	8007f2c <_dtoa_r+0x974>
 8007a4e:	4b65      	ldr	r3, [pc, #404]	; (8007be4 <_dtoa_r+0x62c>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	4640      	mov	r0, r8
 8007a54:	4649      	mov	r1, r9
 8007a56:	f7f9 f9e7 	bl	8000e28 <__aeabi_dmul>
 8007a5a:	4652      	mov	r2, sl
 8007a5c:	465b      	mov	r3, fp
 8007a5e:	f7f9 fc69 	bl	8001334 <__aeabi_dcmpge>
 8007a62:	9e03      	ldr	r6, [sp, #12]
 8007a64:	4637      	mov	r7, r6
 8007a66:	2800      	cmp	r0, #0
 8007a68:	f040 8245 	bne.w	8007ef6 <_dtoa_r+0x93e>
 8007a6c:	9d01      	ldr	r5, [sp, #4]
 8007a6e:	2331      	movs	r3, #49	; 0x31
 8007a70:	f805 3b01 	strb.w	r3, [r5], #1
 8007a74:	9b00      	ldr	r3, [sp, #0]
 8007a76:	3301      	adds	r3, #1
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	e240      	b.n	8007efe <_dtoa_r+0x946>
 8007a7c:	07f2      	lsls	r2, r6, #31
 8007a7e:	d505      	bpl.n	8007a8c <_dtoa_r+0x4d4>
 8007a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a84:	f7f9 f9d0 	bl	8000e28 <__aeabi_dmul>
 8007a88:	3501      	adds	r5, #1
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	1076      	asrs	r6, r6, #1
 8007a8e:	3708      	adds	r7, #8
 8007a90:	e777      	b.n	8007982 <_dtoa_r+0x3ca>
 8007a92:	2502      	movs	r5, #2
 8007a94:	e779      	b.n	800798a <_dtoa_r+0x3d2>
 8007a96:	9f00      	ldr	r7, [sp, #0]
 8007a98:	9e03      	ldr	r6, [sp, #12]
 8007a9a:	e794      	b.n	80079c6 <_dtoa_r+0x40e>
 8007a9c:	9901      	ldr	r1, [sp, #4]
 8007a9e:	4b4c      	ldr	r3, [pc, #304]	; (8007bd0 <_dtoa_r+0x618>)
 8007aa0:	4431      	add	r1, r6
 8007aa2:	910d      	str	r1, [sp, #52]	; 0x34
 8007aa4:	9908      	ldr	r1, [sp, #32]
 8007aa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007aaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007aae:	2900      	cmp	r1, #0
 8007ab0:	d043      	beq.n	8007b3a <_dtoa_r+0x582>
 8007ab2:	494d      	ldr	r1, [pc, #308]	; (8007be8 <_dtoa_r+0x630>)
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	f7f9 fae1 	bl	800107c <__aeabi_ddiv>
 8007aba:	4652      	mov	r2, sl
 8007abc:	465b      	mov	r3, fp
 8007abe:	f7f8 fffb 	bl	8000ab8 <__aeabi_dsub>
 8007ac2:	9d01      	ldr	r5, [sp, #4]
 8007ac4:	4682      	mov	sl, r0
 8007ac6:	468b      	mov	fp, r1
 8007ac8:	4649      	mov	r1, r9
 8007aca:	4640      	mov	r0, r8
 8007acc:	f7f9 fc5c 	bl	8001388 <__aeabi_d2iz>
 8007ad0:	4606      	mov	r6, r0
 8007ad2:	f7f9 f93f 	bl	8000d54 <__aeabi_i2d>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4640      	mov	r0, r8
 8007adc:	4649      	mov	r1, r9
 8007ade:	f7f8 ffeb 	bl	8000ab8 <__aeabi_dsub>
 8007ae2:	3630      	adds	r6, #48	; 0x30
 8007ae4:	f805 6b01 	strb.w	r6, [r5], #1
 8007ae8:	4652      	mov	r2, sl
 8007aea:	465b      	mov	r3, fp
 8007aec:	4680      	mov	r8, r0
 8007aee:	4689      	mov	r9, r1
 8007af0:	f7f9 fc0c 	bl	800130c <__aeabi_dcmplt>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d163      	bne.n	8007bc0 <_dtoa_r+0x608>
 8007af8:	4642      	mov	r2, r8
 8007afa:	464b      	mov	r3, r9
 8007afc:	4936      	ldr	r1, [pc, #216]	; (8007bd8 <_dtoa_r+0x620>)
 8007afe:	2000      	movs	r0, #0
 8007b00:	f7f8 ffda 	bl	8000ab8 <__aeabi_dsub>
 8007b04:	4652      	mov	r2, sl
 8007b06:	465b      	mov	r3, fp
 8007b08:	f7f9 fc00 	bl	800130c <__aeabi_dcmplt>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	f040 80b5 	bne.w	8007c7c <_dtoa_r+0x6c4>
 8007b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b14:	429d      	cmp	r5, r3
 8007b16:	d081      	beq.n	8007a1c <_dtoa_r+0x464>
 8007b18:	4b30      	ldr	r3, [pc, #192]	; (8007bdc <_dtoa_r+0x624>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	4650      	mov	r0, sl
 8007b1e:	4659      	mov	r1, fp
 8007b20:	f7f9 f982 	bl	8000e28 <__aeabi_dmul>
 8007b24:	4b2d      	ldr	r3, [pc, #180]	; (8007bdc <_dtoa_r+0x624>)
 8007b26:	4682      	mov	sl, r0
 8007b28:	468b      	mov	fp, r1
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f7f9 f97a 	bl	8000e28 <__aeabi_dmul>
 8007b34:	4680      	mov	r8, r0
 8007b36:	4689      	mov	r9, r1
 8007b38:	e7c6      	b.n	8007ac8 <_dtoa_r+0x510>
 8007b3a:	4650      	mov	r0, sl
 8007b3c:	4659      	mov	r1, fp
 8007b3e:	f7f9 f973 	bl	8000e28 <__aeabi_dmul>
 8007b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b44:	9d01      	ldr	r5, [sp, #4]
 8007b46:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b48:	4682      	mov	sl, r0
 8007b4a:	468b      	mov	fp, r1
 8007b4c:	4649      	mov	r1, r9
 8007b4e:	4640      	mov	r0, r8
 8007b50:	f7f9 fc1a 	bl	8001388 <__aeabi_d2iz>
 8007b54:	4606      	mov	r6, r0
 8007b56:	f7f9 f8fd 	bl	8000d54 <__aeabi_i2d>
 8007b5a:	3630      	adds	r6, #48	; 0x30
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4640      	mov	r0, r8
 8007b62:	4649      	mov	r1, r9
 8007b64:	f7f8 ffa8 	bl	8000ab8 <__aeabi_dsub>
 8007b68:	f805 6b01 	strb.w	r6, [r5], #1
 8007b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b6e:	429d      	cmp	r5, r3
 8007b70:	4680      	mov	r8, r0
 8007b72:	4689      	mov	r9, r1
 8007b74:	f04f 0200 	mov.w	r2, #0
 8007b78:	d124      	bne.n	8007bc4 <_dtoa_r+0x60c>
 8007b7a:	4b1b      	ldr	r3, [pc, #108]	; (8007be8 <_dtoa_r+0x630>)
 8007b7c:	4650      	mov	r0, sl
 8007b7e:	4659      	mov	r1, fp
 8007b80:	f7f8 ff9c 	bl	8000abc <__adddf3>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4640      	mov	r0, r8
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	f7f9 fbdc 	bl	8001348 <__aeabi_dcmpgt>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d173      	bne.n	8007c7c <_dtoa_r+0x6c4>
 8007b94:	4652      	mov	r2, sl
 8007b96:	465b      	mov	r3, fp
 8007b98:	4913      	ldr	r1, [pc, #76]	; (8007be8 <_dtoa_r+0x630>)
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	f7f8 ff8c 	bl	8000ab8 <__aeabi_dsub>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	4640      	mov	r0, r8
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	f7f9 fbb0 	bl	800130c <__aeabi_dcmplt>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	f43f af35 	beq.w	8007a1c <_dtoa_r+0x464>
 8007bb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007bb4:	1e6b      	subs	r3, r5, #1
 8007bb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007bbc:	2b30      	cmp	r3, #48	; 0x30
 8007bbe:	d0f8      	beq.n	8007bb2 <_dtoa_r+0x5fa>
 8007bc0:	9700      	str	r7, [sp, #0]
 8007bc2:	e049      	b.n	8007c58 <_dtoa_r+0x6a0>
 8007bc4:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <_dtoa_r+0x624>)
 8007bc6:	f7f9 f92f 	bl	8000e28 <__aeabi_dmul>
 8007bca:	4680      	mov	r8, r0
 8007bcc:	4689      	mov	r9, r1
 8007bce:	e7bd      	b.n	8007b4c <_dtoa_r+0x594>
 8007bd0:	08009888 	.word	0x08009888
 8007bd4:	08009860 	.word	0x08009860
 8007bd8:	3ff00000 	.word	0x3ff00000
 8007bdc:	40240000 	.word	0x40240000
 8007be0:	401c0000 	.word	0x401c0000
 8007be4:	40140000 	.word	0x40140000
 8007be8:	3fe00000 	.word	0x3fe00000
 8007bec:	9d01      	ldr	r5, [sp, #4]
 8007bee:	4656      	mov	r6, sl
 8007bf0:	465f      	mov	r7, fp
 8007bf2:	4642      	mov	r2, r8
 8007bf4:	464b      	mov	r3, r9
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	f7f9 fa3f 	bl	800107c <__aeabi_ddiv>
 8007bfe:	f7f9 fbc3 	bl	8001388 <__aeabi_d2iz>
 8007c02:	4682      	mov	sl, r0
 8007c04:	f7f9 f8a6 	bl	8000d54 <__aeabi_i2d>
 8007c08:	4642      	mov	r2, r8
 8007c0a:	464b      	mov	r3, r9
 8007c0c:	f7f9 f90c 	bl	8000e28 <__aeabi_dmul>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4630      	mov	r0, r6
 8007c16:	4639      	mov	r1, r7
 8007c18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007c1c:	f7f8 ff4c 	bl	8000ab8 <__aeabi_dsub>
 8007c20:	f805 6b01 	strb.w	r6, [r5], #1
 8007c24:	9e01      	ldr	r6, [sp, #4]
 8007c26:	9f03      	ldr	r7, [sp, #12]
 8007c28:	1bae      	subs	r6, r5, r6
 8007c2a:	42b7      	cmp	r7, r6
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	d135      	bne.n	8007c9e <_dtoa_r+0x6e6>
 8007c32:	f7f8 ff43 	bl	8000abc <__adddf3>
 8007c36:	4642      	mov	r2, r8
 8007c38:	464b      	mov	r3, r9
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	460f      	mov	r7, r1
 8007c3e:	f7f9 fb83 	bl	8001348 <__aeabi_dcmpgt>
 8007c42:	b9d0      	cbnz	r0, 8007c7a <_dtoa_r+0x6c2>
 8007c44:	4642      	mov	r2, r8
 8007c46:	464b      	mov	r3, r9
 8007c48:	4630      	mov	r0, r6
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	f7f9 fb54 	bl	80012f8 <__aeabi_dcmpeq>
 8007c50:	b110      	cbz	r0, 8007c58 <_dtoa_r+0x6a0>
 8007c52:	f01a 0f01 	tst.w	sl, #1
 8007c56:	d110      	bne.n	8007c7a <_dtoa_r+0x6c2>
 8007c58:	4620      	mov	r0, r4
 8007c5a:	ee18 1a10 	vmov	r1, s16
 8007c5e:	f000 fbdf 	bl	8008420 <_Bfree>
 8007c62:	2300      	movs	r3, #0
 8007c64:	9800      	ldr	r0, [sp, #0]
 8007c66:	702b      	strb	r3, [r5, #0]
 8007c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	6018      	str	r0, [r3, #0]
 8007c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f43f acf1 	beq.w	8007658 <_dtoa_r+0xa0>
 8007c76:	601d      	str	r5, [r3, #0]
 8007c78:	e4ee      	b.n	8007658 <_dtoa_r+0xa0>
 8007c7a:	9f00      	ldr	r7, [sp, #0]
 8007c7c:	462b      	mov	r3, r5
 8007c7e:	461d      	mov	r5, r3
 8007c80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c84:	2a39      	cmp	r2, #57	; 0x39
 8007c86:	d106      	bne.n	8007c96 <_dtoa_r+0x6de>
 8007c88:	9a01      	ldr	r2, [sp, #4]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d1f7      	bne.n	8007c7e <_dtoa_r+0x6c6>
 8007c8e:	9901      	ldr	r1, [sp, #4]
 8007c90:	2230      	movs	r2, #48	; 0x30
 8007c92:	3701      	adds	r7, #1
 8007c94:	700a      	strb	r2, [r1, #0]
 8007c96:	781a      	ldrb	r2, [r3, #0]
 8007c98:	3201      	adds	r2, #1
 8007c9a:	701a      	strb	r2, [r3, #0]
 8007c9c:	e790      	b.n	8007bc0 <_dtoa_r+0x608>
 8007c9e:	4ba6      	ldr	r3, [pc, #664]	; (8007f38 <_dtoa_r+0x980>)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f7f9 f8c1 	bl	8000e28 <__aeabi_dmul>
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2300      	movs	r3, #0
 8007caa:	4606      	mov	r6, r0
 8007cac:	460f      	mov	r7, r1
 8007cae:	f7f9 fb23 	bl	80012f8 <__aeabi_dcmpeq>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d09d      	beq.n	8007bf2 <_dtoa_r+0x63a>
 8007cb6:	e7cf      	b.n	8007c58 <_dtoa_r+0x6a0>
 8007cb8:	9a08      	ldr	r2, [sp, #32]
 8007cba:	2a00      	cmp	r2, #0
 8007cbc:	f000 80d7 	beq.w	8007e6e <_dtoa_r+0x8b6>
 8007cc0:	9a06      	ldr	r2, [sp, #24]
 8007cc2:	2a01      	cmp	r2, #1
 8007cc4:	f300 80ba 	bgt.w	8007e3c <_dtoa_r+0x884>
 8007cc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cca:	2a00      	cmp	r2, #0
 8007ccc:	f000 80b2 	beq.w	8007e34 <_dtoa_r+0x87c>
 8007cd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007cd4:	9e07      	ldr	r6, [sp, #28]
 8007cd6:	9d04      	ldr	r5, [sp, #16]
 8007cd8:	9a04      	ldr	r2, [sp, #16]
 8007cda:	441a      	add	r2, r3
 8007cdc:	9204      	str	r2, [sp, #16]
 8007cde:	9a05      	ldr	r2, [sp, #20]
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	441a      	add	r2, r3
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	9205      	str	r2, [sp, #20]
 8007ce8:	f000 fc52 	bl	8008590 <__i2b>
 8007cec:	4607      	mov	r7, r0
 8007cee:	2d00      	cmp	r5, #0
 8007cf0:	dd0c      	ble.n	8007d0c <_dtoa_r+0x754>
 8007cf2:	9b05      	ldr	r3, [sp, #20]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	dd09      	ble.n	8007d0c <_dtoa_r+0x754>
 8007cf8:	42ab      	cmp	r3, r5
 8007cfa:	9a04      	ldr	r2, [sp, #16]
 8007cfc:	bfa8      	it	ge
 8007cfe:	462b      	movge	r3, r5
 8007d00:	1ad2      	subs	r2, r2, r3
 8007d02:	9204      	str	r2, [sp, #16]
 8007d04:	9a05      	ldr	r2, [sp, #20]
 8007d06:	1aed      	subs	r5, r5, r3
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	9305      	str	r3, [sp, #20]
 8007d0c:	9b07      	ldr	r3, [sp, #28]
 8007d0e:	b31b      	cbz	r3, 8007d58 <_dtoa_r+0x7a0>
 8007d10:	9b08      	ldr	r3, [sp, #32]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 80af 	beq.w	8007e76 <_dtoa_r+0x8be>
 8007d18:	2e00      	cmp	r6, #0
 8007d1a:	dd13      	ble.n	8007d44 <_dtoa_r+0x78c>
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	4632      	mov	r2, r6
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 fcf5 	bl	8008710 <__pow5mult>
 8007d26:	ee18 2a10 	vmov	r2, s16
 8007d2a:	4601      	mov	r1, r0
 8007d2c:	4607      	mov	r7, r0
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f000 fc44 	bl	80085bc <__multiply>
 8007d34:	ee18 1a10 	vmov	r1, s16
 8007d38:	4680      	mov	r8, r0
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f000 fb70 	bl	8008420 <_Bfree>
 8007d40:	ee08 8a10 	vmov	s16, r8
 8007d44:	9b07      	ldr	r3, [sp, #28]
 8007d46:	1b9a      	subs	r2, r3, r6
 8007d48:	d006      	beq.n	8007d58 <_dtoa_r+0x7a0>
 8007d4a:	ee18 1a10 	vmov	r1, s16
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f000 fcde 	bl	8008710 <__pow5mult>
 8007d54:	ee08 0a10 	vmov	s16, r0
 8007d58:	2101      	movs	r1, #1
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f000 fc18 	bl	8008590 <__i2b>
 8007d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	4606      	mov	r6, r0
 8007d66:	f340 8088 	ble.w	8007e7a <_dtoa_r+0x8c2>
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	4601      	mov	r1, r0
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f000 fcce 	bl	8008710 <__pow5mult>
 8007d74:	9b06      	ldr	r3, [sp, #24]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	4606      	mov	r6, r0
 8007d7a:	f340 8081 	ble.w	8007e80 <_dtoa_r+0x8c8>
 8007d7e:	f04f 0800 	mov.w	r8, #0
 8007d82:	6933      	ldr	r3, [r6, #16]
 8007d84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d88:	6918      	ldr	r0, [r3, #16]
 8007d8a:	f000 fbb1 	bl	80084f0 <__hi0bits>
 8007d8e:	f1c0 0020 	rsb	r0, r0, #32
 8007d92:	9b05      	ldr	r3, [sp, #20]
 8007d94:	4418      	add	r0, r3
 8007d96:	f010 001f 	ands.w	r0, r0, #31
 8007d9a:	f000 8092 	beq.w	8007ec2 <_dtoa_r+0x90a>
 8007d9e:	f1c0 0320 	rsb	r3, r0, #32
 8007da2:	2b04      	cmp	r3, #4
 8007da4:	f340 808a 	ble.w	8007ebc <_dtoa_r+0x904>
 8007da8:	f1c0 001c 	rsb	r0, r0, #28
 8007dac:	9b04      	ldr	r3, [sp, #16]
 8007dae:	4403      	add	r3, r0
 8007db0:	9304      	str	r3, [sp, #16]
 8007db2:	9b05      	ldr	r3, [sp, #20]
 8007db4:	4403      	add	r3, r0
 8007db6:	4405      	add	r5, r0
 8007db8:	9305      	str	r3, [sp, #20]
 8007dba:	9b04      	ldr	r3, [sp, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	dd07      	ble.n	8007dd0 <_dtoa_r+0x818>
 8007dc0:	ee18 1a10 	vmov	r1, s16
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f000 fcfc 	bl	80087c4 <__lshift>
 8007dcc:	ee08 0a10 	vmov	s16, r0
 8007dd0:	9b05      	ldr	r3, [sp, #20]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	dd05      	ble.n	8007de2 <_dtoa_r+0x82a>
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	461a      	mov	r2, r3
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f000 fcf2 	bl	80087c4 <__lshift>
 8007de0:	4606      	mov	r6, r0
 8007de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d06e      	beq.n	8007ec6 <_dtoa_r+0x90e>
 8007de8:	ee18 0a10 	vmov	r0, s16
 8007dec:	4631      	mov	r1, r6
 8007dee:	f000 fd59 	bl	80088a4 <__mcmp>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	da67      	bge.n	8007ec6 <_dtoa_r+0x90e>
 8007df6:	9b00      	ldr	r3, [sp, #0]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	ee18 1a10 	vmov	r1, s16
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	220a      	movs	r2, #10
 8007e02:	2300      	movs	r3, #0
 8007e04:	4620      	mov	r0, r4
 8007e06:	f000 fb2d 	bl	8008464 <__multadd>
 8007e0a:	9b08      	ldr	r3, [sp, #32]
 8007e0c:	ee08 0a10 	vmov	s16, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 81b1 	beq.w	8008178 <_dtoa_r+0xbc0>
 8007e16:	2300      	movs	r3, #0
 8007e18:	4639      	mov	r1, r7
 8007e1a:	220a      	movs	r2, #10
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f000 fb21 	bl	8008464 <__multadd>
 8007e22:	9b02      	ldr	r3, [sp, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	4607      	mov	r7, r0
 8007e28:	f300 808e 	bgt.w	8007f48 <_dtoa_r+0x990>
 8007e2c:	9b06      	ldr	r3, [sp, #24]
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	dc51      	bgt.n	8007ed6 <_dtoa_r+0x91e>
 8007e32:	e089      	b.n	8007f48 <_dtoa_r+0x990>
 8007e34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e3a:	e74b      	b.n	8007cd4 <_dtoa_r+0x71c>
 8007e3c:	9b03      	ldr	r3, [sp, #12]
 8007e3e:	1e5e      	subs	r6, r3, #1
 8007e40:	9b07      	ldr	r3, [sp, #28]
 8007e42:	42b3      	cmp	r3, r6
 8007e44:	bfbf      	itttt	lt
 8007e46:	9b07      	ldrlt	r3, [sp, #28]
 8007e48:	9607      	strlt	r6, [sp, #28]
 8007e4a:	1af2      	sublt	r2, r6, r3
 8007e4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007e4e:	bfb6      	itet	lt
 8007e50:	189b      	addlt	r3, r3, r2
 8007e52:	1b9e      	subge	r6, r3, r6
 8007e54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007e56:	9b03      	ldr	r3, [sp, #12]
 8007e58:	bfb8      	it	lt
 8007e5a:	2600      	movlt	r6, #0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	bfb7      	itett	lt
 8007e60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007e64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007e68:	1a9d      	sublt	r5, r3, r2
 8007e6a:	2300      	movlt	r3, #0
 8007e6c:	e734      	b.n	8007cd8 <_dtoa_r+0x720>
 8007e6e:	9e07      	ldr	r6, [sp, #28]
 8007e70:	9d04      	ldr	r5, [sp, #16]
 8007e72:	9f08      	ldr	r7, [sp, #32]
 8007e74:	e73b      	b.n	8007cee <_dtoa_r+0x736>
 8007e76:	9a07      	ldr	r2, [sp, #28]
 8007e78:	e767      	b.n	8007d4a <_dtoa_r+0x792>
 8007e7a:	9b06      	ldr	r3, [sp, #24]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	dc18      	bgt.n	8007eb2 <_dtoa_r+0x8fa>
 8007e80:	f1ba 0f00 	cmp.w	sl, #0
 8007e84:	d115      	bne.n	8007eb2 <_dtoa_r+0x8fa>
 8007e86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e8a:	b993      	cbnz	r3, 8007eb2 <_dtoa_r+0x8fa>
 8007e8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e90:	0d1b      	lsrs	r3, r3, #20
 8007e92:	051b      	lsls	r3, r3, #20
 8007e94:	b183      	cbz	r3, 8007eb8 <_dtoa_r+0x900>
 8007e96:	9b04      	ldr	r3, [sp, #16]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	9304      	str	r3, [sp, #16]
 8007e9c:	9b05      	ldr	r3, [sp, #20]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	9305      	str	r3, [sp, #20]
 8007ea2:	f04f 0801 	mov.w	r8, #1
 8007ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f47f af6a 	bne.w	8007d82 <_dtoa_r+0x7ca>
 8007eae:	2001      	movs	r0, #1
 8007eb0:	e76f      	b.n	8007d92 <_dtoa_r+0x7da>
 8007eb2:	f04f 0800 	mov.w	r8, #0
 8007eb6:	e7f6      	b.n	8007ea6 <_dtoa_r+0x8ee>
 8007eb8:	4698      	mov	r8, r3
 8007eba:	e7f4      	b.n	8007ea6 <_dtoa_r+0x8ee>
 8007ebc:	f43f af7d 	beq.w	8007dba <_dtoa_r+0x802>
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	301c      	adds	r0, #28
 8007ec4:	e772      	b.n	8007dac <_dtoa_r+0x7f4>
 8007ec6:	9b03      	ldr	r3, [sp, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	dc37      	bgt.n	8007f3c <_dtoa_r+0x984>
 8007ecc:	9b06      	ldr	r3, [sp, #24]
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	dd34      	ble.n	8007f3c <_dtoa_r+0x984>
 8007ed2:	9b03      	ldr	r3, [sp, #12]
 8007ed4:	9302      	str	r3, [sp, #8]
 8007ed6:	9b02      	ldr	r3, [sp, #8]
 8007ed8:	b96b      	cbnz	r3, 8007ef6 <_dtoa_r+0x93e>
 8007eda:	4631      	mov	r1, r6
 8007edc:	2205      	movs	r2, #5
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f000 fac0 	bl	8008464 <__multadd>
 8007ee4:	4601      	mov	r1, r0
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	ee18 0a10 	vmov	r0, s16
 8007eec:	f000 fcda 	bl	80088a4 <__mcmp>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	f73f adbb 	bgt.w	8007a6c <_dtoa_r+0x4b4>
 8007ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef8:	9d01      	ldr	r5, [sp, #4]
 8007efa:	43db      	mvns	r3, r3
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	f04f 0800 	mov.w	r8, #0
 8007f02:	4631      	mov	r1, r6
 8007f04:	4620      	mov	r0, r4
 8007f06:	f000 fa8b 	bl	8008420 <_Bfree>
 8007f0a:	2f00      	cmp	r7, #0
 8007f0c:	f43f aea4 	beq.w	8007c58 <_dtoa_r+0x6a0>
 8007f10:	f1b8 0f00 	cmp.w	r8, #0
 8007f14:	d005      	beq.n	8007f22 <_dtoa_r+0x96a>
 8007f16:	45b8      	cmp	r8, r7
 8007f18:	d003      	beq.n	8007f22 <_dtoa_r+0x96a>
 8007f1a:	4641      	mov	r1, r8
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f000 fa7f 	bl	8008420 <_Bfree>
 8007f22:	4639      	mov	r1, r7
 8007f24:	4620      	mov	r0, r4
 8007f26:	f000 fa7b 	bl	8008420 <_Bfree>
 8007f2a:	e695      	b.n	8007c58 <_dtoa_r+0x6a0>
 8007f2c:	2600      	movs	r6, #0
 8007f2e:	4637      	mov	r7, r6
 8007f30:	e7e1      	b.n	8007ef6 <_dtoa_r+0x93e>
 8007f32:	9700      	str	r7, [sp, #0]
 8007f34:	4637      	mov	r7, r6
 8007f36:	e599      	b.n	8007a6c <_dtoa_r+0x4b4>
 8007f38:	40240000 	.word	0x40240000
 8007f3c:	9b08      	ldr	r3, [sp, #32]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 80ca 	beq.w	80080d8 <_dtoa_r+0xb20>
 8007f44:	9b03      	ldr	r3, [sp, #12]
 8007f46:	9302      	str	r3, [sp, #8]
 8007f48:	2d00      	cmp	r5, #0
 8007f4a:	dd05      	ble.n	8007f58 <_dtoa_r+0x9a0>
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	462a      	mov	r2, r5
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 fc37 	bl	80087c4 <__lshift>
 8007f56:	4607      	mov	r7, r0
 8007f58:	f1b8 0f00 	cmp.w	r8, #0
 8007f5c:	d05b      	beq.n	8008016 <_dtoa_r+0xa5e>
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	4620      	mov	r0, r4
 8007f62:	f000 fa1d 	bl	80083a0 <_Balloc>
 8007f66:	4605      	mov	r5, r0
 8007f68:	b928      	cbnz	r0, 8007f76 <_dtoa_r+0x9be>
 8007f6a:	4b87      	ldr	r3, [pc, #540]	; (8008188 <_dtoa_r+0xbd0>)
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007f72:	f7ff bb3b 	b.w	80075ec <_dtoa_r+0x34>
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	3202      	adds	r2, #2
 8007f7a:	0092      	lsls	r2, r2, #2
 8007f7c:	f107 010c 	add.w	r1, r7, #12
 8007f80:	300c      	adds	r0, #12
 8007f82:	f7fe fdf3 	bl	8006b6c <memcpy>
 8007f86:	2201      	movs	r2, #1
 8007f88:	4629      	mov	r1, r5
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f000 fc1a 	bl	80087c4 <__lshift>
 8007f90:	9b01      	ldr	r3, [sp, #4]
 8007f92:	f103 0901 	add.w	r9, r3, #1
 8007f96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	9305      	str	r3, [sp, #20]
 8007f9e:	f00a 0301 	and.w	r3, sl, #1
 8007fa2:	46b8      	mov	r8, r7
 8007fa4:	9304      	str	r3, [sp, #16]
 8007fa6:	4607      	mov	r7, r0
 8007fa8:	4631      	mov	r1, r6
 8007faa:	ee18 0a10 	vmov	r0, s16
 8007fae:	f7ff fa75 	bl	800749c <quorem>
 8007fb2:	4641      	mov	r1, r8
 8007fb4:	9002      	str	r0, [sp, #8]
 8007fb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007fba:	ee18 0a10 	vmov	r0, s16
 8007fbe:	f000 fc71 	bl	80088a4 <__mcmp>
 8007fc2:	463a      	mov	r2, r7
 8007fc4:	9003      	str	r0, [sp, #12]
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f000 fc87 	bl	80088dc <__mdiff>
 8007fce:	68c2      	ldr	r2, [r0, #12]
 8007fd0:	f109 3bff 	add.w	fp, r9, #4294967295
 8007fd4:	4605      	mov	r5, r0
 8007fd6:	bb02      	cbnz	r2, 800801a <_dtoa_r+0xa62>
 8007fd8:	4601      	mov	r1, r0
 8007fda:	ee18 0a10 	vmov	r0, s16
 8007fde:	f000 fc61 	bl	80088a4 <__mcmp>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	9207      	str	r2, [sp, #28]
 8007fea:	f000 fa19 	bl	8008420 <_Bfree>
 8007fee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007ff2:	ea43 0102 	orr.w	r1, r3, r2
 8007ff6:	9b04      	ldr	r3, [sp, #16]
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	464d      	mov	r5, r9
 8007ffc:	d10f      	bne.n	800801e <_dtoa_r+0xa66>
 8007ffe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008002:	d02a      	beq.n	800805a <_dtoa_r+0xaa2>
 8008004:	9b03      	ldr	r3, [sp, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	dd02      	ble.n	8008010 <_dtoa_r+0xa58>
 800800a:	9b02      	ldr	r3, [sp, #8]
 800800c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008010:	f88b a000 	strb.w	sl, [fp]
 8008014:	e775      	b.n	8007f02 <_dtoa_r+0x94a>
 8008016:	4638      	mov	r0, r7
 8008018:	e7ba      	b.n	8007f90 <_dtoa_r+0x9d8>
 800801a:	2201      	movs	r2, #1
 800801c:	e7e2      	b.n	8007fe4 <_dtoa_r+0xa2c>
 800801e:	9b03      	ldr	r3, [sp, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	db04      	blt.n	800802e <_dtoa_r+0xa76>
 8008024:	9906      	ldr	r1, [sp, #24]
 8008026:	430b      	orrs	r3, r1
 8008028:	9904      	ldr	r1, [sp, #16]
 800802a:	430b      	orrs	r3, r1
 800802c:	d122      	bne.n	8008074 <_dtoa_r+0xabc>
 800802e:	2a00      	cmp	r2, #0
 8008030:	ddee      	ble.n	8008010 <_dtoa_r+0xa58>
 8008032:	ee18 1a10 	vmov	r1, s16
 8008036:	2201      	movs	r2, #1
 8008038:	4620      	mov	r0, r4
 800803a:	f000 fbc3 	bl	80087c4 <__lshift>
 800803e:	4631      	mov	r1, r6
 8008040:	ee08 0a10 	vmov	s16, r0
 8008044:	f000 fc2e 	bl	80088a4 <__mcmp>
 8008048:	2800      	cmp	r0, #0
 800804a:	dc03      	bgt.n	8008054 <_dtoa_r+0xa9c>
 800804c:	d1e0      	bne.n	8008010 <_dtoa_r+0xa58>
 800804e:	f01a 0f01 	tst.w	sl, #1
 8008052:	d0dd      	beq.n	8008010 <_dtoa_r+0xa58>
 8008054:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008058:	d1d7      	bne.n	800800a <_dtoa_r+0xa52>
 800805a:	2339      	movs	r3, #57	; 0x39
 800805c:	f88b 3000 	strb.w	r3, [fp]
 8008060:	462b      	mov	r3, r5
 8008062:	461d      	mov	r5, r3
 8008064:	3b01      	subs	r3, #1
 8008066:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800806a:	2a39      	cmp	r2, #57	; 0x39
 800806c:	d071      	beq.n	8008152 <_dtoa_r+0xb9a>
 800806e:	3201      	adds	r2, #1
 8008070:	701a      	strb	r2, [r3, #0]
 8008072:	e746      	b.n	8007f02 <_dtoa_r+0x94a>
 8008074:	2a00      	cmp	r2, #0
 8008076:	dd07      	ble.n	8008088 <_dtoa_r+0xad0>
 8008078:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800807c:	d0ed      	beq.n	800805a <_dtoa_r+0xaa2>
 800807e:	f10a 0301 	add.w	r3, sl, #1
 8008082:	f88b 3000 	strb.w	r3, [fp]
 8008086:	e73c      	b.n	8007f02 <_dtoa_r+0x94a>
 8008088:	9b05      	ldr	r3, [sp, #20]
 800808a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800808e:	4599      	cmp	r9, r3
 8008090:	d047      	beq.n	8008122 <_dtoa_r+0xb6a>
 8008092:	ee18 1a10 	vmov	r1, s16
 8008096:	2300      	movs	r3, #0
 8008098:	220a      	movs	r2, #10
 800809a:	4620      	mov	r0, r4
 800809c:	f000 f9e2 	bl	8008464 <__multadd>
 80080a0:	45b8      	cmp	r8, r7
 80080a2:	ee08 0a10 	vmov	s16, r0
 80080a6:	f04f 0300 	mov.w	r3, #0
 80080aa:	f04f 020a 	mov.w	r2, #10
 80080ae:	4641      	mov	r1, r8
 80080b0:	4620      	mov	r0, r4
 80080b2:	d106      	bne.n	80080c2 <_dtoa_r+0xb0a>
 80080b4:	f000 f9d6 	bl	8008464 <__multadd>
 80080b8:	4680      	mov	r8, r0
 80080ba:	4607      	mov	r7, r0
 80080bc:	f109 0901 	add.w	r9, r9, #1
 80080c0:	e772      	b.n	8007fa8 <_dtoa_r+0x9f0>
 80080c2:	f000 f9cf 	bl	8008464 <__multadd>
 80080c6:	4639      	mov	r1, r7
 80080c8:	4680      	mov	r8, r0
 80080ca:	2300      	movs	r3, #0
 80080cc:	220a      	movs	r2, #10
 80080ce:	4620      	mov	r0, r4
 80080d0:	f000 f9c8 	bl	8008464 <__multadd>
 80080d4:	4607      	mov	r7, r0
 80080d6:	e7f1      	b.n	80080bc <_dtoa_r+0xb04>
 80080d8:	9b03      	ldr	r3, [sp, #12]
 80080da:	9302      	str	r3, [sp, #8]
 80080dc:	9d01      	ldr	r5, [sp, #4]
 80080de:	ee18 0a10 	vmov	r0, s16
 80080e2:	4631      	mov	r1, r6
 80080e4:	f7ff f9da 	bl	800749c <quorem>
 80080e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80080ec:	9b01      	ldr	r3, [sp, #4]
 80080ee:	f805 ab01 	strb.w	sl, [r5], #1
 80080f2:	1aea      	subs	r2, r5, r3
 80080f4:	9b02      	ldr	r3, [sp, #8]
 80080f6:	4293      	cmp	r3, r2
 80080f8:	dd09      	ble.n	800810e <_dtoa_r+0xb56>
 80080fa:	ee18 1a10 	vmov	r1, s16
 80080fe:	2300      	movs	r3, #0
 8008100:	220a      	movs	r2, #10
 8008102:	4620      	mov	r0, r4
 8008104:	f000 f9ae 	bl	8008464 <__multadd>
 8008108:	ee08 0a10 	vmov	s16, r0
 800810c:	e7e7      	b.n	80080de <_dtoa_r+0xb26>
 800810e:	9b02      	ldr	r3, [sp, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	bfc8      	it	gt
 8008114:	461d      	movgt	r5, r3
 8008116:	9b01      	ldr	r3, [sp, #4]
 8008118:	bfd8      	it	le
 800811a:	2501      	movle	r5, #1
 800811c:	441d      	add	r5, r3
 800811e:	f04f 0800 	mov.w	r8, #0
 8008122:	ee18 1a10 	vmov	r1, s16
 8008126:	2201      	movs	r2, #1
 8008128:	4620      	mov	r0, r4
 800812a:	f000 fb4b 	bl	80087c4 <__lshift>
 800812e:	4631      	mov	r1, r6
 8008130:	ee08 0a10 	vmov	s16, r0
 8008134:	f000 fbb6 	bl	80088a4 <__mcmp>
 8008138:	2800      	cmp	r0, #0
 800813a:	dc91      	bgt.n	8008060 <_dtoa_r+0xaa8>
 800813c:	d102      	bne.n	8008144 <_dtoa_r+0xb8c>
 800813e:	f01a 0f01 	tst.w	sl, #1
 8008142:	d18d      	bne.n	8008060 <_dtoa_r+0xaa8>
 8008144:	462b      	mov	r3, r5
 8008146:	461d      	mov	r5, r3
 8008148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800814c:	2a30      	cmp	r2, #48	; 0x30
 800814e:	d0fa      	beq.n	8008146 <_dtoa_r+0xb8e>
 8008150:	e6d7      	b.n	8007f02 <_dtoa_r+0x94a>
 8008152:	9a01      	ldr	r2, [sp, #4]
 8008154:	429a      	cmp	r2, r3
 8008156:	d184      	bne.n	8008062 <_dtoa_r+0xaaa>
 8008158:	9b00      	ldr	r3, [sp, #0]
 800815a:	3301      	adds	r3, #1
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	2331      	movs	r3, #49	; 0x31
 8008160:	7013      	strb	r3, [r2, #0]
 8008162:	e6ce      	b.n	8007f02 <_dtoa_r+0x94a>
 8008164:	4b09      	ldr	r3, [pc, #36]	; (800818c <_dtoa_r+0xbd4>)
 8008166:	f7ff ba95 	b.w	8007694 <_dtoa_r+0xdc>
 800816a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800816c:	2b00      	cmp	r3, #0
 800816e:	f47f aa6e 	bne.w	800764e <_dtoa_r+0x96>
 8008172:	4b07      	ldr	r3, [pc, #28]	; (8008190 <_dtoa_r+0xbd8>)
 8008174:	f7ff ba8e 	b.w	8007694 <_dtoa_r+0xdc>
 8008178:	9b02      	ldr	r3, [sp, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	dcae      	bgt.n	80080dc <_dtoa_r+0xb24>
 800817e:	9b06      	ldr	r3, [sp, #24]
 8008180:	2b02      	cmp	r3, #2
 8008182:	f73f aea8 	bgt.w	8007ed6 <_dtoa_r+0x91e>
 8008186:	e7a9      	b.n	80080dc <_dtoa_r+0xb24>
 8008188:	08009793 	.word	0x08009793
 800818c:	080096f0 	.word	0x080096f0
 8008190:	08009714 	.word	0x08009714

08008194 <std>:
 8008194:	2300      	movs	r3, #0
 8008196:	b510      	push	{r4, lr}
 8008198:	4604      	mov	r4, r0
 800819a:	e9c0 3300 	strd	r3, r3, [r0]
 800819e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081a2:	6083      	str	r3, [r0, #8]
 80081a4:	8181      	strh	r1, [r0, #12]
 80081a6:	6643      	str	r3, [r0, #100]	; 0x64
 80081a8:	81c2      	strh	r2, [r0, #14]
 80081aa:	6183      	str	r3, [r0, #24]
 80081ac:	4619      	mov	r1, r3
 80081ae:	2208      	movs	r2, #8
 80081b0:	305c      	adds	r0, #92	; 0x5c
 80081b2:	f7fe fce9 	bl	8006b88 <memset>
 80081b6:	4b05      	ldr	r3, [pc, #20]	; (80081cc <std+0x38>)
 80081b8:	6263      	str	r3, [r4, #36]	; 0x24
 80081ba:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <std+0x3c>)
 80081bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80081be:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <std+0x40>)
 80081c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081c2:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <std+0x44>)
 80081c4:	6224      	str	r4, [r4, #32]
 80081c6:	6323      	str	r3, [r4, #48]	; 0x30
 80081c8:	bd10      	pop	{r4, pc}
 80081ca:	bf00      	nop
 80081cc:	08008f69 	.word	0x08008f69
 80081d0:	08008f8b 	.word	0x08008f8b
 80081d4:	08008fc3 	.word	0x08008fc3
 80081d8:	08008fe7 	.word	0x08008fe7

080081dc <_cleanup_r>:
 80081dc:	4901      	ldr	r1, [pc, #4]	; (80081e4 <_cleanup_r+0x8>)
 80081de:	f000 b8af 	b.w	8008340 <_fwalk_reent>
 80081e2:	bf00      	nop
 80081e4:	080092fd 	.word	0x080092fd

080081e8 <__sfmoreglue>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	2268      	movs	r2, #104	; 0x68
 80081ec:	1e4d      	subs	r5, r1, #1
 80081ee:	4355      	muls	r5, r2
 80081f0:	460e      	mov	r6, r1
 80081f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081f6:	f000 fcd9 	bl	8008bac <_malloc_r>
 80081fa:	4604      	mov	r4, r0
 80081fc:	b140      	cbz	r0, 8008210 <__sfmoreglue+0x28>
 80081fe:	2100      	movs	r1, #0
 8008200:	e9c0 1600 	strd	r1, r6, [r0]
 8008204:	300c      	adds	r0, #12
 8008206:	60a0      	str	r0, [r4, #8]
 8008208:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800820c:	f7fe fcbc 	bl	8006b88 <memset>
 8008210:	4620      	mov	r0, r4
 8008212:	bd70      	pop	{r4, r5, r6, pc}

08008214 <__sfp_lock_acquire>:
 8008214:	4801      	ldr	r0, [pc, #4]	; (800821c <__sfp_lock_acquire+0x8>)
 8008216:	f000 b8b8 	b.w	800838a <__retarget_lock_acquire_recursive>
 800821a:	bf00      	nop
 800821c:	20000569 	.word	0x20000569

08008220 <__sfp_lock_release>:
 8008220:	4801      	ldr	r0, [pc, #4]	; (8008228 <__sfp_lock_release+0x8>)
 8008222:	f000 b8b3 	b.w	800838c <__retarget_lock_release_recursive>
 8008226:	bf00      	nop
 8008228:	20000569 	.word	0x20000569

0800822c <__sinit_lock_acquire>:
 800822c:	4801      	ldr	r0, [pc, #4]	; (8008234 <__sinit_lock_acquire+0x8>)
 800822e:	f000 b8ac 	b.w	800838a <__retarget_lock_acquire_recursive>
 8008232:	bf00      	nop
 8008234:	2000056a 	.word	0x2000056a

08008238 <__sinit_lock_release>:
 8008238:	4801      	ldr	r0, [pc, #4]	; (8008240 <__sinit_lock_release+0x8>)
 800823a:	f000 b8a7 	b.w	800838c <__retarget_lock_release_recursive>
 800823e:	bf00      	nop
 8008240:	2000056a 	.word	0x2000056a

08008244 <__sinit>:
 8008244:	b510      	push	{r4, lr}
 8008246:	4604      	mov	r4, r0
 8008248:	f7ff fff0 	bl	800822c <__sinit_lock_acquire>
 800824c:	69a3      	ldr	r3, [r4, #24]
 800824e:	b11b      	cbz	r3, 8008258 <__sinit+0x14>
 8008250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008254:	f7ff bff0 	b.w	8008238 <__sinit_lock_release>
 8008258:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800825c:	6523      	str	r3, [r4, #80]	; 0x50
 800825e:	4b13      	ldr	r3, [pc, #76]	; (80082ac <__sinit+0x68>)
 8008260:	4a13      	ldr	r2, [pc, #76]	; (80082b0 <__sinit+0x6c>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	62a2      	str	r2, [r4, #40]	; 0x28
 8008266:	42a3      	cmp	r3, r4
 8008268:	bf04      	itt	eq
 800826a:	2301      	moveq	r3, #1
 800826c:	61a3      	streq	r3, [r4, #24]
 800826e:	4620      	mov	r0, r4
 8008270:	f000 f820 	bl	80082b4 <__sfp>
 8008274:	6060      	str	r0, [r4, #4]
 8008276:	4620      	mov	r0, r4
 8008278:	f000 f81c 	bl	80082b4 <__sfp>
 800827c:	60a0      	str	r0, [r4, #8]
 800827e:	4620      	mov	r0, r4
 8008280:	f000 f818 	bl	80082b4 <__sfp>
 8008284:	2200      	movs	r2, #0
 8008286:	60e0      	str	r0, [r4, #12]
 8008288:	2104      	movs	r1, #4
 800828a:	6860      	ldr	r0, [r4, #4]
 800828c:	f7ff ff82 	bl	8008194 <std>
 8008290:	68a0      	ldr	r0, [r4, #8]
 8008292:	2201      	movs	r2, #1
 8008294:	2109      	movs	r1, #9
 8008296:	f7ff ff7d 	bl	8008194 <std>
 800829a:	68e0      	ldr	r0, [r4, #12]
 800829c:	2202      	movs	r2, #2
 800829e:	2112      	movs	r1, #18
 80082a0:	f7ff ff78 	bl	8008194 <std>
 80082a4:	2301      	movs	r3, #1
 80082a6:	61a3      	str	r3, [r4, #24]
 80082a8:	e7d2      	b.n	8008250 <__sinit+0xc>
 80082aa:	bf00      	nop
 80082ac:	080096dc 	.word	0x080096dc
 80082b0:	080081dd 	.word	0x080081dd

080082b4 <__sfp>:
 80082b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b6:	4607      	mov	r7, r0
 80082b8:	f7ff ffac 	bl	8008214 <__sfp_lock_acquire>
 80082bc:	4b1e      	ldr	r3, [pc, #120]	; (8008338 <__sfp+0x84>)
 80082be:	681e      	ldr	r6, [r3, #0]
 80082c0:	69b3      	ldr	r3, [r6, #24]
 80082c2:	b913      	cbnz	r3, 80082ca <__sfp+0x16>
 80082c4:	4630      	mov	r0, r6
 80082c6:	f7ff ffbd 	bl	8008244 <__sinit>
 80082ca:	3648      	adds	r6, #72	; 0x48
 80082cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	d503      	bpl.n	80082dc <__sfp+0x28>
 80082d4:	6833      	ldr	r3, [r6, #0]
 80082d6:	b30b      	cbz	r3, 800831c <__sfp+0x68>
 80082d8:	6836      	ldr	r6, [r6, #0]
 80082da:	e7f7      	b.n	80082cc <__sfp+0x18>
 80082dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082e0:	b9d5      	cbnz	r5, 8008318 <__sfp+0x64>
 80082e2:	4b16      	ldr	r3, [pc, #88]	; (800833c <__sfp+0x88>)
 80082e4:	60e3      	str	r3, [r4, #12]
 80082e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082ea:	6665      	str	r5, [r4, #100]	; 0x64
 80082ec:	f000 f84c 	bl	8008388 <__retarget_lock_init_recursive>
 80082f0:	f7ff ff96 	bl	8008220 <__sfp_lock_release>
 80082f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082fc:	6025      	str	r5, [r4, #0]
 80082fe:	61a5      	str	r5, [r4, #24]
 8008300:	2208      	movs	r2, #8
 8008302:	4629      	mov	r1, r5
 8008304:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008308:	f7fe fc3e 	bl	8006b88 <memset>
 800830c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008310:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008314:	4620      	mov	r0, r4
 8008316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008318:	3468      	adds	r4, #104	; 0x68
 800831a:	e7d9      	b.n	80082d0 <__sfp+0x1c>
 800831c:	2104      	movs	r1, #4
 800831e:	4638      	mov	r0, r7
 8008320:	f7ff ff62 	bl	80081e8 <__sfmoreglue>
 8008324:	4604      	mov	r4, r0
 8008326:	6030      	str	r0, [r6, #0]
 8008328:	2800      	cmp	r0, #0
 800832a:	d1d5      	bne.n	80082d8 <__sfp+0x24>
 800832c:	f7ff ff78 	bl	8008220 <__sfp_lock_release>
 8008330:	230c      	movs	r3, #12
 8008332:	603b      	str	r3, [r7, #0]
 8008334:	e7ee      	b.n	8008314 <__sfp+0x60>
 8008336:	bf00      	nop
 8008338:	080096dc 	.word	0x080096dc
 800833c:	ffff0001 	.word	0xffff0001

08008340 <_fwalk_reent>:
 8008340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008344:	4606      	mov	r6, r0
 8008346:	4688      	mov	r8, r1
 8008348:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800834c:	2700      	movs	r7, #0
 800834e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008352:	f1b9 0901 	subs.w	r9, r9, #1
 8008356:	d505      	bpl.n	8008364 <_fwalk_reent+0x24>
 8008358:	6824      	ldr	r4, [r4, #0]
 800835a:	2c00      	cmp	r4, #0
 800835c:	d1f7      	bne.n	800834e <_fwalk_reent+0xe>
 800835e:	4638      	mov	r0, r7
 8008360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008364:	89ab      	ldrh	r3, [r5, #12]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d907      	bls.n	800837a <_fwalk_reent+0x3a>
 800836a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800836e:	3301      	adds	r3, #1
 8008370:	d003      	beq.n	800837a <_fwalk_reent+0x3a>
 8008372:	4629      	mov	r1, r5
 8008374:	4630      	mov	r0, r6
 8008376:	47c0      	blx	r8
 8008378:	4307      	orrs	r7, r0
 800837a:	3568      	adds	r5, #104	; 0x68
 800837c:	e7e9      	b.n	8008352 <_fwalk_reent+0x12>
	...

08008380 <_localeconv_r>:
 8008380:	4800      	ldr	r0, [pc, #0]	; (8008384 <_localeconv_r+0x4>)
 8008382:	4770      	bx	lr
 8008384:	20000198 	.word	0x20000198

08008388 <__retarget_lock_init_recursive>:
 8008388:	4770      	bx	lr

0800838a <__retarget_lock_acquire_recursive>:
 800838a:	4770      	bx	lr

0800838c <__retarget_lock_release_recursive>:
 800838c:	4770      	bx	lr
	...

08008390 <malloc>:
 8008390:	4b02      	ldr	r3, [pc, #8]	; (800839c <malloc+0xc>)
 8008392:	4601      	mov	r1, r0
 8008394:	6818      	ldr	r0, [r3, #0]
 8008396:	f000 bc09 	b.w	8008bac <_malloc_r>
 800839a:	bf00      	nop
 800839c:	20000044 	.word	0x20000044

080083a0 <_Balloc>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80083a4:	4604      	mov	r4, r0
 80083a6:	460d      	mov	r5, r1
 80083a8:	b976      	cbnz	r6, 80083c8 <_Balloc+0x28>
 80083aa:	2010      	movs	r0, #16
 80083ac:	f7ff fff0 	bl	8008390 <malloc>
 80083b0:	4602      	mov	r2, r0
 80083b2:	6260      	str	r0, [r4, #36]	; 0x24
 80083b4:	b920      	cbnz	r0, 80083c0 <_Balloc+0x20>
 80083b6:	4b18      	ldr	r3, [pc, #96]	; (8008418 <_Balloc+0x78>)
 80083b8:	4818      	ldr	r0, [pc, #96]	; (800841c <_Balloc+0x7c>)
 80083ba:	2166      	movs	r1, #102	; 0x66
 80083bc:	f000 feea 	bl	8009194 <__assert_func>
 80083c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083c4:	6006      	str	r6, [r0, #0]
 80083c6:	60c6      	str	r6, [r0, #12]
 80083c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80083ca:	68f3      	ldr	r3, [r6, #12]
 80083cc:	b183      	cbz	r3, 80083f0 <_Balloc+0x50>
 80083ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083d6:	b9b8      	cbnz	r0, 8008408 <_Balloc+0x68>
 80083d8:	2101      	movs	r1, #1
 80083da:	fa01 f605 	lsl.w	r6, r1, r5
 80083de:	1d72      	adds	r2, r6, #5
 80083e0:	0092      	lsls	r2, r2, #2
 80083e2:	4620      	mov	r0, r4
 80083e4:	f000 fb60 	bl	8008aa8 <_calloc_r>
 80083e8:	b160      	cbz	r0, 8008404 <_Balloc+0x64>
 80083ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083ee:	e00e      	b.n	800840e <_Balloc+0x6e>
 80083f0:	2221      	movs	r2, #33	; 0x21
 80083f2:	2104      	movs	r1, #4
 80083f4:	4620      	mov	r0, r4
 80083f6:	f000 fb57 	bl	8008aa8 <_calloc_r>
 80083fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083fc:	60f0      	str	r0, [r6, #12]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1e4      	bne.n	80083ce <_Balloc+0x2e>
 8008404:	2000      	movs	r0, #0
 8008406:	bd70      	pop	{r4, r5, r6, pc}
 8008408:	6802      	ldr	r2, [r0, #0]
 800840a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800840e:	2300      	movs	r3, #0
 8008410:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008414:	e7f7      	b.n	8008406 <_Balloc+0x66>
 8008416:	bf00      	nop
 8008418:	08009721 	.word	0x08009721
 800841c:	08009804 	.word	0x08009804

08008420 <_Bfree>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008424:	4605      	mov	r5, r0
 8008426:	460c      	mov	r4, r1
 8008428:	b976      	cbnz	r6, 8008448 <_Bfree+0x28>
 800842a:	2010      	movs	r0, #16
 800842c:	f7ff ffb0 	bl	8008390 <malloc>
 8008430:	4602      	mov	r2, r0
 8008432:	6268      	str	r0, [r5, #36]	; 0x24
 8008434:	b920      	cbnz	r0, 8008440 <_Bfree+0x20>
 8008436:	4b09      	ldr	r3, [pc, #36]	; (800845c <_Bfree+0x3c>)
 8008438:	4809      	ldr	r0, [pc, #36]	; (8008460 <_Bfree+0x40>)
 800843a:	218a      	movs	r1, #138	; 0x8a
 800843c:	f000 feaa 	bl	8009194 <__assert_func>
 8008440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008444:	6006      	str	r6, [r0, #0]
 8008446:	60c6      	str	r6, [r0, #12]
 8008448:	b13c      	cbz	r4, 800845a <_Bfree+0x3a>
 800844a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800844c:	6862      	ldr	r2, [r4, #4]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008454:	6021      	str	r1, [r4, #0]
 8008456:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800845a:	bd70      	pop	{r4, r5, r6, pc}
 800845c:	08009721 	.word	0x08009721
 8008460:	08009804 	.word	0x08009804

08008464 <__multadd>:
 8008464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008468:	690d      	ldr	r5, [r1, #16]
 800846a:	4607      	mov	r7, r0
 800846c:	460c      	mov	r4, r1
 800846e:	461e      	mov	r6, r3
 8008470:	f101 0c14 	add.w	ip, r1, #20
 8008474:	2000      	movs	r0, #0
 8008476:	f8dc 3000 	ldr.w	r3, [ip]
 800847a:	b299      	uxth	r1, r3
 800847c:	fb02 6101 	mla	r1, r2, r1, r6
 8008480:	0c1e      	lsrs	r6, r3, #16
 8008482:	0c0b      	lsrs	r3, r1, #16
 8008484:	fb02 3306 	mla	r3, r2, r6, r3
 8008488:	b289      	uxth	r1, r1
 800848a:	3001      	adds	r0, #1
 800848c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008490:	4285      	cmp	r5, r0
 8008492:	f84c 1b04 	str.w	r1, [ip], #4
 8008496:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800849a:	dcec      	bgt.n	8008476 <__multadd+0x12>
 800849c:	b30e      	cbz	r6, 80084e2 <__multadd+0x7e>
 800849e:	68a3      	ldr	r3, [r4, #8]
 80084a0:	42ab      	cmp	r3, r5
 80084a2:	dc19      	bgt.n	80084d8 <__multadd+0x74>
 80084a4:	6861      	ldr	r1, [r4, #4]
 80084a6:	4638      	mov	r0, r7
 80084a8:	3101      	adds	r1, #1
 80084aa:	f7ff ff79 	bl	80083a0 <_Balloc>
 80084ae:	4680      	mov	r8, r0
 80084b0:	b928      	cbnz	r0, 80084be <__multadd+0x5a>
 80084b2:	4602      	mov	r2, r0
 80084b4:	4b0c      	ldr	r3, [pc, #48]	; (80084e8 <__multadd+0x84>)
 80084b6:	480d      	ldr	r0, [pc, #52]	; (80084ec <__multadd+0x88>)
 80084b8:	21b5      	movs	r1, #181	; 0xb5
 80084ba:	f000 fe6b 	bl	8009194 <__assert_func>
 80084be:	6922      	ldr	r2, [r4, #16]
 80084c0:	3202      	adds	r2, #2
 80084c2:	f104 010c 	add.w	r1, r4, #12
 80084c6:	0092      	lsls	r2, r2, #2
 80084c8:	300c      	adds	r0, #12
 80084ca:	f7fe fb4f 	bl	8006b6c <memcpy>
 80084ce:	4621      	mov	r1, r4
 80084d0:	4638      	mov	r0, r7
 80084d2:	f7ff ffa5 	bl	8008420 <_Bfree>
 80084d6:	4644      	mov	r4, r8
 80084d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084dc:	3501      	adds	r5, #1
 80084de:	615e      	str	r6, [r3, #20]
 80084e0:	6125      	str	r5, [r4, #16]
 80084e2:	4620      	mov	r0, r4
 80084e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e8:	08009793 	.word	0x08009793
 80084ec:	08009804 	.word	0x08009804

080084f0 <__hi0bits>:
 80084f0:	0c03      	lsrs	r3, r0, #16
 80084f2:	041b      	lsls	r3, r3, #16
 80084f4:	b9d3      	cbnz	r3, 800852c <__hi0bits+0x3c>
 80084f6:	0400      	lsls	r0, r0, #16
 80084f8:	2310      	movs	r3, #16
 80084fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80084fe:	bf04      	itt	eq
 8008500:	0200      	lsleq	r0, r0, #8
 8008502:	3308      	addeq	r3, #8
 8008504:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008508:	bf04      	itt	eq
 800850a:	0100      	lsleq	r0, r0, #4
 800850c:	3304      	addeq	r3, #4
 800850e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008512:	bf04      	itt	eq
 8008514:	0080      	lsleq	r0, r0, #2
 8008516:	3302      	addeq	r3, #2
 8008518:	2800      	cmp	r0, #0
 800851a:	db05      	blt.n	8008528 <__hi0bits+0x38>
 800851c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008520:	f103 0301 	add.w	r3, r3, #1
 8008524:	bf08      	it	eq
 8008526:	2320      	moveq	r3, #32
 8008528:	4618      	mov	r0, r3
 800852a:	4770      	bx	lr
 800852c:	2300      	movs	r3, #0
 800852e:	e7e4      	b.n	80084fa <__hi0bits+0xa>

08008530 <__lo0bits>:
 8008530:	6803      	ldr	r3, [r0, #0]
 8008532:	f013 0207 	ands.w	r2, r3, #7
 8008536:	4601      	mov	r1, r0
 8008538:	d00b      	beq.n	8008552 <__lo0bits+0x22>
 800853a:	07da      	lsls	r2, r3, #31
 800853c:	d423      	bmi.n	8008586 <__lo0bits+0x56>
 800853e:	0798      	lsls	r0, r3, #30
 8008540:	bf49      	itett	mi
 8008542:	085b      	lsrmi	r3, r3, #1
 8008544:	089b      	lsrpl	r3, r3, #2
 8008546:	2001      	movmi	r0, #1
 8008548:	600b      	strmi	r3, [r1, #0]
 800854a:	bf5c      	itt	pl
 800854c:	600b      	strpl	r3, [r1, #0]
 800854e:	2002      	movpl	r0, #2
 8008550:	4770      	bx	lr
 8008552:	b298      	uxth	r0, r3
 8008554:	b9a8      	cbnz	r0, 8008582 <__lo0bits+0x52>
 8008556:	0c1b      	lsrs	r3, r3, #16
 8008558:	2010      	movs	r0, #16
 800855a:	b2da      	uxtb	r2, r3
 800855c:	b90a      	cbnz	r2, 8008562 <__lo0bits+0x32>
 800855e:	3008      	adds	r0, #8
 8008560:	0a1b      	lsrs	r3, r3, #8
 8008562:	071a      	lsls	r2, r3, #28
 8008564:	bf04      	itt	eq
 8008566:	091b      	lsreq	r3, r3, #4
 8008568:	3004      	addeq	r0, #4
 800856a:	079a      	lsls	r2, r3, #30
 800856c:	bf04      	itt	eq
 800856e:	089b      	lsreq	r3, r3, #2
 8008570:	3002      	addeq	r0, #2
 8008572:	07da      	lsls	r2, r3, #31
 8008574:	d403      	bmi.n	800857e <__lo0bits+0x4e>
 8008576:	085b      	lsrs	r3, r3, #1
 8008578:	f100 0001 	add.w	r0, r0, #1
 800857c:	d005      	beq.n	800858a <__lo0bits+0x5a>
 800857e:	600b      	str	r3, [r1, #0]
 8008580:	4770      	bx	lr
 8008582:	4610      	mov	r0, r2
 8008584:	e7e9      	b.n	800855a <__lo0bits+0x2a>
 8008586:	2000      	movs	r0, #0
 8008588:	4770      	bx	lr
 800858a:	2020      	movs	r0, #32
 800858c:	4770      	bx	lr
	...

08008590 <__i2b>:
 8008590:	b510      	push	{r4, lr}
 8008592:	460c      	mov	r4, r1
 8008594:	2101      	movs	r1, #1
 8008596:	f7ff ff03 	bl	80083a0 <_Balloc>
 800859a:	4602      	mov	r2, r0
 800859c:	b928      	cbnz	r0, 80085aa <__i2b+0x1a>
 800859e:	4b05      	ldr	r3, [pc, #20]	; (80085b4 <__i2b+0x24>)
 80085a0:	4805      	ldr	r0, [pc, #20]	; (80085b8 <__i2b+0x28>)
 80085a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80085a6:	f000 fdf5 	bl	8009194 <__assert_func>
 80085aa:	2301      	movs	r3, #1
 80085ac:	6144      	str	r4, [r0, #20]
 80085ae:	6103      	str	r3, [r0, #16]
 80085b0:	bd10      	pop	{r4, pc}
 80085b2:	bf00      	nop
 80085b4:	08009793 	.word	0x08009793
 80085b8:	08009804 	.word	0x08009804

080085bc <__multiply>:
 80085bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	4691      	mov	r9, r2
 80085c2:	690a      	ldr	r2, [r1, #16]
 80085c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	bfb8      	it	lt
 80085cc:	460b      	movlt	r3, r1
 80085ce:	460c      	mov	r4, r1
 80085d0:	bfbc      	itt	lt
 80085d2:	464c      	movlt	r4, r9
 80085d4:	4699      	movlt	r9, r3
 80085d6:	6927      	ldr	r7, [r4, #16]
 80085d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80085dc:	68a3      	ldr	r3, [r4, #8]
 80085de:	6861      	ldr	r1, [r4, #4]
 80085e0:	eb07 060a 	add.w	r6, r7, sl
 80085e4:	42b3      	cmp	r3, r6
 80085e6:	b085      	sub	sp, #20
 80085e8:	bfb8      	it	lt
 80085ea:	3101      	addlt	r1, #1
 80085ec:	f7ff fed8 	bl	80083a0 <_Balloc>
 80085f0:	b930      	cbnz	r0, 8008600 <__multiply+0x44>
 80085f2:	4602      	mov	r2, r0
 80085f4:	4b44      	ldr	r3, [pc, #272]	; (8008708 <__multiply+0x14c>)
 80085f6:	4845      	ldr	r0, [pc, #276]	; (800870c <__multiply+0x150>)
 80085f8:	f240 115d 	movw	r1, #349	; 0x15d
 80085fc:	f000 fdca 	bl	8009194 <__assert_func>
 8008600:	f100 0514 	add.w	r5, r0, #20
 8008604:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008608:	462b      	mov	r3, r5
 800860a:	2200      	movs	r2, #0
 800860c:	4543      	cmp	r3, r8
 800860e:	d321      	bcc.n	8008654 <__multiply+0x98>
 8008610:	f104 0314 	add.w	r3, r4, #20
 8008614:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008618:	f109 0314 	add.w	r3, r9, #20
 800861c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008620:	9202      	str	r2, [sp, #8]
 8008622:	1b3a      	subs	r2, r7, r4
 8008624:	3a15      	subs	r2, #21
 8008626:	f022 0203 	bic.w	r2, r2, #3
 800862a:	3204      	adds	r2, #4
 800862c:	f104 0115 	add.w	r1, r4, #21
 8008630:	428f      	cmp	r7, r1
 8008632:	bf38      	it	cc
 8008634:	2204      	movcc	r2, #4
 8008636:	9201      	str	r2, [sp, #4]
 8008638:	9a02      	ldr	r2, [sp, #8]
 800863a:	9303      	str	r3, [sp, #12]
 800863c:	429a      	cmp	r2, r3
 800863e:	d80c      	bhi.n	800865a <__multiply+0x9e>
 8008640:	2e00      	cmp	r6, #0
 8008642:	dd03      	ble.n	800864c <__multiply+0x90>
 8008644:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008648:	2b00      	cmp	r3, #0
 800864a:	d05a      	beq.n	8008702 <__multiply+0x146>
 800864c:	6106      	str	r6, [r0, #16]
 800864e:	b005      	add	sp, #20
 8008650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008654:	f843 2b04 	str.w	r2, [r3], #4
 8008658:	e7d8      	b.n	800860c <__multiply+0x50>
 800865a:	f8b3 a000 	ldrh.w	sl, [r3]
 800865e:	f1ba 0f00 	cmp.w	sl, #0
 8008662:	d024      	beq.n	80086ae <__multiply+0xf2>
 8008664:	f104 0e14 	add.w	lr, r4, #20
 8008668:	46a9      	mov	r9, r5
 800866a:	f04f 0c00 	mov.w	ip, #0
 800866e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008672:	f8d9 1000 	ldr.w	r1, [r9]
 8008676:	fa1f fb82 	uxth.w	fp, r2
 800867a:	b289      	uxth	r1, r1
 800867c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008680:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008684:	f8d9 2000 	ldr.w	r2, [r9]
 8008688:	4461      	add	r1, ip
 800868a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800868e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008692:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008696:	b289      	uxth	r1, r1
 8008698:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800869c:	4577      	cmp	r7, lr
 800869e:	f849 1b04 	str.w	r1, [r9], #4
 80086a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80086a6:	d8e2      	bhi.n	800866e <__multiply+0xb2>
 80086a8:	9a01      	ldr	r2, [sp, #4]
 80086aa:	f845 c002 	str.w	ip, [r5, r2]
 80086ae:	9a03      	ldr	r2, [sp, #12]
 80086b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80086b4:	3304      	adds	r3, #4
 80086b6:	f1b9 0f00 	cmp.w	r9, #0
 80086ba:	d020      	beq.n	80086fe <__multiply+0x142>
 80086bc:	6829      	ldr	r1, [r5, #0]
 80086be:	f104 0c14 	add.w	ip, r4, #20
 80086c2:	46ae      	mov	lr, r5
 80086c4:	f04f 0a00 	mov.w	sl, #0
 80086c8:	f8bc b000 	ldrh.w	fp, [ip]
 80086cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80086d0:	fb09 220b 	mla	r2, r9, fp, r2
 80086d4:	4492      	add	sl, r2
 80086d6:	b289      	uxth	r1, r1
 80086d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80086dc:	f84e 1b04 	str.w	r1, [lr], #4
 80086e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80086e4:	f8be 1000 	ldrh.w	r1, [lr]
 80086e8:	0c12      	lsrs	r2, r2, #16
 80086ea:	fb09 1102 	mla	r1, r9, r2, r1
 80086ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80086f2:	4567      	cmp	r7, ip
 80086f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80086f8:	d8e6      	bhi.n	80086c8 <__multiply+0x10c>
 80086fa:	9a01      	ldr	r2, [sp, #4]
 80086fc:	50a9      	str	r1, [r5, r2]
 80086fe:	3504      	adds	r5, #4
 8008700:	e79a      	b.n	8008638 <__multiply+0x7c>
 8008702:	3e01      	subs	r6, #1
 8008704:	e79c      	b.n	8008640 <__multiply+0x84>
 8008706:	bf00      	nop
 8008708:	08009793 	.word	0x08009793
 800870c:	08009804 	.word	0x08009804

08008710 <__pow5mult>:
 8008710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008714:	4615      	mov	r5, r2
 8008716:	f012 0203 	ands.w	r2, r2, #3
 800871a:	4606      	mov	r6, r0
 800871c:	460f      	mov	r7, r1
 800871e:	d007      	beq.n	8008730 <__pow5mult+0x20>
 8008720:	4c25      	ldr	r4, [pc, #148]	; (80087b8 <__pow5mult+0xa8>)
 8008722:	3a01      	subs	r2, #1
 8008724:	2300      	movs	r3, #0
 8008726:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800872a:	f7ff fe9b 	bl	8008464 <__multadd>
 800872e:	4607      	mov	r7, r0
 8008730:	10ad      	asrs	r5, r5, #2
 8008732:	d03d      	beq.n	80087b0 <__pow5mult+0xa0>
 8008734:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008736:	b97c      	cbnz	r4, 8008758 <__pow5mult+0x48>
 8008738:	2010      	movs	r0, #16
 800873a:	f7ff fe29 	bl	8008390 <malloc>
 800873e:	4602      	mov	r2, r0
 8008740:	6270      	str	r0, [r6, #36]	; 0x24
 8008742:	b928      	cbnz	r0, 8008750 <__pow5mult+0x40>
 8008744:	4b1d      	ldr	r3, [pc, #116]	; (80087bc <__pow5mult+0xac>)
 8008746:	481e      	ldr	r0, [pc, #120]	; (80087c0 <__pow5mult+0xb0>)
 8008748:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800874c:	f000 fd22 	bl	8009194 <__assert_func>
 8008750:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008754:	6004      	str	r4, [r0, #0]
 8008756:	60c4      	str	r4, [r0, #12]
 8008758:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800875c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008760:	b94c      	cbnz	r4, 8008776 <__pow5mult+0x66>
 8008762:	f240 2171 	movw	r1, #625	; 0x271
 8008766:	4630      	mov	r0, r6
 8008768:	f7ff ff12 	bl	8008590 <__i2b>
 800876c:	2300      	movs	r3, #0
 800876e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008772:	4604      	mov	r4, r0
 8008774:	6003      	str	r3, [r0, #0]
 8008776:	f04f 0900 	mov.w	r9, #0
 800877a:	07eb      	lsls	r3, r5, #31
 800877c:	d50a      	bpl.n	8008794 <__pow5mult+0x84>
 800877e:	4639      	mov	r1, r7
 8008780:	4622      	mov	r2, r4
 8008782:	4630      	mov	r0, r6
 8008784:	f7ff ff1a 	bl	80085bc <__multiply>
 8008788:	4639      	mov	r1, r7
 800878a:	4680      	mov	r8, r0
 800878c:	4630      	mov	r0, r6
 800878e:	f7ff fe47 	bl	8008420 <_Bfree>
 8008792:	4647      	mov	r7, r8
 8008794:	106d      	asrs	r5, r5, #1
 8008796:	d00b      	beq.n	80087b0 <__pow5mult+0xa0>
 8008798:	6820      	ldr	r0, [r4, #0]
 800879a:	b938      	cbnz	r0, 80087ac <__pow5mult+0x9c>
 800879c:	4622      	mov	r2, r4
 800879e:	4621      	mov	r1, r4
 80087a0:	4630      	mov	r0, r6
 80087a2:	f7ff ff0b 	bl	80085bc <__multiply>
 80087a6:	6020      	str	r0, [r4, #0]
 80087a8:	f8c0 9000 	str.w	r9, [r0]
 80087ac:	4604      	mov	r4, r0
 80087ae:	e7e4      	b.n	800877a <__pow5mult+0x6a>
 80087b0:	4638      	mov	r0, r7
 80087b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087b6:	bf00      	nop
 80087b8:	08009950 	.word	0x08009950
 80087bc:	08009721 	.word	0x08009721
 80087c0:	08009804 	.word	0x08009804

080087c4 <__lshift>:
 80087c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c8:	460c      	mov	r4, r1
 80087ca:	6849      	ldr	r1, [r1, #4]
 80087cc:	6923      	ldr	r3, [r4, #16]
 80087ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087d2:	68a3      	ldr	r3, [r4, #8]
 80087d4:	4607      	mov	r7, r0
 80087d6:	4691      	mov	r9, r2
 80087d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087dc:	f108 0601 	add.w	r6, r8, #1
 80087e0:	42b3      	cmp	r3, r6
 80087e2:	db0b      	blt.n	80087fc <__lshift+0x38>
 80087e4:	4638      	mov	r0, r7
 80087e6:	f7ff fddb 	bl	80083a0 <_Balloc>
 80087ea:	4605      	mov	r5, r0
 80087ec:	b948      	cbnz	r0, 8008802 <__lshift+0x3e>
 80087ee:	4602      	mov	r2, r0
 80087f0:	4b2a      	ldr	r3, [pc, #168]	; (800889c <__lshift+0xd8>)
 80087f2:	482b      	ldr	r0, [pc, #172]	; (80088a0 <__lshift+0xdc>)
 80087f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80087f8:	f000 fccc 	bl	8009194 <__assert_func>
 80087fc:	3101      	adds	r1, #1
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	e7ee      	b.n	80087e0 <__lshift+0x1c>
 8008802:	2300      	movs	r3, #0
 8008804:	f100 0114 	add.w	r1, r0, #20
 8008808:	f100 0210 	add.w	r2, r0, #16
 800880c:	4618      	mov	r0, r3
 800880e:	4553      	cmp	r3, sl
 8008810:	db37      	blt.n	8008882 <__lshift+0xbe>
 8008812:	6920      	ldr	r0, [r4, #16]
 8008814:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008818:	f104 0314 	add.w	r3, r4, #20
 800881c:	f019 091f 	ands.w	r9, r9, #31
 8008820:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008824:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008828:	d02f      	beq.n	800888a <__lshift+0xc6>
 800882a:	f1c9 0e20 	rsb	lr, r9, #32
 800882e:	468a      	mov	sl, r1
 8008830:	f04f 0c00 	mov.w	ip, #0
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	fa02 f209 	lsl.w	r2, r2, r9
 800883a:	ea42 020c 	orr.w	r2, r2, ip
 800883e:	f84a 2b04 	str.w	r2, [sl], #4
 8008842:	f853 2b04 	ldr.w	r2, [r3], #4
 8008846:	4298      	cmp	r0, r3
 8008848:	fa22 fc0e 	lsr.w	ip, r2, lr
 800884c:	d8f2      	bhi.n	8008834 <__lshift+0x70>
 800884e:	1b03      	subs	r3, r0, r4
 8008850:	3b15      	subs	r3, #21
 8008852:	f023 0303 	bic.w	r3, r3, #3
 8008856:	3304      	adds	r3, #4
 8008858:	f104 0215 	add.w	r2, r4, #21
 800885c:	4290      	cmp	r0, r2
 800885e:	bf38      	it	cc
 8008860:	2304      	movcc	r3, #4
 8008862:	f841 c003 	str.w	ip, [r1, r3]
 8008866:	f1bc 0f00 	cmp.w	ip, #0
 800886a:	d001      	beq.n	8008870 <__lshift+0xac>
 800886c:	f108 0602 	add.w	r6, r8, #2
 8008870:	3e01      	subs	r6, #1
 8008872:	4638      	mov	r0, r7
 8008874:	612e      	str	r6, [r5, #16]
 8008876:	4621      	mov	r1, r4
 8008878:	f7ff fdd2 	bl	8008420 <_Bfree>
 800887c:	4628      	mov	r0, r5
 800887e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008882:	f842 0f04 	str.w	r0, [r2, #4]!
 8008886:	3301      	adds	r3, #1
 8008888:	e7c1      	b.n	800880e <__lshift+0x4a>
 800888a:	3904      	subs	r1, #4
 800888c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008890:	f841 2f04 	str.w	r2, [r1, #4]!
 8008894:	4298      	cmp	r0, r3
 8008896:	d8f9      	bhi.n	800888c <__lshift+0xc8>
 8008898:	e7ea      	b.n	8008870 <__lshift+0xac>
 800889a:	bf00      	nop
 800889c:	08009793 	.word	0x08009793
 80088a0:	08009804 	.word	0x08009804

080088a4 <__mcmp>:
 80088a4:	b530      	push	{r4, r5, lr}
 80088a6:	6902      	ldr	r2, [r0, #16]
 80088a8:	690c      	ldr	r4, [r1, #16]
 80088aa:	1b12      	subs	r2, r2, r4
 80088ac:	d10e      	bne.n	80088cc <__mcmp+0x28>
 80088ae:	f100 0314 	add.w	r3, r0, #20
 80088b2:	3114      	adds	r1, #20
 80088b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80088b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80088bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80088c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80088c4:	42a5      	cmp	r5, r4
 80088c6:	d003      	beq.n	80088d0 <__mcmp+0x2c>
 80088c8:	d305      	bcc.n	80088d6 <__mcmp+0x32>
 80088ca:	2201      	movs	r2, #1
 80088cc:	4610      	mov	r0, r2
 80088ce:	bd30      	pop	{r4, r5, pc}
 80088d0:	4283      	cmp	r3, r0
 80088d2:	d3f3      	bcc.n	80088bc <__mcmp+0x18>
 80088d4:	e7fa      	b.n	80088cc <__mcmp+0x28>
 80088d6:	f04f 32ff 	mov.w	r2, #4294967295
 80088da:	e7f7      	b.n	80088cc <__mcmp+0x28>

080088dc <__mdiff>:
 80088dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e0:	460c      	mov	r4, r1
 80088e2:	4606      	mov	r6, r0
 80088e4:	4611      	mov	r1, r2
 80088e6:	4620      	mov	r0, r4
 80088e8:	4690      	mov	r8, r2
 80088ea:	f7ff ffdb 	bl	80088a4 <__mcmp>
 80088ee:	1e05      	subs	r5, r0, #0
 80088f0:	d110      	bne.n	8008914 <__mdiff+0x38>
 80088f2:	4629      	mov	r1, r5
 80088f4:	4630      	mov	r0, r6
 80088f6:	f7ff fd53 	bl	80083a0 <_Balloc>
 80088fa:	b930      	cbnz	r0, 800890a <__mdiff+0x2e>
 80088fc:	4b3a      	ldr	r3, [pc, #232]	; (80089e8 <__mdiff+0x10c>)
 80088fe:	4602      	mov	r2, r0
 8008900:	f240 2132 	movw	r1, #562	; 0x232
 8008904:	4839      	ldr	r0, [pc, #228]	; (80089ec <__mdiff+0x110>)
 8008906:	f000 fc45 	bl	8009194 <__assert_func>
 800890a:	2301      	movs	r3, #1
 800890c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008914:	bfa4      	itt	ge
 8008916:	4643      	movge	r3, r8
 8008918:	46a0      	movge	r8, r4
 800891a:	4630      	mov	r0, r6
 800891c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008920:	bfa6      	itte	ge
 8008922:	461c      	movge	r4, r3
 8008924:	2500      	movge	r5, #0
 8008926:	2501      	movlt	r5, #1
 8008928:	f7ff fd3a 	bl	80083a0 <_Balloc>
 800892c:	b920      	cbnz	r0, 8008938 <__mdiff+0x5c>
 800892e:	4b2e      	ldr	r3, [pc, #184]	; (80089e8 <__mdiff+0x10c>)
 8008930:	4602      	mov	r2, r0
 8008932:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008936:	e7e5      	b.n	8008904 <__mdiff+0x28>
 8008938:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800893c:	6926      	ldr	r6, [r4, #16]
 800893e:	60c5      	str	r5, [r0, #12]
 8008940:	f104 0914 	add.w	r9, r4, #20
 8008944:	f108 0514 	add.w	r5, r8, #20
 8008948:	f100 0e14 	add.w	lr, r0, #20
 800894c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008950:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008954:	f108 0210 	add.w	r2, r8, #16
 8008958:	46f2      	mov	sl, lr
 800895a:	2100      	movs	r1, #0
 800895c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008960:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008964:	fa1f f883 	uxth.w	r8, r3
 8008968:	fa11 f18b 	uxtah	r1, r1, fp
 800896c:	0c1b      	lsrs	r3, r3, #16
 800896e:	eba1 0808 	sub.w	r8, r1, r8
 8008972:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008976:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800897a:	fa1f f888 	uxth.w	r8, r8
 800897e:	1419      	asrs	r1, r3, #16
 8008980:	454e      	cmp	r6, r9
 8008982:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008986:	f84a 3b04 	str.w	r3, [sl], #4
 800898a:	d8e7      	bhi.n	800895c <__mdiff+0x80>
 800898c:	1b33      	subs	r3, r6, r4
 800898e:	3b15      	subs	r3, #21
 8008990:	f023 0303 	bic.w	r3, r3, #3
 8008994:	3304      	adds	r3, #4
 8008996:	3415      	adds	r4, #21
 8008998:	42a6      	cmp	r6, r4
 800899a:	bf38      	it	cc
 800899c:	2304      	movcc	r3, #4
 800899e:	441d      	add	r5, r3
 80089a0:	4473      	add	r3, lr
 80089a2:	469e      	mov	lr, r3
 80089a4:	462e      	mov	r6, r5
 80089a6:	4566      	cmp	r6, ip
 80089a8:	d30e      	bcc.n	80089c8 <__mdiff+0xec>
 80089aa:	f10c 0203 	add.w	r2, ip, #3
 80089ae:	1b52      	subs	r2, r2, r5
 80089b0:	f022 0203 	bic.w	r2, r2, #3
 80089b4:	3d03      	subs	r5, #3
 80089b6:	45ac      	cmp	ip, r5
 80089b8:	bf38      	it	cc
 80089ba:	2200      	movcc	r2, #0
 80089bc:	441a      	add	r2, r3
 80089be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80089c2:	b17b      	cbz	r3, 80089e4 <__mdiff+0x108>
 80089c4:	6107      	str	r7, [r0, #16]
 80089c6:	e7a3      	b.n	8008910 <__mdiff+0x34>
 80089c8:	f856 8b04 	ldr.w	r8, [r6], #4
 80089cc:	fa11 f288 	uxtah	r2, r1, r8
 80089d0:	1414      	asrs	r4, r2, #16
 80089d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80089d6:	b292      	uxth	r2, r2
 80089d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80089dc:	f84e 2b04 	str.w	r2, [lr], #4
 80089e0:	1421      	asrs	r1, r4, #16
 80089e2:	e7e0      	b.n	80089a6 <__mdiff+0xca>
 80089e4:	3f01      	subs	r7, #1
 80089e6:	e7ea      	b.n	80089be <__mdiff+0xe2>
 80089e8:	08009793 	.word	0x08009793
 80089ec:	08009804 	.word	0x08009804

080089f0 <__d2b>:
 80089f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089f4:	4689      	mov	r9, r1
 80089f6:	2101      	movs	r1, #1
 80089f8:	ec57 6b10 	vmov	r6, r7, d0
 80089fc:	4690      	mov	r8, r2
 80089fe:	f7ff fccf 	bl	80083a0 <_Balloc>
 8008a02:	4604      	mov	r4, r0
 8008a04:	b930      	cbnz	r0, 8008a14 <__d2b+0x24>
 8008a06:	4602      	mov	r2, r0
 8008a08:	4b25      	ldr	r3, [pc, #148]	; (8008aa0 <__d2b+0xb0>)
 8008a0a:	4826      	ldr	r0, [pc, #152]	; (8008aa4 <__d2b+0xb4>)
 8008a0c:	f240 310a 	movw	r1, #778	; 0x30a
 8008a10:	f000 fbc0 	bl	8009194 <__assert_func>
 8008a14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008a18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a1c:	bb35      	cbnz	r5, 8008a6c <__d2b+0x7c>
 8008a1e:	2e00      	cmp	r6, #0
 8008a20:	9301      	str	r3, [sp, #4]
 8008a22:	d028      	beq.n	8008a76 <__d2b+0x86>
 8008a24:	4668      	mov	r0, sp
 8008a26:	9600      	str	r6, [sp, #0]
 8008a28:	f7ff fd82 	bl	8008530 <__lo0bits>
 8008a2c:	9900      	ldr	r1, [sp, #0]
 8008a2e:	b300      	cbz	r0, 8008a72 <__d2b+0x82>
 8008a30:	9a01      	ldr	r2, [sp, #4]
 8008a32:	f1c0 0320 	rsb	r3, r0, #32
 8008a36:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3a:	430b      	orrs	r3, r1
 8008a3c:	40c2      	lsrs	r2, r0
 8008a3e:	6163      	str	r3, [r4, #20]
 8008a40:	9201      	str	r2, [sp, #4]
 8008a42:	9b01      	ldr	r3, [sp, #4]
 8008a44:	61a3      	str	r3, [r4, #24]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	bf14      	ite	ne
 8008a4a:	2202      	movne	r2, #2
 8008a4c:	2201      	moveq	r2, #1
 8008a4e:	6122      	str	r2, [r4, #16]
 8008a50:	b1d5      	cbz	r5, 8008a88 <__d2b+0x98>
 8008a52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a56:	4405      	add	r5, r0
 8008a58:	f8c9 5000 	str.w	r5, [r9]
 8008a5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a60:	f8c8 0000 	str.w	r0, [r8]
 8008a64:	4620      	mov	r0, r4
 8008a66:	b003      	add	sp, #12
 8008a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a70:	e7d5      	b.n	8008a1e <__d2b+0x2e>
 8008a72:	6161      	str	r1, [r4, #20]
 8008a74:	e7e5      	b.n	8008a42 <__d2b+0x52>
 8008a76:	a801      	add	r0, sp, #4
 8008a78:	f7ff fd5a 	bl	8008530 <__lo0bits>
 8008a7c:	9b01      	ldr	r3, [sp, #4]
 8008a7e:	6163      	str	r3, [r4, #20]
 8008a80:	2201      	movs	r2, #1
 8008a82:	6122      	str	r2, [r4, #16]
 8008a84:	3020      	adds	r0, #32
 8008a86:	e7e3      	b.n	8008a50 <__d2b+0x60>
 8008a88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a90:	f8c9 0000 	str.w	r0, [r9]
 8008a94:	6918      	ldr	r0, [r3, #16]
 8008a96:	f7ff fd2b 	bl	80084f0 <__hi0bits>
 8008a9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a9e:	e7df      	b.n	8008a60 <__d2b+0x70>
 8008aa0:	08009793 	.word	0x08009793
 8008aa4:	08009804 	.word	0x08009804

08008aa8 <_calloc_r>:
 8008aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008aaa:	fba1 2402 	umull	r2, r4, r1, r2
 8008aae:	b94c      	cbnz	r4, 8008ac4 <_calloc_r+0x1c>
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	9201      	str	r2, [sp, #4]
 8008ab4:	f000 f87a 	bl	8008bac <_malloc_r>
 8008ab8:	9a01      	ldr	r2, [sp, #4]
 8008aba:	4605      	mov	r5, r0
 8008abc:	b930      	cbnz	r0, 8008acc <_calloc_r+0x24>
 8008abe:	4628      	mov	r0, r5
 8008ac0:	b003      	add	sp, #12
 8008ac2:	bd30      	pop	{r4, r5, pc}
 8008ac4:	220c      	movs	r2, #12
 8008ac6:	6002      	str	r2, [r0, #0]
 8008ac8:	2500      	movs	r5, #0
 8008aca:	e7f8      	b.n	8008abe <_calloc_r+0x16>
 8008acc:	4621      	mov	r1, r4
 8008ace:	f7fe f85b 	bl	8006b88 <memset>
 8008ad2:	e7f4      	b.n	8008abe <_calloc_r+0x16>

08008ad4 <_free_r>:
 8008ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ad6:	2900      	cmp	r1, #0
 8008ad8:	d044      	beq.n	8008b64 <_free_r+0x90>
 8008ada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ade:	9001      	str	r0, [sp, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ae6:	bfb8      	it	lt
 8008ae8:	18e4      	addlt	r4, r4, r3
 8008aea:	f000 fcdf 	bl	80094ac <__malloc_lock>
 8008aee:	4a1e      	ldr	r2, [pc, #120]	; (8008b68 <_free_r+0x94>)
 8008af0:	9801      	ldr	r0, [sp, #4]
 8008af2:	6813      	ldr	r3, [r2, #0]
 8008af4:	b933      	cbnz	r3, 8008b04 <_free_r+0x30>
 8008af6:	6063      	str	r3, [r4, #4]
 8008af8:	6014      	str	r4, [r2, #0]
 8008afa:	b003      	add	sp, #12
 8008afc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b00:	f000 bcda 	b.w	80094b8 <__malloc_unlock>
 8008b04:	42a3      	cmp	r3, r4
 8008b06:	d908      	bls.n	8008b1a <_free_r+0x46>
 8008b08:	6825      	ldr	r5, [r4, #0]
 8008b0a:	1961      	adds	r1, r4, r5
 8008b0c:	428b      	cmp	r3, r1
 8008b0e:	bf01      	itttt	eq
 8008b10:	6819      	ldreq	r1, [r3, #0]
 8008b12:	685b      	ldreq	r3, [r3, #4]
 8008b14:	1949      	addeq	r1, r1, r5
 8008b16:	6021      	streq	r1, [r4, #0]
 8008b18:	e7ed      	b.n	8008af6 <_free_r+0x22>
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	b10b      	cbz	r3, 8008b24 <_free_r+0x50>
 8008b20:	42a3      	cmp	r3, r4
 8008b22:	d9fa      	bls.n	8008b1a <_free_r+0x46>
 8008b24:	6811      	ldr	r1, [r2, #0]
 8008b26:	1855      	adds	r5, r2, r1
 8008b28:	42a5      	cmp	r5, r4
 8008b2a:	d10b      	bne.n	8008b44 <_free_r+0x70>
 8008b2c:	6824      	ldr	r4, [r4, #0]
 8008b2e:	4421      	add	r1, r4
 8008b30:	1854      	adds	r4, r2, r1
 8008b32:	42a3      	cmp	r3, r4
 8008b34:	6011      	str	r1, [r2, #0]
 8008b36:	d1e0      	bne.n	8008afa <_free_r+0x26>
 8008b38:	681c      	ldr	r4, [r3, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	6053      	str	r3, [r2, #4]
 8008b3e:	4421      	add	r1, r4
 8008b40:	6011      	str	r1, [r2, #0]
 8008b42:	e7da      	b.n	8008afa <_free_r+0x26>
 8008b44:	d902      	bls.n	8008b4c <_free_r+0x78>
 8008b46:	230c      	movs	r3, #12
 8008b48:	6003      	str	r3, [r0, #0]
 8008b4a:	e7d6      	b.n	8008afa <_free_r+0x26>
 8008b4c:	6825      	ldr	r5, [r4, #0]
 8008b4e:	1961      	adds	r1, r4, r5
 8008b50:	428b      	cmp	r3, r1
 8008b52:	bf04      	itt	eq
 8008b54:	6819      	ldreq	r1, [r3, #0]
 8008b56:	685b      	ldreq	r3, [r3, #4]
 8008b58:	6063      	str	r3, [r4, #4]
 8008b5a:	bf04      	itt	eq
 8008b5c:	1949      	addeq	r1, r1, r5
 8008b5e:	6021      	streq	r1, [r4, #0]
 8008b60:	6054      	str	r4, [r2, #4]
 8008b62:	e7ca      	b.n	8008afa <_free_r+0x26>
 8008b64:	b003      	add	sp, #12
 8008b66:	bd30      	pop	{r4, r5, pc}
 8008b68:	2000056c 	.word	0x2000056c

08008b6c <sbrk_aligned>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	4e0e      	ldr	r6, [pc, #56]	; (8008ba8 <sbrk_aligned+0x3c>)
 8008b70:	460c      	mov	r4, r1
 8008b72:	6831      	ldr	r1, [r6, #0]
 8008b74:	4605      	mov	r5, r0
 8008b76:	b911      	cbnz	r1, 8008b7e <sbrk_aligned+0x12>
 8008b78:	f000 f9e6 	bl	8008f48 <_sbrk_r>
 8008b7c:	6030      	str	r0, [r6, #0]
 8008b7e:	4621      	mov	r1, r4
 8008b80:	4628      	mov	r0, r5
 8008b82:	f000 f9e1 	bl	8008f48 <_sbrk_r>
 8008b86:	1c43      	adds	r3, r0, #1
 8008b88:	d00a      	beq.n	8008ba0 <sbrk_aligned+0x34>
 8008b8a:	1cc4      	adds	r4, r0, #3
 8008b8c:	f024 0403 	bic.w	r4, r4, #3
 8008b90:	42a0      	cmp	r0, r4
 8008b92:	d007      	beq.n	8008ba4 <sbrk_aligned+0x38>
 8008b94:	1a21      	subs	r1, r4, r0
 8008b96:	4628      	mov	r0, r5
 8008b98:	f000 f9d6 	bl	8008f48 <_sbrk_r>
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	d101      	bne.n	8008ba4 <sbrk_aligned+0x38>
 8008ba0:	f04f 34ff 	mov.w	r4, #4294967295
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}
 8008ba8:	20000570 	.word	0x20000570

08008bac <_malloc_r>:
 8008bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb0:	1ccd      	adds	r5, r1, #3
 8008bb2:	f025 0503 	bic.w	r5, r5, #3
 8008bb6:	3508      	adds	r5, #8
 8008bb8:	2d0c      	cmp	r5, #12
 8008bba:	bf38      	it	cc
 8008bbc:	250c      	movcc	r5, #12
 8008bbe:	2d00      	cmp	r5, #0
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	db01      	blt.n	8008bc8 <_malloc_r+0x1c>
 8008bc4:	42a9      	cmp	r1, r5
 8008bc6:	d905      	bls.n	8008bd4 <_malloc_r+0x28>
 8008bc8:	230c      	movs	r3, #12
 8008bca:	603b      	str	r3, [r7, #0]
 8008bcc:	2600      	movs	r6, #0
 8008bce:	4630      	mov	r0, r6
 8008bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd4:	4e2e      	ldr	r6, [pc, #184]	; (8008c90 <_malloc_r+0xe4>)
 8008bd6:	f000 fc69 	bl	80094ac <__malloc_lock>
 8008bda:	6833      	ldr	r3, [r6, #0]
 8008bdc:	461c      	mov	r4, r3
 8008bde:	bb34      	cbnz	r4, 8008c2e <_malloc_r+0x82>
 8008be0:	4629      	mov	r1, r5
 8008be2:	4638      	mov	r0, r7
 8008be4:	f7ff ffc2 	bl	8008b6c <sbrk_aligned>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	4604      	mov	r4, r0
 8008bec:	d14d      	bne.n	8008c8a <_malloc_r+0xde>
 8008bee:	6834      	ldr	r4, [r6, #0]
 8008bf0:	4626      	mov	r6, r4
 8008bf2:	2e00      	cmp	r6, #0
 8008bf4:	d140      	bne.n	8008c78 <_malloc_r+0xcc>
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	eb04 0803 	add.w	r8, r4, r3
 8008c00:	f000 f9a2 	bl	8008f48 <_sbrk_r>
 8008c04:	4580      	cmp	r8, r0
 8008c06:	d13a      	bne.n	8008c7e <_malloc_r+0xd2>
 8008c08:	6821      	ldr	r1, [r4, #0]
 8008c0a:	3503      	adds	r5, #3
 8008c0c:	1a6d      	subs	r5, r5, r1
 8008c0e:	f025 0503 	bic.w	r5, r5, #3
 8008c12:	3508      	adds	r5, #8
 8008c14:	2d0c      	cmp	r5, #12
 8008c16:	bf38      	it	cc
 8008c18:	250c      	movcc	r5, #12
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	4638      	mov	r0, r7
 8008c1e:	f7ff ffa5 	bl	8008b6c <sbrk_aligned>
 8008c22:	3001      	adds	r0, #1
 8008c24:	d02b      	beq.n	8008c7e <_malloc_r+0xd2>
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	442b      	add	r3, r5
 8008c2a:	6023      	str	r3, [r4, #0]
 8008c2c:	e00e      	b.n	8008c4c <_malloc_r+0xa0>
 8008c2e:	6822      	ldr	r2, [r4, #0]
 8008c30:	1b52      	subs	r2, r2, r5
 8008c32:	d41e      	bmi.n	8008c72 <_malloc_r+0xc6>
 8008c34:	2a0b      	cmp	r2, #11
 8008c36:	d916      	bls.n	8008c66 <_malloc_r+0xba>
 8008c38:	1961      	adds	r1, r4, r5
 8008c3a:	42a3      	cmp	r3, r4
 8008c3c:	6025      	str	r5, [r4, #0]
 8008c3e:	bf18      	it	ne
 8008c40:	6059      	strne	r1, [r3, #4]
 8008c42:	6863      	ldr	r3, [r4, #4]
 8008c44:	bf08      	it	eq
 8008c46:	6031      	streq	r1, [r6, #0]
 8008c48:	5162      	str	r2, [r4, r5]
 8008c4a:	604b      	str	r3, [r1, #4]
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	f104 060b 	add.w	r6, r4, #11
 8008c52:	f000 fc31 	bl	80094b8 <__malloc_unlock>
 8008c56:	f026 0607 	bic.w	r6, r6, #7
 8008c5a:	1d23      	adds	r3, r4, #4
 8008c5c:	1af2      	subs	r2, r6, r3
 8008c5e:	d0b6      	beq.n	8008bce <_malloc_r+0x22>
 8008c60:	1b9b      	subs	r3, r3, r6
 8008c62:	50a3      	str	r3, [r4, r2]
 8008c64:	e7b3      	b.n	8008bce <_malloc_r+0x22>
 8008c66:	6862      	ldr	r2, [r4, #4]
 8008c68:	42a3      	cmp	r3, r4
 8008c6a:	bf0c      	ite	eq
 8008c6c:	6032      	streq	r2, [r6, #0]
 8008c6e:	605a      	strne	r2, [r3, #4]
 8008c70:	e7ec      	b.n	8008c4c <_malloc_r+0xa0>
 8008c72:	4623      	mov	r3, r4
 8008c74:	6864      	ldr	r4, [r4, #4]
 8008c76:	e7b2      	b.n	8008bde <_malloc_r+0x32>
 8008c78:	4634      	mov	r4, r6
 8008c7a:	6876      	ldr	r6, [r6, #4]
 8008c7c:	e7b9      	b.n	8008bf2 <_malloc_r+0x46>
 8008c7e:	230c      	movs	r3, #12
 8008c80:	603b      	str	r3, [r7, #0]
 8008c82:	4638      	mov	r0, r7
 8008c84:	f000 fc18 	bl	80094b8 <__malloc_unlock>
 8008c88:	e7a1      	b.n	8008bce <_malloc_r+0x22>
 8008c8a:	6025      	str	r5, [r4, #0]
 8008c8c:	e7de      	b.n	8008c4c <_malloc_r+0xa0>
 8008c8e:	bf00      	nop
 8008c90:	2000056c 	.word	0x2000056c

08008c94 <__sfputc_r>:
 8008c94:	6893      	ldr	r3, [r2, #8]
 8008c96:	3b01      	subs	r3, #1
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	b410      	push	{r4}
 8008c9c:	6093      	str	r3, [r2, #8]
 8008c9e:	da08      	bge.n	8008cb2 <__sfputc_r+0x1e>
 8008ca0:	6994      	ldr	r4, [r2, #24]
 8008ca2:	42a3      	cmp	r3, r4
 8008ca4:	db01      	blt.n	8008caa <__sfputc_r+0x16>
 8008ca6:	290a      	cmp	r1, #10
 8008ca8:	d103      	bne.n	8008cb2 <__sfputc_r+0x1e>
 8008caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cae:	f000 b99f 	b.w	8008ff0 <__swbuf_r>
 8008cb2:	6813      	ldr	r3, [r2, #0]
 8008cb4:	1c58      	adds	r0, r3, #1
 8008cb6:	6010      	str	r0, [r2, #0]
 8008cb8:	7019      	strb	r1, [r3, #0]
 8008cba:	4608      	mov	r0, r1
 8008cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <__sfputs_r>:
 8008cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc4:	4606      	mov	r6, r0
 8008cc6:	460f      	mov	r7, r1
 8008cc8:	4614      	mov	r4, r2
 8008cca:	18d5      	adds	r5, r2, r3
 8008ccc:	42ac      	cmp	r4, r5
 8008cce:	d101      	bne.n	8008cd4 <__sfputs_r+0x12>
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	e007      	b.n	8008ce4 <__sfputs_r+0x22>
 8008cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd8:	463a      	mov	r2, r7
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f7ff ffda 	bl	8008c94 <__sfputc_r>
 8008ce0:	1c43      	adds	r3, r0, #1
 8008ce2:	d1f3      	bne.n	8008ccc <__sfputs_r+0xa>
 8008ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ce8 <_vfiprintf_r>:
 8008ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cec:	460d      	mov	r5, r1
 8008cee:	b09d      	sub	sp, #116	; 0x74
 8008cf0:	4614      	mov	r4, r2
 8008cf2:	4698      	mov	r8, r3
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	b118      	cbz	r0, 8008d00 <_vfiprintf_r+0x18>
 8008cf8:	6983      	ldr	r3, [r0, #24]
 8008cfa:	b90b      	cbnz	r3, 8008d00 <_vfiprintf_r+0x18>
 8008cfc:	f7ff faa2 	bl	8008244 <__sinit>
 8008d00:	4b89      	ldr	r3, [pc, #548]	; (8008f28 <_vfiprintf_r+0x240>)
 8008d02:	429d      	cmp	r5, r3
 8008d04:	d11b      	bne.n	8008d3e <_vfiprintf_r+0x56>
 8008d06:	6875      	ldr	r5, [r6, #4]
 8008d08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d0a:	07d9      	lsls	r1, r3, #31
 8008d0c:	d405      	bmi.n	8008d1a <_vfiprintf_r+0x32>
 8008d0e:	89ab      	ldrh	r3, [r5, #12]
 8008d10:	059a      	lsls	r2, r3, #22
 8008d12:	d402      	bmi.n	8008d1a <_vfiprintf_r+0x32>
 8008d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d16:	f7ff fb38 	bl	800838a <__retarget_lock_acquire_recursive>
 8008d1a:	89ab      	ldrh	r3, [r5, #12]
 8008d1c:	071b      	lsls	r3, r3, #28
 8008d1e:	d501      	bpl.n	8008d24 <_vfiprintf_r+0x3c>
 8008d20:	692b      	ldr	r3, [r5, #16]
 8008d22:	b9eb      	cbnz	r3, 8008d60 <_vfiprintf_r+0x78>
 8008d24:	4629      	mov	r1, r5
 8008d26:	4630      	mov	r0, r6
 8008d28:	f000 f9c6 	bl	80090b8 <__swsetup_r>
 8008d2c:	b1c0      	cbz	r0, 8008d60 <_vfiprintf_r+0x78>
 8008d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d30:	07dc      	lsls	r4, r3, #31
 8008d32:	d50e      	bpl.n	8008d52 <_vfiprintf_r+0x6a>
 8008d34:	f04f 30ff 	mov.w	r0, #4294967295
 8008d38:	b01d      	add	sp, #116	; 0x74
 8008d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3e:	4b7b      	ldr	r3, [pc, #492]	; (8008f2c <_vfiprintf_r+0x244>)
 8008d40:	429d      	cmp	r5, r3
 8008d42:	d101      	bne.n	8008d48 <_vfiprintf_r+0x60>
 8008d44:	68b5      	ldr	r5, [r6, #8]
 8008d46:	e7df      	b.n	8008d08 <_vfiprintf_r+0x20>
 8008d48:	4b79      	ldr	r3, [pc, #484]	; (8008f30 <_vfiprintf_r+0x248>)
 8008d4a:	429d      	cmp	r5, r3
 8008d4c:	bf08      	it	eq
 8008d4e:	68f5      	ldreq	r5, [r6, #12]
 8008d50:	e7da      	b.n	8008d08 <_vfiprintf_r+0x20>
 8008d52:	89ab      	ldrh	r3, [r5, #12]
 8008d54:	0598      	lsls	r0, r3, #22
 8008d56:	d4ed      	bmi.n	8008d34 <_vfiprintf_r+0x4c>
 8008d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d5a:	f7ff fb17 	bl	800838c <__retarget_lock_release_recursive>
 8008d5e:	e7e9      	b.n	8008d34 <_vfiprintf_r+0x4c>
 8008d60:	2300      	movs	r3, #0
 8008d62:	9309      	str	r3, [sp, #36]	; 0x24
 8008d64:	2320      	movs	r3, #32
 8008d66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d6e:	2330      	movs	r3, #48	; 0x30
 8008d70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f34 <_vfiprintf_r+0x24c>
 8008d74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d78:	f04f 0901 	mov.w	r9, #1
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	469a      	mov	sl, r3
 8008d80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d84:	b10a      	cbz	r2, 8008d8a <_vfiprintf_r+0xa2>
 8008d86:	2a25      	cmp	r2, #37	; 0x25
 8008d88:	d1f9      	bne.n	8008d7e <_vfiprintf_r+0x96>
 8008d8a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d8e:	d00b      	beq.n	8008da8 <_vfiprintf_r+0xc0>
 8008d90:	465b      	mov	r3, fp
 8008d92:	4622      	mov	r2, r4
 8008d94:	4629      	mov	r1, r5
 8008d96:	4630      	mov	r0, r6
 8008d98:	f7ff ff93 	bl	8008cc2 <__sfputs_r>
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	f000 80aa 	beq.w	8008ef6 <_vfiprintf_r+0x20e>
 8008da2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008da4:	445a      	add	r2, fp
 8008da6:	9209      	str	r2, [sp, #36]	; 0x24
 8008da8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 80a2 	beq.w	8008ef6 <_vfiprintf_r+0x20e>
 8008db2:	2300      	movs	r3, #0
 8008db4:	f04f 32ff 	mov.w	r2, #4294967295
 8008db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dbc:	f10a 0a01 	add.w	sl, sl, #1
 8008dc0:	9304      	str	r3, [sp, #16]
 8008dc2:	9307      	str	r3, [sp, #28]
 8008dc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dc8:	931a      	str	r3, [sp, #104]	; 0x68
 8008dca:	4654      	mov	r4, sl
 8008dcc:	2205      	movs	r2, #5
 8008dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd2:	4858      	ldr	r0, [pc, #352]	; (8008f34 <_vfiprintf_r+0x24c>)
 8008dd4:	f7f7 fe1c 	bl	8000a10 <memchr>
 8008dd8:	9a04      	ldr	r2, [sp, #16]
 8008dda:	b9d8      	cbnz	r0, 8008e14 <_vfiprintf_r+0x12c>
 8008ddc:	06d1      	lsls	r1, r2, #27
 8008dde:	bf44      	itt	mi
 8008de0:	2320      	movmi	r3, #32
 8008de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008de6:	0713      	lsls	r3, r2, #28
 8008de8:	bf44      	itt	mi
 8008dea:	232b      	movmi	r3, #43	; 0x2b
 8008dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008df0:	f89a 3000 	ldrb.w	r3, [sl]
 8008df4:	2b2a      	cmp	r3, #42	; 0x2a
 8008df6:	d015      	beq.n	8008e24 <_vfiprintf_r+0x13c>
 8008df8:	9a07      	ldr	r2, [sp, #28]
 8008dfa:	4654      	mov	r4, sl
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	f04f 0c0a 	mov.w	ip, #10
 8008e02:	4621      	mov	r1, r4
 8008e04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e08:	3b30      	subs	r3, #48	; 0x30
 8008e0a:	2b09      	cmp	r3, #9
 8008e0c:	d94e      	bls.n	8008eac <_vfiprintf_r+0x1c4>
 8008e0e:	b1b0      	cbz	r0, 8008e3e <_vfiprintf_r+0x156>
 8008e10:	9207      	str	r2, [sp, #28]
 8008e12:	e014      	b.n	8008e3e <_vfiprintf_r+0x156>
 8008e14:	eba0 0308 	sub.w	r3, r0, r8
 8008e18:	fa09 f303 	lsl.w	r3, r9, r3
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	9304      	str	r3, [sp, #16]
 8008e20:	46a2      	mov	sl, r4
 8008e22:	e7d2      	b.n	8008dca <_vfiprintf_r+0xe2>
 8008e24:	9b03      	ldr	r3, [sp, #12]
 8008e26:	1d19      	adds	r1, r3, #4
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	9103      	str	r1, [sp, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	bfbb      	ittet	lt
 8008e30:	425b      	neglt	r3, r3
 8008e32:	f042 0202 	orrlt.w	r2, r2, #2
 8008e36:	9307      	strge	r3, [sp, #28]
 8008e38:	9307      	strlt	r3, [sp, #28]
 8008e3a:	bfb8      	it	lt
 8008e3c:	9204      	strlt	r2, [sp, #16]
 8008e3e:	7823      	ldrb	r3, [r4, #0]
 8008e40:	2b2e      	cmp	r3, #46	; 0x2e
 8008e42:	d10c      	bne.n	8008e5e <_vfiprintf_r+0x176>
 8008e44:	7863      	ldrb	r3, [r4, #1]
 8008e46:	2b2a      	cmp	r3, #42	; 0x2a
 8008e48:	d135      	bne.n	8008eb6 <_vfiprintf_r+0x1ce>
 8008e4a:	9b03      	ldr	r3, [sp, #12]
 8008e4c:	1d1a      	adds	r2, r3, #4
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	9203      	str	r2, [sp, #12]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	bfb8      	it	lt
 8008e56:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e5a:	3402      	adds	r4, #2
 8008e5c:	9305      	str	r3, [sp, #20]
 8008e5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f44 <_vfiprintf_r+0x25c>
 8008e62:	7821      	ldrb	r1, [r4, #0]
 8008e64:	2203      	movs	r2, #3
 8008e66:	4650      	mov	r0, sl
 8008e68:	f7f7 fdd2 	bl	8000a10 <memchr>
 8008e6c:	b140      	cbz	r0, 8008e80 <_vfiprintf_r+0x198>
 8008e6e:	2340      	movs	r3, #64	; 0x40
 8008e70:	eba0 000a 	sub.w	r0, r0, sl
 8008e74:	fa03 f000 	lsl.w	r0, r3, r0
 8008e78:	9b04      	ldr	r3, [sp, #16]
 8008e7a:	4303      	orrs	r3, r0
 8008e7c:	3401      	adds	r4, #1
 8008e7e:	9304      	str	r3, [sp, #16]
 8008e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e84:	482c      	ldr	r0, [pc, #176]	; (8008f38 <_vfiprintf_r+0x250>)
 8008e86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e8a:	2206      	movs	r2, #6
 8008e8c:	f7f7 fdc0 	bl	8000a10 <memchr>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d03f      	beq.n	8008f14 <_vfiprintf_r+0x22c>
 8008e94:	4b29      	ldr	r3, [pc, #164]	; (8008f3c <_vfiprintf_r+0x254>)
 8008e96:	bb1b      	cbnz	r3, 8008ee0 <_vfiprintf_r+0x1f8>
 8008e98:	9b03      	ldr	r3, [sp, #12]
 8008e9a:	3307      	adds	r3, #7
 8008e9c:	f023 0307 	bic.w	r3, r3, #7
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	9303      	str	r3, [sp, #12]
 8008ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea6:	443b      	add	r3, r7
 8008ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8008eaa:	e767      	b.n	8008d7c <_vfiprintf_r+0x94>
 8008eac:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eb0:	460c      	mov	r4, r1
 8008eb2:	2001      	movs	r0, #1
 8008eb4:	e7a5      	b.n	8008e02 <_vfiprintf_r+0x11a>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	3401      	adds	r4, #1
 8008eba:	9305      	str	r3, [sp, #20]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	f04f 0c0a 	mov.w	ip, #10
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ec8:	3a30      	subs	r2, #48	; 0x30
 8008eca:	2a09      	cmp	r2, #9
 8008ecc:	d903      	bls.n	8008ed6 <_vfiprintf_r+0x1ee>
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d0c5      	beq.n	8008e5e <_vfiprintf_r+0x176>
 8008ed2:	9105      	str	r1, [sp, #20]
 8008ed4:	e7c3      	b.n	8008e5e <_vfiprintf_r+0x176>
 8008ed6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eda:	4604      	mov	r4, r0
 8008edc:	2301      	movs	r3, #1
 8008ede:	e7f0      	b.n	8008ec2 <_vfiprintf_r+0x1da>
 8008ee0:	ab03      	add	r3, sp, #12
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	462a      	mov	r2, r5
 8008ee6:	4b16      	ldr	r3, [pc, #88]	; (8008f40 <_vfiprintf_r+0x258>)
 8008ee8:	a904      	add	r1, sp, #16
 8008eea:	4630      	mov	r0, r6
 8008eec:	f7fd fef4 	bl	8006cd8 <_printf_float>
 8008ef0:	4607      	mov	r7, r0
 8008ef2:	1c78      	adds	r0, r7, #1
 8008ef4:	d1d6      	bne.n	8008ea4 <_vfiprintf_r+0x1bc>
 8008ef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ef8:	07d9      	lsls	r1, r3, #31
 8008efa:	d405      	bmi.n	8008f08 <_vfiprintf_r+0x220>
 8008efc:	89ab      	ldrh	r3, [r5, #12]
 8008efe:	059a      	lsls	r2, r3, #22
 8008f00:	d402      	bmi.n	8008f08 <_vfiprintf_r+0x220>
 8008f02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f04:	f7ff fa42 	bl	800838c <__retarget_lock_release_recursive>
 8008f08:	89ab      	ldrh	r3, [r5, #12]
 8008f0a:	065b      	lsls	r3, r3, #25
 8008f0c:	f53f af12 	bmi.w	8008d34 <_vfiprintf_r+0x4c>
 8008f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f12:	e711      	b.n	8008d38 <_vfiprintf_r+0x50>
 8008f14:	ab03      	add	r3, sp, #12
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	462a      	mov	r2, r5
 8008f1a:	4b09      	ldr	r3, [pc, #36]	; (8008f40 <_vfiprintf_r+0x258>)
 8008f1c:	a904      	add	r1, sp, #16
 8008f1e:	4630      	mov	r0, r6
 8008f20:	f7fe f97e 	bl	8007220 <_printf_i>
 8008f24:	e7e4      	b.n	8008ef0 <_vfiprintf_r+0x208>
 8008f26:	bf00      	nop
 8008f28:	080097c4 	.word	0x080097c4
 8008f2c:	080097e4 	.word	0x080097e4
 8008f30:	080097a4 	.word	0x080097a4
 8008f34:	0800995c 	.word	0x0800995c
 8008f38:	08009966 	.word	0x08009966
 8008f3c:	08006cd9 	.word	0x08006cd9
 8008f40:	08008cc3 	.word	0x08008cc3
 8008f44:	08009962 	.word	0x08009962

08008f48 <_sbrk_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	4d06      	ldr	r5, [pc, #24]	; (8008f64 <_sbrk_r+0x1c>)
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	4604      	mov	r4, r0
 8008f50:	4608      	mov	r0, r1
 8008f52:	602b      	str	r3, [r5, #0]
 8008f54:	f7f9 fec0 	bl	8002cd8 <_sbrk>
 8008f58:	1c43      	adds	r3, r0, #1
 8008f5a:	d102      	bne.n	8008f62 <_sbrk_r+0x1a>
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	b103      	cbz	r3, 8008f62 <_sbrk_r+0x1a>
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	bd38      	pop	{r3, r4, r5, pc}
 8008f64:	20000574 	.word	0x20000574

08008f68 <__sread>:
 8008f68:	b510      	push	{r4, lr}
 8008f6a:	460c      	mov	r4, r1
 8008f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f70:	f000 faa8 	bl	80094c4 <_read_r>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	bfab      	itete	ge
 8008f78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8008f7c:	181b      	addge	r3, r3, r0
 8008f7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f82:	bfac      	ite	ge
 8008f84:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f86:	81a3      	strhlt	r3, [r4, #12]
 8008f88:	bd10      	pop	{r4, pc}

08008f8a <__swrite>:
 8008f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8e:	461f      	mov	r7, r3
 8008f90:	898b      	ldrh	r3, [r1, #12]
 8008f92:	05db      	lsls	r3, r3, #23
 8008f94:	4605      	mov	r5, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	4616      	mov	r6, r2
 8008f9a:	d505      	bpl.n	8008fa8 <__swrite+0x1e>
 8008f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f000 f9f8 	bl	8009398 <_lseek_r>
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fb2:	81a3      	strh	r3, [r4, #12]
 8008fb4:	4632      	mov	r2, r6
 8008fb6:	463b      	mov	r3, r7
 8008fb8:	4628      	mov	r0, r5
 8008fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fbe:	f000 b869 	b.w	8009094 <_write_r>

08008fc2 <__sseek>:
 8008fc2:	b510      	push	{r4, lr}
 8008fc4:	460c      	mov	r4, r1
 8008fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fca:	f000 f9e5 	bl	8009398 <_lseek_r>
 8008fce:	1c43      	adds	r3, r0, #1
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	bf15      	itete	ne
 8008fd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fde:	81a3      	strheq	r3, [r4, #12]
 8008fe0:	bf18      	it	ne
 8008fe2:	81a3      	strhne	r3, [r4, #12]
 8008fe4:	bd10      	pop	{r4, pc}

08008fe6 <__sclose>:
 8008fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fea:	f000 b8f1 	b.w	80091d0 <_close_r>
	...

08008ff0 <__swbuf_r>:
 8008ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff2:	460e      	mov	r6, r1
 8008ff4:	4614      	mov	r4, r2
 8008ff6:	4605      	mov	r5, r0
 8008ff8:	b118      	cbz	r0, 8009002 <__swbuf_r+0x12>
 8008ffa:	6983      	ldr	r3, [r0, #24]
 8008ffc:	b90b      	cbnz	r3, 8009002 <__swbuf_r+0x12>
 8008ffe:	f7ff f921 	bl	8008244 <__sinit>
 8009002:	4b21      	ldr	r3, [pc, #132]	; (8009088 <__swbuf_r+0x98>)
 8009004:	429c      	cmp	r4, r3
 8009006:	d12b      	bne.n	8009060 <__swbuf_r+0x70>
 8009008:	686c      	ldr	r4, [r5, #4]
 800900a:	69a3      	ldr	r3, [r4, #24]
 800900c:	60a3      	str	r3, [r4, #8]
 800900e:	89a3      	ldrh	r3, [r4, #12]
 8009010:	071a      	lsls	r2, r3, #28
 8009012:	d52f      	bpl.n	8009074 <__swbuf_r+0x84>
 8009014:	6923      	ldr	r3, [r4, #16]
 8009016:	b36b      	cbz	r3, 8009074 <__swbuf_r+0x84>
 8009018:	6923      	ldr	r3, [r4, #16]
 800901a:	6820      	ldr	r0, [r4, #0]
 800901c:	1ac0      	subs	r0, r0, r3
 800901e:	6963      	ldr	r3, [r4, #20]
 8009020:	b2f6      	uxtb	r6, r6
 8009022:	4283      	cmp	r3, r0
 8009024:	4637      	mov	r7, r6
 8009026:	dc04      	bgt.n	8009032 <__swbuf_r+0x42>
 8009028:	4621      	mov	r1, r4
 800902a:	4628      	mov	r0, r5
 800902c:	f000 f966 	bl	80092fc <_fflush_r>
 8009030:	bb30      	cbnz	r0, 8009080 <__swbuf_r+0x90>
 8009032:	68a3      	ldr	r3, [r4, #8]
 8009034:	3b01      	subs	r3, #1
 8009036:	60a3      	str	r3, [r4, #8]
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	6022      	str	r2, [r4, #0]
 800903e:	701e      	strb	r6, [r3, #0]
 8009040:	6963      	ldr	r3, [r4, #20]
 8009042:	3001      	adds	r0, #1
 8009044:	4283      	cmp	r3, r0
 8009046:	d004      	beq.n	8009052 <__swbuf_r+0x62>
 8009048:	89a3      	ldrh	r3, [r4, #12]
 800904a:	07db      	lsls	r3, r3, #31
 800904c:	d506      	bpl.n	800905c <__swbuf_r+0x6c>
 800904e:	2e0a      	cmp	r6, #10
 8009050:	d104      	bne.n	800905c <__swbuf_r+0x6c>
 8009052:	4621      	mov	r1, r4
 8009054:	4628      	mov	r0, r5
 8009056:	f000 f951 	bl	80092fc <_fflush_r>
 800905a:	b988      	cbnz	r0, 8009080 <__swbuf_r+0x90>
 800905c:	4638      	mov	r0, r7
 800905e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009060:	4b0a      	ldr	r3, [pc, #40]	; (800908c <__swbuf_r+0x9c>)
 8009062:	429c      	cmp	r4, r3
 8009064:	d101      	bne.n	800906a <__swbuf_r+0x7a>
 8009066:	68ac      	ldr	r4, [r5, #8]
 8009068:	e7cf      	b.n	800900a <__swbuf_r+0x1a>
 800906a:	4b09      	ldr	r3, [pc, #36]	; (8009090 <__swbuf_r+0xa0>)
 800906c:	429c      	cmp	r4, r3
 800906e:	bf08      	it	eq
 8009070:	68ec      	ldreq	r4, [r5, #12]
 8009072:	e7ca      	b.n	800900a <__swbuf_r+0x1a>
 8009074:	4621      	mov	r1, r4
 8009076:	4628      	mov	r0, r5
 8009078:	f000 f81e 	bl	80090b8 <__swsetup_r>
 800907c:	2800      	cmp	r0, #0
 800907e:	d0cb      	beq.n	8009018 <__swbuf_r+0x28>
 8009080:	f04f 37ff 	mov.w	r7, #4294967295
 8009084:	e7ea      	b.n	800905c <__swbuf_r+0x6c>
 8009086:	bf00      	nop
 8009088:	080097c4 	.word	0x080097c4
 800908c:	080097e4 	.word	0x080097e4
 8009090:	080097a4 	.word	0x080097a4

08009094 <_write_r>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	4d07      	ldr	r5, [pc, #28]	; (80090b4 <_write_r+0x20>)
 8009098:	4604      	mov	r4, r0
 800909a:	4608      	mov	r0, r1
 800909c:	4611      	mov	r1, r2
 800909e:	2200      	movs	r2, #0
 80090a0:	602a      	str	r2, [r5, #0]
 80090a2:	461a      	mov	r2, r3
 80090a4:	f7f9 fdc7 	bl	8002c36 <_write>
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	d102      	bne.n	80090b2 <_write_r+0x1e>
 80090ac:	682b      	ldr	r3, [r5, #0]
 80090ae:	b103      	cbz	r3, 80090b2 <_write_r+0x1e>
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	bd38      	pop	{r3, r4, r5, pc}
 80090b4:	20000574 	.word	0x20000574

080090b8 <__swsetup_r>:
 80090b8:	4b32      	ldr	r3, [pc, #200]	; (8009184 <__swsetup_r+0xcc>)
 80090ba:	b570      	push	{r4, r5, r6, lr}
 80090bc:	681d      	ldr	r5, [r3, #0]
 80090be:	4606      	mov	r6, r0
 80090c0:	460c      	mov	r4, r1
 80090c2:	b125      	cbz	r5, 80090ce <__swsetup_r+0x16>
 80090c4:	69ab      	ldr	r3, [r5, #24]
 80090c6:	b913      	cbnz	r3, 80090ce <__swsetup_r+0x16>
 80090c8:	4628      	mov	r0, r5
 80090ca:	f7ff f8bb 	bl	8008244 <__sinit>
 80090ce:	4b2e      	ldr	r3, [pc, #184]	; (8009188 <__swsetup_r+0xd0>)
 80090d0:	429c      	cmp	r4, r3
 80090d2:	d10f      	bne.n	80090f4 <__swsetup_r+0x3c>
 80090d4:	686c      	ldr	r4, [r5, #4]
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090dc:	0719      	lsls	r1, r3, #28
 80090de:	d42c      	bmi.n	800913a <__swsetup_r+0x82>
 80090e0:	06dd      	lsls	r5, r3, #27
 80090e2:	d411      	bmi.n	8009108 <__swsetup_r+0x50>
 80090e4:	2309      	movs	r3, #9
 80090e6:	6033      	str	r3, [r6, #0]
 80090e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090ec:	81a3      	strh	r3, [r4, #12]
 80090ee:	f04f 30ff 	mov.w	r0, #4294967295
 80090f2:	e03e      	b.n	8009172 <__swsetup_r+0xba>
 80090f4:	4b25      	ldr	r3, [pc, #148]	; (800918c <__swsetup_r+0xd4>)
 80090f6:	429c      	cmp	r4, r3
 80090f8:	d101      	bne.n	80090fe <__swsetup_r+0x46>
 80090fa:	68ac      	ldr	r4, [r5, #8]
 80090fc:	e7eb      	b.n	80090d6 <__swsetup_r+0x1e>
 80090fe:	4b24      	ldr	r3, [pc, #144]	; (8009190 <__swsetup_r+0xd8>)
 8009100:	429c      	cmp	r4, r3
 8009102:	bf08      	it	eq
 8009104:	68ec      	ldreq	r4, [r5, #12]
 8009106:	e7e6      	b.n	80090d6 <__swsetup_r+0x1e>
 8009108:	0758      	lsls	r0, r3, #29
 800910a:	d512      	bpl.n	8009132 <__swsetup_r+0x7a>
 800910c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800910e:	b141      	cbz	r1, 8009122 <__swsetup_r+0x6a>
 8009110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009114:	4299      	cmp	r1, r3
 8009116:	d002      	beq.n	800911e <__swsetup_r+0x66>
 8009118:	4630      	mov	r0, r6
 800911a:	f7ff fcdb 	bl	8008ad4 <_free_r>
 800911e:	2300      	movs	r3, #0
 8009120:	6363      	str	r3, [r4, #52]	; 0x34
 8009122:	89a3      	ldrh	r3, [r4, #12]
 8009124:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009128:	81a3      	strh	r3, [r4, #12]
 800912a:	2300      	movs	r3, #0
 800912c:	6063      	str	r3, [r4, #4]
 800912e:	6923      	ldr	r3, [r4, #16]
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	f043 0308 	orr.w	r3, r3, #8
 8009138:	81a3      	strh	r3, [r4, #12]
 800913a:	6923      	ldr	r3, [r4, #16]
 800913c:	b94b      	cbnz	r3, 8009152 <__swsetup_r+0x9a>
 800913e:	89a3      	ldrh	r3, [r4, #12]
 8009140:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009148:	d003      	beq.n	8009152 <__swsetup_r+0x9a>
 800914a:	4621      	mov	r1, r4
 800914c:	4630      	mov	r0, r6
 800914e:	f000 f95b 	bl	8009408 <__smakebuf_r>
 8009152:	89a0      	ldrh	r0, [r4, #12]
 8009154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009158:	f010 0301 	ands.w	r3, r0, #1
 800915c:	d00a      	beq.n	8009174 <__swsetup_r+0xbc>
 800915e:	2300      	movs	r3, #0
 8009160:	60a3      	str	r3, [r4, #8]
 8009162:	6963      	ldr	r3, [r4, #20]
 8009164:	425b      	negs	r3, r3
 8009166:	61a3      	str	r3, [r4, #24]
 8009168:	6923      	ldr	r3, [r4, #16]
 800916a:	b943      	cbnz	r3, 800917e <__swsetup_r+0xc6>
 800916c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009170:	d1ba      	bne.n	80090e8 <__swsetup_r+0x30>
 8009172:	bd70      	pop	{r4, r5, r6, pc}
 8009174:	0781      	lsls	r1, r0, #30
 8009176:	bf58      	it	pl
 8009178:	6963      	ldrpl	r3, [r4, #20]
 800917a:	60a3      	str	r3, [r4, #8]
 800917c:	e7f4      	b.n	8009168 <__swsetup_r+0xb0>
 800917e:	2000      	movs	r0, #0
 8009180:	e7f7      	b.n	8009172 <__swsetup_r+0xba>
 8009182:	bf00      	nop
 8009184:	20000044 	.word	0x20000044
 8009188:	080097c4 	.word	0x080097c4
 800918c:	080097e4 	.word	0x080097e4
 8009190:	080097a4 	.word	0x080097a4

08009194 <__assert_func>:
 8009194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009196:	4614      	mov	r4, r2
 8009198:	461a      	mov	r2, r3
 800919a:	4b09      	ldr	r3, [pc, #36]	; (80091c0 <__assert_func+0x2c>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4605      	mov	r5, r0
 80091a0:	68d8      	ldr	r0, [r3, #12]
 80091a2:	b14c      	cbz	r4, 80091b8 <__assert_func+0x24>
 80091a4:	4b07      	ldr	r3, [pc, #28]	; (80091c4 <__assert_func+0x30>)
 80091a6:	9100      	str	r1, [sp, #0]
 80091a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091ac:	4906      	ldr	r1, [pc, #24]	; (80091c8 <__assert_func+0x34>)
 80091ae:	462b      	mov	r3, r5
 80091b0:	f000 f8e0 	bl	8009374 <fiprintf>
 80091b4:	f000 f9a5 	bl	8009502 <abort>
 80091b8:	4b04      	ldr	r3, [pc, #16]	; (80091cc <__assert_func+0x38>)
 80091ba:	461c      	mov	r4, r3
 80091bc:	e7f3      	b.n	80091a6 <__assert_func+0x12>
 80091be:	bf00      	nop
 80091c0:	20000044 	.word	0x20000044
 80091c4:	0800996d 	.word	0x0800996d
 80091c8:	0800997a 	.word	0x0800997a
 80091cc:	080099a8 	.word	0x080099a8

080091d0 <_close_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4d06      	ldr	r5, [pc, #24]	; (80091ec <_close_r+0x1c>)
 80091d4:	2300      	movs	r3, #0
 80091d6:	4604      	mov	r4, r0
 80091d8:	4608      	mov	r0, r1
 80091da:	602b      	str	r3, [r5, #0]
 80091dc:	f7f9 fd47 	bl	8002c6e <_close>
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	d102      	bne.n	80091ea <_close_r+0x1a>
 80091e4:	682b      	ldr	r3, [r5, #0]
 80091e6:	b103      	cbz	r3, 80091ea <_close_r+0x1a>
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	bd38      	pop	{r3, r4, r5, pc}
 80091ec:	20000574 	.word	0x20000574

080091f0 <__sflush_r>:
 80091f0:	898a      	ldrh	r2, [r1, #12]
 80091f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091f6:	4605      	mov	r5, r0
 80091f8:	0710      	lsls	r0, r2, #28
 80091fa:	460c      	mov	r4, r1
 80091fc:	d458      	bmi.n	80092b0 <__sflush_r+0xc0>
 80091fe:	684b      	ldr	r3, [r1, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	dc05      	bgt.n	8009210 <__sflush_r+0x20>
 8009204:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009206:	2b00      	cmp	r3, #0
 8009208:	dc02      	bgt.n	8009210 <__sflush_r+0x20>
 800920a:	2000      	movs	r0, #0
 800920c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009210:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009212:	2e00      	cmp	r6, #0
 8009214:	d0f9      	beq.n	800920a <__sflush_r+0x1a>
 8009216:	2300      	movs	r3, #0
 8009218:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800921c:	682f      	ldr	r7, [r5, #0]
 800921e:	602b      	str	r3, [r5, #0]
 8009220:	d032      	beq.n	8009288 <__sflush_r+0x98>
 8009222:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009224:	89a3      	ldrh	r3, [r4, #12]
 8009226:	075a      	lsls	r2, r3, #29
 8009228:	d505      	bpl.n	8009236 <__sflush_r+0x46>
 800922a:	6863      	ldr	r3, [r4, #4]
 800922c:	1ac0      	subs	r0, r0, r3
 800922e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009230:	b10b      	cbz	r3, 8009236 <__sflush_r+0x46>
 8009232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009234:	1ac0      	subs	r0, r0, r3
 8009236:	2300      	movs	r3, #0
 8009238:	4602      	mov	r2, r0
 800923a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800923c:	6a21      	ldr	r1, [r4, #32]
 800923e:	4628      	mov	r0, r5
 8009240:	47b0      	blx	r6
 8009242:	1c43      	adds	r3, r0, #1
 8009244:	89a3      	ldrh	r3, [r4, #12]
 8009246:	d106      	bne.n	8009256 <__sflush_r+0x66>
 8009248:	6829      	ldr	r1, [r5, #0]
 800924a:	291d      	cmp	r1, #29
 800924c:	d82c      	bhi.n	80092a8 <__sflush_r+0xb8>
 800924e:	4a2a      	ldr	r2, [pc, #168]	; (80092f8 <__sflush_r+0x108>)
 8009250:	40ca      	lsrs	r2, r1
 8009252:	07d6      	lsls	r6, r2, #31
 8009254:	d528      	bpl.n	80092a8 <__sflush_r+0xb8>
 8009256:	2200      	movs	r2, #0
 8009258:	6062      	str	r2, [r4, #4]
 800925a:	04d9      	lsls	r1, r3, #19
 800925c:	6922      	ldr	r2, [r4, #16]
 800925e:	6022      	str	r2, [r4, #0]
 8009260:	d504      	bpl.n	800926c <__sflush_r+0x7c>
 8009262:	1c42      	adds	r2, r0, #1
 8009264:	d101      	bne.n	800926a <__sflush_r+0x7a>
 8009266:	682b      	ldr	r3, [r5, #0]
 8009268:	b903      	cbnz	r3, 800926c <__sflush_r+0x7c>
 800926a:	6560      	str	r0, [r4, #84]	; 0x54
 800926c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800926e:	602f      	str	r7, [r5, #0]
 8009270:	2900      	cmp	r1, #0
 8009272:	d0ca      	beq.n	800920a <__sflush_r+0x1a>
 8009274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009278:	4299      	cmp	r1, r3
 800927a:	d002      	beq.n	8009282 <__sflush_r+0x92>
 800927c:	4628      	mov	r0, r5
 800927e:	f7ff fc29 	bl	8008ad4 <_free_r>
 8009282:	2000      	movs	r0, #0
 8009284:	6360      	str	r0, [r4, #52]	; 0x34
 8009286:	e7c1      	b.n	800920c <__sflush_r+0x1c>
 8009288:	6a21      	ldr	r1, [r4, #32]
 800928a:	2301      	movs	r3, #1
 800928c:	4628      	mov	r0, r5
 800928e:	47b0      	blx	r6
 8009290:	1c41      	adds	r1, r0, #1
 8009292:	d1c7      	bne.n	8009224 <__sflush_r+0x34>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d0c4      	beq.n	8009224 <__sflush_r+0x34>
 800929a:	2b1d      	cmp	r3, #29
 800929c:	d001      	beq.n	80092a2 <__sflush_r+0xb2>
 800929e:	2b16      	cmp	r3, #22
 80092a0:	d101      	bne.n	80092a6 <__sflush_r+0xb6>
 80092a2:	602f      	str	r7, [r5, #0]
 80092a4:	e7b1      	b.n	800920a <__sflush_r+0x1a>
 80092a6:	89a3      	ldrh	r3, [r4, #12]
 80092a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ac:	81a3      	strh	r3, [r4, #12]
 80092ae:	e7ad      	b.n	800920c <__sflush_r+0x1c>
 80092b0:	690f      	ldr	r7, [r1, #16]
 80092b2:	2f00      	cmp	r7, #0
 80092b4:	d0a9      	beq.n	800920a <__sflush_r+0x1a>
 80092b6:	0793      	lsls	r3, r2, #30
 80092b8:	680e      	ldr	r6, [r1, #0]
 80092ba:	bf08      	it	eq
 80092bc:	694b      	ldreq	r3, [r1, #20]
 80092be:	600f      	str	r7, [r1, #0]
 80092c0:	bf18      	it	ne
 80092c2:	2300      	movne	r3, #0
 80092c4:	eba6 0807 	sub.w	r8, r6, r7
 80092c8:	608b      	str	r3, [r1, #8]
 80092ca:	f1b8 0f00 	cmp.w	r8, #0
 80092ce:	dd9c      	ble.n	800920a <__sflush_r+0x1a>
 80092d0:	6a21      	ldr	r1, [r4, #32]
 80092d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092d4:	4643      	mov	r3, r8
 80092d6:	463a      	mov	r2, r7
 80092d8:	4628      	mov	r0, r5
 80092da:	47b0      	blx	r6
 80092dc:	2800      	cmp	r0, #0
 80092de:	dc06      	bgt.n	80092ee <__sflush_r+0xfe>
 80092e0:	89a3      	ldrh	r3, [r4, #12]
 80092e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092e6:	81a3      	strh	r3, [r4, #12]
 80092e8:	f04f 30ff 	mov.w	r0, #4294967295
 80092ec:	e78e      	b.n	800920c <__sflush_r+0x1c>
 80092ee:	4407      	add	r7, r0
 80092f0:	eba8 0800 	sub.w	r8, r8, r0
 80092f4:	e7e9      	b.n	80092ca <__sflush_r+0xda>
 80092f6:	bf00      	nop
 80092f8:	20400001 	.word	0x20400001

080092fc <_fflush_r>:
 80092fc:	b538      	push	{r3, r4, r5, lr}
 80092fe:	690b      	ldr	r3, [r1, #16]
 8009300:	4605      	mov	r5, r0
 8009302:	460c      	mov	r4, r1
 8009304:	b913      	cbnz	r3, 800930c <_fflush_r+0x10>
 8009306:	2500      	movs	r5, #0
 8009308:	4628      	mov	r0, r5
 800930a:	bd38      	pop	{r3, r4, r5, pc}
 800930c:	b118      	cbz	r0, 8009316 <_fflush_r+0x1a>
 800930e:	6983      	ldr	r3, [r0, #24]
 8009310:	b90b      	cbnz	r3, 8009316 <_fflush_r+0x1a>
 8009312:	f7fe ff97 	bl	8008244 <__sinit>
 8009316:	4b14      	ldr	r3, [pc, #80]	; (8009368 <_fflush_r+0x6c>)
 8009318:	429c      	cmp	r4, r3
 800931a:	d11b      	bne.n	8009354 <_fflush_r+0x58>
 800931c:	686c      	ldr	r4, [r5, #4]
 800931e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d0ef      	beq.n	8009306 <_fflush_r+0xa>
 8009326:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009328:	07d0      	lsls	r0, r2, #31
 800932a:	d404      	bmi.n	8009336 <_fflush_r+0x3a>
 800932c:	0599      	lsls	r1, r3, #22
 800932e:	d402      	bmi.n	8009336 <_fflush_r+0x3a>
 8009330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009332:	f7ff f82a 	bl	800838a <__retarget_lock_acquire_recursive>
 8009336:	4628      	mov	r0, r5
 8009338:	4621      	mov	r1, r4
 800933a:	f7ff ff59 	bl	80091f0 <__sflush_r>
 800933e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009340:	07da      	lsls	r2, r3, #31
 8009342:	4605      	mov	r5, r0
 8009344:	d4e0      	bmi.n	8009308 <_fflush_r+0xc>
 8009346:	89a3      	ldrh	r3, [r4, #12]
 8009348:	059b      	lsls	r3, r3, #22
 800934a:	d4dd      	bmi.n	8009308 <_fflush_r+0xc>
 800934c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800934e:	f7ff f81d 	bl	800838c <__retarget_lock_release_recursive>
 8009352:	e7d9      	b.n	8009308 <_fflush_r+0xc>
 8009354:	4b05      	ldr	r3, [pc, #20]	; (800936c <_fflush_r+0x70>)
 8009356:	429c      	cmp	r4, r3
 8009358:	d101      	bne.n	800935e <_fflush_r+0x62>
 800935a:	68ac      	ldr	r4, [r5, #8]
 800935c:	e7df      	b.n	800931e <_fflush_r+0x22>
 800935e:	4b04      	ldr	r3, [pc, #16]	; (8009370 <_fflush_r+0x74>)
 8009360:	429c      	cmp	r4, r3
 8009362:	bf08      	it	eq
 8009364:	68ec      	ldreq	r4, [r5, #12]
 8009366:	e7da      	b.n	800931e <_fflush_r+0x22>
 8009368:	080097c4 	.word	0x080097c4
 800936c:	080097e4 	.word	0x080097e4
 8009370:	080097a4 	.word	0x080097a4

08009374 <fiprintf>:
 8009374:	b40e      	push	{r1, r2, r3}
 8009376:	b503      	push	{r0, r1, lr}
 8009378:	4601      	mov	r1, r0
 800937a:	ab03      	add	r3, sp, #12
 800937c:	4805      	ldr	r0, [pc, #20]	; (8009394 <fiprintf+0x20>)
 800937e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009382:	6800      	ldr	r0, [r0, #0]
 8009384:	9301      	str	r3, [sp, #4]
 8009386:	f7ff fcaf 	bl	8008ce8 <_vfiprintf_r>
 800938a:	b002      	add	sp, #8
 800938c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009390:	b003      	add	sp, #12
 8009392:	4770      	bx	lr
 8009394:	20000044 	.word	0x20000044

08009398 <_lseek_r>:
 8009398:	b538      	push	{r3, r4, r5, lr}
 800939a:	4d07      	ldr	r5, [pc, #28]	; (80093b8 <_lseek_r+0x20>)
 800939c:	4604      	mov	r4, r0
 800939e:	4608      	mov	r0, r1
 80093a0:	4611      	mov	r1, r2
 80093a2:	2200      	movs	r2, #0
 80093a4:	602a      	str	r2, [r5, #0]
 80093a6:	461a      	mov	r2, r3
 80093a8:	f7f9 fc88 	bl	8002cbc <_lseek>
 80093ac:	1c43      	adds	r3, r0, #1
 80093ae:	d102      	bne.n	80093b6 <_lseek_r+0x1e>
 80093b0:	682b      	ldr	r3, [r5, #0]
 80093b2:	b103      	cbz	r3, 80093b6 <_lseek_r+0x1e>
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	bd38      	pop	{r3, r4, r5, pc}
 80093b8:	20000574 	.word	0x20000574

080093bc <__swhatbuf_r>:
 80093bc:	b570      	push	{r4, r5, r6, lr}
 80093be:	460e      	mov	r6, r1
 80093c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c4:	2900      	cmp	r1, #0
 80093c6:	b096      	sub	sp, #88	; 0x58
 80093c8:	4614      	mov	r4, r2
 80093ca:	461d      	mov	r5, r3
 80093cc:	da08      	bge.n	80093e0 <__swhatbuf_r+0x24>
 80093ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	602a      	str	r2, [r5, #0]
 80093d6:	061a      	lsls	r2, r3, #24
 80093d8:	d410      	bmi.n	80093fc <__swhatbuf_r+0x40>
 80093da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093de:	e00e      	b.n	80093fe <__swhatbuf_r+0x42>
 80093e0:	466a      	mov	r2, sp
 80093e2:	f000 f895 	bl	8009510 <_fstat_r>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	dbf1      	blt.n	80093ce <__swhatbuf_r+0x12>
 80093ea:	9a01      	ldr	r2, [sp, #4]
 80093ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093f4:	425a      	negs	r2, r3
 80093f6:	415a      	adcs	r2, r3
 80093f8:	602a      	str	r2, [r5, #0]
 80093fa:	e7ee      	b.n	80093da <__swhatbuf_r+0x1e>
 80093fc:	2340      	movs	r3, #64	; 0x40
 80093fe:	2000      	movs	r0, #0
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	b016      	add	sp, #88	; 0x58
 8009404:	bd70      	pop	{r4, r5, r6, pc}
	...

08009408 <__smakebuf_r>:
 8009408:	898b      	ldrh	r3, [r1, #12]
 800940a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800940c:	079d      	lsls	r5, r3, #30
 800940e:	4606      	mov	r6, r0
 8009410:	460c      	mov	r4, r1
 8009412:	d507      	bpl.n	8009424 <__smakebuf_r+0x1c>
 8009414:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	6123      	str	r3, [r4, #16]
 800941c:	2301      	movs	r3, #1
 800941e:	6163      	str	r3, [r4, #20]
 8009420:	b002      	add	sp, #8
 8009422:	bd70      	pop	{r4, r5, r6, pc}
 8009424:	ab01      	add	r3, sp, #4
 8009426:	466a      	mov	r2, sp
 8009428:	f7ff ffc8 	bl	80093bc <__swhatbuf_r>
 800942c:	9900      	ldr	r1, [sp, #0]
 800942e:	4605      	mov	r5, r0
 8009430:	4630      	mov	r0, r6
 8009432:	f7ff fbbb 	bl	8008bac <_malloc_r>
 8009436:	b948      	cbnz	r0, 800944c <__smakebuf_r+0x44>
 8009438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800943c:	059a      	lsls	r2, r3, #22
 800943e:	d4ef      	bmi.n	8009420 <__smakebuf_r+0x18>
 8009440:	f023 0303 	bic.w	r3, r3, #3
 8009444:	f043 0302 	orr.w	r3, r3, #2
 8009448:	81a3      	strh	r3, [r4, #12]
 800944a:	e7e3      	b.n	8009414 <__smakebuf_r+0xc>
 800944c:	4b0d      	ldr	r3, [pc, #52]	; (8009484 <__smakebuf_r+0x7c>)
 800944e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009450:	89a3      	ldrh	r3, [r4, #12]
 8009452:	6020      	str	r0, [r4, #0]
 8009454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009458:	81a3      	strh	r3, [r4, #12]
 800945a:	9b00      	ldr	r3, [sp, #0]
 800945c:	6163      	str	r3, [r4, #20]
 800945e:	9b01      	ldr	r3, [sp, #4]
 8009460:	6120      	str	r0, [r4, #16]
 8009462:	b15b      	cbz	r3, 800947c <__smakebuf_r+0x74>
 8009464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009468:	4630      	mov	r0, r6
 800946a:	f000 f863 	bl	8009534 <_isatty_r>
 800946e:	b128      	cbz	r0, 800947c <__smakebuf_r+0x74>
 8009470:	89a3      	ldrh	r3, [r4, #12]
 8009472:	f023 0303 	bic.w	r3, r3, #3
 8009476:	f043 0301 	orr.w	r3, r3, #1
 800947a:	81a3      	strh	r3, [r4, #12]
 800947c:	89a0      	ldrh	r0, [r4, #12]
 800947e:	4305      	orrs	r5, r0
 8009480:	81a5      	strh	r5, [r4, #12]
 8009482:	e7cd      	b.n	8009420 <__smakebuf_r+0x18>
 8009484:	080081dd 	.word	0x080081dd

08009488 <__ascii_mbtowc>:
 8009488:	b082      	sub	sp, #8
 800948a:	b901      	cbnz	r1, 800948e <__ascii_mbtowc+0x6>
 800948c:	a901      	add	r1, sp, #4
 800948e:	b142      	cbz	r2, 80094a2 <__ascii_mbtowc+0x1a>
 8009490:	b14b      	cbz	r3, 80094a6 <__ascii_mbtowc+0x1e>
 8009492:	7813      	ldrb	r3, [r2, #0]
 8009494:	600b      	str	r3, [r1, #0]
 8009496:	7812      	ldrb	r2, [r2, #0]
 8009498:	1e10      	subs	r0, r2, #0
 800949a:	bf18      	it	ne
 800949c:	2001      	movne	r0, #1
 800949e:	b002      	add	sp, #8
 80094a0:	4770      	bx	lr
 80094a2:	4610      	mov	r0, r2
 80094a4:	e7fb      	b.n	800949e <__ascii_mbtowc+0x16>
 80094a6:	f06f 0001 	mvn.w	r0, #1
 80094aa:	e7f8      	b.n	800949e <__ascii_mbtowc+0x16>

080094ac <__malloc_lock>:
 80094ac:	4801      	ldr	r0, [pc, #4]	; (80094b4 <__malloc_lock+0x8>)
 80094ae:	f7fe bf6c 	b.w	800838a <__retarget_lock_acquire_recursive>
 80094b2:	bf00      	nop
 80094b4:	20000568 	.word	0x20000568

080094b8 <__malloc_unlock>:
 80094b8:	4801      	ldr	r0, [pc, #4]	; (80094c0 <__malloc_unlock+0x8>)
 80094ba:	f7fe bf67 	b.w	800838c <__retarget_lock_release_recursive>
 80094be:	bf00      	nop
 80094c0:	20000568 	.word	0x20000568

080094c4 <_read_r>:
 80094c4:	b538      	push	{r3, r4, r5, lr}
 80094c6:	4d07      	ldr	r5, [pc, #28]	; (80094e4 <_read_r+0x20>)
 80094c8:	4604      	mov	r4, r0
 80094ca:	4608      	mov	r0, r1
 80094cc:	4611      	mov	r1, r2
 80094ce:	2200      	movs	r2, #0
 80094d0:	602a      	str	r2, [r5, #0]
 80094d2:	461a      	mov	r2, r3
 80094d4:	f7f9 fb92 	bl	8002bfc <_read>
 80094d8:	1c43      	adds	r3, r0, #1
 80094da:	d102      	bne.n	80094e2 <_read_r+0x1e>
 80094dc:	682b      	ldr	r3, [r5, #0]
 80094de:	b103      	cbz	r3, 80094e2 <_read_r+0x1e>
 80094e0:	6023      	str	r3, [r4, #0]
 80094e2:	bd38      	pop	{r3, r4, r5, pc}
 80094e4:	20000574 	.word	0x20000574

080094e8 <__ascii_wctomb>:
 80094e8:	b149      	cbz	r1, 80094fe <__ascii_wctomb+0x16>
 80094ea:	2aff      	cmp	r2, #255	; 0xff
 80094ec:	bf85      	ittet	hi
 80094ee:	238a      	movhi	r3, #138	; 0x8a
 80094f0:	6003      	strhi	r3, [r0, #0]
 80094f2:	700a      	strbls	r2, [r1, #0]
 80094f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80094f8:	bf98      	it	ls
 80094fa:	2001      	movls	r0, #1
 80094fc:	4770      	bx	lr
 80094fe:	4608      	mov	r0, r1
 8009500:	4770      	bx	lr

08009502 <abort>:
 8009502:	b508      	push	{r3, lr}
 8009504:	2006      	movs	r0, #6
 8009506:	f000 f84d 	bl	80095a4 <raise>
 800950a:	2001      	movs	r0, #1
 800950c:	f7f9 fb6c 	bl	8002be8 <_exit>

08009510 <_fstat_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4d07      	ldr	r5, [pc, #28]	; (8009530 <_fstat_r+0x20>)
 8009514:	2300      	movs	r3, #0
 8009516:	4604      	mov	r4, r0
 8009518:	4608      	mov	r0, r1
 800951a:	4611      	mov	r1, r2
 800951c:	602b      	str	r3, [r5, #0]
 800951e:	f7f9 fbb2 	bl	8002c86 <_fstat>
 8009522:	1c43      	adds	r3, r0, #1
 8009524:	d102      	bne.n	800952c <_fstat_r+0x1c>
 8009526:	682b      	ldr	r3, [r5, #0]
 8009528:	b103      	cbz	r3, 800952c <_fstat_r+0x1c>
 800952a:	6023      	str	r3, [r4, #0]
 800952c:	bd38      	pop	{r3, r4, r5, pc}
 800952e:	bf00      	nop
 8009530:	20000574 	.word	0x20000574

08009534 <_isatty_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4d06      	ldr	r5, [pc, #24]	; (8009550 <_isatty_r+0x1c>)
 8009538:	2300      	movs	r3, #0
 800953a:	4604      	mov	r4, r0
 800953c:	4608      	mov	r0, r1
 800953e:	602b      	str	r3, [r5, #0]
 8009540:	f7f9 fbb1 	bl	8002ca6 <_isatty>
 8009544:	1c43      	adds	r3, r0, #1
 8009546:	d102      	bne.n	800954e <_isatty_r+0x1a>
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	b103      	cbz	r3, 800954e <_isatty_r+0x1a>
 800954c:	6023      	str	r3, [r4, #0]
 800954e:	bd38      	pop	{r3, r4, r5, pc}
 8009550:	20000574 	.word	0x20000574

08009554 <_raise_r>:
 8009554:	291f      	cmp	r1, #31
 8009556:	b538      	push	{r3, r4, r5, lr}
 8009558:	4604      	mov	r4, r0
 800955a:	460d      	mov	r5, r1
 800955c:	d904      	bls.n	8009568 <_raise_r+0x14>
 800955e:	2316      	movs	r3, #22
 8009560:	6003      	str	r3, [r0, #0]
 8009562:	f04f 30ff 	mov.w	r0, #4294967295
 8009566:	bd38      	pop	{r3, r4, r5, pc}
 8009568:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800956a:	b112      	cbz	r2, 8009572 <_raise_r+0x1e>
 800956c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009570:	b94b      	cbnz	r3, 8009586 <_raise_r+0x32>
 8009572:	4620      	mov	r0, r4
 8009574:	f000 f830 	bl	80095d8 <_getpid_r>
 8009578:	462a      	mov	r2, r5
 800957a:	4601      	mov	r1, r0
 800957c:	4620      	mov	r0, r4
 800957e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009582:	f000 b817 	b.w	80095b4 <_kill_r>
 8009586:	2b01      	cmp	r3, #1
 8009588:	d00a      	beq.n	80095a0 <_raise_r+0x4c>
 800958a:	1c59      	adds	r1, r3, #1
 800958c:	d103      	bne.n	8009596 <_raise_r+0x42>
 800958e:	2316      	movs	r3, #22
 8009590:	6003      	str	r3, [r0, #0]
 8009592:	2001      	movs	r0, #1
 8009594:	e7e7      	b.n	8009566 <_raise_r+0x12>
 8009596:	2400      	movs	r4, #0
 8009598:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800959c:	4628      	mov	r0, r5
 800959e:	4798      	blx	r3
 80095a0:	2000      	movs	r0, #0
 80095a2:	e7e0      	b.n	8009566 <_raise_r+0x12>

080095a4 <raise>:
 80095a4:	4b02      	ldr	r3, [pc, #8]	; (80095b0 <raise+0xc>)
 80095a6:	4601      	mov	r1, r0
 80095a8:	6818      	ldr	r0, [r3, #0]
 80095aa:	f7ff bfd3 	b.w	8009554 <_raise_r>
 80095ae:	bf00      	nop
 80095b0:	20000044 	.word	0x20000044

080095b4 <_kill_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4d07      	ldr	r5, [pc, #28]	; (80095d4 <_kill_r+0x20>)
 80095b8:	2300      	movs	r3, #0
 80095ba:	4604      	mov	r4, r0
 80095bc:	4608      	mov	r0, r1
 80095be:	4611      	mov	r1, r2
 80095c0:	602b      	str	r3, [r5, #0]
 80095c2:	f7f9 fb01 	bl	8002bc8 <_kill>
 80095c6:	1c43      	adds	r3, r0, #1
 80095c8:	d102      	bne.n	80095d0 <_kill_r+0x1c>
 80095ca:	682b      	ldr	r3, [r5, #0]
 80095cc:	b103      	cbz	r3, 80095d0 <_kill_r+0x1c>
 80095ce:	6023      	str	r3, [r4, #0]
 80095d0:	bd38      	pop	{r3, r4, r5, pc}
 80095d2:	bf00      	nop
 80095d4:	20000574 	.word	0x20000574

080095d8 <_getpid_r>:
 80095d8:	f7f9 baee 	b.w	8002bb8 <_getpid>

080095dc <_init>:
 80095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095de:	bf00      	nop
 80095e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e2:	bc08      	pop	{r3}
 80095e4:	469e      	mov	lr, r3
 80095e6:	4770      	bx	lr

080095e8 <_fini>:
 80095e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ea:	bf00      	nop
 80095ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ee:	bc08      	pop	{r3}
 80095f0:	469e      	mov	lr, r3
 80095f2:	4770      	bx	lr
