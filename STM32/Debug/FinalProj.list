
FinalProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ba4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08008d68  08008d68  00018d68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009224  08009224  0002024c  2**0
                  CONTENTS
  4 .ARM          00000008  08009224  08009224  00019224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800922c  0800922c  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800922c  0800922c  0001922c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009230  08009230  00019230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08009234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000024c  08009480  0002024c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08009480  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a285  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e32  00000000  00000000  0003a501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0003d338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001460  00000000  00000000  0003e8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004aed  00000000  00000000  0003fd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac99  00000000  00000000  0004482d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ea9b  00000000  00000000  0005f4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016df61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e28  00000000  00000000  0016dfb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000024c 	.word	0x2000024c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008d4c 	.word	0x08008d4c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000250 	.word	0x20000250
 80001fc:	08008d4c 	.word	0x08008d4c

08000200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000202:	b09b      	sub	sp, #108	; 0x6c
 8000204:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000206:	f002 f9d4 	bl	80025b2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020a:	f000 f901 	bl	8000410 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020e:	f000 fabd 	bl	800078c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000212:	f000 f9df 	bl	80005d4 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000216:	f000 fa6b 	bl	80006f0 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 800021a:	f000 f98f 	bl	800053c <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800021e:	f000 fa17 	bl	8000650 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000222:	f000 f94b 	bl	80004bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  step_init(&htim2, 1, A0_GPIO, A0_PIN, A1_GPIO, A1_PIN, A2_GPIO, A2_PIN, A3_GPIO, A3_PIN, B0_GPIO, B0_PIN, B1_GPIO, B1_PIN, B2_GPIO, B2_PIN, B3_GPIO, B3_PIN);
 8000226:	4b5a      	ldr	r3, [pc, #360]	; (8000390 <main+0x190>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	61fb      	str	r3, [r7, #28]
 800022c:	4b59      	ldr	r3, [pc, #356]	; (8000394 <main+0x194>)
 800022e:	f8b3 c000 	ldrh.w	ip, [r3]
 8000232:	4b59      	ldr	r3, [pc, #356]	; (8000398 <main+0x198>)
 8000234:	6818      	ldr	r0, [r3, #0]
 8000236:	4b59      	ldr	r3, [pc, #356]	; (800039c <main+0x19c>)
 8000238:	881c      	ldrh	r4, [r3, #0]
 800023a:	4b59      	ldr	r3, [pc, #356]	; (80003a0 <main+0x1a0>)
 800023c:	681d      	ldr	r5, [r3, #0]
 800023e:	4b59      	ldr	r3, [pc, #356]	; (80003a4 <main+0x1a4>)
 8000240:	881e      	ldrh	r6, [r3, #0]
 8000242:	4b59      	ldr	r3, [pc, #356]	; (80003a8 <main+0x1a8>)
 8000244:	6819      	ldr	r1, [r3, #0]
 8000246:	61b9      	str	r1, [r7, #24]
 8000248:	4b58      	ldr	r3, [pc, #352]	; (80003ac <main+0x1ac>)
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	4b58      	ldr	r3, [pc, #352]	; (80003b0 <main+0x1b0>)
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	613a      	str	r2, [r7, #16]
 8000254:	4b57      	ldr	r3, [pc, #348]	; (80003b4 <main+0x1b4>)
 8000256:	f8b3 e000 	ldrh.w	lr, [r3]
 800025a:	4671      	mov	r1, lr
 800025c:	60f9      	str	r1, [r7, #12]
 800025e:	4b56      	ldr	r3, [pc, #344]	; (80003b8 <main+0x1b8>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	60bb      	str	r3, [r7, #8]
 8000264:	4b55      	ldr	r3, [pc, #340]	; (80003bc <main+0x1bc>)
 8000266:	f8b3 e000 	ldrh.w	lr, [r3]
 800026a:	4672      	mov	r2, lr
 800026c:	607a      	str	r2, [r7, #4]
 800026e:	4b54      	ldr	r3, [pc, #336]	; (80003c0 <main+0x1c0>)
 8000270:	6819      	ldr	r1, [r3, #0]
 8000272:	6039      	str	r1, [r7, #0]
 8000274:	4b53      	ldr	r3, [pc, #332]	; (80003c4 <main+0x1c4>)
 8000276:	8819      	ldrh	r1, [r3, #0]
 8000278:	4b53      	ldr	r3, [pc, #332]	; (80003c8 <main+0x1c8>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b53      	ldr	r3, [pc, #332]	; (80003cc <main+0x1cc>)
 800027e:	881b      	ldrh	r3, [r3, #0]
 8000280:	930d      	str	r3, [sp, #52]	; 0x34
 8000282:	920c      	str	r2, [sp, #48]	; 0x30
 8000284:	910b      	str	r1, [sp, #44]	; 0x2c
 8000286:	6839      	ldr	r1, [r7, #0]
 8000288:	910a      	str	r1, [sp, #40]	; 0x28
 800028a:	687a      	ldr	r2, [r7, #4]
 800028c:	9209      	str	r2, [sp, #36]	; 0x24
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	9308      	str	r3, [sp, #32]
 8000292:	68f9      	ldr	r1, [r7, #12]
 8000294:	9107      	str	r1, [sp, #28]
 8000296:	693a      	ldr	r2, [r7, #16]
 8000298:	9206      	str	r2, [sp, #24]
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	9305      	str	r3, [sp, #20]
 800029e:	69b9      	ldr	r1, [r7, #24]
 80002a0:	9104      	str	r1, [sp, #16]
 80002a2:	9603      	str	r6, [sp, #12]
 80002a4:	9502      	str	r5, [sp, #8]
 80002a6:	9401      	str	r4, [sp, #4]
 80002a8:	9000      	str	r0, [sp, #0]
 80002aa:	4663      	mov	r3, ip
 80002ac:	69fa      	ldr	r2, [r7, #28]
 80002ae:	2101      	movs	r1, #1
 80002b0:	4847      	ldr	r0, [pc, #284]	; (80003d0 <main+0x1d0>)
 80002b2:	f001 fe51 	bl	8001f58 <step_init>
  LCD_init(&hspi1, tftCS_GPIO, tftCS_PIN, tftDC_GPIO, tftDC_PIN, tftRESET_GPIO, tftRESET_PIN);
 80002b6:	4b47      	ldr	r3, [pc, #284]	; (80003d4 <main+0x1d4>)
 80002b8:	6818      	ldr	r0, [r3, #0]
 80002ba:	4b47      	ldr	r3, [pc, #284]	; (80003d8 <main+0x1d8>)
 80002bc:	881c      	ldrh	r4, [r3, #0]
 80002be:	4b47      	ldr	r3, [pc, #284]	; (80003dc <main+0x1dc>)
 80002c0:	681d      	ldr	r5, [r3, #0]
 80002c2:	4b47      	ldr	r3, [pc, #284]	; (80003e0 <main+0x1e0>)
 80002c4:	881b      	ldrh	r3, [r3, #0]
 80002c6:	4a47      	ldr	r2, [pc, #284]	; (80003e4 <main+0x1e4>)
 80002c8:	6812      	ldr	r2, [r2, #0]
 80002ca:	4947      	ldr	r1, [pc, #284]	; (80003e8 <main+0x1e8>)
 80002cc:	8809      	ldrh	r1, [r1, #0]
 80002ce:	9102      	str	r1, [sp, #8]
 80002d0:	9201      	str	r2, [sp, #4]
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	462b      	mov	r3, r5
 80002d6:	4622      	mov	r2, r4
 80002d8:	4601      	mov	r1, r0
 80002da:	4844      	ldr	r0, [pc, #272]	; (80003ec <main+0x1ec>)
 80002dc:	f001 fb5c 	bl	8001998 <LCD_init>
  N64_init(&htim4, n64_GPIO, n64_PIN, n64_DEBUG_GPIO, n64_DEBUG_PIN);
 80002e0:	4b43      	ldr	r3, [pc, #268]	; (80003f0 <main+0x1f0>)
 80002e2:	6819      	ldr	r1, [r3, #0]
 80002e4:	4b43      	ldr	r3, [pc, #268]	; (80003f4 <main+0x1f4>)
 80002e6:	881a      	ldrh	r2, [r3, #0]
 80002e8:	4b43      	ldr	r3, [pc, #268]	; (80003f8 <main+0x1f8>)
 80002ea:	6818      	ldr	r0, [r3, #0]
 80002ec:	4b43      	ldr	r3, [pc, #268]	; (80003fc <main+0x1fc>)
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	9300      	str	r3, [sp, #0]
 80002f2:	4603      	mov	r3, r0
 80002f4:	4842      	ldr	r0, [pc, #264]	; (8000400 <main+0x200>)
 80002f6:	f001 fe05 	bl	8001f04 <N64_init>
  printf("Initing...\n\r");
 80002fa:	4842      	ldr	r0, [pc, #264]	; (8000404 <main+0x204>)
 80002fc:	f006 fc6e 	bl	8006bdc <iprintf>
  HAL_Delay(200);
 8000300:	20c8      	movs	r0, #200	; 0xc8
 8000302:	f002 f9cb 	bl	800269c <HAL_Delay>
  LCD_fill(HX8357_MAGENTA);
 8000306:	f64f 001f 	movw	r0, #63519	; 0xf81f
 800030a:	f001 fce3 	bl	8001cd4 <LCD_fill>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //code assumes the jumper is connected for the enables and thus will not handle writing 1 to them
  setSpeed(150);
 800030e:	2096      	movs	r0, #150	; 0x96
 8000310:	f001 fe8c 	bl	800202c <setSpeed>
  uint32_t vals = 0;
 8000314:	2300      	movs	r3, #0
 8000316:	62fb      	str	r3, [r7, #44]	; 0x2c
  printf("Starting...\n\r");
 8000318:	483b      	ldr	r0, [pc, #236]	; (8000408 <main+0x208>)
 800031a:	f006 fc5f 	bl	8006bdc <iprintf>
  while (1)
  {

	  vals = pollRead();
 800031e:	f001 fd6d 	bl	8001dfc <pollRead>
 8000322:	62f8      	str	r0, [r7, #44]	; 0x2c
	  //int buttonval = vals >> 31;
	  signed char xval = (vals >> 8) & 0xff; //both were signed
 8000324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000326:	0a1b      	lsrs	r3, r3, #8
 8000328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	  signed char yval = vals & 0xff;
 800032c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800032e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  printf("X: %d,Y: %d\n\r", xval, yval);
 8000332:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000336:	f997 202a 	ldrsb.w	r2, [r7, #42]	; 0x2a
 800033a:	4619      	mov	r1, r3
 800033c:	4833      	ldr	r0, [pc, #204]	; (800040c <main+0x20c>)
 800033e:	f006 fc4d 	bl	8006bdc <iprintf>

	  uint16_t XCenter = xval + (HX8357_TFTWIDTH/2);
 8000342:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000346:	b29b      	uxth	r3, r3
 8000348:	33a0      	adds	r3, #160	; 0xa0
 800034a:	853b      	strh	r3, [r7, #40]	; 0x28
	  uint16_t YCenter = -yval + (HX8357_TFTHEIGHT/2);
 800034c:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8000350:	b29b      	uxth	r3, r3
 8000352:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000356:	84fb      	strh	r3, [r7, #38]	; 0x26
	  uint16_t rectRadius = 2;
 8000358:	2302      	movs	r3, #2
 800035a:	84bb      	strh	r3, [r7, #36]	; 0x24
	  LCD_rect(XCenter - rectRadius, YCenter - rectRadius, XCenter + rectRadius, YCenter + rectRadius, HX8357_BLACK);
 800035c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800035e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000360:	1ad3      	subs	r3, r2, r3
 8000362:	b298      	uxth	r0, r3
 8000364:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000368:	1ad3      	subs	r3, r2, r3
 800036a:	b299      	uxth	r1, r3
 800036c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800036e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000370:	4413      	add	r3, r2
 8000372:	b29c      	uxth	r4, r3
 8000374:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000378:	4413      	add	r3, r2
 800037a:	b29b      	uxth	r3, r3
 800037c:	2200      	movs	r2, #0
 800037e:	9200      	str	r2, [sp, #0]
 8000380:	4622      	mov	r2, r4
 8000382:	f001 fc5b 	bl	8001c3c <LCD_rect>
//	  printf("Waiting...\n\r");
//	 uint8_t buf[4];
//	 getBlocks(&hi2c1, &buf[0]);
//	 printf("%d, %d, %d, %d\n\r", buf[0], buf[1], buf[2], buf[3]);

	  HAL_Delay(50);
 8000386:	2032      	movs	r0, #50	; 0x32
 8000388:	f002 f988 	bl	800269c <HAL_Delay>
  {
 800038c:	e7c7      	b.n	800031e <main+0x11e>
 800038e:	bf00      	nop
 8000390:	20000028 	.word	0x20000028
 8000394:	2000002c 	.word	0x2000002c
 8000398:	20000030 	.word	0x20000030
 800039c:	20000034 	.word	0x20000034
 80003a0:	20000038 	.word	0x20000038
 80003a4:	2000003c 	.word	0x2000003c
 80003a8:	20000040 	.word	0x20000040
 80003ac:	20000044 	.word	0x20000044
 80003b0:	20000048 	.word	0x20000048
 80003b4:	2000004c 	.word	0x2000004c
 80003b8:	20000050 	.word	0x20000050
 80003bc:	20000054 	.word	0x20000054
 80003c0:	20000058 	.word	0x20000058
 80003c4:	2000005c 	.word	0x2000005c
 80003c8:	20000060 	.word	0x20000060
 80003cc:	20000064 	.word	0x20000064
 80003d0:	200003a8 	.word	0x200003a8
 80003d4:	20000000 	.word	0x20000000
 80003d8:	20000004 	.word	0x20000004
 80003dc:	20000008 	.word	0x20000008
 80003e0:	2000000c 	.word	0x2000000c
 80003e4:	20000010 	.word	0x20000010
 80003e8:	20000014 	.word	0x20000014
 80003ec:	20000344 	.word	0x20000344
 80003f0:	20000018 	.word	0x20000018
 80003f4:	2000001c 	.word	0x2000001c
 80003f8:	20000020 	.word	0x20000020
 80003fc:	20000024 	.word	0x20000024
 8000400:	200003f4 	.word	0x200003f4
 8000404:	08008da8 	.word	0x08008da8
 8000408:	08008db8 	.word	0x08008db8
 800040c:	08008dc8 	.word	0x08008dc8

08000410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b096      	sub	sp, #88	; 0x58
 8000414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000416:	f107 0314 	add.w	r3, r7, #20
 800041a:	2244      	movs	r2, #68	; 0x44
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f005 ff6a 	bl	80062f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	463b      	mov	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000432:	2000      	movs	r0, #0
 8000434:	f002 fd2c 	bl	8002e90 <HAL_PWREx_ControlVoltageScaling>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800043e:	f000 fb91 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000442:	2312      	movs	r3, #18
 8000444:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800044a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800044c:	2340      	movs	r3, #64	; 0x40
 800044e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000450:	2301      	movs	r3, #1
 8000452:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000458:	2360      	movs	r3, #96	; 0x60
 800045a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045c:	2302      	movs	r3, #2
 800045e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000460:	2301      	movs	r3, #1
 8000462:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000464:	2301      	movs	r3, #1
 8000466:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000468:	233c      	movs	r3, #60	; 0x3c
 800046a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800046c:	2302      	movs	r3, #2
 800046e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000470:	2302      	movs	r3, #2
 8000472:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000474:	2302      	movs	r3, #2
 8000476:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	4618      	mov	r0, r3
 800047e:	f002 fdbb 	bl	8002ff8 <HAL_RCC_OscConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000488:	f000 fb6c 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048c:	230f      	movs	r3, #15
 800048e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000490:	2303      	movs	r3, #3
 8000492:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80004a0:	463b      	mov	r3, r7
 80004a2:	2105      	movs	r1, #5
 80004a4:	4618      	mov	r0, r3
 80004a6:	f003 f9cd 	bl	8003844 <HAL_RCC_ClockConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80004b0:	f000 fb58 	bl	8000b64 <Error_Handler>
  }
}
 80004b4:	bf00      	nop
 80004b6:	3758      	adds	r7, #88	; 0x58
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004c0:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <MX_I2C1_Init+0x74>)
 80004c2:	4a1c      	ldr	r2, [pc, #112]	; (8000534 <MX_I2C1_Init+0x78>)
 80004c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80004c6:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <MX_I2C1_Init+0x74>)
 80004c8:	4a1b      	ldr	r2, [pc, #108]	; (8000538 <MX_I2C1_Init+0x7c>)
 80004ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004cc:	4b18      	ldr	r3, [pc, #96]	; (8000530 <MX_I2C1_Init+0x74>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004d2:	4b17      	ldr	r3, [pc, #92]	; (8000530 <MX_I2C1_Init+0x74>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004d8:	4b15      	ldr	r3, [pc, #84]	; (8000530 <MX_I2C1_Init+0x74>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004de:	4b14      	ldr	r3, [pc, #80]	; (8000530 <MX_I2C1_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <MX_I2C1_Init+0x74>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <MX_I2C1_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <MX_I2C1_Init+0x74>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004f6:	480e      	ldr	r0, [pc, #56]	; (8000530 <MX_I2C1_Init+0x74>)
 80004f8:	f002 fb84 	bl	8002c04 <HAL_I2C_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000502:	f000 fb2f 	bl	8000b64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000506:	2100      	movs	r1, #0
 8000508:	4809      	ldr	r0, [pc, #36]	; (8000530 <MX_I2C1_Init+0x74>)
 800050a:	f002 fc0a 	bl	8002d22 <HAL_I2CEx_ConfigAnalogFilter>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000514:	f000 fb26 	bl	8000b64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000518:	2100      	movs	r1, #0
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <MX_I2C1_Init+0x74>)
 800051c:	f002 fc4c 	bl	8002db8 <HAL_I2CEx_ConfigDigitalFilter>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000526:	f000 fb1d 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000268 	.word	0x20000268
 8000534:	40005400 	.word	0x40005400
 8000538:	307075b1 	.word	0x307075b1

0800053c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000540:	4b22      	ldr	r3, [pc, #136]	; (80005cc <MX_LPUART1_UART_Init+0x90>)
 8000542:	4a23      	ldr	r2, [pc, #140]	; (80005d0 <MX_LPUART1_UART_Init+0x94>)
 8000544:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000546:	4b21      	ldr	r3, [pc, #132]	; (80005cc <MX_LPUART1_UART_Init+0x90>)
 8000548:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800054c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800054e:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <MX_LPUART1_UART_Init+0x90>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000554:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <MX_LPUART1_UART_Init+0x90>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800055a:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <MX_LPUART1_UART_Init+0x90>)
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000560:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <MX_LPUART1_UART_Init+0x90>)
 8000562:	220c      	movs	r2, #12
 8000564:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000566:	4b19      	ldr	r3, [pc, #100]	; (80005cc <MX_LPUART1_UART_Init+0x90>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_LPUART1_UART_Init+0x90>)
 800056e:	2200      	movs	r2, #0
 8000570:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000572:	4b16      	ldr	r3, [pc, #88]	; (80005cc <MX_LPUART1_UART_Init+0x90>)
 8000574:	2200      	movs	r2, #0
 8000576:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_LPUART1_UART_Init+0x90>)
 800057a:	2200      	movs	r2, #0
 800057c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <MX_LPUART1_UART_Init+0x90>)
 8000580:	2200      	movs	r2, #0
 8000582:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000584:	4811      	ldr	r0, [pc, #68]	; (80005cc <MX_LPUART1_UART_Init+0x90>)
 8000586:	f004 ffe3 	bl	8005550 <HAL_UART_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000590:	f000 fae8 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000594:	2100      	movs	r1, #0
 8000596:	480d      	ldr	r0, [pc, #52]	; (80005cc <MX_LPUART1_UART_Init+0x90>)
 8000598:	f005 fdac 	bl	80060f4 <HAL_UARTEx_SetTxFifoThreshold>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80005a2:	f000 fadf 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4808      	ldr	r0, [pc, #32]	; (80005cc <MX_LPUART1_UART_Init+0x90>)
 80005aa:	f005 fde1 	bl	8006170 <HAL_UARTEx_SetRxFifoThreshold>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80005b4:	f000 fad6 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_LPUART1_UART_Init+0x90>)
 80005ba:	f005 fd62 	bl	8006082 <HAL_UARTEx_DisableFifoMode>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80005c4:	f000 face 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200002b4 	.word	0x200002b4
 80005d0:	40008000 	.word	0x40008000

080005d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <MX_SPI1_Init+0x74>)
 80005da:	4a1c      	ldr	r2, [pc, #112]	; (800064c <MX_SPI1_Init+0x78>)
 80005dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <MX_SPI1_Init+0x74>)
 80005e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_SPI1_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_SPI1_Init+0x74>)
 80005ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_SPI1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_SPI1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_SPI1_Init+0x74>)
 8000602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000606:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_SPI1_Init+0x74>)
 800060a:	2208      	movs	r2, #8
 800060c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_SPI1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_SPI1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_SPI1_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_SPI1_Init+0x74>)
 8000622:	2207      	movs	r2, #7
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_SPI1_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_SPI1_Init+0x74>)
 800062e:	2208      	movs	r2, #8
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_SPI1_Init+0x74>)
 8000634:	f004 f8d0 	bl	80047d8 <HAL_SPI_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800063e:	f000 fa91 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000344 	.word	0x20000344
 800064c:	40013000 	.word	0x40013000

08000650 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000656:	f107 0310 	add.w	r3, r7, #16
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_TIM2_Init+0x9c>)
 8000670:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000674:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59999;
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_TIM2_Init+0x9c>)
 8000678:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800067c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_TIM2_Init+0x9c>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_TIM2_Init+0x9c>)
 8000686:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800068a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_TIM2_Init+0x9c>)
 800068e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000692:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_TIM2_Init+0x9c>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800069a:	4814      	ldr	r0, [pc, #80]	; (80006ec <MX_TIM2_Init+0x9c>)
 800069c:	f004 fc12 	bl	8004ec4 <HAL_TIM_Base_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80006a6:	f000 fa5d 	bl	8000b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	4619      	mov	r1, r3
 80006b6:	480d      	ldr	r0, [pc, #52]	; (80006ec <MX_TIM2_Init+0x9c>)
 80006b8:	f004 fcc4 	bl	8005044 <HAL_TIM_ConfigClockSource>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80006c2:	f000 fa4f 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	4619      	mov	r1, r3
 80006d2:	4806      	ldr	r0, [pc, #24]	; (80006ec <MX_TIM2_Init+0x9c>)
 80006d4:	f004 feb4 	bl	8005440 <HAL_TIMEx_MasterConfigSynchronization>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80006de:	f000 fa41 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	3720      	adds	r7, #32
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200003a8 	.word	0x200003a8

080006f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_TIM4_Init+0x94>)
 8000710:	4a1d      	ldr	r2, [pc, #116]	; (8000788 <MX_TIM4_Init+0x98>)
 8000712:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 19;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_TIM4_Init+0x94>)
 8000716:	2213      	movs	r2, #19
 8000718:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_TIM4_Init+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_TIM4_Init+0x94>)
 8000722:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000726:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_TIM4_Init+0x94>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_TIM4_Init+0x94>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000734:	4813      	ldr	r0, [pc, #76]	; (8000784 <MX_TIM4_Init+0x94>)
 8000736:	f004 fbc5 	bl	8004ec4 <HAL_TIM_Base_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000740:	f000 fa10 	bl	8000b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800074a:	f107 0310 	add.w	r3, r7, #16
 800074e:	4619      	mov	r1, r3
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <MX_TIM4_Init+0x94>)
 8000752:	f004 fc77 	bl	8005044 <HAL_TIM_ConfigClockSource>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800075c:	f000 fa02 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_TIM4_Init+0x94>)
 800076e:	f004 fe67 	bl	8005440 <HAL_TIMEx_MasterConfigSynchronization>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000778:	f000 f9f4 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200003f4 	.word	0x200003f4
 8000788:	40000800 	.word	0x40000800

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08e      	sub	sp, #56	; 0x38
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a2:	4bb4      	ldr	r3, [pc, #720]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4ab3      	ldr	r2, [pc, #716]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 80007a8:	f043 0310 	orr.w	r3, r3, #16
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4bb1      	ldr	r3, [pc, #708]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0310 	and.w	r3, r3, #16
 80007b6:	623b      	str	r3, [r7, #32]
 80007b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4bae      	ldr	r3, [pc, #696]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4aad      	ldr	r2, [pc, #692]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4bab      	ldr	r3, [pc, #684]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	61fb      	str	r3, [r7, #28]
 80007d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d2:	4ba8      	ldr	r3, [pc, #672]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4aa7      	ldr	r2, [pc, #668]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 80007d8:	f043 0320 	orr.w	r3, r3, #32
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4ba5      	ldr	r3, [pc, #660]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0320 	and.w	r3, r3, #32
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	4ba2      	ldr	r3, [pc, #648]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4aa1      	ldr	r2, [pc, #644]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b9f      	ldr	r3, [pc, #636]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b9c      	ldr	r3, [pc, #624]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a9b      	ldr	r2, [pc, #620]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b99      	ldr	r3, [pc, #612]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800081a:	4b96      	ldr	r3, [pc, #600]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a95      	ldr	r2, [pc, #596]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 8000820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b93      	ldr	r3, [pc, #588]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b90      	ldr	r3, [pc, #576]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a8f      	ldr	r2, [pc, #572]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b8d      	ldr	r3, [pc, #564]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	4b8a      	ldr	r3, [pc, #552]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a89      	ldr	r2, [pc, #548]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b87      	ldr	r3, [pc, #540]	; (8000a74 <MX_GPIO_Init+0x2e8>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000862:	f002 fbb9 	bl	8002fd8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 519c 	mov.w	r1, #4992	; 0x1380
 800086c:	4882      	ldr	r0, [pc, #520]	; (8000a78 <MX_GPIO_Init+0x2ec>)
 800086e:	f002 f9b1 	bl	8002bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2102      	movs	r1, #2
 8000876:	4881      	ldr	r0, [pc, #516]	; (8000a7c <MX_GPIO_Init+0x2f0>)
 8000878:	f002 f9ac 	bl	8002bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 8000882:	487f      	ldr	r0, [pc, #508]	; (8000a80 <MX_GPIO_Init+0x2f4>)
 8000884:	f002 f9a6 	bl	8002bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 800088e:	487d      	ldr	r0, [pc, #500]	; (8000a84 <MX_GPIO_Init+0x2f8>)
 8000890:	f002 f9a0 	bl	8002bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800089a:	487b      	ldr	r0, [pc, #492]	; (8000a88 <MX_GPIO_Init+0x2fc>)
 800089c:	f002 f99a 	bl	8002bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2140      	movs	r1, #64	; 0x40
 80008a4:	4879      	ldr	r0, [pc, #484]	; (8000a8c <MX_GPIO_Init+0x300>)
 80008a6:	f002 f995 	bl	8002bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008aa:	230c      	movs	r3, #12
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80008ba:	230d      	movs	r3, #13
 80008bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4619      	mov	r1, r3
 80008c4:	486e      	ldr	r0, [pc, #440]	; (8000a80 <MX_GPIO_Init+0x2f4>)
 80008c6:	f001 fff3 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80008ca:	2307      	movs	r3, #7
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ce:	2312      	movs	r3, #18
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008da:	2304      	movs	r3, #4
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	4864      	ldr	r0, [pc, #400]	; (8000a78 <MX_GPIO_Init+0x2ec>)
 80008e6:	f001 ffe3 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
 80008ea:	f44f 539c 	mov.w	r3, #4992	; 0x1380
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000900:	4619      	mov	r1, r3
 8000902:	485d      	ldr	r0, [pc, #372]	; (8000a78 <MX_GPIO_Init+0x2ec>)
 8000904:	f001 ffd4 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000908:	233f      	movs	r3, #63	; 0x3f
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800090c:	230b      	movs	r3, #11
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000918:	4619      	mov	r1, r3
 800091a:	485c      	ldr	r0, [pc, #368]	; (8000a8c <MX_GPIO_Init+0x300>)
 800091c:	f001 ffc8 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000920:	2302      	movs	r3, #2
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	4619      	mov	r1, r3
 8000936:	4851      	ldr	r0, [pc, #324]	; (8000a7c <MX_GPIO_Init+0x2f0>)
 8000938:	f001 ffba 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800093c:	f44f 531e 	mov.w	r3, #10112	; 0x2780
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800094e:	2301      	movs	r3, #1
 8000950:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	4849      	ldr	r0, [pc, #292]	; (8000a80 <MX_GPIO_Init+0x2f4>)
 800095a:	f001 ffa9 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800095e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	4842      	ldr	r0, [pc, #264]	; (8000a80 <MX_GPIO_Init+0x2f4>)
 8000978:	f001 ff9a 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800097c:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4619      	mov	r1, r3
 8000994:	483b      	ldr	r0, [pc, #236]	; (8000a84 <MX_GPIO_Init+0x2f8>)
 8000996:	f001 ff8b 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800099a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80009ac:	230d      	movs	r3, #13
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	4833      	ldr	r0, [pc, #204]	; (8000a84 <MX_GPIO_Init+0x2f8>)
 80009b8:	f001 ff7a 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009ce:	2307      	movs	r3, #7
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	4619      	mov	r1, r3
 80009d8:	482b      	ldr	r0, [pc, #172]	; (8000a88 <MX_GPIO_Init+0x2fc>)
 80009da:	f001 ff69 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80009de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f4:	4619      	mov	r1, r3
 80009f6:	4824      	ldr	r0, [pc, #144]	; (8000a88 <MX_GPIO_Init+0x2fc>)
 80009f8:	f001 ff5a 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009fc:	2340      	movs	r3, #64	; 0x40
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a00:	2311      	movs	r3, #17
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	481e      	ldr	r0, [pc, #120]	; (8000a8c <MX_GPIO_Init+0x300>)
 8000a14:	f001 ff4c 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000a18:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a2a:	230c      	movs	r3, #12
 8000a2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	4619      	mov	r1, r3
 8000a34:	4815      	ldr	r0, [pc, #84]	; (8000a8c <MX_GPIO_Init+0x300>)
 8000a36:	f001 ff3b 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000a3a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a4c:	230a      	movs	r3, #10
 8000a4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f001 ff29 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a70:	4619      	mov	r1, r3
 8000a72:	e00d      	b.n	8000a90 <MX_GPIO_Init+0x304>
 8000a74:	40021000 	.word	0x40021000
 8000a78:	48001400 	.word	0x48001400
 8000a7c:	48001800 	.word	0x48001800
 8000a80:	48001000 	.word	0x48001000
 8000a84:	48000400 	.word	0x48000400
 8000a88:	48000c00 	.word	0x48000c00
 8000a8c:	48000800 	.word	0x48000800
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f001 ff0c 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000aa8:	2309      	movs	r3, #9
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4821      	ldr	r0, [pc, #132]	; (8000b38 <MX_GPIO_Init+0x3ac>)
 8000ab4:	f001 fefc 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ac8:	230c      	movs	r3, #12
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4819      	ldr	r0, [pc, #100]	; (8000b38 <MX_GPIO_Init+0x3ac>)
 8000ad4:	f001 feec 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ad8:	2378      	movs	r3, #120	; 0x78
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae8:	2307      	movs	r3, #7
 8000aea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af0:	4619      	mov	r1, r3
 8000af2:	4811      	ldr	r0, [pc, #68]	; (8000b38 <MX_GPIO_Init+0x3ac>)
 8000af4:	f001 fedc 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000af8:	2330      	movs	r3, #48	; 0x30
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b08:	2306      	movs	r3, #6
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	480a      	ldr	r0, [pc, #40]	; (8000b3c <MX_GPIO_Init+0x3b0>)
 8000b14:	f001 fecc 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b18:	2340      	movs	r3, #64	; 0x40
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_GPIO_Init+0x3b0>)
 8000b2c:	f001 fec0 	bl	80028b0 <HAL_GPIO_Init>

}
 8000b30:	bf00      	nop
 8000b32:	3738      	adds	r7, #56	; 0x38
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	48000c00 	.word	0x48000c00
 8000b3c:	48000400 	.word	0x48000400

08000b40 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000b48:	1d39      	adds	r1, r7, #4
 8000b4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <__io_putchar+0x20>)
 8000b52:	f004 fd4d 	bl	80055f0 <HAL_UART_Transmit>
  return ch;
 8000b56:	687b      	ldr	r3, [r7, #4]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200002b4 	.word	0x200002b4

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
 8000b6e:	bf00      	nop

08000b70 <strlen>:
 8000b70:	4603      	mov	r3, r0
 8000b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b76:	2a00      	cmp	r2, #0
 8000b78:	d1fb      	bne.n	8000b72 <strlen+0x2>
 8000b7a:	1a18      	subs	r0, r3, r0
 8000b7c:	3801      	subs	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <memchr>:
 8000b80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000b84:	2a10      	cmp	r2, #16
 8000b86:	db2b      	blt.n	8000be0 <memchr+0x60>
 8000b88:	f010 0f07 	tst.w	r0, #7
 8000b8c:	d008      	beq.n	8000ba0 <memchr+0x20>
 8000b8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000b92:	3a01      	subs	r2, #1
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d02d      	beq.n	8000bf4 <memchr+0x74>
 8000b98:	f010 0f07 	tst.w	r0, #7
 8000b9c:	b342      	cbz	r2, 8000bf0 <memchr+0x70>
 8000b9e:	d1f6      	bne.n	8000b8e <memchr+0xe>
 8000ba0:	b4f0      	push	{r4, r5, r6, r7}
 8000ba2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000ba6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000baa:	f022 0407 	bic.w	r4, r2, #7
 8000bae:	f07f 0700 	mvns.w	r7, #0
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000bb8:	3c08      	subs	r4, #8
 8000bba:	ea85 0501 	eor.w	r5, r5, r1
 8000bbe:	ea86 0601 	eor.w	r6, r6, r1
 8000bc2:	fa85 f547 	uadd8	r5, r5, r7
 8000bc6:	faa3 f587 	sel	r5, r3, r7
 8000bca:	fa86 f647 	uadd8	r6, r6, r7
 8000bce:	faa5 f687 	sel	r6, r5, r7
 8000bd2:	b98e      	cbnz	r6, 8000bf8 <memchr+0x78>
 8000bd4:	d1ee      	bne.n	8000bb4 <memchr+0x34>
 8000bd6:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000bdc:	f002 0207 	and.w	r2, r2, #7
 8000be0:	b132      	cbz	r2, 8000bf0 <memchr+0x70>
 8000be2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000be6:	3a01      	subs	r2, #1
 8000be8:	ea83 0301 	eor.w	r3, r3, r1
 8000bec:	b113      	cbz	r3, 8000bf4 <memchr+0x74>
 8000bee:	d1f8      	bne.n	8000be2 <memchr+0x62>
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	4770      	bx	lr
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	bf06      	itte	eq
 8000bfc:	4635      	moveq	r5, r6
 8000bfe:	3803      	subeq	r0, #3
 8000c00:	3807      	subne	r0, #7
 8000c02:	f015 0f01 	tst.w	r5, #1
 8000c06:	d107      	bne.n	8000c18 <memchr+0x98>
 8000c08:	3001      	adds	r0, #1
 8000c0a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000c0e:	bf02      	ittt	eq
 8000c10:	3001      	addeq	r0, #1
 8000c12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000c16:	3001      	addeq	r0, #1
 8000c18:	bcf0      	pop	{r4, r5, r6, r7}
 8000c1a:	3801      	subs	r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_drsub>:
 8000c20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000c24:	e002      	b.n	8000c2c <__adddf3>
 8000c26:	bf00      	nop

08000c28 <__aeabi_dsub>:
 8000c28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000c2c <__adddf3>:
 8000c2c:	b530      	push	{r4, r5, lr}
 8000c2e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000c32:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000c36:	ea94 0f05 	teq	r4, r5
 8000c3a:	bf08      	it	eq
 8000c3c:	ea90 0f02 	teqeq	r0, r2
 8000c40:	bf1f      	itttt	ne
 8000c42:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000c46:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000c4a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000c4e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000c52:	f000 80e2 	beq.w	8000e1a <__adddf3+0x1ee>
 8000c56:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000c5a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000c5e:	bfb8      	it	lt
 8000c60:	426d      	neglt	r5, r5
 8000c62:	dd0c      	ble.n	8000c7e <__adddf3+0x52>
 8000c64:	442c      	add	r4, r5
 8000c66:	ea80 0202 	eor.w	r2, r0, r2
 8000c6a:	ea81 0303 	eor.w	r3, r1, r3
 8000c6e:	ea82 0000 	eor.w	r0, r2, r0
 8000c72:	ea83 0101 	eor.w	r1, r3, r1
 8000c76:	ea80 0202 	eor.w	r2, r0, r2
 8000c7a:	ea81 0303 	eor.w	r3, r1, r3
 8000c7e:	2d36      	cmp	r5, #54	; 0x36
 8000c80:	bf88      	it	hi
 8000c82:	bd30      	pophi	{r4, r5, pc}
 8000c84:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c88:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000c8c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000c90:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000c94:	d002      	beq.n	8000c9c <__adddf3+0x70>
 8000c96:	4240      	negs	r0, r0
 8000c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000ca0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ca4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000ca8:	d002      	beq.n	8000cb0 <__adddf3+0x84>
 8000caa:	4252      	negs	r2, r2
 8000cac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb0:	ea94 0f05 	teq	r4, r5
 8000cb4:	f000 80a7 	beq.w	8000e06 <__adddf3+0x1da>
 8000cb8:	f1a4 0401 	sub.w	r4, r4, #1
 8000cbc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000cc0:	db0d      	blt.n	8000cde <__adddf3+0xb2>
 8000cc2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000cc6:	fa22 f205 	lsr.w	r2, r2, r5
 8000cca:	1880      	adds	r0, r0, r2
 8000ccc:	f141 0100 	adc.w	r1, r1, #0
 8000cd0:	fa03 f20e 	lsl.w	r2, r3, lr
 8000cd4:	1880      	adds	r0, r0, r2
 8000cd6:	fa43 f305 	asr.w	r3, r3, r5
 8000cda:	4159      	adcs	r1, r3
 8000cdc:	e00e      	b.n	8000cfc <__adddf3+0xd0>
 8000cde:	f1a5 0520 	sub.w	r5, r5, #32
 8000ce2:	f10e 0e20 	add.w	lr, lr, #32
 8000ce6:	2a01      	cmp	r2, #1
 8000ce8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000cec:	bf28      	it	cs
 8000cee:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000cf2:	fa43 f305 	asr.w	r3, r3, r5
 8000cf6:	18c0      	adds	r0, r0, r3
 8000cf8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000cfc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000d00:	d507      	bpl.n	8000d12 <__adddf3+0xe6>
 8000d02:	f04f 0e00 	mov.w	lr, #0
 8000d06:	f1dc 0c00 	rsbs	ip, ip, #0
 8000d0a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000d0e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000d12:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000d16:	d31b      	bcc.n	8000d50 <__adddf3+0x124>
 8000d18:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000d1c:	d30c      	bcc.n	8000d38 <__adddf3+0x10c>
 8000d1e:	0849      	lsrs	r1, r1, #1
 8000d20:	ea5f 0030 	movs.w	r0, r0, rrx
 8000d24:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000d28:	f104 0401 	add.w	r4, r4, #1
 8000d2c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000d30:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000d34:	f080 809a 	bcs.w	8000e6c <__adddf3+0x240>
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	bf08      	it	eq
 8000d3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000d42:	f150 0000 	adcs.w	r0, r0, #0
 8000d46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000d4a:	ea41 0105 	orr.w	r1, r1, r5
 8000d4e:	bd30      	pop	{r4, r5, pc}
 8000d50:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000d54:	4140      	adcs	r0, r0
 8000d56:	eb41 0101 	adc.w	r1, r1, r1
 8000d5a:	3c01      	subs	r4, #1
 8000d5c:	bf28      	it	cs
 8000d5e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000d62:	d2e9      	bcs.n	8000d38 <__adddf3+0x10c>
 8000d64:	f091 0f00 	teq	r1, #0
 8000d68:	bf04      	itt	eq
 8000d6a:	4601      	moveq	r1, r0
 8000d6c:	2000      	moveq	r0, #0
 8000d6e:	fab1 f381 	clz	r3, r1
 8000d72:	bf08      	it	eq
 8000d74:	3320      	addeq	r3, #32
 8000d76:	f1a3 030b 	sub.w	r3, r3, #11
 8000d7a:	f1b3 0220 	subs.w	r2, r3, #32
 8000d7e:	da0c      	bge.n	8000d9a <__adddf3+0x16e>
 8000d80:	320c      	adds	r2, #12
 8000d82:	dd08      	ble.n	8000d96 <__adddf3+0x16a>
 8000d84:	f102 0c14 	add.w	ip, r2, #20
 8000d88:	f1c2 020c 	rsb	r2, r2, #12
 8000d8c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000d90:	fa21 f102 	lsr.w	r1, r1, r2
 8000d94:	e00c      	b.n	8000db0 <__adddf3+0x184>
 8000d96:	f102 0214 	add.w	r2, r2, #20
 8000d9a:	bfd8      	it	le
 8000d9c:	f1c2 0c20 	rsble	ip, r2, #32
 8000da0:	fa01 f102 	lsl.w	r1, r1, r2
 8000da4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000da8:	bfdc      	itt	le
 8000daa:	ea41 010c 	orrle.w	r1, r1, ip
 8000dae:	4090      	lslle	r0, r2
 8000db0:	1ae4      	subs	r4, r4, r3
 8000db2:	bfa2      	ittt	ge
 8000db4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000db8:	4329      	orrge	r1, r5
 8000dba:	bd30      	popge	{r4, r5, pc}
 8000dbc:	ea6f 0404 	mvn.w	r4, r4
 8000dc0:	3c1f      	subs	r4, #31
 8000dc2:	da1c      	bge.n	8000dfe <__adddf3+0x1d2>
 8000dc4:	340c      	adds	r4, #12
 8000dc6:	dc0e      	bgt.n	8000de6 <__adddf3+0x1ba>
 8000dc8:	f104 0414 	add.w	r4, r4, #20
 8000dcc:	f1c4 0220 	rsb	r2, r4, #32
 8000dd0:	fa20 f004 	lsr.w	r0, r0, r4
 8000dd4:	fa01 f302 	lsl.w	r3, r1, r2
 8000dd8:	ea40 0003 	orr.w	r0, r0, r3
 8000ddc:	fa21 f304 	lsr.w	r3, r1, r4
 8000de0:	ea45 0103 	orr.w	r1, r5, r3
 8000de4:	bd30      	pop	{r4, r5, pc}
 8000de6:	f1c4 040c 	rsb	r4, r4, #12
 8000dea:	f1c4 0220 	rsb	r2, r4, #32
 8000dee:	fa20 f002 	lsr.w	r0, r0, r2
 8000df2:	fa01 f304 	lsl.w	r3, r1, r4
 8000df6:	ea40 0003 	orr.w	r0, r0, r3
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	bd30      	pop	{r4, r5, pc}
 8000dfe:	fa21 f004 	lsr.w	r0, r1, r4
 8000e02:	4629      	mov	r1, r5
 8000e04:	bd30      	pop	{r4, r5, pc}
 8000e06:	f094 0f00 	teq	r4, #0
 8000e0a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000e0e:	bf06      	itte	eq
 8000e10:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000e14:	3401      	addeq	r4, #1
 8000e16:	3d01      	subne	r5, #1
 8000e18:	e74e      	b.n	8000cb8 <__adddf3+0x8c>
 8000e1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000e1e:	bf18      	it	ne
 8000e20:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000e24:	d029      	beq.n	8000e7a <__adddf3+0x24e>
 8000e26:	ea94 0f05 	teq	r4, r5
 8000e2a:	bf08      	it	eq
 8000e2c:	ea90 0f02 	teqeq	r0, r2
 8000e30:	d005      	beq.n	8000e3e <__adddf3+0x212>
 8000e32:	ea54 0c00 	orrs.w	ip, r4, r0
 8000e36:	bf04      	itt	eq
 8000e38:	4619      	moveq	r1, r3
 8000e3a:	4610      	moveq	r0, r2
 8000e3c:	bd30      	pop	{r4, r5, pc}
 8000e3e:	ea91 0f03 	teq	r1, r3
 8000e42:	bf1e      	ittt	ne
 8000e44:	2100      	movne	r1, #0
 8000e46:	2000      	movne	r0, #0
 8000e48:	bd30      	popne	{r4, r5, pc}
 8000e4a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000e4e:	d105      	bne.n	8000e5c <__adddf3+0x230>
 8000e50:	0040      	lsls	r0, r0, #1
 8000e52:	4149      	adcs	r1, r1
 8000e54:	bf28      	it	cs
 8000e56:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000e5a:	bd30      	pop	{r4, r5, pc}
 8000e5c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000e60:	bf3c      	itt	cc
 8000e62:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000e66:	bd30      	popcc	{r4, r5, pc}
 8000e68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000e6c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000e70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000e74:	f04f 0000 	mov.w	r0, #0
 8000e78:	bd30      	pop	{r4, r5, pc}
 8000e7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000e7e:	bf1a      	itte	ne
 8000e80:	4619      	movne	r1, r3
 8000e82:	4610      	movne	r0, r2
 8000e84:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000e88:	bf1c      	itt	ne
 8000e8a:	460b      	movne	r3, r1
 8000e8c:	4602      	movne	r2, r0
 8000e8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000e92:	bf06      	itte	eq
 8000e94:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000e98:	ea91 0f03 	teqeq	r1, r3
 8000e9c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000ea0:	bd30      	pop	{r4, r5, pc}
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_ui2d>:
 8000ea4:	f090 0f00 	teq	r0, #0
 8000ea8:	bf04      	itt	eq
 8000eaa:	2100      	moveq	r1, #0
 8000eac:	4770      	bxeq	lr
 8000eae:	b530      	push	{r4, r5, lr}
 8000eb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000eb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000eb8:	f04f 0500 	mov.w	r5, #0
 8000ebc:	f04f 0100 	mov.w	r1, #0
 8000ec0:	e750      	b.n	8000d64 <__adddf3+0x138>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_i2d>:
 8000ec4:	f090 0f00 	teq	r0, #0
 8000ec8:	bf04      	itt	eq
 8000eca:	2100      	moveq	r1, #0
 8000ecc:	4770      	bxeq	lr
 8000ece:	b530      	push	{r4, r5, lr}
 8000ed0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000ed4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000ed8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000edc:	bf48      	it	mi
 8000ede:	4240      	negmi	r0, r0
 8000ee0:	f04f 0100 	mov.w	r1, #0
 8000ee4:	e73e      	b.n	8000d64 <__adddf3+0x138>
 8000ee6:	bf00      	nop

08000ee8 <__aeabi_f2d>:
 8000ee8:	0042      	lsls	r2, r0, #1
 8000eea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000eee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ef2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000ef6:	bf1f      	itttt	ne
 8000ef8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000efc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000f00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000f04:	4770      	bxne	lr
 8000f06:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000f0a:	bf08      	it	eq
 8000f0c:	4770      	bxeq	lr
 8000f0e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000f12:	bf04      	itt	eq
 8000f14:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000f18:	4770      	bxeq	lr
 8000f1a:	b530      	push	{r4, r5, lr}
 8000f1c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000f20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000f24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000f28:	e71c      	b.n	8000d64 <__adddf3+0x138>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_ul2d>:
 8000f2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000f30:	bf08      	it	eq
 8000f32:	4770      	bxeq	lr
 8000f34:	b530      	push	{r4, r5, lr}
 8000f36:	f04f 0500 	mov.w	r5, #0
 8000f3a:	e00a      	b.n	8000f52 <__aeabi_l2d+0x16>

08000f3c <__aeabi_l2d>:
 8000f3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000f40:	bf08      	it	eq
 8000f42:	4770      	bxeq	lr
 8000f44:	b530      	push	{r4, r5, lr}
 8000f46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000f4a:	d502      	bpl.n	8000f52 <__aeabi_l2d+0x16>
 8000f4c:	4240      	negs	r0, r0
 8000f4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f52:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000f56:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000f5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000f5e:	f43f aed8 	beq.w	8000d12 <__adddf3+0xe6>
 8000f62:	f04f 0203 	mov.w	r2, #3
 8000f66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000f6a:	bf18      	it	ne
 8000f6c:	3203      	addne	r2, #3
 8000f6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000f72:	bf18      	it	ne
 8000f74:	3203      	addne	r2, #3
 8000f76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000f7a:	f1c2 0320 	rsb	r3, r2, #32
 8000f7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f82:	fa20 f002 	lsr.w	r0, r0, r2
 8000f86:	fa01 fe03 	lsl.w	lr, r1, r3
 8000f8a:	ea40 000e 	orr.w	r0, r0, lr
 8000f8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000f92:	4414      	add	r4, r2
 8000f94:	e6bd      	b.n	8000d12 <__adddf3+0xe6>
 8000f96:	bf00      	nop

08000f98 <__aeabi_dmul>:
 8000f98:	b570      	push	{r4, r5, r6, lr}
 8000f9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000fa2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000fa6:	bf1d      	ittte	ne
 8000fa8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000fac:	ea94 0f0c 	teqne	r4, ip
 8000fb0:	ea95 0f0c 	teqne	r5, ip
 8000fb4:	f000 f8de 	bleq	8001174 <__aeabi_dmul+0x1dc>
 8000fb8:	442c      	add	r4, r5
 8000fba:	ea81 0603 	eor.w	r6, r1, r3
 8000fbe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000fc2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000fc6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000fca:	bf18      	it	ne
 8000fcc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000fd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000fd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fd8:	d038      	beq.n	800104c <__aeabi_dmul+0xb4>
 8000fda:	fba0 ce02 	umull	ip, lr, r0, r2
 8000fde:	f04f 0500 	mov.w	r5, #0
 8000fe2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000fe6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000fea:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000fee:	f04f 0600 	mov.w	r6, #0
 8000ff2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000ff6:	f09c 0f00 	teq	ip, #0
 8000ffa:	bf18      	it	ne
 8000ffc:	f04e 0e01 	orrne.w	lr, lr, #1
 8001000:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8001004:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8001008:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800100c:	d204      	bcs.n	8001018 <__aeabi_dmul+0x80>
 800100e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8001012:	416d      	adcs	r5, r5
 8001014:	eb46 0606 	adc.w	r6, r6, r6
 8001018:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800101c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8001020:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8001024:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8001028:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800102c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8001030:	bf88      	it	hi
 8001032:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001036:	d81e      	bhi.n	8001076 <__aeabi_dmul+0xde>
 8001038:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800103c:	bf08      	it	eq
 800103e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8001042:	f150 0000 	adcs.w	r0, r0, #0
 8001046:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800104a:	bd70      	pop	{r4, r5, r6, pc}
 800104c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8001050:	ea46 0101 	orr.w	r1, r6, r1
 8001054:	ea40 0002 	orr.w	r0, r0, r2
 8001058:	ea81 0103 	eor.w	r1, r1, r3
 800105c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8001060:	bfc2      	ittt	gt
 8001062:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001066:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800106a:	bd70      	popgt	{r4, r5, r6, pc}
 800106c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001070:	f04f 0e00 	mov.w	lr, #0
 8001074:	3c01      	subs	r4, #1
 8001076:	f300 80ab 	bgt.w	80011d0 <__aeabi_dmul+0x238>
 800107a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800107e:	bfde      	ittt	le
 8001080:	2000      	movle	r0, #0
 8001082:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8001086:	bd70      	pople	{r4, r5, r6, pc}
 8001088:	f1c4 0400 	rsb	r4, r4, #0
 800108c:	3c20      	subs	r4, #32
 800108e:	da35      	bge.n	80010fc <__aeabi_dmul+0x164>
 8001090:	340c      	adds	r4, #12
 8001092:	dc1b      	bgt.n	80010cc <__aeabi_dmul+0x134>
 8001094:	f104 0414 	add.w	r4, r4, #20
 8001098:	f1c4 0520 	rsb	r5, r4, #32
 800109c:	fa00 f305 	lsl.w	r3, r0, r5
 80010a0:	fa20 f004 	lsr.w	r0, r0, r4
 80010a4:	fa01 f205 	lsl.w	r2, r1, r5
 80010a8:	ea40 0002 	orr.w	r0, r0, r2
 80010ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80010b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80010b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80010b8:	fa21 f604 	lsr.w	r6, r1, r4
 80010bc:	eb42 0106 	adc.w	r1, r2, r6
 80010c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80010c4:	bf08      	it	eq
 80010c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80010ca:	bd70      	pop	{r4, r5, r6, pc}
 80010cc:	f1c4 040c 	rsb	r4, r4, #12
 80010d0:	f1c4 0520 	rsb	r5, r4, #32
 80010d4:	fa00 f304 	lsl.w	r3, r0, r4
 80010d8:	fa20 f005 	lsr.w	r0, r0, r5
 80010dc:	fa01 f204 	lsl.w	r2, r1, r4
 80010e0:	ea40 0002 	orr.w	r0, r0, r2
 80010e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80010e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80010ec:	f141 0100 	adc.w	r1, r1, #0
 80010f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80010f4:	bf08      	it	eq
 80010f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80010fa:	bd70      	pop	{r4, r5, r6, pc}
 80010fc:	f1c4 0520 	rsb	r5, r4, #32
 8001100:	fa00 f205 	lsl.w	r2, r0, r5
 8001104:	ea4e 0e02 	orr.w	lr, lr, r2
 8001108:	fa20 f304 	lsr.w	r3, r0, r4
 800110c:	fa01 f205 	lsl.w	r2, r1, r5
 8001110:	ea43 0302 	orr.w	r3, r3, r2
 8001114:	fa21 f004 	lsr.w	r0, r1, r4
 8001118:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800111c:	fa21 f204 	lsr.w	r2, r1, r4
 8001120:	ea20 0002 	bic.w	r0, r0, r2
 8001124:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8001128:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800112c:	bf08      	it	eq
 800112e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001132:	bd70      	pop	{r4, r5, r6, pc}
 8001134:	f094 0f00 	teq	r4, #0
 8001138:	d10f      	bne.n	800115a <__aeabi_dmul+0x1c2>
 800113a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800113e:	0040      	lsls	r0, r0, #1
 8001140:	eb41 0101 	adc.w	r1, r1, r1
 8001144:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001148:	bf08      	it	eq
 800114a:	3c01      	subeq	r4, #1
 800114c:	d0f7      	beq.n	800113e <__aeabi_dmul+0x1a6>
 800114e:	ea41 0106 	orr.w	r1, r1, r6
 8001152:	f095 0f00 	teq	r5, #0
 8001156:	bf18      	it	ne
 8001158:	4770      	bxne	lr
 800115a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800115e:	0052      	lsls	r2, r2, #1
 8001160:	eb43 0303 	adc.w	r3, r3, r3
 8001164:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001168:	bf08      	it	eq
 800116a:	3d01      	subeq	r5, #1
 800116c:	d0f7      	beq.n	800115e <__aeabi_dmul+0x1c6>
 800116e:	ea43 0306 	orr.w	r3, r3, r6
 8001172:	4770      	bx	lr
 8001174:	ea94 0f0c 	teq	r4, ip
 8001178:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800117c:	bf18      	it	ne
 800117e:	ea95 0f0c 	teqne	r5, ip
 8001182:	d00c      	beq.n	800119e <__aeabi_dmul+0x206>
 8001184:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001188:	bf18      	it	ne
 800118a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800118e:	d1d1      	bne.n	8001134 <__aeabi_dmul+0x19c>
 8001190:	ea81 0103 	eor.w	r1, r1, r3
 8001194:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001198:	f04f 0000 	mov.w	r0, #0
 800119c:	bd70      	pop	{r4, r5, r6, pc}
 800119e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80011a2:	bf06      	itte	eq
 80011a4:	4610      	moveq	r0, r2
 80011a6:	4619      	moveq	r1, r3
 80011a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80011ac:	d019      	beq.n	80011e2 <__aeabi_dmul+0x24a>
 80011ae:	ea94 0f0c 	teq	r4, ip
 80011b2:	d102      	bne.n	80011ba <__aeabi_dmul+0x222>
 80011b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80011b8:	d113      	bne.n	80011e2 <__aeabi_dmul+0x24a>
 80011ba:	ea95 0f0c 	teq	r5, ip
 80011be:	d105      	bne.n	80011cc <__aeabi_dmul+0x234>
 80011c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80011c4:	bf1c      	itt	ne
 80011c6:	4610      	movne	r0, r2
 80011c8:	4619      	movne	r1, r3
 80011ca:	d10a      	bne.n	80011e2 <__aeabi_dmul+0x24a>
 80011cc:	ea81 0103 	eor.w	r1, r1, r3
 80011d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80011d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80011d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80011dc:	f04f 0000 	mov.w	r0, #0
 80011e0:	bd70      	pop	{r4, r5, r6, pc}
 80011e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80011e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80011ea:	bd70      	pop	{r4, r5, r6, pc}

080011ec <__aeabi_ddiv>:
 80011ec:	b570      	push	{r4, r5, r6, lr}
 80011ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80011f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80011f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80011fa:	bf1d      	ittte	ne
 80011fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001200:	ea94 0f0c 	teqne	r4, ip
 8001204:	ea95 0f0c 	teqne	r5, ip
 8001208:	f000 f8a7 	bleq	800135a <__aeabi_ddiv+0x16e>
 800120c:	eba4 0405 	sub.w	r4, r4, r5
 8001210:	ea81 0e03 	eor.w	lr, r1, r3
 8001214:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001218:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800121c:	f000 8088 	beq.w	8001330 <__aeabi_ddiv+0x144>
 8001220:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001224:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8001228:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800122c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8001230:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8001234:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8001238:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800123c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8001240:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8001244:	429d      	cmp	r5, r3
 8001246:	bf08      	it	eq
 8001248:	4296      	cmpeq	r6, r2
 800124a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800124e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8001252:	d202      	bcs.n	800125a <__aeabi_ddiv+0x6e>
 8001254:	085b      	lsrs	r3, r3, #1
 8001256:	ea4f 0232 	mov.w	r2, r2, rrx
 800125a:	1ab6      	subs	r6, r6, r2
 800125c:	eb65 0503 	sbc.w	r5, r5, r3
 8001260:	085b      	lsrs	r3, r3, #1
 8001262:	ea4f 0232 	mov.w	r2, r2, rrx
 8001266:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800126a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800126e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001272:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001276:	bf22      	ittt	cs
 8001278:	1ab6      	subcs	r6, r6, r2
 800127a:	4675      	movcs	r5, lr
 800127c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001280:	085b      	lsrs	r3, r3, #1
 8001282:	ea4f 0232 	mov.w	r2, r2, rrx
 8001286:	ebb6 0e02 	subs.w	lr, r6, r2
 800128a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800128e:	bf22      	ittt	cs
 8001290:	1ab6      	subcs	r6, r6, r2
 8001292:	4675      	movcs	r5, lr
 8001294:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001298:	085b      	lsrs	r3, r3, #1
 800129a:	ea4f 0232 	mov.w	r2, r2, rrx
 800129e:	ebb6 0e02 	subs.w	lr, r6, r2
 80012a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80012a6:	bf22      	ittt	cs
 80012a8:	1ab6      	subcs	r6, r6, r2
 80012aa:	4675      	movcs	r5, lr
 80012ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80012b0:	085b      	lsrs	r3, r3, #1
 80012b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80012b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80012ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80012be:	bf22      	ittt	cs
 80012c0:	1ab6      	subcs	r6, r6, r2
 80012c2:	4675      	movcs	r5, lr
 80012c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80012c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80012cc:	d018      	beq.n	8001300 <__aeabi_ddiv+0x114>
 80012ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80012d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80012d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80012da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80012de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80012e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80012e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80012ea:	d1c0      	bne.n	800126e <__aeabi_ddiv+0x82>
 80012ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80012f0:	d10b      	bne.n	800130a <__aeabi_ddiv+0x11e>
 80012f2:	ea41 0100 	orr.w	r1, r1, r0
 80012f6:	f04f 0000 	mov.w	r0, #0
 80012fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80012fe:	e7b6      	b.n	800126e <__aeabi_ddiv+0x82>
 8001300:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001304:	bf04      	itt	eq
 8001306:	4301      	orreq	r1, r0
 8001308:	2000      	moveq	r0, #0
 800130a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800130e:	bf88      	it	hi
 8001310:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001314:	f63f aeaf 	bhi.w	8001076 <__aeabi_dmul+0xde>
 8001318:	ebb5 0c03 	subs.w	ip, r5, r3
 800131c:	bf04      	itt	eq
 800131e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8001322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001326:	f150 0000 	adcs.w	r0, r0, #0
 800132a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800132e:	bd70      	pop	{r4, r5, r6, pc}
 8001330:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8001334:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8001338:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800133c:	bfc2      	ittt	gt
 800133e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001342:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001346:	bd70      	popgt	{r4, r5, r6, pc}
 8001348:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800134c:	f04f 0e00 	mov.w	lr, #0
 8001350:	3c01      	subs	r4, #1
 8001352:	e690      	b.n	8001076 <__aeabi_dmul+0xde>
 8001354:	ea45 0e06 	orr.w	lr, r5, r6
 8001358:	e68d      	b.n	8001076 <__aeabi_dmul+0xde>
 800135a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800135e:	ea94 0f0c 	teq	r4, ip
 8001362:	bf08      	it	eq
 8001364:	ea95 0f0c 	teqeq	r5, ip
 8001368:	f43f af3b 	beq.w	80011e2 <__aeabi_dmul+0x24a>
 800136c:	ea94 0f0c 	teq	r4, ip
 8001370:	d10a      	bne.n	8001388 <__aeabi_ddiv+0x19c>
 8001372:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001376:	f47f af34 	bne.w	80011e2 <__aeabi_dmul+0x24a>
 800137a:	ea95 0f0c 	teq	r5, ip
 800137e:	f47f af25 	bne.w	80011cc <__aeabi_dmul+0x234>
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	e72c      	b.n	80011e2 <__aeabi_dmul+0x24a>
 8001388:	ea95 0f0c 	teq	r5, ip
 800138c:	d106      	bne.n	800139c <__aeabi_ddiv+0x1b0>
 800138e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001392:	f43f aefd 	beq.w	8001190 <__aeabi_dmul+0x1f8>
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	e722      	b.n	80011e2 <__aeabi_dmul+0x24a>
 800139c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80013a0:	bf18      	it	ne
 80013a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80013a6:	f47f aec5 	bne.w	8001134 <__aeabi_dmul+0x19c>
 80013aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80013ae:	f47f af0d 	bne.w	80011cc <__aeabi_dmul+0x234>
 80013b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80013b6:	f47f aeeb 	bne.w	8001190 <__aeabi_dmul+0x1f8>
 80013ba:	e712      	b.n	80011e2 <__aeabi_dmul+0x24a>

080013bc <__gedf2>:
 80013bc:	f04f 3cff 	mov.w	ip, #4294967295
 80013c0:	e006      	b.n	80013d0 <__cmpdf2+0x4>
 80013c2:	bf00      	nop

080013c4 <__ledf2>:
 80013c4:	f04f 0c01 	mov.w	ip, #1
 80013c8:	e002      	b.n	80013d0 <__cmpdf2+0x4>
 80013ca:	bf00      	nop

080013cc <__cmpdf2>:
 80013cc:	f04f 0c01 	mov.w	ip, #1
 80013d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80013d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80013d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80013dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80013e0:	bf18      	it	ne
 80013e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80013e6:	d01b      	beq.n	8001420 <__cmpdf2+0x54>
 80013e8:	b001      	add	sp, #4
 80013ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80013ee:	bf0c      	ite	eq
 80013f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80013f4:	ea91 0f03 	teqne	r1, r3
 80013f8:	bf02      	ittt	eq
 80013fa:	ea90 0f02 	teqeq	r0, r2
 80013fe:	2000      	moveq	r0, #0
 8001400:	4770      	bxeq	lr
 8001402:	f110 0f00 	cmn.w	r0, #0
 8001406:	ea91 0f03 	teq	r1, r3
 800140a:	bf58      	it	pl
 800140c:	4299      	cmppl	r1, r3
 800140e:	bf08      	it	eq
 8001410:	4290      	cmpeq	r0, r2
 8001412:	bf2c      	ite	cs
 8001414:	17d8      	asrcs	r0, r3, #31
 8001416:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800141a:	f040 0001 	orr.w	r0, r0, #1
 800141e:	4770      	bx	lr
 8001420:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001424:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001428:	d102      	bne.n	8001430 <__cmpdf2+0x64>
 800142a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800142e:	d107      	bne.n	8001440 <__cmpdf2+0x74>
 8001430:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001434:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001438:	d1d6      	bne.n	80013e8 <__cmpdf2+0x1c>
 800143a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800143e:	d0d3      	beq.n	80013e8 <__cmpdf2+0x1c>
 8001440:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <__aeabi_cdrcmple>:
 8001448:	4684      	mov	ip, r0
 800144a:	4610      	mov	r0, r2
 800144c:	4662      	mov	r2, ip
 800144e:	468c      	mov	ip, r1
 8001450:	4619      	mov	r1, r3
 8001452:	4663      	mov	r3, ip
 8001454:	e000      	b.n	8001458 <__aeabi_cdcmpeq>
 8001456:	bf00      	nop

08001458 <__aeabi_cdcmpeq>:
 8001458:	b501      	push	{r0, lr}
 800145a:	f7ff ffb7 	bl	80013cc <__cmpdf2>
 800145e:	2800      	cmp	r0, #0
 8001460:	bf48      	it	mi
 8001462:	f110 0f00 	cmnmi.w	r0, #0
 8001466:	bd01      	pop	{r0, pc}

08001468 <__aeabi_dcmpeq>:
 8001468:	f84d ed08 	str.w	lr, [sp, #-8]!
 800146c:	f7ff fff4 	bl	8001458 <__aeabi_cdcmpeq>
 8001470:	bf0c      	ite	eq
 8001472:	2001      	moveq	r0, #1
 8001474:	2000      	movne	r0, #0
 8001476:	f85d fb08 	ldr.w	pc, [sp], #8
 800147a:	bf00      	nop

0800147c <__aeabi_dcmplt>:
 800147c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001480:	f7ff ffea 	bl	8001458 <__aeabi_cdcmpeq>
 8001484:	bf34      	ite	cc
 8001486:	2001      	movcc	r0, #1
 8001488:	2000      	movcs	r0, #0
 800148a:	f85d fb08 	ldr.w	pc, [sp], #8
 800148e:	bf00      	nop

08001490 <__aeabi_dcmple>:
 8001490:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001494:	f7ff ffe0 	bl	8001458 <__aeabi_cdcmpeq>
 8001498:	bf94      	ite	ls
 800149a:	2001      	movls	r0, #1
 800149c:	2000      	movhi	r0, #0
 800149e:	f85d fb08 	ldr.w	pc, [sp], #8
 80014a2:	bf00      	nop

080014a4 <__aeabi_dcmpge>:
 80014a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80014a8:	f7ff ffce 	bl	8001448 <__aeabi_cdrcmple>
 80014ac:	bf94      	ite	ls
 80014ae:	2001      	movls	r0, #1
 80014b0:	2000      	movhi	r0, #0
 80014b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80014b6:	bf00      	nop

080014b8 <__aeabi_dcmpgt>:
 80014b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80014bc:	f7ff ffc4 	bl	8001448 <__aeabi_cdrcmple>
 80014c0:	bf34      	ite	cc
 80014c2:	2001      	movcc	r0, #1
 80014c4:	2000      	movcs	r0, #0
 80014c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80014ca:	bf00      	nop

080014cc <__aeabi_dcmpun>:
 80014cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80014d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80014d4:	d102      	bne.n	80014dc <__aeabi_dcmpun+0x10>
 80014d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80014da:	d10a      	bne.n	80014f2 <__aeabi_dcmpun+0x26>
 80014dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80014e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80014e4:	d102      	bne.n	80014ec <__aeabi_dcmpun+0x20>
 80014e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80014ea:	d102      	bne.n	80014f2 <__aeabi_dcmpun+0x26>
 80014ec:	f04f 0000 	mov.w	r0, #0
 80014f0:	4770      	bx	lr
 80014f2:	f04f 0001 	mov.w	r0, #1
 80014f6:	4770      	bx	lr

080014f8 <__aeabi_d2iz>:
 80014f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80014fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001500:	d215      	bcs.n	800152e <__aeabi_d2iz+0x36>
 8001502:	d511      	bpl.n	8001528 <__aeabi_d2iz+0x30>
 8001504:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001508:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800150c:	d912      	bls.n	8001534 <__aeabi_d2iz+0x3c>
 800150e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001512:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001516:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800151a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800151e:	fa23 f002 	lsr.w	r0, r3, r2
 8001522:	bf18      	it	ne
 8001524:	4240      	negne	r0, r0
 8001526:	4770      	bx	lr
 8001528:	f04f 0000 	mov.w	r0, #0
 800152c:	4770      	bx	lr
 800152e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001532:	d105      	bne.n	8001540 <__aeabi_d2iz+0x48>
 8001534:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001538:	bf08      	it	eq
 800153a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800153e:	4770      	bx	lr
 8001540:	f04f 0000 	mov.w	r0, #0
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <__aeabi_uldivmod>:
 8001548:	b953      	cbnz	r3, 8001560 <__aeabi_uldivmod+0x18>
 800154a:	b94a      	cbnz	r2, 8001560 <__aeabi_uldivmod+0x18>
 800154c:	2900      	cmp	r1, #0
 800154e:	bf08      	it	eq
 8001550:	2800      	cmpeq	r0, #0
 8001552:	bf1c      	itt	ne
 8001554:	f04f 31ff 	movne.w	r1, #4294967295
 8001558:	f04f 30ff 	movne.w	r0, #4294967295
 800155c:	f000 b974 	b.w	8001848 <__aeabi_idiv0>
 8001560:	f1ad 0c08 	sub.w	ip, sp, #8
 8001564:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001568:	f000 f806 	bl	8001578 <__udivmoddi4>
 800156c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001574:	b004      	add	sp, #16
 8001576:	4770      	bx	lr

08001578 <__udivmoddi4>:
 8001578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800157c:	9d08      	ldr	r5, [sp, #32]
 800157e:	4604      	mov	r4, r0
 8001580:	468e      	mov	lr, r1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d14d      	bne.n	8001622 <__udivmoddi4+0xaa>
 8001586:	428a      	cmp	r2, r1
 8001588:	4694      	mov	ip, r2
 800158a:	d969      	bls.n	8001660 <__udivmoddi4+0xe8>
 800158c:	fab2 f282 	clz	r2, r2
 8001590:	b152      	cbz	r2, 80015a8 <__udivmoddi4+0x30>
 8001592:	fa01 f302 	lsl.w	r3, r1, r2
 8001596:	f1c2 0120 	rsb	r1, r2, #32
 800159a:	fa20 f101 	lsr.w	r1, r0, r1
 800159e:	fa0c fc02 	lsl.w	ip, ip, r2
 80015a2:	ea41 0e03 	orr.w	lr, r1, r3
 80015a6:	4094      	lsls	r4, r2
 80015a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80015ac:	0c21      	lsrs	r1, r4, #16
 80015ae:	fbbe f6f8 	udiv	r6, lr, r8
 80015b2:	fa1f f78c 	uxth.w	r7, ip
 80015b6:	fb08 e316 	mls	r3, r8, r6, lr
 80015ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80015be:	fb06 f107 	mul.w	r1, r6, r7
 80015c2:	4299      	cmp	r1, r3
 80015c4:	d90a      	bls.n	80015dc <__udivmoddi4+0x64>
 80015c6:	eb1c 0303 	adds.w	r3, ip, r3
 80015ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80015ce:	f080 811f 	bcs.w	8001810 <__udivmoddi4+0x298>
 80015d2:	4299      	cmp	r1, r3
 80015d4:	f240 811c 	bls.w	8001810 <__udivmoddi4+0x298>
 80015d8:	3e02      	subs	r6, #2
 80015da:	4463      	add	r3, ip
 80015dc:	1a5b      	subs	r3, r3, r1
 80015de:	b2a4      	uxth	r4, r4
 80015e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80015e4:	fb08 3310 	mls	r3, r8, r0, r3
 80015e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80015ec:	fb00 f707 	mul.w	r7, r0, r7
 80015f0:	42a7      	cmp	r7, r4
 80015f2:	d90a      	bls.n	800160a <__udivmoddi4+0x92>
 80015f4:	eb1c 0404 	adds.w	r4, ip, r4
 80015f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80015fc:	f080 810a 	bcs.w	8001814 <__udivmoddi4+0x29c>
 8001600:	42a7      	cmp	r7, r4
 8001602:	f240 8107 	bls.w	8001814 <__udivmoddi4+0x29c>
 8001606:	4464      	add	r4, ip
 8001608:	3802      	subs	r0, #2
 800160a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800160e:	1be4      	subs	r4, r4, r7
 8001610:	2600      	movs	r6, #0
 8001612:	b11d      	cbz	r5, 800161c <__udivmoddi4+0xa4>
 8001614:	40d4      	lsrs	r4, r2
 8001616:	2300      	movs	r3, #0
 8001618:	e9c5 4300 	strd	r4, r3, [r5]
 800161c:	4631      	mov	r1, r6
 800161e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001622:	428b      	cmp	r3, r1
 8001624:	d909      	bls.n	800163a <__udivmoddi4+0xc2>
 8001626:	2d00      	cmp	r5, #0
 8001628:	f000 80ef 	beq.w	800180a <__udivmoddi4+0x292>
 800162c:	2600      	movs	r6, #0
 800162e:	e9c5 0100 	strd	r0, r1, [r5]
 8001632:	4630      	mov	r0, r6
 8001634:	4631      	mov	r1, r6
 8001636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800163a:	fab3 f683 	clz	r6, r3
 800163e:	2e00      	cmp	r6, #0
 8001640:	d14a      	bne.n	80016d8 <__udivmoddi4+0x160>
 8001642:	428b      	cmp	r3, r1
 8001644:	d302      	bcc.n	800164c <__udivmoddi4+0xd4>
 8001646:	4282      	cmp	r2, r0
 8001648:	f200 80f9 	bhi.w	800183e <__udivmoddi4+0x2c6>
 800164c:	1a84      	subs	r4, r0, r2
 800164e:	eb61 0303 	sbc.w	r3, r1, r3
 8001652:	2001      	movs	r0, #1
 8001654:	469e      	mov	lr, r3
 8001656:	2d00      	cmp	r5, #0
 8001658:	d0e0      	beq.n	800161c <__udivmoddi4+0xa4>
 800165a:	e9c5 4e00 	strd	r4, lr, [r5]
 800165e:	e7dd      	b.n	800161c <__udivmoddi4+0xa4>
 8001660:	b902      	cbnz	r2, 8001664 <__udivmoddi4+0xec>
 8001662:	deff      	udf	#255	; 0xff
 8001664:	fab2 f282 	clz	r2, r2
 8001668:	2a00      	cmp	r2, #0
 800166a:	f040 8092 	bne.w	8001792 <__udivmoddi4+0x21a>
 800166e:	eba1 010c 	sub.w	r1, r1, ip
 8001672:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001676:	fa1f fe8c 	uxth.w	lr, ip
 800167a:	2601      	movs	r6, #1
 800167c:	0c20      	lsrs	r0, r4, #16
 800167e:	fbb1 f3f7 	udiv	r3, r1, r7
 8001682:	fb07 1113 	mls	r1, r7, r3, r1
 8001686:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800168a:	fb0e f003 	mul.w	r0, lr, r3
 800168e:	4288      	cmp	r0, r1
 8001690:	d908      	bls.n	80016a4 <__udivmoddi4+0x12c>
 8001692:	eb1c 0101 	adds.w	r1, ip, r1
 8001696:	f103 38ff 	add.w	r8, r3, #4294967295
 800169a:	d202      	bcs.n	80016a2 <__udivmoddi4+0x12a>
 800169c:	4288      	cmp	r0, r1
 800169e:	f200 80cb 	bhi.w	8001838 <__udivmoddi4+0x2c0>
 80016a2:	4643      	mov	r3, r8
 80016a4:	1a09      	subs	r1, r1, r0
 80016a6:	b2a4      	uxth	r4, r4
 80016a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80016ac:	fb07 1110 	mls	r1, r7, r0, r1
 80016b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80016b4:	fb0e fe00 	mul.w	lr, lr, r0
 80016b8:	45a6      	cmp	lr, r4
 80016ba:	d908      	bls.n	80016ce <__udivmoddi4+0x156>
 80016bc:	eb1c 0404 	adds.w	r4, ip, r4
 80016c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80016c4:	d202      	bcs.n	80016cc <__udivmoddi4+0x154>
 80016c6:	45a6      	cmp	lr, r4
 80016c8:	f200 80bb 	bhi.w	8001842 <__udivmoddi4+0x2ca>
 80016cc:	4608      	mov	r0, r1
 80016ce:	eba4 040e 	sub.w	r4, r4, lr
 80016d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80016d6:	e79c      	b.n	8001612 <__udivmoddi4+0x9a>
 80016d8:	f1c6 0720 	rsb	r7, r6, #32
 80016dc:	40b3      	lsls	r3, r6
 80016de:	fa22 fc07 	lsr.w	ip, r2, r7
 80016e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80016e6:	fa20 f407 	lsr.w	r4, r0, r7
 80016ea:	fa01 f306 	lsl.w	r3, r1, r6
 80016ee:	431c      	orrs	r4, r3
 80016f0:	40f9      	lsrs	r1, r7
 80016f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80016f6:	fa00 f306 	lsl.w	r3, r0, r6
 80016fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80016fe:	0c20      	lsrs	r0, r4, #16
 8001700:	fa1f fe8c 	uxth.w	lr, ip
 8001704:	fb09 1118 	mls	r1, r9, r8, r1
 8001708:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800170c:	fb08 f00e 	mul.w	r0, r8, lr
 8001710:	4288      	cmp	r0, r1
 8001712:	fa02 f206 	lsl.w	r2, r2, r6
 8001716:	d90b      	bls.n	8001730 <__udivmoddi4+0x1b8>
 8001718:	eb1c 0101 	adds.w	r1, ip, r1
 800171c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001720:	f080 8088 	bcs.w	8001834 <__udivmoddi4+0x2bc>
 8001724:	4288      	cmp	r0, r1
 8001726:	f240 8085 	bls.w	8001834 <__udivmoddi4+0x2bc>
 800172a:	f1a8 0802 	sub.w	r8, r8, #2
 800172e:	4461      	add	r1, ip
 8001730:	1a09      	subs	r1, r1, r0
 8001732:	b2a4      	uxth	r4, r4
 8001734:	fbb1 f0f9 	udiv	r0, r1, r9
 8001738:	fb09 1110 	mls	r1, r9, r0, r1
 800173c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001740:	fb00 fe0e 	mul.w	lr, r0, lr
 8001744:	458e      	cmp	lr, r1
 8001746:	d908      	bls.n	800175a <__udivmoddi4+0x1e2>
 8001748:	eb1c 0101 	adds.w	r1, ip, r1
 800174c:	f100 34ff 	add.w	r4, r0, #4294967295
 8001750:	d26c      	bcs.n	800182c <__udivmoddi4+0x2b4>
 8001752:	458e      	cmp	lr, r1
 8001754:	d96a      	bls.n	800182c <__udivmoddi4+0x2b4>
 8001756:	3802      	subs	r0, #2
 8001758:	4461      	add	r1, ip
 800175a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800175e:	fba0 9402 	umull	r9, r4, r0, r2
 8001762:	eba1 010e 	sub.w	r1, r1, lr
 8001766:	42a1      	cmp	r1, r4
 8001768:	46c8      	mov	r8, r9
 800176a:	46a6      	mov	lr, r4
 800176c:	d356      	bcc.n	800181c <__udivmoddi4+0x2a4>
 800176e:	d053      	beq.n	8001818 <__udivmoddi4+0x2a0>
 8001770:	b15d      	cbz	r5, 800178a <__udivmoddi4+0x212>
 8001772:	ebb3 0208 	subs.w	r2, r3, r8
 8001776:	eb61 010e 	sbc.w	r1, r1, lr
 800177a:	fa01 f707 	lsl.w	r7, r1, r7
 800177e:	fa22 f306 	lsr.w	r3, r2, r6
 8001782:	40f1      	lsrs	r1, r6
 8001784:	431f      	orrs	r7, r3
 8001786:	e9c5 7100 	strd	r7, r1, [r5]
 800178a:	2600      	movs	r6, #0
 800178c:	4631      	mov	r1, r6
 800178e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001792:	f1c2 0320 	rsb	r3, r2, #32
 8001796:	40d8      	lsrs	r0, r3
 8001798:	fa0c fc02 	lsl.w	ip, ip, r2
 800179c:	fa21 f303 	lsr.w	r3, r1, r3
 80017a0:	4091      	lsls	r1, r2
 80017a2:	4301      	orrs	r1, r0
 80017a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80017a8:	fa1f fe8c 	uxth.w	lr, ip
 80017ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80017b0:	fb07 3610 	mls	r6, r7, r0, r3
 80017b4:	0c0b      	lsrs	r3, r1, #16
 80017b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80017ba:	fb00 f60e 	mul.w	r6, r0, lr
 80017be:	429e      	cmp	r6, r3
 80017c0:	fa04 f402 	lsl.w	r4, r4, r2
 80017c4:	d908      	bls.n	80017d8 <__udivmoddi4+0x260>
 80017c6:	eb1c 0303 	adds.w	r3, ip, r3
 80017ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80017ce:	d22f      	bcs.n	8001830 <__udivmoddi4+0x2b8>
 80017d0:	429e      	cmp	r6, r3
 80017d2:	d92d      	bls.n	8001830 <__udivmoddi4+0x2b8>
 80017d4:	3802      	subs	r0, #2
 80017d6:	4463      	add	r3, ip
 80017d8:	1b9b      	subs	r3, r3, r6
 80017da:	b289      	uxth	r1, r1
 80017dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80017e0:	fb07 3316 	mls	r3, r7, r6, r3
 80017e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80017e8:	fb06 f30e 	mul.w	r3, r6, lr
 80017ec:	428b      	cmp	r3, r1
 80017ee:	d908      	bls.n	8001802 <__udivmoddi4+0x28a>
 80017f0:	eb1c 0101 	adds.w	r1, ip, r1
 80017f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80017f8:	d216      	bcs.n	8001828 <__udivmoddi4+0x2b0>
 80017fa:	428b      	cmp	r3, r1
 80017fc:	d914      	bls.n	8001828 <__udivmoddi4+0x2b0>
 80017fe:	3e02      	subs	r6, #2
 8001800:	4461      	add	r1, ip
 8001802:	1ac9      	subs	r1, r1, r3
 8001804:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001808:	e738      	b.n	800167c <__udivmoddi4+0x104>
 800180a:	462e      	mov	r6, r5
 800180c:	4628      	mov	r0, r5
 800180e:	e705      	b.n	800161c <__udivmoddi4+0xa4>
 8001810:	4606      	mov	r6, r0
 8001812:	e6e3      	b.n	80015dc <__udivmoddi4+0x64>
 8001814:	4618      	mov	r0, r3
 8001816:	e6f8      	b.n	800160a <__udivmoddi4+0x92>
 8001818:	454b      	cmp	r3, r9
 800181a:	d2a9      	bcs.n	8001770 <__udivmoddi4+0x1f8>
 800181c:	ebb9 0802 	subs.w	r8, r9, r2
 8001820:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001824:	3801      	subs	r0, #1
 8001826:	e7a3      	b.n	8001770 <__udivmoddi4+0x1f8>
 8001828:	4646      	mov	r6, r8
 800182a:	e7ea      	b.n	8001802 <__udivmoddi4+0x28a>
 800182c:	4620      	mov	r0, r4
 800182e:	e794      	b.n	800175a <__udivmoddi4+0x1e2>
 8001830:	4640      	mov	r0, r8
 8001832:	e7d1      	b.n	80017d8 <__udivmoddi4+0x260>
 8001834:	46d0      	mov	r8, sl
 8001836:	e77b      	b.n	8001730 <__udivmoddi4+0x1b8>
 8001838:	3b02      	subs	r3, #2
 800183a:	4461      	add	r1, ip
 800183c:	e732      	b.n	80016a4 <__udivmoddi4+0x12c>
 800183e:	4630      	mov	r0, r6
 8001840:	e709      	b.n	8001656 <__udivmoddi4+0xde>
 8001842:	4464      	add	r4, ip
 8001844:	3802      	subs	r0, #2
 8001846:	e742      	b.n	80016ce <__udivmoddi4+0x156>

08001848 <__aeabi_idiv0>:
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop

0800184c <LCD_sendCommand>:





void LCD_sendCommand(uint8_t com){
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
    uint8_t tmpCmd = com;
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 0);
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <LCD_sendCommand+0x54>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <LCD_sendCommand+0x58>)
 8001860:	8811      	ldrh	r1, [r2, #0]
 8001862:	2200      	movs	r2, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f001 f9b5 	bl	8002bd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <LCD_sendCommand+0x5c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <LCD_sendCommand+0x60>)
 8001870:	8811      	ldrh	r1, [r2, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f001 f9ad 	bl	8002bd4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 1);
 800187a:	f107 010f 	add.w	r1, r7, #15
 800187e:	2301      	movs	r3, #1
 8001880:	2201      	movs	r2, #1
 8001882:	480b      	ldr	r0, [pc, #44]	; (80018b0 <LCD_sendCommand+0x64>)
 8001884:	f003 f84b 	bl	800491e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <LCD_sendCommand+0x5c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <LCD_sendCommand+0x60>)
 800188e:	8811      	ldrh	r1, [r2, #0]
 8001890:	2201      	movs	r2, #1
 8001892:	4618      	mov	r0, r3
 8001894:	f001 f99e 	bl	8002bd4 <HAL_GPIO_WritePin>
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	200004ac 	.word	0x200004ac
 80018a4:	200004b0 	.word	0x200004b0
 80018a8:	200004a4 	.word	0x200004a4
 80018ac:	200004a8 	.word	0x200004a8
 80018b0:	20000440 	.word	0x20000440

080018b4 <LCD_sendData_NoCS>:
    uint8_t tmpCmd = com;
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 0);
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 1);
}

void LCD_sendData_NoCS(uint8_t data){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	uint8_t tmpDat = data;
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 1);
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <LCD_sendData_NoCS+0x34>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <LCD_sendData_NoCS+0x38>)
 80018c8:	8811      	ldrh	r1, [r2, #0]
 80018ca:	2201      	movs	r2, #1
 80018cc:	4618      	mov	r0, r3
 80018ce:	f001 f981 	bl	8002bd4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpDat, 1, 1);
 80018d2:	f107 010f 	add.w	r1, r7, #15
 80018d6:	2301      	movs	r3, #1
 80018d8:	2201      	movs	r2, #1
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <LCD_sendData_NoCS+0x3c>)
 80018dc:	f003 f81f 	bl	800491e <HAL_SPI_Transmit>
}
 80018e0:	bf00      	nop
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200004ac 	.word	0x200004ac
 80018ec:	200004b0 	.word	0x200004b0
 80018f0:	20000440 	.word	0x20000440

080018f4 <LCD_sendCommandArg>:

void LCD_sendCommandArg(uint8_t command, uint8_t *dataBytes, uint8_t dataLen){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	4613      	mov	r3, r2
 8001902:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 8001904:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <LCD_sendCommandArg+0x90>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a1f      	ldr	r2, [pc, #124]	; (8001988 <LCD_sendCommandArg+0x94>)
 800190a:	8811      	ldrh	r1, [r2, #0]
 800190c:	2200      	movs	r2, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f001 f960 	bl	8002bd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 0); //0 for command
 8001914:	4b1d      	ldr	r3, [pc, #116]	; (800198c <LCD_sendCommandArg+0x98>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <LCD_sendCommandArg+0x9c>)
 800191a:	8811      	ldrh	r1, [r2, #0]
 800191c:	2200      	movs	r2, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f001 f958 	bl	8002bd4 <HAL_GPIO_WritePin>
    uint8_t buf = command;
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&lcdSPIhandle, &buf, 1, 1);
 8001928:	f107 010b 	add.w	r1, r7, #11
 800192c:	2301      	movs	r3, #1
 800192e:	2201      	movs	r2, #1
 8001930:	4818      	ldr	r0, [pc, #96]	; (8001994 <LCD_sendCommandArg+0xa0>)
 8001932:	f002 fff4 	bl	800491e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 1); //start writing args
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <LCD_sendCommandArg+0x98>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a15      	ldr	r2, [pc, #84]	; (8001990 <LCD_sendCommandArg+0x9c>)
 800193c:	8811      	ldrh	r1, [r2, #0]
 800193e:	2201      	movs	r2, #1
 8001940:	4618      	mov	r0, r3
 8001942:	f001 f947 	bl	8002bd4 <HAL_GPIO_WritePin>
    for(int i = 0; i < dataLen; ++i){
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	e00b      	b.n	8001964 <LCD_sendCommandArg+0x70>
        HAL_SPI_Transmit(&lcdSPIhandle, dataBytes, 1, 1);
 800194c:	2301      	movs	r3, #1
 800194e:	2201      	movs	r2, #1
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	4810      	ldr	r0, [pc, #64]	; (8001994 <LCD_sendCommandArg+0xa0>)
 8001954:	f002 ffe3 	bl	800491e <HAL_SPI_Transmit>
        dataBytes++;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	3301      	adds	r3, #1
 800195c:	603b      	str	r3, [r7, #0]
    for(int i = 0; i < dataLen; ++i){
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3301      	adds	r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	dbef      	blt.n	800194c <LCD_sendCommandArg+0x58>
    }  
    HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <LCD_sendCommandArg+0x90>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a05      	ldr	r2, [pc, #20]	; (8001988 <LCD_sendCommandArg+0x94>)
 8001972:	8811      	ldrh	r1, [r2, #0]
 8001974:	2201      	movs	r2, #1
 8001976:	4618      	mov	r0, r3
 8001978:	f001 f92c 	bl	8002bd4 <HAL_GPIO_WritePin>
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200004a4 	.word	0x200004a4
 8001988:	200004a8 	.word	0x200004a8
 800198c:	200004ac 	.word	0x200004ac
 8001990:	200004b0 	.word	0x200004b0
 8001994:	20000440 	.word	0x20000440

08001998 <LCD_init>:

void LCD_init(SPI_HandleTypeDef *spiLcdHandle,
                    GPIO_TypeDef *csPORT, uint16_t csPIN, 
                    GPIO_TypeDef *dcPORT, uint16_t dcPIN, 
                    GPIO_TypeDef *resetPORT, uint16_t resetPIN){
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b098      	sub	sp, #96	; 0x60
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	80fb      	strh	r3, [r7, #6]
    //Set pins and ports---------------------------------------------
    //Copy SPI settings
    memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 80019a8:	2264      	movs	r2, #100	; 0x64
 80019aa:	68f9      	ldr	r1, [r7, #12]
 80019ac:	4874      	ldr	r0, [pc, #464]	; (8001b80 <LCD_init+0x1e8>)
 80019ae:	f004 fc95 	bl	80062dc <memcpy>
    //CS pin
    tftCS_GPIO = csPORT;
 80019b2:	4a74      	ldr	r2, [pc, #464]	; (8001b84 <LCD_init+0x1ec>)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	6013      	str	r3, [r2, #0]
    tftCS_PIN = csPIN;
 80019b8:	4a73      	ldr	r2, [pc, #460]	; (8001b88 <LCD_init+0x1f0>)
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	8013      	strh	r3, [r2, #0]
    HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 80019be:	4b71      	ldr	r3, [pc, #452]	; (8001b84 <LCD_init+0x1ec>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a71      	ldr	r2, [pc, #452]	; (8001b88 <LCD_init+0x1f0>)
 80019c4:	8811      	ldrh	r1, [r2, #0]
 80019c6:	2201      	movs	r2, #1
 80019c8:	4618      	mov	r0, r3
 80019ca:	f001 f903 	bl	8002bd4 <HAL_GPIO_WritePin>
    //DC pin
    tftDC_GPIO = dcPORT;
 80019ce:	4a6f      	ldr	r2, [pc, #444]	; (8001b8c <LCD_init+0x1f4>)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	6013      	str	r3, [r2, #0]
    tftDC_PIN = dcPIN;
 80019d4:	4a6e      	ldr	r2, [pc, #440]	; (8001b90 <LCD_init+0x1f8>)
 80019d6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80019da:	8013      	strh	r3, [r2, #0]
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 1);
 80019dc:	4b6b      	ldr	r3, [pc, #428]	; (8001b8c <LCD_init+0x1f4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a6b      	ldr	r2, [pc, #428]	; (8001b90 <LCD_init+0x1f8>)
 80019e2:	8811      	ldrh	r1, [r2, #0]
 80019e4:	2201      	movs	r2, #1
 80019e6:	4618      	mov	r0, r3
 80019e8:	f001 f8f4 	bl	8002bd4 <HAL_GPIO_WritePin>
    //RESET pin
    tftRESET_GPIO = resetPORT;
 80019ec:	4a69      	ldr	r2, [pc, #420]	; (8001b94 <LCD_init+0x1fc>)
 80019ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019f0:	6013      	str	r3, [r2, #0]
    tftRESET_PIN = resetPIN;
 80019f2:	4a69      	ldr	r2, [pc, #420]	; (8001b98 <LCD_init+0x200>)
 80019f4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80019f8:	8013      	strh	r3, [r2, #0]
    HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, 1);
 80019fa:	4b66      	ldr	r3, [pc, #408]	; (8001b94 <LCD_init+0x1fc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a66      	ldr	r2, [pc, #408]	; (8001b98 <LCD_init+0x200>)
 8001a00:	8811      	ldrh	r1, [r2, #0]
 8001a02:	2201      	movs	r2, #1
 8001a04:	4618      	mov	r0, r3
 8001a06:	f001 f8e5 	bl	8002bd4 <HAL_GPIO_WritePin>
   


    //init commands---------------------------------------------------
    //Soft Reset
    HAL_Delay(10);
 8001a0a:	200a      	movs	r0, #10
 8001a0c:	f000 fe46 	bl	800269c <HAL_Delay>
    LCD_sendCommand(HX8357_SWRESET);
 8001a10:	2001      	movs	r0, #1
 8001a12:	f7ff ff1b 	bl	800184c <LCD_sendCommand>
    HAL_Delay(10);
 8001a16:	200a      	movs	r0, #10
 8001a18:	f000 fe40 	bl	800269c <HAL_Delay>

    //Misc display values
    uint8_t setC[] = {0xFF, 0x83, 0x57};
 8001a1c:	4a5f      	ldr	r2, [pc, #380]	; (8001b9c <LCD_init+0x204>)
 8001a1e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	4611      	mov	r1, r2
 8001a26:	8019      	strh	r1, [r3, #0]
 8001a28:	3302      	adds	r3, #2
 8001a2a:	0c12      	lsrs	r2, r2, #16
 8001a2c:	701a      	strb	r2, [r3, #0]
    LCD_sendCommandArg(HX8357D_SETC, setC, 3);
 8001a2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a32:	2203      	movs	r2, #3
 8001a34:	4619      	mov	r1, r3
 8001a36:	20b9      	movs	r0, #185	; 0xb9
 8001a38:	f7ff ff5c 	bl	80018f4 <LCD_sendCommandArg>
    HAL_Delay(500);
 8001a3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a40:	f000 fe2c 	bl	800269c <HAL_Delay>
    uint8_t setRGB[] = {0x80, 0x00, 0x06, 0x06};
 8001a44:	4b56      	ldr	r3, [pc, #344]	; (8001ba0 <LCD_init+0x208>)
 8001a46:	65bb      	str	r3, [r7, #88]	; 0x58
    LCD_sendCommandArg(HX8357_SETRGB, setRGB, 4);
 8001a48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	4619      	mov	r1, r3
 8001a50:	20b3      	movs	r0, #179	; 0xb3
 8001a52:	f7ff ff4f 	bl	80018f4 <LCD_sendCommandArg>
    uint8_t setCOM = 0x25;
 8001a56:	2325      	movs	r3, #37	; 0x25
 8001a58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    LCD_sendCommandArg(HX8357D_SETCOM, &setCOM, 1);
 8001a5c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001a60:	2201      	movs	r2, #1
 8001a62:	4619      	mov	r1, r3
 8001a64:	20b6      	movs	r0, #182	; 0xb6
 8001a66:	f7ff ff45 	bl	80018f4 <LCD_sendCommandArg>
    uint8_t setOSC = 0x68;
 8001a6a:	2368      	movs	r3, #104	; 0x68
 8001a6c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    LCD_sendCommandArg(HX8357_SETOSC, &setOSC, 1);
 8001a70:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8001a74:	2201      	movs	r2, #1
 8001a76:	4619      	mov	r1, r3
 8001a78:	20b0      	movs	r0, #176	; 0xb0
 8001a7a:	f7ff ff3b 	bl	80018f4 <LCD_sendCommandArg>
    uint8_t setPANEL = 0x05;
 8001a7e:	2305      	movs	r3, #5
 8001a80:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    LCD_sendCommandArg(HX8357_SETPANEL, &setPANEL, 1);
 8001a84:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	20cc      	movs	r0, #204	; 0xcc
 8001a8e:	f7ff ff31 	bl	80018f4 <LCD_sendCommandArg>
    uint8_t setPWR1[] = {0x00, 0x15, 0x1C, 0x1C, 0x83, 0xAA};
 8001a92:	4a44      	ldr	r2, [pc, #272]	; (8001ba4 <LCD_init+0x20c>)
 8001a94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a9c:	6018      	str	r0, [r3, #0]
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	8019      	strh	r1, [r3, #0]
    LCD_sendCommandArg(HX8357_SETPWR1, setPWR1, 6);
 8001aa2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aa6:	2206      	movs	r2, #6
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	20b1      	movs	r0, #177	; 0xb1
 8001aac:	f7ff ff22 	bl	80018f4 <LCD_sendCommandArg>
    uint8_t setSTBA[] = {0x50, 0x50, 0x01, 0x3C, 0x1E, 0x08};
 8001ab0:	4a3d      	ldr	r2, [pc, #244]	; (8001ba8 <LCD_init+0x210>)
 8001ab2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aba:	6018      	str	r0, [r3, #0]
 8001abc:	3304      	adds	r3, #4
 8001abe:	8019      	strh	r1, [r3, #0]
    LCD_sendCommandArg(HX8357D_SETSTBA, setSTBA, 6);
 8001ac0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ac4:	2206      	movs	r2, #6
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	20c0      	movs	r0, #192	; 0xc0
 8001aca:	f7ff ff13 	bl	80018f4 <LCD_sendCommandArg>
    uint8_t setCYC[] = {0x02, 0x40, 0x00, 0x2A, 0x2A, 0x0D, 0x78};
 8001ace:	4a37      	ldr	r2, [pc, #220]	; (8001bac <LCD_init+0x214>)
 8001ad0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ad4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ad8:	6018      	str	r0, [r3, #0]
 8001ada:	3304      	adds	r3, #4
 8001adc:	8019      	strh	r1, [r3, #0]
 8001ade:	3302      	adds	r3, #2
 8001ae0:	0c0a      	lsrs	r2, r1, #16
 8001ae2:	701a      	strb	r2, [r3, #0]
    LCD_sendCommandArg(HX8357D_SETCYC, setCYC, 7);
 8001ae4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ae8:	2207      	movs	r2, #7
 8001aea:	4619      	mov	r1, r3
 8001aec:	20b4      	movs	r0, #180	; 0xb4
 8001aee:	f7ff ff01 	bl	80018f4 <LCD_sendCommandArg>
    uint8_t setGAMMA[] = {0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B,
 8001af2:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <LCD_init+0x218>)
 8001af4:	f107 0418 	add.w	r4, r7, #24
 8001af8:	461d      	mov	r5, r3
 8001afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b02:	682b      	ldr	r3, [r5, #0]
 8001b04:	8023      	strh	r3, [r4, #0]
                        0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03,
                        0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B,
                        0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03,
                        0x00, 0x01};
    LCD_sendCommandArg(HX8357D_SETGAMMA, setGAMMA, 34);
 8001b06:	f107 0318 	add.w	r3, r7, #24
 8001b0a:	2222      	movs	r2, #34	; 0x22
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	20e0      	movs	r0, #224	; 0xe0
 8001b10:	f7ff fef0 	bl	80018f4 <LCD_sendCommandArg>
    uint8_t setCOLMOD = 0x55;
 8001b14:	2355      	movs	r3, #85	; 0x55
 8001b16:	75fb      	strb	r3, [r7, #23]
    LCD_sendCommandArg(HX8357_COLMOD, &setCOLMOD, 1);
 8001b18:	f107 0317 	add.w	r3, r7, #23
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4619      	mov	r1, r3
 8001b20:	203a      	movs	r0, #58	; 0x3a
 8001b22:	f7ff fee7 	bl	80018f4 <LCD_sendCommandArg>
    uint8_t setMADCTL = 0xC0;
 8001b26:	23c0      	movs	r3, #192	; 0xc0
 8001b28:	75bb      	strb	r3, [r7, #22]
    LCD_sendCommandArg(HX8357_MADCTL, &setMADCTL, 1);
 8001b2a:	f107 0316 	add.w	r3, r7, #22
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4619      	mov	r1, r3
 8001b32:	2036      	movs	r0, #54	; 0x36
 8001b34:	f7ff fede 	bl	80018f4 <LCD_sendCommandArg>
    uint8_t setTEON = 0x00;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	757b      	strb	r3, [r7, #21]
    LCD_sendCommandArg(HX8357_TEON, &setTEON, 1);
 8001b3c:	f107 0315 	add.w	r3, r7, #21
 8001b40:	2201      	movs	r2, #1
 8001b42:	4619      	mov	r1, r3
 8001b44:	2035      	movs	r0, #53	; 0x35
 8001b46:	f7ff fed5 	bl	80018f4 <LCD_sendCommandArg>
    uint8_t setTEARLINE[] = {0x00, 0x02};
 8001b4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b4e:	823b      	strh	r3, [r7, #16]
    LCD_sendCommandArg(HX8357_TEARLINE, setTEARLINE, 2);
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	2202      	movs	r2, #2
 8001b56:	4619      	mov	r1, r3
 8001b58:	2044      	movs	r0, #68	; 0x44
 8001b5a:	f7ff fecb 	bl	80018f4 <LCD_sendCommandArg>

    //Display on
    LCD_sendCommand(HX8357_SLPOUT);
 8001b5e:	2011      	movs	r0, #17
 8001b60:	f7ff fe74 	bl	800184c <LCD_sendCommand>
    HAL_Delay(150);
 8001b64:	2096      	movs	r0, #150	; 0x96
 8001b66:	f000 fd99 	bl	800269c <HAL_Delay>
    LCD_sendCommand(HX8357_DISPON);
 8001b6a:	2029      	movs	r0, #41	; 0x29
 8001b6c:	f7ff fe6e 	bl	800184c <LCD_sendCommand>
    HAL_Delay(50);
 8001b70:	2032      	movs	r0, #50	; 0x32
 8001b72:	f000 fd93 	bl	800269c <HAL_Delay>
}
 8001b76:	bf00      	nop
 8001b78:	3760      	adds	r7, #96	; 0x60
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000440 	.word	0x20000440
 8001b84:	200004a4 	.word	0x200004a4
 8001b88:	200004a8 	.word	0x200004a8
 8001b8c:	200004ac 	.word	0x200004ac
 8001b90:	200004b0 	.word	0x200004b0
 8001b94:	200004b4 	.word	0x200004b4
 8001b98:	200004b8 	.word	0x200004b8
 8001b9c:	08008d68 	.word	0x08008d68
 8001ba0:	06060080 	.word	0x06060080
 8001ba4:	08008d6c 	.word	0x08008d6c
 8001ba8:	08008d74 	.word	0x08008d74
 8001bac:	08008d7c 	.word	0x08008d7c
 8001bb0:	08008d84 	.word	0x08008d84

08001bb4 <LCD_setCursorPosition>:

//Graphics function prototypes
void LCD_setCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4604      	mov	r4, r0
 8001bbc:	4608      	mov	r0, r1
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4623      	mov	r3, r4
 8001bc4:	80fb      	strh	r3, [r7, #6]
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80bb      	strh	r3, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	807b      	strh	r3, [r7, #2]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	803b      	strh	r3, [r7, #0]
  uint8_t setCASET[] = {x1 >> 8, x1 & 0xFF, x2 >> 8, x2 & 0xFF};
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	733b      	strb	r3, [r7, #12]
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	737b      	strb	r3, [r7, #13]
 8001be2:	887b      	ldrh	r3, [r7, #2]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	73bb      	strb	r3, [r7, #14]
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	73fb      	strb	r3, [r7, #15]
  LCD_sendCommandArg(HX8357_CASET, setCASET, 4);
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	202a      	movs	r0, #42	; 0x2a
 8001bfc:	f7ff fe7a 	bl	80018f4 <LCD_sendCommandArg>
  uint8_t setPASET[] = {y1 >> 8, y1 & 0xFF, y2 >> 8, y2 & 0xFF};
 8001c00:	88bb      	ldrh	r3, [r7, #4]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	723b      	strb	r3, [r7, #8]
 8001c0a:	88bb      	ldrh	r3, [r7, #4]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	727b      	strb	r3, [r7, #9]
 8001c10:	883b      	ldrh	r3, [r7, #0]
 8001c12:	0a1b      	lsrs	r3, r3, #8
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	72bb      	strb	r3, [r7, #10]
 8001c1a:	883b      	ldrh	r3, [r7, #0]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	72fb      	strb	r3, [r7, #11]
  LCD_sendCommandArg(HX8357_PASET, setPASET, 4);
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	2204      	movs	r2, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	202b      	movs	r0, #43	; 0x2b
 8001c2a:	f7ff fe63 	bl	80018f4 <LCD_sendCommandArg>
  LCD_sendCommand(HX8357_RAMWR);
 8001c2e:	202c      	movs	r0, #44	; 0x2c
 8001c30:	f7ff fe0c 	bl	800184c <LCD_sendCommand>
  //TODO needs write immediately after (RAMWR)
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd90      	pop	{r4, r7, pc}

08001c3c <LCD_rect>:
  LCD_setCursorPosition(x, y, x, y);
  uint8_t setRAMWR[] = {color >> 8, color & 0xFF};
  LCD_sendCommandArg(HX8357_RAMWR, setRAMWR, 2);
}

void LCD_rect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4604      	mov	r4, r0
 8001c44:	4608      	mov	r0, r1
 8001c46:	4611      	mov	r1, r2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	80fb      	strh	r3, [r7, #6]
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80bb      	strh	r3, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	807b      	strh	r3, [r7, #2]
 8001c56:	4613      	mov	r3, r2
 8001c58:	803b      	strh	r3, [r7, #0]
	uint32_t n = (x2 - x1 + 1) * (y2 - y1 + 1);
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	3301      	adds	r3, #1
 8001c62:	8839      	ldrh	r1, [r7, #0]
 8001c64:	88ba      	ldrh	r2, [r7, #4]
 8001c66:	1a8a      	subs	r2, r1, r2
 8001c68:	3201      	adds	r2, #1
 8001c6a:	fb02 f303 	mul.w	r3, r2, r3
 8001c6e:	60fb      	str	r3, [r7, #12]
	LCD_setCursorPosition(x1, y1, x2, y2);
 8001c70:	883b      	ldrh	r3, [r7, #0]
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	88b9      	ldrh	r1, [r7, #4]
 8001c76:	88f8      	ldrh	r0, [r7, #6]
 8001c78:	f7ff ff9c 	bl	8001bb4 <LCD_setCursorPosition>

	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <LCD_rect+0x90>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <LCD_rect+0x94>)
 8001c82:	8811      	ldrh	r1, [r2, #0]
 8001c84:	2200      	movs	r2, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 ffa4 	bl	8002bd4 <HAL_GPIO_WritePin>
	while (n) {
 8001c8c:	e00e      	b.n	8001cac <LCD_rect+0x70>
		n--;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
		LCD_sendData_NoCS(color>>8);
 8001c94:	8c3b      	ldrh	r3, [r7, #32]
 8001c96:	0a1b      	lsrs	r3, r3, #8
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fe09 	bl	80018b4 <LCD_sendData_NoCS>
		LCD_sendData_NoCS(color&0xff);
 8001ca2:	8c3b      	ldrh	r3, [r7, #32]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fe04 	bl	80018b4 <LCD_sendData_NoCS>
	while (n) {
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1ed      	bne.n	8001c8e <LCD_rect+0x52>
	}
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <LCD_rect+0x90>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <LCD_rect+0x94>)
 8001cb8:	8811      	ldrh	r1, [r2, #0]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 ff89 	bl	8002bd4 <HAL_GPIO_WritePin>
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd90      	pop	{r4, r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200004a4 	.word	0x200004a4
 8001cd0:	200004a8 	.word	0x200004a8

08001cd4 <LCD_fill>:
void LCD_fill(uint16_t color){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	80fb      	strh	r3, [r7, #6]
	uint32_t n = LCD_PIXEL_COUNT;
 8001cde:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 8001ce2:	60fb      	str	r3, [r7, #12]
	LCD_setCursorPosition(0, 0, HX8357_TFTWIDTH-1, HX8357_TFTHEIGHT-1);
 8001ce4:	f240 13df 	movw	r3, #479	; 0x1df
 8001ce8:	f240 123f 	movw	r2, #319	; 0x13f
 8001cec:	2100      	movs	r1, #0
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f7ff ff60 	bl	8001bb4 <LCD_setCursorPosition>

	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <LCD_fill+0x70>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <LCD_fill+0x74>)
 8001cfa:	8811      	ldrh	r1, [r2, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 ff68 	bl	8002bd4 <HAL_GPIO_WritePin>
	while (n) {
 8001d04:	e00e      	b.n	8001d24 <LCD_fill+0x50>
		n--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
		LCD_sendData_NoCS(color>>8);
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fdcd 	bl	80018b4 <LCD_sendData_NoCS>
		LCD_sendData_NoCS(color&0xff);
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fdc8 	bl	80018b4 <LCD_sendData_NoCS>
	while (n) {
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1ed      	bne.n	8001d06 <LCD_fill+0x32>
	}
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <LCD_fill+0x70>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a06      	ldr	r2, [pc, #24]	; (8001d48 <LCD_fill+0x74>)
 8001d30:	8811      	ldrh	r1, [r2, #0]
 8001d32:	2201      	movs	r2, #1
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 ff4d 	bl	8002bd4 <HAL_GPIO_WritePin>
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200004a4 	.word	0x200004a4
 8001d48:	200004a8 	.word	0x200004a8

08001d4c <delay_us>:
// Debug pin
static GPIO_TypeDef *n64_DEBUG_GPIO;
static uint16_t n64_DEBUG_PIN;

void delay_us(uint16_t us) // blocking delay
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(countTim, 0); // set the counter value a 0
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <delay_us+0x34>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(countTim) < us); // wait for the counter to reach the us input in the parameter
 8001d60:	bf00      	nop
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <delay_us+0x34>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d3f8      	bcc.n	8001d62 <delay_us+0x16>
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	200004bc 	.word	0x200004bc

08001d84 <writeOne>:

void writeOne()
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
	uint32_t *writeAdd = (uint32_t *)(GPIOC_ADDR + ODR_OFFSET);
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <writeOne+0x38>)
 8001d8c:	607b      	str	r3, [r7, #4]
	*writeAdd &= ~(1 << 6);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	601a      	str	r2, [r3, #0]
	delay_us(5);
 8001d9a:	2005      	movs	r0, #5
 8001d9c:	f7ff ffd6 	bl	8001d4c <delay_us>
	*writeAdd |= (1 << 6);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	601a      	str	r2, [r3, #0]
	delay_us(15);
 8001dac:	200f      	movs	r0, #15
 8001dae:	f7ff ffcd 	bl	8001d4c <delay_us>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	48000814 	.word	0x48000814

08001dc0 <writeZero>:

void writeZero()
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
	uint32_t *writeAdd = (uint32_t *)(GPIOC_ADDR + ODR_OFFSET);
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <writeZero+0x38>)
 8001dc8:	607b      	str	r3, [r7, #4]
	*writeAdd &= ~(1 << 6);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	601a      	str	r2, [r3, #0]
	// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
	delay_us(15); // 3.125
 8001dd6:	200f      	movs	r0, #15
 8001dd8:	f7ff ffb8 	bl	8001d4c <delay_us>
	*writeAdd |= (1 << 6);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	601a      	str	r2, [r3, #0]
	// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
	delay_us(5); // 1.375
 8001de8:	2005      	movs	r0, #5
 8001dea:	f7ff ffaf 	bl	8001d4c <delay_us>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	48000814 	.word	0x48000814

08001dfc <pollRead>:

// ret >> 31:            buttonval (?)
//(ret >> 8) & 0xff:    XVal (signed char)
// ret & 0xff:           YVal (signed char)
uint32_t pollRead()
{ // takes ~150us total.
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
	// poll
	volatile uint32_t *readAdd = (uint32_t *)(GPIOC_ADDR + IDR_OFFSET);
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <pollRead+0xf4>)
 8001e04:	607b      	str	r3, [r7, #4]
	volatile uint32_t *writeAdd = (uint32_t *)(GPIOC_ADDR + ODR_OFFSET);
 8001e06:	4b3b      	ldr	r3, [pc, #236]	; (8001ef4 <pollRead+0xf8>)
 8001e08:	603b      	str	r3, [r7, #0]
	uint32_t buttonVals = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
	writeZero();
 8001e0e:	f7ff ffd7 	bl	8001dc0 <writeZero>
	writeZero();
 8001e12:	f7ff ffd5 	bl	8001dc0 <writeZero>
	writeZero();
 8001e16:	f7ff ffd3 	bl	8001dc0 <writeZero>
	writeZero();
 8001e1a:	f7ff ffd1 	bl	8001dc0 <writeZero>
	writeZero();
 8001e1e:	f7ff ffcf 	bl	8001dc0 <writeZero>
	writeZero();
 8001e22:	f7ff ffcd 	bl	8001dc0 <writeZero>
	writeZero();
 8001e26:	f7ff ffcb 	bl	8001dc0 <writeZero>
	writeOne();
 8001e2a:	f7ff ffab 	bl	8001d84 <writeOne>
	*writeAdd &= ~(1 << 6);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	601a      	str	r2, [r3, #0]
	delay_us(5);
 8001e3a:	2005      	movs	r0, #5
 8001e3c:	f7ff ff86 	bl	8001d4c <delay_us>
	*writeAdd |= (1 << 6);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	601a      	str	r2, [r3, #0]
	delay_us(10);
 8001e4c:	200a      	movs	r0, #10
 8001e4e:	f7ff ff7d 	bl	8001d4c <delay_us>

	// read
	for (int i = 0; i < 31; ++i)
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	e034      	b.n	8001ec2 <pollRead+0xc6>
	{
		delay_us(5); // 5
 8001e58:	2005      	movs	r0, #5
 8001e5a:	f7ff ff77 	bl	8001d4c <delay_us>
		HAL_GPIO_WritePin(n64_DEBUG_GPIO, n64_DEBUG_PIN, 1);
 8001e5e:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <pollRead+0xfc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a26      	ldr	r2, [pc, #152]	; (8001efc <pollRead+0x100>)
 8001e64:	8811      	ldrh	r1, [r2, #0]
 8001e66:	2201      	movs	r2, #1
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 feb3 	bl	8002bd4 <HAL_GPIO_WritePin>
		buttonVals |= (*readAdd >> 6) & 1; // 0.5u
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	099b      	lsrs	r3, r3, #6
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_WritePin(n64_DEBUG_GPIO, n64_DEBUG_PIN, 0);
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <pollRead+0xfc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <pollRead+0x100>)
 8001e84:	8811      	ldrh	r1, [r2, #0]
 8001e86:	2200      	movs	r2, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fea3 	bl	8002bd4 <HAL_GPIO_WritePin>
		buttonVals = buttonVals << 1;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
		delay_us(7);
 8001e94:	2007      	movs	r0, #7
 8001e96:	f7ff ff59 	bl	8001d4c <delay_us>
		if (i % 10)
 8001e9a:	68b9      	ldr	r1, [r7, #8]
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <pollRead+0x104>)
 8001e9e:	fb83 2301 	smull	r2, r3, r3, r1
 8001ea2:	109a      	asrs	r2, r3, #2
 8001ea4:	17cb      	asrs	r3, r1, #31
 8001ea6:	1ad2      	subs	r2, r2, r3
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	1aca      	subs	r2, r1, r3
 8001eb2:	2a00      	cmp	r2, #0
 8001eb4:	d002      	beq.n	8001ebc <pollRead+0xc0>
		{
			delay_us(1);
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f7ff ff48 	bl	8001d4c <delay_us>
	for (int i = 0; i < 31; ++i)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b1e      	cmp	r3, #30
 8001ec6:	ddc7      	ble.n	8001e58 <pollRead+0x5c>
		}
		//	 if (i==15) {
		//		 delay_us(4);
		//	 }
	}
	delay_us(5);
 8001ec8:	2005      	movs	r0, #5
 8001eca:	f7ff ff3f 	bl	8001d4c <delay_us>
	buttonVals |= (*readAdd >> 6) & 1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	099b      	lsrs	r3, r3, #6
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
	delay_us(15);
 8001ede:	200f      	movs	r0, #15
 8001ee0:	f7ff ff34 	bl	8001d4c <delay_us>
	return buttonVals;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	48000810 	.word	0x48000810
 8001ef4:	48000814 	.word	0x48000814
 8001ef8:	200004c8 	.word	0x200004c8
 8001efc:	200004cc 	.word	0x200004cc
 8001f00:	66666667 	.word	0x66666667

08001f04 <N64_init>:

void N64_init(TIM_HandleTypeDef *countTimer, GPIO_TypeDef *Data_GPIO, uint16_t Data_PIN, GPIO_TypeDef *Debug_GPIO, uint16_t Debug_PIN)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	4613      	mov	r3, r2
 8001f12:	80fb      	strh	r3, [r7, #6]
	countTim = countTimer;
 8001f14:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <N64_init+0x40>)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6013      	str	r3, [r2, #0]
	n64_GPIO = Data_GPIO; // due to nature of making C6 inout by registers, this pin assignment does not matter
 8001f1a:	4a0b      	ldr	r2, [pc, #44]	; (8001f48 <N64_init+0x44>)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	6013      	str	r3, [r2, #0]
	n64_PIN = Data_PIN;
 8001f20:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <N64_init+0x48>)
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	8013      	strh	r3, [r2, #0]
	n64_DEBUG_GPIO = Debug_GPIO;
 8001f26:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <N64_init+0x4c>)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6013      	str	r3, [r2, #0]
	n64_DEBUG_PIN = Debug_PIN;
 8001f2c:	4a09      	ldr	r2, [pc, #36]	; (8001f54 <N64_init+0x50>)
 8001f2e:	8b3b      	ldrh	r3, [r7, #24]
 8001f30:	8013      	strh	r3, [r2, #0]

	HAL_TIM_Base_Start(countTim);
 8001f32:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <N64_init+0x40>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 f81c 	bl	8004f74 <HAL_TIM_Base_Start>
}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200004bc 	.word	0x200004bc
 8001f48:	200004c0 	.word	0x200004c0
 8001f4c:	200004c4 	.word	0x200004c4
 8001f50:	200004c8 	.word	0x200004c8
 8001f54:	200004cc 	.word	0x200004cc

08001f58 <step_init>:
void step_init(TIM_HandleTypeDef *countTimer, int mode, 
GPIO_TypeDef *A0GPIO, uint16_t A0PIN,GPIO_TypeDef *A1GPIO, uint16_t A1PIN,
GPIO_TypeDef *A2GPIO, uint16_t A2PIN,GPIO_TypeDef *A3GPIO, uint16_t A3PIN,
GPIO_TypeDef *B0GPIO, uint16_t B0PIN,GPIO_TypeDef *B1GPIO, uint16_t B1PIN,
GPIO_TypeDef *B2GPIO, uint16_t B2PIN,GPIO_TypeDef *B3GPIO, uint16_t B3PIN)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	807b      	strh	r3, [r7, #2]
	countTim = countTimer;
 8001f66:	4a1f      	ldr	r2, [pc, #124]	; (8001fe4 <step_init+0x8c>)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6013      	str	r3, [r2, #0]
	stepMode = mode;
 8001f6c:	4a1e      	ldr	r2, [pc, #120]	; (8001fe8 <step_init+0x90>)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	6013      	str	r3, [r2, #0]
	A0_GPIO = A0GPIO;
 8001f72:	4a1e      	ldr	r2, [pc, #120]	; (8001fec <step_init+0x94>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6013      	str	r3, [r2, #0]
	A0_PIN = A0PIN;
 8001f78:	4a1d      	ldr	r2, [pc, #116]	; (8001ff0 <step_init+0x98>)
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	8013      	strh	r3, [r2, #0]
	A1_GPIO = A1GPIO;
 8001f7e:	4a1d      	ldr	r2, [pc, #116]	; (8001ff4 <step_init+0x9c>)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	6013      	str	r3, [r2, #0]
	A1_PIN = A1PIN;
 8001f84:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <step_init+0xa0>)
 8001f86:	8bbb      	ldrh	r3, [r7, #28]
 8001f88:	8013      	strh	r3, [r2, #0]
	A2_GPIO = A2GPIO;
 8001f8a:	4a1c      	ldr	r2, [pc, #112]	; (8001ffc <step_init+0xa4>)
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	6013      	str	r3, [r2, #0]
	A2_PIN = A2PIN;
 8001f90:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <step_init+0xa8>)
 8001f92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f94:	8013      	strh	r3, [r2, #0]
	A3_GPIO = A3GPIO;
 8001f96:	4a1b      	ldr	r2, [pc, #108]	; (8002004 <step_init+0xac>)
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	6013      	str	r3, [r2, #0]
	A3_PIN = A3PIN;
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <step_init+0xb0>)
 8001f9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001fa0:	8013      	strh	r3, [r2, #0]
	B0_GPIO = B0GPIO;
 8001fa2:	4a1a      	ldr	r2, [pc, #104]	; (800200c <step_init+0xb4>)
 8001fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa6:	6013      	str	r3, [r2, #0]
	B0_PIN = B0PIN;
 8001fa8:	4a19      	ldr	r2, [pc, #100]	; (8002010 <step_init+0xb8>)
 8001faa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001fac:	8013      	strh	r3, [r2, #0]
	B1_GPIO = B1GPIO;
 8001fae:	4a19      	ldr	r2, [pc, #100]	; (8002014 <step_init+0xbc>)
 8001fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb2:	6013      	str	r3, [r2, #0]
	B1_PIN = B1PIN;
 8001fb4:	4a18      	ldr	r2, [pc, #96]	; (8002018 <step_init+0xc0>)
 8001fb6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001fb8:	8013      	strh	r3, [r2, #0]
	B2_GPIO = B2GPIO;
 8001fba:	4a18      	ldr	r2, [pc, #96]	; (800201c <step_init+0xc4>)
 8001fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fbe:	6013      	str	r3, [r2, #0]
	B2_PIN = B2PIN;
 8001fc0:	4a17      	ldr	r2, [pc, #92]	; (8002020 <step_init+0xc8>)
 8001fc2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001fc6:	8013      	strh	r3, [r2, #0]
	B3_GPIO = B3GPIO;
 8001fc8:	4a16      	ldr	r2, [pc, #88]	; (8002024 <step_init+0xcc>)
 8001fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fcc:	6013      	str	r3, [r2, #0]
	B3_PIN = B3PIN;
 8001fce:	4a16      	ldr	r2, [pc, #88]	; (8002028 <step_init+0xd0>)
 8001fd0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001fd4:	8013      	strh	r3, [r2, #0]
	
	HAL_TIM_Base_Start(countTimer);
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f002 ffcc 	bl	8004f74 <HAL_TIM_Base_Start>
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	200004d0 	.word	0x200004d0
 8001fe8:	2000006c 	.word	0x2000006c
 8001fec:	200004d8 	.word	0x200004d8
 8001ff0:	200004dc 	.word	0x200004dc
 8001ff4:	200004e0 	.word	0x200004e0
 8001ff8:	200004e4 	.word	0x200004e4
 8001ffc:	200004e8 	.word	0x200004e8
 8002000:	200004ec 	.word	0x200004ec
 8002004:	200004f0 	.word	0x200004f0
 8002008:	200004f4 	.word	0x200004f4
 800200c:	200004f8 	.word	0x200004f8
 8002010:	200004fc 	.word	0x200004fc
 8002014:	20000500 	.word	0x20000500
 8002018:	20000504 	.word	0x20000504
 800201c:	20000508 	.word	0x20000508
 8002020:	2000050c 	.word	0x2000050c
 8002024:	20000510 	.word	0x20000510
 8002028:	20000514 	.word	0x20000514

0800202c <setSpeed>:

void setSpeed(long whatSpeed)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	step_delay = (long)60 * 2 * (long)1000 / number_of_steps / whatSpeed;
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <setSpeed+0x2c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a08      	ldr	r2, [pc, #32]	; (800205c <setSpeed+0x30>)
 800203a:	fb92 f2f3 	sdiv	r2, r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	fb92 f3f3 	sdiv	r3, r2, r3
 8002044:	461a      	mov	r2, r3
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <setSpeed+0x34>)
 8002048:	601a      	str	r2, [r3, #0]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000068 	.word	0x20000068
 800205c:	0001d4c0 	.word	0x0001d4c0
 8002060:	200004d4 	.word	0x200004d4

08002064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_MspInit+0x44>)
 800206c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206e:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <HAL_MspInit+0x44>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6613      	str	r3, [r2, #96]	; 0x60
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <HAL_MspInit+0x44>)
 8002078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_MspInit+0x44>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <HAL_MspInit+0x44>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	6593      	str	r3, [r2, #88]	; 0x58
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_MspInit+0x44>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000

080020ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b0ae      	sub	sp, #184	; 0xb8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	2294      	movs	r2, #148	; 0x94
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f004 f913 	bl	80062f8 <memset>
  if(hi2c->Instance==I2C1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a21      	ldr	r2, [pc, #132]	; (800215c <HAL_I2C_MspInit+0xb0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d13b      	bne.n	8002154 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020dc:	2340      	movs	r3, #64	; 0x40
 80020de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e4:	f107 0310 	add.w	r3, r7, #16
 80020e8:	4618      	mov	r0, r3
 80020ea:	f001 fe5d 	bl	8003da8 <HAL_RCCEx_PeriphCLKConfig>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80020f4:	f7fe fd36 	bl	8000b64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_I2C_MspInit+0xb4>)
 80020fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fc:	4a18      	ldr	r2, [pc, #96]	; (8002160 <HAL_I2C_MspInit+0xb4>)
 80020fe:	f043 0302 	orr.w	r3, r3, #2
 8002102:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_I2C_MspInit+0xb4>)
 8002106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002110:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002114:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002118:	2312      	movs	r3, #18
 800211a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800212a:	2304      	movs	r3, #4
 800212c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002130:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002134:	4619      	mov	r1, r3
 8002136:	480b      	ldr	r0, [pc, #44]	; (8002164 <HAL_I2C_MspInit+0xb8>)
 8002138:	f000 fbba 	bl	80028b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_I2C_MspInit+0xb4>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	4a07      	ldr	r2, [pc, #28]	; (8002160 <HAL_I2C_MspInit+0xb4>)
 8002142:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002146:	6593      	str	r3, [r2, #88]	; 0x58
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_I2C_MspInit+0xb4>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002154:	bf00      	nop
 8002156:	37b8      	adds	r7, #184	; 0xb8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40005400 	.word	0x40005400
 8002160:	40021000 	.word	0x40021000
 8002164:	48000400 	.word	0x48000400

08002168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b0ae      	sub	sp, #184	; 0xb8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002180:	f107 0310 	add.w	r3, r7, #16
 8002184:	2294      	movs	r2, #148	; 0x94
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f004 f8b5 	bl	80062f8 <memset>
  if(huart->Instance==LPUART1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a23      	ldr	r2, [pc, #140]	; (8002220 <HAL_UART_MspInit+0xb8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d13e      	bne.n	8002216 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002198:	2320      	movs	r3, #32
 800219a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 800219c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021a0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021a2:	f107 0310 	add.w	r3, r7, #16
 80021a6:	4618      	mov	r0, r3
 80021a8:	f001 fdfe 	bl	8003da8 <HAL_RCCEx_PeriphCLKConfig>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021b2:	f7fe fcd7 	bl	8000b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_UART_MspInit+0xbc>)
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	4a1a      	ldr	r2, [pc, #104]	; (8002224 <HAL_UART_MspInit+0xbc>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	65d3      	str	r3, [r2, #92]	; 0x5c
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <HAL_UART_MspInit+0xbc>)
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <HAL_UART_MspInit+0xbc>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	4a14      	ldr	r2, [pc, #80]	; (8002224 <HAL_UART_MspInit+0xbc>)
 80021d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_UART_MspInit+0xbc>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80021e6:	f000 fef7 	bl	8002fd8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80021ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80021ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fe:	2303      	movs	r3, #3
 8002200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002204:	2308      	movs	r3, #8
 8002206:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800220a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800220e:	4619      	mov	r1, r3
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <HAL_UART_MspInit+0xc0>)
 8002212:	f000 fb4d 	bl	80028b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002216:	bf00      	nop
 8002218:	37b8      	adds	r7, #184	; 0xb8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40008000 	.word	0x40008000
 8002224:	40021000 	.word	0x40021000
 8002228:	48001800 	.word	0x48001800

0800222c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <HAL_SPI_MspInit+0x7c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d128      	bne.n	80022a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800224e:	4b17      	ldr	r3, [pc, #92]	; (80022ac <HAL_SPI_MspInit+0x80>)
 8002250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002252:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_SPI_MspInit+0x80>)
 8002254:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002258:	6613      	str	r3, [r2, #96]	; 0x60
 800225a:	4b14      	ldr	r3, [pc, #80]	; (80022ac <HAL_SPI_MspInit+0x80>)
 800225c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_SPI_MspInit+0x80>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_SPI_MspInit+0x80>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <HAL_SPI_MspInit+0x80>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800227e:	23f0      	movs	r3, #240	; 0xf0
 8002280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228a:	2303      	movs	r3, #3
 800228c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800228e:	2305      	movs	r3, #5
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002292:	f107 0314 	add.w	r3, r7, #20
 8002296:	4619      	mov	r1, r3
 8002298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800229c:	f000 fb08 	bl	80028b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022a0:	bf00      	nop
 80022a2:	3728      	adds	r7, #40	; 0x28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40013000 	.word	0x40013000
 80022ac:	40021000 	.word	0x40021000

080022b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d0:	d10c      	bne.n	80022ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6593      	str	r3, [r2, #88]	; 0x58
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80022ea:	e02c      	b.n	8002346 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a18      	ldr	r2, [pc, #96]	; (8002354 <HAL_TIM_Base_MspInit+0xa4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d127      	bne.n	8002346 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	4a15      	ldr	r2, [pc, #84]	; (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 80022fc:	f043 0304 	orr.w	r3, r3, #4
 8002300:	6593      	str	r3, [r2, #88]	; 0x58
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 8002304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	4a0f      	ldr	r2, [pc, #60]	; (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 8002314:	f043 0310 	orr.w	r3, r3, #16
 8002318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002326:	2301      	movs	r3, #1
 8002328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002336:	2302      	movs	r3, #2
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	4619      	mov	r1, r3
 8002340:	4805      	ldr	r0, [pc, #20]	; (8002358 <HAL_TIM_Base_MspInit+0xa8>)
 8002342:	f000 fab5 	bl	80028b0 <HAL_GPIO_Init>
}
 8002346:	bf00      	nop
 8002348:	3728      	adds	r7, #40	; 0x28
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	40000800 	.word	0x40000800
 8002358:	48001000 	.word	0x48001000

0800235c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <NMI_Handler+0x4>

08002362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002366:	e7fe      	b.n	8002366 <HardFault_Handler+0x4>

08002368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800236c:	e7fe      	b.n	800236c <MemManage_Handler+0x4>

0800236e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002372:	e7fe      	b.n	8002372 <BusFault_Handler+0x4>

08002374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002378:	e7fe      	b.n	8002378 <UsageFault_Handler+0x4>

0800237a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a8:	f000 f958 	bl	800265c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
	return 1;
 80023b4:	2301      	movs	r3, #1
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_kill>:

int _kill(int pid, int sig)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023ca:	f003 ff5d 	bl	8006288 <__errno>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2216      	movs	r2, #22
 80023d2:	601a      	str	r2, [r3, #0]
	return -1;
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <_exit>:

void _exit (int status)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ffe7 	bl	80023c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023f2:	e7fe      	b.n	80023f2 <_exit+0x12>

080023f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	e00a      	b.n	800241c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002406:	f3af 8000 	nop.w
 800240a:	4601      	mov	r1, r0
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	60ba      	str	r2, [r7, #8]
 8002412:	b2ca      	uxtb	r2, r1
 8002414:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3301      	adds	r3, #1
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	429a      	cmp	r2, r3
 8002422:	dbf0      	blt.n	8002406 <_read+0x12>
	}

return len;
 8002424:	687b      	ldr	r3, [r7, #4]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	e009      	b.n	8002454 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	60ba      	str	r2, [r7, #8]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fb79 	bl	8000b40 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	3301      	adds	r3, #1
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	429a      	cmp	r2, r3
 800245a:	dbf1      	blt.n	8002440 <_write+0x12>
	}
	return len;
 800245c:	687b      	ldr	r3, [r7, #4]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <_close>:

int _close(int file)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
	return -1;
 800246e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800248e:	605a      	str	r2, [r3, #4]
	return 0;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <_isatty>:

int _isatty(int file)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
	return 1;
 80024a6:	2301      	movs	r3, #1
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
	return 0;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <_sbrk+0x5c>)
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <_sbrk+0x60>)
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e4:	4b13      	ldr	r3, [pc, #76]	; (8002534 <_sbrk+0x64>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <_sbrk+0x64>)
 80024ee:	4a12      	ldr	r2, [pc, #72]	; (8002538 <_sbrk+0x68>)
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d207      	bcs.n	8002510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002500:	f003 fec2 	bl	8006288 <__errno>
 8002504:	4603      	mov	r3, r0
 8002506:	220c      	movs	r2, #12
 8002508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
 800250e:	e009      	b.n	8002524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <_sbrk+0x64>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <_sbrk+0x64>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <_sbrk+0x64>)
 8002520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002522:	68fb      	ldr	r3, [r7, #12]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	200a0000 	.word	0x200a0000
 8002530:	00000400 	.word	0x00000400
 8002534:	20000518 	.word	0x20000518
 8002538:	20000530 	.word	0x20000530

0800253c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <SystemInit+0x20>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	4a05      	ldr	r2, [pc, #20]	; (800255c <SystemInit+0x20>)
 8002548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800254c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002598 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002564:	f7ff ffea 	bl	800253c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002568:	480c      	ldr	r0, [pc, #48]	; (800259c <LoopForever+0x6>)
  ldr r1, =_edata
 800256a:	490d      	ldr	r1, [pc, #52]	; (80025a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800256c:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <LoopForever+0xe>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002570:	e002      	b.n	8002578 <LoopCopyDataInit>

08002572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002576:	3304      	adds	r3, #4

08002578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800257c:	d3f9      	bcc.n	8002572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257e:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002580:	4c0a      	ldr	r4, [pc, #40]	; (80025ac <LoopForever+0x16>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002584:	e001      	b.n	800258a <LoopFillZerobss>

08002586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002588:	3204      	adds	r2, #4

0800258a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800258c:	d3fb      	bcc.n	8002586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800258e:	f003 fe81 	bl	8006294 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002592:	f7fd fe35 	bl	8000200 <main>

08002596 <LoopForever>:

LoopForever:
    b LoopForever
 8002596:	e7fe      	b.n	8002596 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002598:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800259c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a0:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 80025a4:	08009234 	.word	0x08009234
  ldr r2, =_sbss
 80025a8:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 80025ac:	20000530 	.word	0x20000530

080025b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025b0:	e7fe      	b.n	80025b0 <ADC1_IRQHandler>

080025b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025bc:	2003      	movs	r0, #3
 80025be:	f000 f943 	bl	8002848 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025c2:	2000      	movs	r0, #0
 80025c4:	f000 f80e 	bl	80025e4 <HAL_InitTick>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	71fb      	strb	r3, [r7, #7]
 80025d2:	e001      	b.n	80025d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025d4:	f7ff fd46 	bl	8002064 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025d8:	79fb      	ldrb	r3, [r7, #7]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025f0:	4b17      	ldr	r3, [pc, #92]	; (8002650 <HAL_InitTick+0x6c>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d023      	beq.n	8002640 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025f8:	4b16      	ldr	r3, [pc, #88]	; (8002654 <HAL_InitTick+0x70>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b14      	ldr	r3, [pc, #80]	; (8002650 <HAL_InitTick+0x6c>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	4619      	mov	r1, r3
 8002602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002606:	fbb3 f3f1 	udiv	r3, r3, r1
 800260a:	fbb2 f3f3 	udiv	r3, r2, r3
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f941 	bl	8002896 <HAL_SYSTICK_Config>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10f      	bne.n	800263a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b0f      	cmp	r3, #15
 800261e:	d809      	bhi.n	8002634 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002620:	2200      	movs	r2, #0
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	f04f 30ff 	mov.w	r0, #4294967295
 8002628:	f000 f919 	bl	800285e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800262c:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <HAL_InitTick+0x74>)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e007      	b.n	8002644 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	e004      	b.n	8002644 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	e001      	b.n	8002644 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002644:	7bfb      	ldrb	r3, [r7, #15]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000078 	.word	0x20000078
 8002654:	20000070 	.word	0x20000070
 8002658:	20000074 	.word	0x20000074

0800265c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_IncTick+0x20>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_IncTick+0x24>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4413      	add	r3, r2
 800266c:	4a04      	ldr	r2, [pc, #16]	; (8002680 <HAL_IncTick+0x24>)
 800266e:	6013      	str	r3, [r2, #0]
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000078 	.word	0x20000078
 8002680:	2000051c 	.word	0x2000051c

08002684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return uwTick;
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <HAL_GetTick+0x14>)
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	2000051c 	.word	0x2000051c

0800269c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a4:	f7ff ffee 	bl	8002684 <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d005      	beq.n	80026c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <HAL_Delay+0x44>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026c2:	bf00      	nop
 80026c4:	f7ff ffde 	bl	8002684 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d8f7      	bhi.n	80026c4 <HAL_Delay+0x28>
  {
  }
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000078 	.word	0x20000078

080026e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800270c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002716:	4a04      	ldr	r2, [pc, #16]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60d3      	str	r3, [r2, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <__NVIC_GetPriorityGrouping+0x18>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	f003 0307 	and.w	r3, r3, #7
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002758:	2b00      	cmp	r3, #0
 800275a:	db0a      	blt.n	8002772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	b2da      	uxtb	r2, r3
 8002760:	490c      	ldr	r1, [pc, #48]	; (8002794 <__NVIC_SetPriority+0x4c>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	0112      	lsls	r2, r2, #4
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	440b      	add	r3, r1
 800276c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002770:	e00a      	b.n	8002788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4908      	ldr	r1, [pc, #32]	; (8002798 <__NVIC_SetPriority+0x50>)
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	3b04      	subs	r3, #4
 8002780:	0112      	lsls	r2, r2, #4
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	440b      	add	r3, r1
 8002786:	761a      	strb	r2, [r3, #24]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000e100 	.word	0xe000e100
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279c:	b480      	push	{r7}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f1c3 0307 	rsb	r3, r3, #7
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	bf28      	it	cs
 80027ba:	2304      	movcs	r3, #4
 80027bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3304      	adds	r3, #4
 80027c2:	2b06      	cmp	r3, #6
 80027c4:	d902      	bls.n	80027cc <NVIC_EncodePriority+0x30>
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3b03      	subs	r3, #3
 80027ca:	e000      	b.n	80027ce <NVIC_EncodePriority+0x32>
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d0:	f04f 32ff 	mov.w	r2, #4294967295
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43da      	mvns	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	401a      	ands	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e4:	f04f 31ff 	mov.w	r1, #4294967295
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	43d9      	mvns	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f4:	4313      	orrs	r3, r2
         );
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3b01      	subs	r3, #1
 8002810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002814:	d301      	bcc.n	800281a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002816:	2301      	movs	r3, #1
 8002818:	e00f      	b.n	800283a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800281a:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <SysTick_Config+0x40>)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002822:	210f      	movs	r1, #15
 8002824:	f04f 30ff 	mov.w	r0, #4294967295
 8002828:	f7ff ff8e 	bl	8002748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <SysTick_Config+0x40>)
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002832:	4b04      	ldr	r3, [pc, #16]	; (8002844 <SysTick_Config+0x40>)
 8002834:	2207      	movs	r2, #7
 8002836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	e000e010 	.word	0xe000e010

08002848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ff47 	bl	80026e4 <__NVIC_SetPriorityGrouping>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b086      	sub	sp, #24
 8002862:	af00      	add	r7, sp, #0
 8002864:	4603      	mov	r3, r0
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002870:	f7ff ff5c 	bl	800272c <__NVIC_GetPriorityGrouping>
 8002874:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	6978      	ldr	r0, [r7, #20]
 800287c:	f7ff ff8e 	bl	800279c <NVIC_EncodePriority>
 8002880:	4602      	mov	r2, r0
 8002882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff5d 	bl	8002748 <__NVIC_SetPriority>
}
 800288e:	bf00      	nop
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff ffb0 	bl	8002804 <SysTick_Config>
 80028a4:	4603      	mov	r3, r0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028be:	e166      	b.n	8002b8e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2101      	movs	r1, #1
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	fa01 f303 	lsl.w	r3, r1, r3
 80028cc:	4013      	ands	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8158 	beq.w	8002b88 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d005      	beq.n	80028f0 <HAL_GPIO_Init+0x40>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d130      	bne.n	8002952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2203      	movs	r2, #3
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002926:	2201      	movs	r2, #1
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	f003 0201 	and.w	r2, r3, #1
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b03      	cmp	r3, #3
 800295c:	d017      	beq.n	800298e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	2203      	movs	r2, #3
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d123      	bne.n	80029e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	08da      	lsrs	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3208      	adds	r2, #8
 80029a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	220f      	movs	r2, #15
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	08da      	lsrs	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3208      	adds	r2, #8
 80029dc:	6939      	ldr	r1, [r7, #16]
 80029de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	2203      	movs	r2, #3
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0203 	and.w	r2, r3, #3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80b2 	beq.w	8002b88 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a24:	4b61      	ldr	r3, [pc, #388]	; (8002bac <HAL_GPIO_Init+0x2fc>)
 8002a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a28:	4a60      	ldr	r2, [pc, #384]	; (8002bac <HAL_GPIO_Init+0x2fc>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6613      	str	r3, [r2, #96]	; 0x60
 8002a30:	4b5e      	ldr	r3, [pc, #376]	; (8002bac <HAL_GPIO_Init+0x2fc>)
 8002a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a3c:	4a5c      	ldr	r2, [pc, #368]	; (8002bb0 <HAL_GPIO_Init+0x300>)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	3302      	adds	r3, #2
 8002a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	220f      	movs	r2, #15
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a66:	d02b      	beq.n	8002ac0 <HAL_GPIO_Init+0x210>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a52      	ldr	r2, [pc, #328]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d025      	beq.n	8002abc <HAL_GPIO_Init+0x20c>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a51      	ldr	r2, [pc, #324]	; (8002bb8 <HAL_GPIO_Init+0x308>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d01f      	beq.n	8002ab8 <HAL_GPIO_Init+0x208>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a50      	ldr	r2, [pc, #320]	; (8002bbc <HAL_GPIO_Init+0x30c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d019      	beq.n	8002ab4 <HAL_GPIO_Init+0x204>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a4f      	ldr	r2, [pc, #316]	; (8002bc0 <HAL_GPIO_Init+0x310>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d013      	beq.n	8002ab0 <HAL_GPIO_Init+0x200>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a4e      	ldr	r2, [pc, #312]	; (8002bc4 <HAL_GPIO_Init+0x314>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d00d      	beq.n	8002aac <HAL_GPIO_Init+0x1fc>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a4d      	ldr	r2, [pc, #308]	; (8002bc8 <HAL_GPIO_Init+0x318>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d007      	beq.n	8002aa8 <HAL_GPIO_Init+0x1f8>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a4c      	ldr	r2, [pc, #304]	; (8002bcc <HAL_GPIO_Init+0x31c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d101      	bne.n	8002aa4 <HAL_GPIO_Init+0x1f4>
 8002aa0:	2307      	movs	r3, #7
 8002aa2:	e00e      	b.n	8002ac2 <HAL_GPIO_Init+0x212>
 8002aa4:	2308      	movs	r3, #8
 8002aa6:	e00c      	b.n	8002ac2 <HAL_GPIO_Init+0x212>
 8002aa8:	2306      	movs	r3, #6
 8002aaa:	e00a      	b.n	8002ac2 <HAL_GPIO_Init+0x212>
 8002aac:	2305      	movs	r3, #5
 8002aae:	e008      	b.n	8002ac2 <HAL_GPIO_Init+0x212>
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	e006      	b.n	8002ac2 <HAL_GPIO_Init+0x212>
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e004      	b.n	8002ac2 <HAL_GPIO_Init+0x212>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e002      	b.n	8002ac2 <HAL_GPIO_Init+0x212>
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <HAL_GPIO_Init+0x212>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	f002 0203 	and.w	r2, r2, #3
 8002ac8:	0092      	lsls	r2, r2, #2
 8002aca:	4093      	lsls	r3, r2
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ad2:	4937      	ldr	r1, [pc, #220]	; (8002bb0 <HAL_GPIO_Init+0x300>)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	3302      	adds	r3, #2
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ae0:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <HAL_GPIO_Init+0x320>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b04:	4a32      	ldr	r2, [pc, #200]	; (8002bd0 <HAL_GPIO_Init+0x320>)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b0a:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_GPIO_Init+0x320>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4013      	ands	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b2e:	4a28      	ldr	r2, [pc, #160]	; (8002bd0 <HAL_GPIO_Init+0x320>)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b34:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <HAL_GPIO_Init+0x320>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b58:	4a1d      	ldr	r2, [pc, #116]	; (8002bd0 <HAL_GPIO_Init+0x320>)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <HAL_GPIO_Init+0x320>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b82:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <HAL_GPIO_Init+0x320>)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	fa22 f303 	lsr.w	r3, r2, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f47f ae91 	bne.w	80028c0 <HAL_GPIO_Init+0x10>
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	bf00      	nop
 8002ba2:	371c      	adds	r7, #28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40010000 	.word	0x40010000
 8002bb4:	48000400 	.word	0x48000400
 8002bb8:	48000800 	.word	0x48000800
 8002bbc:	48000c00 	.word	0x48000c00
 8002bc0:	48001000 	.word	0x48001000
 8002bc4:	48001400 	.word	0x48001400
 8002bc8:	48001800 	.word	0x48001800
 8002bcc:	48001c00 	.word	0x48001c00
 8002bd0:	40010400 	.word	0x40010400

08002bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]
 8002be0:	4613      	mov	r3, r2
 8002be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be4:	787b      	ldrb	r3, [r7, #1]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bea:	887a      	ldrh	r2, [r7, #2]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bf0:	e002      	b.n	8002bf8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bf2:	887a      	ldrh	r2, [r7, #2]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e081      	b.n	8002d1a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff fa3e 	bl	80020ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2224      	movs	r2, #36	; 0x24
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0201 	bic.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d107      	bne.n	8002c7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	e006      	b.n	8002c8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d104      	bne.n	8002c9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	69d9      	ldr	r1, [r3, #28]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1a      	ldr	r2, [r3, #32]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d138      	bne.n	8002daa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e032      	b.n	8002dac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2224      	movs	r2, #36	; 0x24
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0201 	bic.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d74:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6819      	ldr	r1, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e000      	b.n	8002dac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002daa:	2302      	movs	r3, #2
  }
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	d139      	bne.n	8002e42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e033      	b.n	8002e44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2224      	movs	r2, #36	; 0x24
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e000      	b.n	8002e44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e42:	2302      	movs	r3, #2
  }
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e54:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e60:	d102      	bne.n	8002e68 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e66:	e00b      	b.n	8002e80 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002e68:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e76:	d102      	bne.n	8002e7e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e7c:	e000      	b.n	8002e80 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002e7e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40007000 	.word	0x40007000

08002e90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d141      	bne.n	8002f22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e9e:	4b4b      	ldr	r3, [pc, #300]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eaa:	d131      	bne.n	8002f10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002eac:	4b47      	ldr	r3, [pc, #284]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eb2:	4a46      	ldr	r2, [pc, #280]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ebc:	4b43      	ldr	r3, [pc, #268]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ec4:	4a41      	ldr	r2, [pc, #260]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ecc:	4b40      	ldr	r3, [pc, #256]	; (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2232      	movs	r2, #50	; 0x32
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	4a3f      	ldr	r2, [pc, #252]	; (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8002edc:	0c9b      	lsrs	r3, r3, #18
 8002ede:	3301      	adds	r3, #1
 8002ee0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ee2:	e002      	b.n	8002eea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eea:	4b38      	ldr	r3, [pc, #224]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef6:	d102      	bne.n	8002efe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f2      	bne.n	8002ee4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002efe:	4b33      	ldr	r3, [pc, #204]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0a:	d158      	bne.n	8002fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e057      	b.n	8002fc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f10:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f16:	4a2d      	ldr	r2, [pc, #180]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f20:	e04d      	b.n	8002fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f28:	d141      	bne.n	8002fae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f2a:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f36:	d131      	bne.n	8002f9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f38:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f3e:	4a23      	ldr	r2, [pc, #140]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f48:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f50:	4a1e      	ldr	r2, [pc, #120]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f58:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2232      	movs	r2, #50	; 0x32
 8002f5e:	fb02 f303 	mul.w	r3, r2, r3
 8002f62:	4a1c      	ldr	r2, [pc, #112]	; (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f64:	fba2 2303 	umull	r2, r3, r2, r3
 8002f68:	0c9b      	lsrs	r3, r3, #18
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f6e:	e002      	b.n	8002f76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f82:	d102      	bne.n	8002f8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f2      	bne.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f96:	d112      	bne.n	8002fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e011      	b.n	8002fc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fac:	e007      	b.n	8002fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fae:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fb6:	4a05      	ldr	r2, [pc, #20]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fbc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	40007000 	.word	0x40007000
 8002fd0:	20000070 	.word	0x20000070
 8002fd4:	431bde83 	.word	0x431bde83

08002fd8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fe6:	6053      	str	r3, [r2, #4]
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40007000 	.word	0x40007000

08002ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d102      	bne.n	800300c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	f000 bc16 	b.w	8003838 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800300c:	4b96      	ldr	r3, [pc, #600]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003016:	4b94      	ldr	r3, [pc, #592]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0310 	and.w	r3, r3, #16
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80e4 	beq.w	80031f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <HAL_RCC_OscConfig+0x4c>
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b0c      	cmp	r3, #12
 8003038:	f040 808b 	bne.w	8003152 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b01      	cmp	r3, #1
 8003040:	f040 8087 	bne.w	8003152 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003044:	4b88      	ldr	r3, [pc, #544]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_RCC_OscConfig+0x64>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e3ed      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1a      	ldr	r2, [r3, #32]
 8003060:	4b81      	ldr	r3, [pc, #516]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d004      	beq.n	8003076 <HAL_RCC_OscConfig+0x7e>
 800306c:	4b7e      	ldr	r3, [pc, #504]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003074:	e005      	b.n	8003082 <HAL_RCC_OscConfig+0x8a>
 8003076:	4b7c      	ldr	r3, [pc, #496]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 8003078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003082:	4293      	cmp	r3, r2
 8003084:	d223      	bcs.n	80030ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fdca 	bl	8003c24 <RCC_SetFlashLatencyFromMSIRange>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e3ce      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800309a:	4b73      	ldr	r3, [pc, #460]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a72      	ldr	r2, [pc, #456]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80030a0:	f043 0308 	orr.w	r3, r3, #8
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	4b70      	ldr	r3, [pc, #448]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	496d      	ldr	r1, [pc, #436]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030b8:	4b6b      	ldr	r3, [pc, #428]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	4968      	ldr	r1, [pc, #416]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
 80030cc:	e025      	b.n	800311a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ce:	4b66      	ldr	r3, [pc, #408]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a65      	ldr	r2, [pc, #404]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80030d4:	f043 0308 	orr.w	r3, r3, #8
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b63      	ldr	r3, [pc, #396]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	4960      	ldr	r1, [pc, #384]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ec:	4b5e      	ldr	r3, [pc, #376]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	495b      	ldr	r1, [pc, #364]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fd8a 	bl	8003c24 <RCC_SetFlashLatencyFromMSIRange>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e38e      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800311a:	f000 fcbf 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 800311e:	4602      	mov	r2, r0
 8003120:	4b51      	ldr	r3, [pc, #324]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	091b      	lsrs	r3, r3, #4
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	4950      	ldr	r1, [pc, #320]	; (800326c <HAL_RCC_OscConfig+0x274>)
 800312c:	5ccb      	ldrb	r3, [r1, r3]
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	fa22 f303 	lsr.w	r3, r2, r3
 8003136:	4a4e      	ldr	r2, [pc, #312]	; (8003270 <HAL_RCC_OscConfig+0x278>)
 8003138:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800313a:	4b4e      	ldr	r3, [pc, #312]	; (8003274 <HAL_RCC_OscConfig+0x27c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fa50 	bl	80025e4 <HAL_InitTick>
 8003144:	4603      	mov	r3, r0
 8003146:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d052      	beq.n	80031f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	e372      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d032      	beq.n	80031c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800315a:	4b43      	ldr	r3, [pc, #268]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a42      	ldr	r2, [pc, #264]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003166:	f7ff fa8d 	bl	8002684 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800316e:	f7ff fa89 	bl	8002684 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e35b      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003180:	4b39      	ldr	r3, [pc, #228]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800318c:	4b36      	ldr	r3, [pc, #216]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a35      	ldr	r2, [pc, #212]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 8003192:	f043 0308 	orr.w	r3, r3, #8
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	4b33      	ldr	r3, [pc, #204]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	4930      	ldr	r1, [pc, #192]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031aa:	4b2f      	ldr	r3, [pc, #188]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	492b      	ldr	r1, [pc, #172]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]
 80031be:	e01a      	b.n	80031f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031c0:	4b29      	ldr	r3, [pc, #164]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a28      	ldr	r2, [pc, #160]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031cc:	f7ff fa5a 	bl	8002684 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031d4:	f7ff fa56 	bl	8002684 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e328      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031e6:	4b20      	ldr	r3, [pc, #128]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x1dc>
 80031f2:	e000      	b.n	80031f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d073      	beq.n	80032ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	2b08      	cmp	r3, #8
 8003206:	d005      	beq.n	8003214 <HAL_RCC_OscConfig+0x21c>
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	2b0c      	cmp	r3, #12
 800320c:	d10e      	bne.n	800322c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b03      	cmp	r3, #3
 8003212:	d10b      	bne.n	800322c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003214:	4b14      	ldr	r3, [pc, #80]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d063      	beq.n	80032e8 <HAL_RCC_OscConfig+0x2f0>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d15f      	bne.n	80032e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e305      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003234:	d106      	bne.n	8003244 <HAL_RCC_OscConfig+0x24c>
 8003236:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a0b      	ldr	r2, [pc, #44]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e025      	b.n	8003290 <HAL_RCC_OscConfig+0x298>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800324c:	d114      	bne.n	8003278 <HAL_RCC_OscConfig+0x280>
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a05      	ldr	r2, [pc, #20]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 8003254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b03      	ldr	r3, [pc, #12]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a02      	ldr	r2, [pc, #8]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e013      	b.n	8003290 <HAL_RCC_OscConfig+0x298>
 8003268:	40021000 	.word	0x40021000
 800326c:	08008dd8 	.word	0x08008dd8
 8003270:	20000070 	.word	0x20000070
 8003274:	20000074 	.word	0x20000074
 8003278:	4ba0      	ldr	r3, [pc, #640]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a9f      	ldr	r2, [pc, #636]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 800327e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b9d      	ldr	r3, [pc, #628]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a9c      	ldr	r2, [pc, #624]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 800328a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7ff f9f4 	bl	8002684 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a0:	f7ff f9f0 	bl	8002684 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	; 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e2c2      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b2:	4b92      	ldr	r3, [pc, #584]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x2a8>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7ff f9e0 	bl	8002684 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c8:	f7ff f9dc 	bl	8002684 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e2ae      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032da:	4b88      	ldr	r3, [pc, #544]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x2d0>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d060      	beq.n	80033b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_OscConfig+0x310>
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d119      	bne.n	8003336 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b02      	cmp	r3, #2
 8003306:	d116      	bne.n	8003336 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003308:	4b7c      	ldr	r3, [pc, #496]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_RCC_OscConfig+0x328>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e28b      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003320:	4b76      	ldr	r3, [pc, #472]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	4973      	ldr	r1, [pc, #460]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003334:	e040      	b.n	80033b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d023      	beq.n	8003386 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800333e:	4b6f      	ldr	r3, [pc, #444]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a6e      	ldr	r2, [pc, #440]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334a:	f7ff f99b 	bl	8002684 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003352:	f7ff f997 	bl	8002684 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e269      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003364:	4b65      	ldr	r3, [pc, #404]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003370:	4b62      	ldr	r3, [pc, #392]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	061b      	lsls	r3, r3, #24
 800337e:	495f      	ldr	r1, [pc, #380]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 8003380:	4313      	orrs	r3, r2
 8003382:	604b      	str	r3, [r1, #4]
 8003384:	e018      	b.n	80033b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003386:	4b5d      	ldr	r3, [pc, #372]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a5c      	ldr	r2, [pc, #368]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 800338c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003392:	f7ff f977 	bl	8002684 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339a:	f7ff f973 	bl	8002684 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e245      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033ac:	4b53      	ldr	r3, [pc, #332]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1f0      	bne.n	800339a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d03c      	beq.n	800343e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01c      	beq.n	8003406 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033cc:	4b4b      	ldr	r3, [pc, #300]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 80033ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d2:	4a4a      	ldr	r2, [pc, #296]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7ff f952 	bl	8002684 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e4:	f7ff f94e 	bl	8002684 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e220      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033f6:	4b41      	ldr	r3, [pc, #260]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 80033f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ef      	beq.n	80033e4 <HAL_RCC_OscConfig+0x3ec>
 8003404:	e01b      	b.n	800343e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003406:	4b3d      	ldr	r3, [pc, #244]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 8003408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800340c:	4a3b      	ldr	r2, [pc, #236]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7ff f935 	bl	8002684 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341e:	f7ff f931 	bl	8002684 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e203      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003430:	4b32      	ldr	r3, [pc, #200]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 8003432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1ef      	bne.n	800341e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80a6 	beq.w	8003598 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800344c:	2300      	movs	r3, #0
 800344e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003450:	4b2a      	ldr	r3, [pc, #168]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 8003452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10d      	bne.n	8003478 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345c:	4b27      	ldr	r3, [pc, #156]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	4a26      	ldr	r2, [pc, #152]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 8003462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003466:	6593      	str	r3, [r2, #88]	; 0x58
 8003468:	4b24      	ldr	r3, [pc, #144]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003474:	2301      	movs	r3, #1
 8003476:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003478:	4b21      	ldr	r3, [pc, #132]	; (8003500 <HAL_RCC_OscConfig+0x508>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d118      	bne.n	80034b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003484:	4b1e      	ldr	r3, [pc, #120]	; (8003500 <HAL_RCC_OscConfig+0x508>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <HAL_RCC_OscConfig+0x508>)
 800348a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003490:	f7ff f8f8 	bl	8002684 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003498:	f7ff f8f4 	bl	8002684 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e1c6      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034aa:	4b15      	ldr	r3, [pc, #84]	; (8003500 <HAL_RCC_OscConfig+0x508>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d108      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4d8>
 80034be:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c4:	4a0d      	ldr	r2, [pc, #52]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ce:	e029      	b.n	8003524 <HAL_RCC_OscConfig+0x52c>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b05      	cmp	r3, #5
 80034d6:	d115      	bne.n	8003504 <HAL_RCC_OscConfig+0x50c>
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034de:	4a07      	ldr	r2, [pc, #28]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 80034e0:	f043 0304 	orr.w	r3, r3, #4
 80034e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	4a03      	ldr	r2, [pc, #12]	; (80034fc <HAL_RCC_OscConfig+0x504>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034f8:	e014      	b.n	8003524 <HAL_RCC_OscConfig+0x52c>
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000
 8003500:	40007000 	.word	0x40007000
 8003504:	4b9d      	ldr	r3, [pc, #628]	; (800377c <HAL_RCC_OscConfig+0x784>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	4a9c      	ldr	r2, [pc, #624]	; (800377c <HAL_RCC_OscConfig+0x784>)
 800350c:	f023 0301 	bic.w	r3, r3, #1
 8003510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003514:	4b99      	ldr	r3, [pc, #612]	; (800377c <HAL_RCC_OscConfig+0x784>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	4a98      	ldr	r2, [pc, #608]	; (800377c <HAL_RCC_OscConfig+0x784>)
 800351c:	f023 0304 	bic.w	r3, r3, #4
 8003520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d016      	beq.n	800355a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7ff f8aa 	bl	8002684 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003532:	e00a      	b.n	800354a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7ff f8a6 	bl	8002684 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e176      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800354a:	4b8c      	ldr	r3, [pc, #560]	; (800377c <HAL_RCC_OscConfig+0x784>)
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0ed      	beq.n	8003534 <HAL_RCC_OscConfig+0x53c>
 8003558:	e015      	b.n	8003586 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355a:	f7ff f893 	bl	8002684 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003560:	e00a      	b.n	8003578 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7ff f88f 	bl	8002684 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e15f      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003578:	4b80      	ldr	r3, [pc, #512]	; (800377c <HAL_RCC_OscConfig+0x784>)
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1ed      	bne.n	8003562 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003586:	7ffb      	ldrb	r3, [r7, #31]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358c:	4b7b      	ldr	r3, [pc, #492]	; (800377c <HAL_RCC_OscConfig+0x784>)
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	4a7a      	ldr	r2, [pc, #488]	; (800377c <HAL_RCC_OscConfig+0x784>)
 8003592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003596:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d03c      	beq.n	800361e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01c      	beq.n	80035e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035ac:	4b73      	ldr	r3, [pc, #460]	; (800377c <HAL_RCC_OscConfig+0x784>)
 80035ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035b2:	4a72      	ldr	r2, [pc, #456]	; (800377c <HAL_RCC_OscConfig+0x784>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035bc:	f7ff f862 	bl	8002684 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035c4:	f7ff f85e 	bl	8002684 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e130      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035d6:	4b69      	ldr	r3, [pc, #420]	; (800377c <HAL_RCC_OscConfig+0x784>)
 80035d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0ef      	beq.n	80035c4 <HAL_RCC_OscConfig+0x5cc>
 80035e4:	e01b      	b.n	800361e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035e6:	4b65      	ldr	r3, [pc, #404]	; (800377c <HAL_RCC_OscConfig+0x784>)
 80035e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035ec:	4a63      	ldr	r2, [pc, #396]	; (800377c <HAL_RCC_OscConfig+0x784>)
 80035ee:	f023 0301 	bic.w	r3, r3, #1
 80035f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f6:	f7ff f845 	bl	8002684 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035fe:	f7ff f841 	bl	8002684 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e113      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003610:	4b5a      	ldr	r3, [pc, #360]	; (800377c <HAL_RCC_OscConfig+0x784>)
 8003612:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1ef      	bne.n	80035fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 8107 	beq.w	8003836 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	2b02      	cmp	r3, #2
 800362e:	f040 80cf 	bne.w	80037d0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003632:	4b52      	ldr	r3, [pc, #328]	; (800377c <HAL_RCC_OscConfig+0x784>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f003 0203 	and.w	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	429a      	cmp	r2, r3
 8003644:	d12c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	3b01      	subs	r3, #1
 8003652:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d123      	bne.n	80036a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003662:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d11b      	bne.n	80036a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d113      	bne.n	80036a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003682:	085b      	lsrs	r3, r3, #1
 8003684:	3b01      	subs	r3, #1
 8003686:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003688:	429a      	cmp	r2, r3
 800368a:	d109      	bne.n	80036a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	085b      	lsrs	r3, r3, #1
 8003698:	3b01      	subs	r3, #1
 800369a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d071      	beq.n	8003784 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2b0c      	cmp	r3, #12
 80036a4:	d068      	beq.n	8003778 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036a6:	4b35      	ldr	r3, [pc, #212]	; (800377c <HAL_RCC_OscConfig+0x784>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d105      	bne.n	80036be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036b2:	4b32      	ldr	r3, [pc, #200]	; (800377c <HAL_RCC_OscConfig+0x784>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e0ba      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036c2:	4b2e      	ldr	r3, [pc, #184]	; (800377c <HAL_RCC_OscConfig+0x784>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2d      	ldr	r2, [pc, #180]	; (800377c <HAL_RCC_OscConfig+0x784>)
 80036c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036ce:	f7fe ffd9 	bl	8002684 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d6:	f7fe ffd5 	bl	8002684 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e0a7      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e8:	4b24      	ldr	r3, [pc, #144]	; (800377c <HAL_RCC_OscConfig+0x784>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1f0      	bne.n	80036d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f4:	4b21      	ldr	r3, [pc, #132]	; (800377c <HAL_RCC_OscConfig+0x784>)
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	4b21      	ldr	r3, [pc, #132]	; (8003780 <HAL_RCC_OscConfig+0x788>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003704:	3a01      	subs	r2, #1
 8003706:	0112      	lsls	r2, r2, #4
 8003708:	4311      	orrs	r1, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800370e:	0212      	lsls	r2, r2, #8
 8003710:	4311      	orrs	r1, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003716:	0852      	lsrs	r2, r2, #1
 8003718:	3a01      	subs	r2, #1
 800371a:	0552      	lsls	r2, r2, #21
 800371c:	4311      	orrs	r1, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003722:	0852      	lsrs	r2, r2, #1
 8003724:	3a01      	subs	r2, #1
 8003726:	0652      	lsls	r2, r2, #25
 8003728:	4311      	orrs	r1, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800372e:	06d2      	lsls	r2, r2, #27
 8003730:	430a      	orrs	r2, r1
 8003732:	4912      	ldr	r1, [pc, #72]	; (800377c <HAL_RCC_OscConfig+0x784>)
 8003734:	4313      	orrs	r3, r2
 8003736:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003738:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_RCC_OscConfig+0x784>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0f      	ldr	r2, [pc, #60]	; (800377c <HAL_RCC_OscConfig+0x784>)
 800373e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003742:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003744:	4b0d      	ldr	r3, [pc, #52]	; (800377c <HAL_RCC_OscConfig+0x784>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a0c      	ldr	r2, [pc, #48]	; (800377c <HAL_RCC_OscConfig+0x784>)
 800374a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800374e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003750:	f7fe ff98 	bl	8002684 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003758:	f7fe ff94 	bl	8002684 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e066      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376a:	4b04      	ldr	r3, [pc, #16]	; (800377c <HAL_RCC_OscConfig+0x784>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003776:	e05e      	b.n	8003836 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e05d      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
 800377c:	40021000 	.word	0x40021000
 8003780:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003784:	4b2e      	ldr	r3, [pc, #184]	; (8003840 <HAL_RCC_OscConfig+0x848>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d152      	bne.n	8003836 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003790:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <HAL_RCC_OscConfig+0x848>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a2a      	ldr	r2, [pc, #168]	; (8003840 <HAL_RCC_OscConfig+0x848>)
 8003796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800379a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800379c:	4b28      	ldr	r3, [pc, #160]	; (8003840 <HAL_RCC_OscConfig+0x848>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4a27      	ldr	r2, [pc, #156]	; (8003840 <HAL_RCC_OscConfig+0x848>)
 80037a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037a8:	f7fe ff6c 	bl	8002684 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fe ff68 	bl	8002684 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e03a      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c2:	4b1f      	ldr	r3, [pc, #124]	; (8003840 <HAL_RCC_OscConfig+0x848>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x7b8>
 80037ce:	e032      	b.n	8003836 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d02d      	beq.n	8003832 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d6:	4b1a      	ldr	r3, [pc, #104]	; (8003840 <HAL_RCC_OscConfig+0x848>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a19      	ldr	r2, [pc, #100]	; (8003840 <HAL_RCC_OscConfig+0x848>)
 80037dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037e0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80037e2:	4b17      	ldr	r3, [pc, #92]	; (8003840 <HAL_RCC_OscConfig+0x848>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d105      	bne.n	80037fa <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037ee:	4b14      	ldr	r3, [pc, #80]	; (8003840 <HAL_RCC_OscConfig+0x848>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	4a13      	ldr	r2, [pc, #76]	; (8003840 <HAL_RCC_OscConfig+0x848>)
 80037f4:	f023 0303 	bic.w	r3, r3, #3
 80037f8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037fa:	4b11      	ldr	r3, [pc, #68]	; (8003840 <HAL_RCC_OscConfig+0x848>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	4a10      	ldr	r2, [pc, #64]	; (8003840 <HAL_RCC_OscConfig+0x848>)
 8003800:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003808:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fe ff3b 	bl	8002684 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003812:	f7fe ff37 	bl	8002684 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e009      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_RCC_OscConfig+0x848>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f0      	bne.n	8003812 <HAL_RCC_OscConfig+0x81a>
 8003830:	e001      	b.n	8003836 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000

08003844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e10f      	b.n	8003a7c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800385c:	4b89      	ldr	r3, [pc, #548]	; (8003a84 <HAL_RCC_ClockConfig+0x240>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d910      	bls.n	800388c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386a:	4b86      	ldr	r3, [pc, #536]	; (8003a84 <HAL_RCC_ClockConfig+0x240>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 020f 	bic.w	r2, r3, #15
 8003872:	4984      	ldr	r1, [pc, #528]	; (8003a84 <HAL_RCC_ClockConfig+0x240>)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b82      	ldr	r3, [pc, #520]	; (8003a84 <HAL_RCC_ClockConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0f7      	b.n	8003a7c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8089 	beq.w	80039ac <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d133      	bne.n	800390a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a2:	4b79      	ldr	r3, [pc, #484]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e0e4      	b.n	8003a7c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80038b2:	f000 fa11 	bl	8003cd8 <RCC_GetSysClockFreqFromPLLSource>
 80038b6:	4603      	mov	r3, r0
 80038b8:	4a74      	ldr	r2, [pc, #464]	; (8003a8c <HAL_RCC_ClockConfig+0x248>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d955      	bls.n	800396a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80038be:	4b72      	ldr	r3, [pc, #456]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10a      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038ca:	4b6f      	ldr	r3, [pc, #444]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d2:	4a6d      	ldr	r2, [pc, #436]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 80038d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	e044      	b.n	800396a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d03e      	beq.n	800396a <HAL_RCC_ClockConfig+0x126>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d13a      	bne.n	800396a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038f4:	4b64      	ldr	r3, [pc, #400]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038fc:	4a62      	ldr	r2, [pc, #392]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 80038fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003902:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	e02f      	b.n	800396a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003912:	4b5d      	ldr	r3, [pc, #372]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d115      	bne.n	800394a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e0ac      	b.n	8003a7c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d107      	bne.n	800393a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800392a:	4b57      	ldr	r3, [pc, #348]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e0a0      	b.n	8003a7c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800393a:	4b53      	ldr	r3, [pc, #332]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e098      	b.n	8003a7c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800394a:	f000 f8a7 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 800394e:	4603      	mov	r3, r0
 8003950:	4a4e      	ldr	r2, [pc, #312]	; (8003a8c <HAL_RCC_ClockConfig+0x248>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d909      	bls.n	800396a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003956:	4b4c      	ldr	r3, [pc, #304]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800395e:	4a4a      	ldr	r2, [pc, #296]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 8003960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003964:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800396a:	4b47      	ldr	r3, [pc, #284]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f023 0203 	bic.w	r2, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	4944      	ldr	r1, [pc, #272]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 8003978:	4313      	orrs	r3, r2
 800397a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397c:	f7fe fe82 	bl	8002684 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003982:	e00a      	b.n	800399a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003984:	f7fe fe7e 	bl	8002684 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003992:	4293      	cmp	r3, r2
 8003994:	d901      	bls.n	800399a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e070      	b.n	8003a7c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399a:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 020c 	and.w	r2, r3, #12
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d1eb      	bne.n	8003984 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d009      	beq.n	80039cc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b8:	4b33      	ldr	r3, [pc, #204]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4930      	ldr	r1, [pc, #192]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
 80039ca:	e008      	b.n	80039de <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2b80      	cmp	r3, #128	; 0x80
 80039d0:	d105      	bne.n	80039de <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80039d2:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	4a2c      	ldr	r2, [pc, #176]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 80039d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039dc:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039de:	4b29      	ldr	r3, [pc, #164]	; (8003a84 <HAL_RCC_ClockConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d210      	bcs.n	8003a0e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ec:	4b25      	ldr	r3, [pc, #148]	; (8003a84 <HAL_RCC_ClockConfig+0x240>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f023 020f 	bic.w	r2, r3, #15
 80039f4:	4923      	ldr	r1, [pc, #140]	; (8003a84 <HAL_RCC_ClockConfig+0x240>)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fc:	4b21      	ldr	r3, [pc, #132]	; (8003a84 <HAL_RCC_ClockConfig+0x240>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d001      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e036      	b.n	8003a7c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d008      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	4918      	ldr	r1, [pc, #96]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d009      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a38:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4910      	ldr	r1, [pc, #64]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a4c:	f000 f826 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_RCC_ClockConfig+0x244>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	091b      	lsrs	r3, r3, #4
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	490c      	ldr	r1, [pc, #48]	; (8003a90 <HAL_RCC_ClockConfig+0x24c>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
 8003a68:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <HAL_RCC_ClockConfig+0x250>)
 8003a6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <HAL_RCC_ClockConfig+0x254>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fe fdb7 	bl	80025e4 <HAL_InitTick>
 8003a76:	4603      	mov	r3, r0
 8003a78:	73fb      	strb	r3, [r7, #15]

  return status;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40022000 	.word	0x40022000
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	04c4b400 	.word	0x04c4b400
 8003a90:	08008dd8 	.word	0x08008dd8
 8003a94:	20000070 	.word	0x20000070
 8003a98:	20000074 	.word	0x20000074

08003a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b089      	sub	sp, #36	; 0x24
 8003aa0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aaa:	4b3e      	ldr	r3, [pc, #248]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ab4:	4b3b      	ldr	r3, [pc, #236]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	2b0c      	cmp	r3, #12
 8003ac8:	d121      	bne.n	8003b0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d11e      	bne.n	8003b0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ad0:	4b34      	ldr	r3, [pc, #208]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d107      	bne.n	8003aec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003adc:	4b31      	ldr	r3, [pc, #196]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae2:	0a1b      	lsrs	r3, r3, #8
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e005      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003aec:	4b2d      	ldr	r3, [pc, #180]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003af8:	4a2b      	ldr	r2, [pc, #172]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10d      	bne.n	8003b24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b0c:	e00a      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d102      	bne.n	8003b1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b14:	4b25      	ldr	r3, [pc, #148]	; (8003bac <HAL_RCC_GetSysClockFreq+0x110>)
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	e004      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d101      	bne.n	8003b24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b20:	4b23      	ldr	r3, [pc, #140]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	2b0c      	cmp	r3, #12
 8003b28:	d134      	bne.n	8003b94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d003      	beq.n	8003b42 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d003      	beq.n	8003b48 <HAL_RCC_GetSysClockFreq+0xac>
 8003b40:	e005      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b42:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <HAL_RCC_GetSysClockFreq+0x110>)
 8003b44:	617b      	str	r3, [r7, #20]
      break;
 8003b46:	e005      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b48:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b4a:	617b      	str	r3, [r7, #20]
      break;
 8003b4c:	e002      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	617b      	str	r3, [r7, #20]
      break;
 8003b52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b54:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	3301      	adds	r3, #1
 8003b60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	0a1b      	lsrs	r3, r3, #8
 8003b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	fb03 f202 	mul.w	r2, r3, r2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	0e5b      	lsrs	r3, r3, #25
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	3301      	adds	r3, #1
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b94:	69bb      	ldr	r3, [r7, #24]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3724      	adds	r7, #36	; 0x24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	08008df0 	.word	0x08008df0
 8003bac:	00f42400 	.word	0x00f42400
 8003bb0:	007a1200 	.word	0x007a1200

08003bb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb8:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bba:	681b      	ldr	r3, [r3, #0]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000070 	.word	0x20000070

08003bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bd0:	f7ff fff0 	bl	8003bb4 <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4904      	ldr	r1, [pc, #16]	; (8003bf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	08008de8 	.word	0x08008de8

08003bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bfc:	f7ff ffda 	bl	8003bb4 <HAL_RCC_GetHCLKFreq>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	0adb      	lsrs	r3, r3, #11
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4904      	ldr	r1, [pc, #16]	; (8003c20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c0e:	5ccb      	ldrb	r3, [r1, r3]
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	08008de8 	.word	0x08008de8

08003c24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c30:	4b27      	ldr	r3, [pc, #156]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c3c:	f7ff f908 	bl	8002e50 <HAL_PWREx_GetVoltageRange>
 8003c40:	6178      	str	r0, [r7, #20]
 8003c42:	e014      	b.n	8003c6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c44:	4b22      	ldr	r3, [pc, #136]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c48:	4a21      	ldr	r2, [pc, #132]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c50:	4b1f      	ldr	r3, [pc, #124]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c5c:	f7ff f8f8 	bl	8002e50 <HAL_PWREx_GetVoltageRange>
 8003c60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c62:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c66:	4a1a      	ldr	r2, [pc, #104]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c74:	d10b      	bne.n	8003c8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b80      	cmp	r3, #128	; 0x80
 8003c7a:	d913      	bls.n	8003ca4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2ba0      	cmp	r3, #160	; 0xa0
 8003c80:	d902      	bls.n	8003c88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c82:	2302      	movs	r3, #2
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	e00d      	b.n	8003ca4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c88:	2301      	movs	r3, #1
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	e00a      	b.n	8003ca4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b7f      	cmp	r3, #127	; 0x7f
 8003c92:	d902      	bls.n	8003c9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003c94:	2302      	movs	r3, #2
 8003c96:	613b      	str	r3, [r7, #16]
 8003c98:	e004      	b.n	8003ca4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b70      	cmp	r3, #112	; 0x70
 8003c9e:	d101      	bne.n	8003ca4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f023 020f 	bic.w	r2, r3, #15
 8003cac:	4909      	ldr	r1, [pc, #36]	; (8003cd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cb4:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d001      	beq.n	8003cc6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40022000 	.word	0x40022000

08003cd8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003ce2:	4b2d      	ldr	r3, [pc, #180]	; (8003d98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d118      	bne.n	8003d20 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cee:	4b2a      	ldr	r3, [pc, #168]	; (8003d98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d107      	bne.n	8003d0a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cfa:	4b27      	ldr	r3, [pc, #156]	; (8003d98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d00:	0a1b      	lsrs	r3, r3, #8
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e005      	b.n	8003d16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d0a:	4b23      	ldr	r3, [pc, #140]	; (8003d98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d16:	4a21      	ldr	r2, [pc, #132]	; (8003d9c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d20:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d003      	beq.n	8003d38 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d003      	beq.n	8003d3e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8003d36:	e005      	b.n	8003d44 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003d38:	4b19      	ldr	r3, [pc, #100]	; (8003da0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003d3a:	613b      	str	r3, [r7, #16]
    break;
 8003d3c:	e005      	b.n	8003d4a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003d3e:	4b19      	ldr	r3, [pc, #100]	; (8003da4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003d40:	613b      	str	r3, [r7, #16]
    break;
 8003d42:	e002      	b.n	8003d4a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	613b      	str	r3, [r7, #16]
    break;
 8003d48:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d4a:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	091b      	lsrs	r3, r3, #4
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	3301      	adds	r3, #1
 8003d56:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d58:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	fb03 f202 	mul.w	r2, r3, r2
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d70:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	0e5b      	lsrs	r3, r3, #25
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003d8a:	683b      	ldr	r3, [r7, #0]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	371c      	adds	r7, #28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	08008df0 	.word	0x08008df0
 8003da0:	00f42400 	.word	0x00f42400
 8003da4:	007a1200 	.word	0x007a1200

08003da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003db0:	2300      	movs	r3, #0
 8003db2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003db4:	2300      	movs	r3, #0
 8003db6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d040      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc8:	2b80      	cmp	r3, #128	; 0x80
 8003dca:	d02a      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003dcc:	2b80      	cmp	r3, #128	; 0x80
 8003dce:	d825      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003dd0:	2b60      	cmp	r3, #96	; 0x60
 8003dd2:	d026      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003dd4:	2b60      	cmp	r3, #96	; 0x60
 8003dd6:	d821      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003dd8:	2b40      	cmp	r3, #64	; 0x40
 8003dda:	d006      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003ddc:	2b40      	cmp	r3, #64	; 0x40
 8003dde:	d81d      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d009      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d010      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003de8:	e018      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dea:	4b89      	ldr	r3, [pc, #548]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	4a88      	ldr	r2, [pc, #544]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003df6:	e015      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fb02 	bl	8004408 <RCCEx_PLLSAI1_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e08:	e00c      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3320      	adds	r3, #32
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fbed 	bl	80045f0 <RCCEx_PLLSAI2_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e1a:	e003      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	74fb      	strb	r3, [r7, #19]
      break;
 8003e20:	e000      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003e22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e24:	7cfb      	ldrb	r3, [r7, #19]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e2a:	4b79      	ldr	r3, [pc, #484]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e30:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e38:	4975      	ldr	r1, [pc, #468]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e40:	e001      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e42:	7cfb      	ldrb	r3, [r7, #19]
 8003e44:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d047      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5a:	d030      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e60:	d82a      	bhi.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e66:	d02a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e6c:	d824      	bhi.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e72:	d008      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e78:	d81e      	bhi.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e82:	d010      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e84:	e018      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e86:	4b62      	ldr	r3, [pc, #392]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	4a61      	ldr	r2, [pc, #388]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e90:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e92:	e015      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3304      	adds	r3, #4
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fab4 	bl	8004408 <RCCEx_PLLSAI1_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ea4:	e00c      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3320      	adds	r3, #32
 8003eaa:	2100      	movs	r1, #0
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fb9f 	bl	80045f0 <RCCEx_PLLSAI2_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eb6:	e003      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	74fb      	strb	r3, [r7, #19]
      break;
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10b      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ec6:	4b52      	ldr	r3, [pc, #328]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ec8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	494e      	ldr	r1, [pc, #312]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003edc:	e001      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 809f 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ef4:	4b46      	ldr	r3, [pc, #280]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f04:	2300      	movs	r3, #0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00d      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f0a:	4b41      	ldr	r3, [pc, #260]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	4a40      	ldr	r2, [pc, #256]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6593      	str	r3, [r2, #88]	; 0x58
 8003f16:	4b3e      	ldr	r3, [pc, #248]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f22:	2301      	movs	r3, #1
 8003f24:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f26:	4b3b      	ldr	r3, [pc, #236]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a3a      	ldr	r2, [pc, #232]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f32:	f7fe fba7 	bl	8002684 <HAL_GetTick>
 8003f36:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f38:	e009      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3a:	f7fe fba3 	bl	8002684 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d902      	bls.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	74fb      	strb	r3, [r7, #19]
        break;
 8003f4c:	e005      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f4e:	4b31      	ldr	r3, [pc, #196]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0ef      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003f5a:	7cfb      	ldrb	r3, [r7, #19]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d15b      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f60:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01f      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d019      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f7e:	4b24      	ldr	r3, [pc, #144]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f88:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f8a:	4b21      	ldr	r3, [pc, #132]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f90:	4a1f      	ldr	r2, [pc, #124]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f9a:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa0:	4a1b      	ldr	r2, [pc, #108]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003faa:	4a19      	ldr	r2, [pc, #100]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d016      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbc:	f7fe fb62 	bl	8002684 <HAL_GetTick>
 8003fc0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc2:	e00b      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc4:	f7fe fb5e 	bl	8002684 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d902      	bls.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	74fb      	strb	r3, [r7, #19]
            break;
 8003fda:	e006      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0ec      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003fea:	7cfb      	ldrb	r3, [r7, #19]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10c      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ff0:	4b07      	ldr	r3, [pc, #28]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004000:	4903      	ldr	r1, [pc, #12]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004008:	e008      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800400a:	7cfb      	ldrb	r3, [r7, #19]
 800400c:	74bb      	strb	r3, [r7, #18]
 800400e:	e005      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004010:	40021000 	.word	0x40021000
 8004014:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004018:	7cfb      	ldrb	r3, [r7, #19]
 800401a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800401c:	7c7b      	ldrb	r3, [r7, #17]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d105      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004022:	4ba0      	ldr	r3, [pc, #640]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004026:	4a9f      	ldr	r2, [pc, #636]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800402c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800403a:	4b9a      	ldr	r3, [pc, #616]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004040:	f023 0203 	bic.w	r2, r3, #3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004048:	4996      	ldr	r1, [pc, #600]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800405c:	4b91      	ldr	r3, [pc, #580]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	f023 020c 	bic.w	r2, r3, #12
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	498e      	ldr	r1, [pc, #568]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800407e:	4b89      	ldr	r3, [pc, #548]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004084:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	4985      	ldr	r1, [pc, #532]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040a0:	4b80      	ldr	r3, [pc, #512]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ae:	497d      	ldr	r1, [pc, #500]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040c2:	4b78      	ldr	r3, [pc, #480]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d0:	4974      	ldr	r1, [pc, #464]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040e4:	4b6f      	ldr	r3, [pc, #444]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f2:	496c      	ldr	r1, [pc, #432]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004106:	4b67      	ldr	r3, [pc, #412]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004114:	4963      	ldr	r1, [pc, #396]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004128:	4b5e      	ldr	r3, [pc, #376]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004136:	495b      	ldr	r1, [pc, #364]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800414a:	4b56      	ldr	r3, [pc, #344]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004150:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	4952      	ldr	r1, [pc, #328]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800416c:	4b4d      	ldr	r3, [pc, #308]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417a:	494a      	ldr	r1, [pc, #296]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800418e:	4b45      	ldr	r3, [pc, #276]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004194:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419c:	4941      	ldr	r1, [pc, #260]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041b0:	4b3c      	ldr	r3, [pc, #240]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041b6:	f023 0203 	bic.w	r2, r3, #3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041be:	4939      	ldr	r1, [pc, #228]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d028      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041d2:	4b34      	ldr	r3, [pc, #208]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e0:	4930      	ldr	r1, [pc, #192]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041f0:	d106      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041f2:	4b2c      	ldr	r3, [pc, #176]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	4a2b      	ldr	r2, [pc, #172]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041fc:	60d3      	str	r3, [r2, #12]
 80041fe:	e011      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004204:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004208:	d10c      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3304      	adds	r3, #4
 800420e:	2101      	movs	r1, #1
 8004210:	4618      	mov	r0, r3
 8004212:	f000 f8f9 	bl	8004408 <RCCEx_PLLSAI1_Config>
 8004216:	4603      	mov	r3, r0
 8004218:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800421a:	7cfb      	ldrb	r3, [r7, #19]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004220:	7cfb      	ldrb	r3, [r7, #19]
 8004222:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d04d      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004238:	d108      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800423a:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800423c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004240:	4a18      	ldr	r2, [pc, #96]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004242:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004246:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800424a:	e012      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800424c:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800424e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004252:	4a14      	ldr	r2, [pc, #80]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004258:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800425c:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004262:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800426a:	490e      	ldr	r1, [pc, #56]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800427a:	d106      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800427c:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a08      	ldr	r2, [pc, #32]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004286:	60d3      	str	r3, [r2, #12]
 8004288:	e020      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800428e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004292:	d109      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004294:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4a02      	ldr	r2, [pc, #8]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800429a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429e:	60d3      	str	r3, [r2, #12]
 80042a0:	e014      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80042a2:	bf00      	nop
 80042a4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042b0:	d10c      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3304      	adds	r3, #4
 80042b6:	2101      	movs	r1, #1
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 f8a5 	bl	8004408 <RCCEx_PLLSAI1_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042c2:	7cfb      	ldrb	r3, [r7, #19]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80042c8:	7cfb      	ldrb	r3, [r7, #19]
 80042ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d028      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042d8:	4b4a      	ldr	r3, [pc, #296]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e6:	4947      	ldr	r1, [pc, #284]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042f6:	d106      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042f8:	4b42      	ldr	r3, [pc, #264]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a41      	ldr	r2, [pc, #260]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004302:	60d3      	str	r3, [r2, #12]
 8004304:	e011      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800430a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800430e:	d10c      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3304      	adds	r3, #4
 8004314:	2101      	movs	r1, #1
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f876 	bl	8004408 <RCCEx_PLLSAI1_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004320:	7cfb      	ldrb	r3, [r7, #19]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004326:	7cfb      	ldrb	r3, [r7, #19]
 8004328:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d01e      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004336:	4b33      	ldr	r3, [pc, #204]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004346:	492f      	ldr	r1, [pc, #188]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004354:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004358:	d10c      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3304      	adds	r3, #4
 800435e:	2102      	movs	r1, #2
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f851 	bl	8004408 <RCCEx_PLLSAI1_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800436a:	7cfb      	ldrb	r3, [r7, #19]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004370:	7cfb      	ldrb	r3, [r7, #19]
 8004372:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00b      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004380:	4b20      	ldr	r3, [pc, #128]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004386:	f023 0204 	bic.w	r2, r3, #4
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004390:	491c      	ldr	r1, [pc, #112]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00b      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043a4:	4b17      	ldr	r3, [pc, #92]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043aa:	f023 0218 	bic.w	r2, r3, #24
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	4913      	ldr	r1, [pc, #76]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d017      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80043c8:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043d8:	490a      	ldr	r1, [pc, #40]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043ea:	d105      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4a04      	ldr	r2, [pc, #16]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40021000 	.word	0x40021000

08004408 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004416:	4b72      	ldr	r3, [pc, #456]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00e      	beq.n	8004440 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004422:	4b6f      	ldr	r3, [pc, #444]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0203 	and.w	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d103      	bne.n	800443a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
       ||
 8004436:	2b00      	cmp	r3, #0
 8004438:	d142      	bne.n	80044c0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	73fb      	strb	r3, [r7, #15]
 800443e:	e03f      	b.n	80044c0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b03      	cmp	r3, #3
 8004446:	d018      	beq.n	800447a <RCCEx_PLLSAI1_Config+0x72>
 8004448:	2b03      	cmp	r3, #3
 800444a:	d825      	bhi.n	8004498 <RCCEx_PLLSAI1_Config+0x90>
 800444c:	2b01      	cmp	r3, #1
 800444e:	d002      	beq.n	8004456 <RCCEx_PLLSAI1_Config+0x4e>
 8004450:	2b02      	cmp	r3, #2
 8004452:	d009      	beq.n	8004468 <RCCEx_PLLSAI1_Config+0x60>
 8004454:	e020      	b.n	8004498 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004456:	4b62      	ldr	r3, [pc, #392]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d11d      	bne.n	800449e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004466:	e01a      	b.n	800449e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004468:	4b5d      	ldr	r3, [pc, #372]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004470:	2b00      	cmp	r3, #0
 8004472:	d116      	bne.n	80044a2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004478:	e013      	b.n	80044a2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800447a:	4b59      	ldr	r3, [pc, #356]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10f      	bne.n	80044a6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004486:	4b56      	ldr	r3, [pc, #344]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004496:	e006      	b.n	80044a6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
      break;
 800449c:	e004      	b.n	80044a8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800449e:	bf00      	nop
 80044a0:	e002      	b.n	80044a8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044a2:	bf00      	nop
 80044a4:	e000      	b.n	80044a8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d108      	bne.n	80044c0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80044ae:	4b4c      	ldr	r3, [pc, #304]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f023 0203 	bic.w	r2, r3, #3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4949      	ldr	r1, [pc, #292]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f040 8086 	bne.w	80045d4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044c8:	4b45      	ldr	r3, [pc, #276]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a44      	ldr	r2, [pc, #272]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d4:	f7fe f8d6 	bl	8002684 <HAL_GetTick>
 80044d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044da:	e009      	b.n	80044f0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044dc:	f7fe f8d2 	bl	8002684 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d902      	bls.n	80044f0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	73fb      	strb	r3, [r7, #15]
        break;
 80044ee:	e005      	b.n	80044fc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044f0:	4b3b      	ldr	r3, [pc, #236]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1ef      	bne.n	80044dc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d168      	bne.n	80045d4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d113      	bne.n	8004530 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004508:	4b35      	ldr	r3, [pc, #212]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	4b35      	ldr	r3, [pc, #212]	; (80045e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800450e:	4013      	ands	r3, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6892      	ldr	r2, [r2, #8]
 8004514:	0211      	lsls	r1, r2, #8
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68d2      	ldr	r2, [r2, #12]
 800451a:	06d2      	lsls	r2, r2, #27
 800451c:	4311      	orrs	r1, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6852      	ldr	r2, [r2, #4]
 8004522:	3a01      	subs	r2, #1
 8004524:	0112      	lsls	r2, r2, #4
 8004526:	430a      	orrs	r2, r1
 8004528:	492d      	ldr	r1, [pc, #180]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800452a:	4313      	orrs	r3, r2
 800452c:	610b      	str	r3, [r1, #16]
 800452e:	e02d      	b.n	800458c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d115      	bne.n	8004562 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004536:	4b2a      	ldr	r3, [pc, #168]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	4b2b      	ldr	r3, [pc, #172]	; (80045e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800453c:	4013      	ands	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6892      	ldr	r2, [r2, #8]
 8004542:	0211      	lsls	r1, r2, #8
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6912      	ldr	r2, [r2, #16]
 8004548:	0852      	lsrs	r2, r2, #1
 800454a:	3a01      	subs	r2, #1
 800454c:	0552      	lsls	r2, r2, #21
 800454e:	4311      	orrs	r1, r2
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6852      	ldr	r2, [r2, #4]
 8004554:	3a01      	subs	r2, #1
 8004556:	0112      	lsls	r2, r2, #4
 8004558:	430a      	orrs	r2, r1
 800455a:	4921      	ldr	r1, [pc, #132]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800455c:	4313      	orrs	r3, r2
 800455e:	610b      	str	r3, [r1, #16]
 8004560:	e014      	b.n	800458c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004562:	4b1f      	ldr	r3, [pc, #124]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004564:	691a      	ldr	r2, [r3, #16]
 8004566:	4b21      	ldr	r3, [pc, #132]	; (80045ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004568:	4013      	ands	r3, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6892      	ldr	r2, [r2, #8]
 800456e:	0211      	lsls	r1, r2, #8
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6952      	ldr	r2, [r2, #20]
 8004574:	0852      	lsrs	r2, r2, #1
 8004576:	3a01      	subs	r2, #1
 8004578:	0652      	lsls	r2, r2, #25
 800457a:	4311      	orrs	r1, r2
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6852      	ldr	r2, [r2, #4]
 8004580:	3a01      	subs	r2, #1
 8004582:	0112      	lsls	r2, r2, #4
 8004584:	430a      	orrs	r2, r1
 8004586:	4916      	ldr	r1, [pc, #88]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004588:	4313      	orrs	r3, r2
 800458a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800458c:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004592:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004596:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004598:	f7fe f874 	bl	8002684 <HAL_GetTick>
 800459c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800459e:	e009      	b.n	80045b4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045a0:	f7fe f870 	bl	8002684 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d902      	bls.n	80045b4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	73fb      	strb	r3, [r7, #15]
          break;
 80045b2:	e005      	b.n	80045c0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045b4:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0ef      	beq.n	80045a0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045c6:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	4904      	ldr	r1, [pc, #16]	; (80045e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40021000 	.word	0x40021000
 80045e4:	07ff800f 	.word	0x07ff800f
 80045e8:	ff9f800f 	.word	0xff9f800f
 80045ec:	f9ff800f 	.word	0xf9ff800f

080045f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045fe:	4b72      	ldr	r3, [pc, #456]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00e      	beq.n	8004628 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800460a:	4b6f      	ldr	r3, [pc, #444]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f003 0203 	and.w	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d103      	bne.n	8004622 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
       ||
 800461e:	2b00      	cmp	r3, #0
 8004620:	d142      	bne.n	80046a8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
 8004626:	e03f      	b.n	80046a8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b03      	cmp	r3, #3
 800462e:	d018      	beq.n	8004662 <RCCEx_PLLSAI2_Config+0x72>
 8004630:	2b03      	cmp	r3, #3
 8004632:	d825      	bhi.n	8004680 <RCCEx_PLLSAI2_Config+0x90>
 8004634:	2b01      	cmp	r3, #1
 8004636:	d002      	beq.n	800463e <RCCEx_PLLSAI2_Config+0x4e>
 8004638:	2b02      	cmp	r3, #2
 800463a:	d009      	beq.n	8004650 <RCCEx_PLLSAI2_Config+0x60>
 800463c:	e020      	b.n	8004680 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800463e:	4b62      	ldr	r3, [pc, #392]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d11d      	bne.n	8004686 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800464e:	e01a      	b.n	8004686 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004650:	4b5d      	ldr	r3, [pc, #372]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004658:	2b00      	cmp	r3, #0
 800465a:	d116      	bne.n	800468a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004660:	e013      	b.n	800468a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004662:	4b59      	ldr	r3, [pc, #356]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10f      	bne.n	800468e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800466e:	4b56      	ldr	r3, [pc, #344]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800467e:	e006      	b.n	800468e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]
      break;
 8004684:	e004      	b.n	8004690 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004686:	bf00      	nop
 8004688:	e002      	b.n	8004690 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800468a:	bf00      	nop
 800468c:	e000      	b.n	8004690 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800468e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d108      	bne.n	80046a8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004696:	4b4c      	ldr	r3, [pc, #304]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f023 0203 	bic.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4949      	ldr	r1, [pc, #292]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f040 8086 	bne.w	80047bc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046b0:	4b45      	ldr	r3, [pc, #276]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a44      	ldr	r2, [pc, #272]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046bc:	f7fd ffe2 	bl	8002684 <HAL_GetTick>
 80046c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046c2:	e009      	b.n	80046d8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046c4:	f7fd ffde 	bl	8002684 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d902      	bls.n	80046d8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	73fb      	strb	r3, [r7, #15]
        break;
 80046d6:	e005      	b.n	80046e4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046d8:	4b3b      	ldr	r3, [pc, #236]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1ef      	bne.n	80046c4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d168      	bne.n	80047bc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d113      	bne.n	8004718 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046f0:	4b35      	ldr	r3, [pc, #212]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	4b35      	ldr	r3, [pc, #212]	; (80047cc <RCCEx_PLLSAI2_Config+0x1dc>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6892      	ldr	r2, [r2, #8]
 80046fc:	0211      	lsls	r1, r2, #8
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	68d2      	ldr	r2, [r2, #12]
 8004702:	06d2      	lsls	r2, r2, #27
 8004704:	4311      	orrs	r1, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6852      	ldr	r2, [r2, #4]
 800470a:	3a01      	subs	r2, #1
 800470c:	0112      	lsls	r2, r2, #4
 800470e:	430a      	orrs	r2, r1
 8004710:	492d      	ldr	r1, [pc, #180]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004712:	4313      	orrs	r3, r2
 8004714:	614b      	str	r3, [r1, #20]
 8004716:	e02d      	b.n	8004774 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d115      	bne.n	800474a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800471e:	4b2a      	ldr	r3, [pc, #168]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004720:	695a      	ldr	r2, [r3, #20]
 8004722:	4b2b      	ldr	r3, [pc, #172]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004724:	4013      	ands	r3, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6892      	ldr	r2, [r2, #8]
 800472a:	0211      	lsls	r1, r2, #8
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6912      	ldr	r2, [r2, #16]
 8004730:	0852      	lsrs	r2, r2, #1
 8004732:	3a01      	subs	r2, #1
 8004734:	0552      	lsls	r2, r2, #21
 8004736:	4311      	orrs	r1, r2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6852      	ldr	r2, [r2, #4]
 800473c:	3a01      	subs	r2, #1
 800473e:	0112      	lsls	r2, r2, #4
 8004740:	430a      	orrs	r2, r1
 8004742:	4921      	ldr	r1, [pc, #132]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004744:	4313      	orrs	r3, r2
 8004746:	614b      	str	r3, [r1, #20]
 8004748:	e014      	b.n	8004774 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800474a:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	4b21      	ldr	r3, [pc, #132]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004750:	4013      	ands	r3, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6892      	ldr	r2, [r2, #8]
 8004756:	0211      	lsls	r1, r2, #8
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6952      	ldr	r2, [r2, #20]
 800475c:	0852      	lsrs	r2, r2, #1
 800475e:	3a01      	subs	r2, #1
 8004760:	0652      	lsls	r2, r2, #25
 8004762:	4311      	orrs	r1, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6852      	ldr	r2, [r2, #4]
 8004768:	3a01      	subs	r2, #1
 800476a:	0112      	lsls	r2, r2, #4
 800476c:	430a      	orrs	r2, r1
 800476e:	4916      	ldr	r1, [pc, #88]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004770:	4313      	orrs	r3, r2
 8004772:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004774:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800477a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004780:	f7fd ff80 	bl	8002684 <HAL_GetTick>
 8004784:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004786:	e009      	b.n	800479c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004788:	f7fd ff7c 	bl	8002684 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d902      	bls.n	800479c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	73fb      	strb	r3, [r7, #15]
          break;
 800479a:	e005      	b.n	80047a8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800479c:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0ef      	beq.n	8004788 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	4904      	ldr	r1, [pc, #16]	; (80047c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40021000 	.word	0x40021000
 80047cc:	07ff800f 	.word	0x07ff800f
 80047d0:	ff9f800f 	.word	0xff9f800f
 80047d4:	f9ff800f 	.word	0xf9ff800f

080047d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e095      	b.n	8004916 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d108      	bne.n	8004804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047fa:	d009      	beq.n	8004810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	61da      	str	r2, [r3, #28]
 8004802:	e005      	b.n	8004810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fd fcfe 	bl	800222c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004846:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004850:	d902      	bls.n	8004858 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e002      	b.n	800485e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800485c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004866:	d007      	beq.n	8004878 <HAL_SPI_Init+0xa0>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004870:	d002      	beq.n	8004878 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004888:	431a      	orrs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ba:	ea42 0103 	orr.w	r1, r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	0c1b      	lsrs	r3, r3, #16
 80048d4:	f003 0204 	and.w	r2, r3, #4
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80048f4:	ea42 0103 	orr.w	r1, r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b088      	sub	sp, #32
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	603b      	str	r3, [r7, #0]
 800492a:	4613      	mov	r3, r2
 800492c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_SPI_Transmit+0x22>
 800493c:	2302      	movs	r3, #2
 800493e:	e158      	b.n	8004bf2 <HAL_SPI_Transmit+0x2d4>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004948:	f7fd fe9c 	bl	8002684 <HAL_GetTick>
 800494c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d002      	beq.n	8004964 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800495e:	2302      	movs	r3, #2
 8004960:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004962:	e13d      	b.n	8004be0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_SPI_Transmit+0x52>
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d102      	bne.n	8004976 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004974:	e134      	b.n	8004be0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2203      	movs	r2, #3
 800497a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	88fa      	ldrh	r2, [r7, #6]
 800498e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	88fa      	ldrh	r2, [r7, #6]
 8004994:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c0:	d10f      	bne.n	80049e2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	d007      	beq.n	8004a00 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a08:	d94b      	bls.n	8004aa2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_SPI_Transmit+0xfa>
 8004a12:	8afb      	ldrh	r3, [r7, #22]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d13e      	bne.n	8004a96 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	881a      	ldrh	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	1c9a      	adds	r2, r3, #2
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a3c:	e02b      	b.n	8004a96 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d112      	bne.n	8004a72 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a50:	881a      	ldrh	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	1c9a      	adds	r2, r3, #2
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a70:	e011      	b.n	8004a96 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a72:	f7fd fe07 	bl	8002684 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d803      	bhi.n	8004a8a <HAL_SPI_Transmit+0x16c>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a88:	d102      	bne.n	8004a90 <HAL_SPI_Transmit+0x172>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a94:	e0a4      	b.n	8004be0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1ce      	bne.n	8004a3e <HAL_SPI_Transmit+0x120>
 8004aa0:	e07c      	b.n	8004b9c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <HAL_SPI_Transmit+0x192>
 8004aaa:	8afb      	ldrh	r3, [r7, #22]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d170      	bne.n	8004b92 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d912      	bls.n	8004ae0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	881a      	ldrh	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	1c9a      	adds	r2, r3, #2
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b02      	subs	r3, #2
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ade:	e058      	b.n	8004b92 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	7812      	ldrb	r2, [r2, #0]
 8004aec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b06:	e044      	b.n	8004b92 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d12b      	bne.n	8004b6e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d912      	bls.n	8004b46 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	881a      	ldrh	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b30:	1c9a      	adds	r2, r3, #2
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b02      	subs	r3, #2
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b44:	e025      	b.n	8004b92 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	330c      	adds	r3, #12
 8004b50:	7812      	ldrb	r2, [r2, #0]
 8004b52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b6c:	e011      	b.n	8004b92 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b6e:	f7fd fd89 	bl	8002684 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d803      	bhi.n	8004b86 <HAL_SPI_Transmit+0x268>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d102      	bne.n	8004b8c <HAL_SPI_Transmit+0x26e>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b90:	e026      	b.n	8004be0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1b5      	bne.n	8004b08 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	6839      	ldr	r1, [r7, #0]
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f949 	bl	8004e38 <SPI_EndRxTxTransaction>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10a      	bne.n	8004bd0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bba:	2300      	movs	r3, #0
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e000      	b.n	8004be0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004bde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c0c:	f7fd fd3a 	bl	8002684 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	4413      	add	r3, r2
 8004c1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c1c:	f7fd fd32 	bl	8002684 <HAL_GetTick>
 8004c20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c22:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	015b      	lsls	r3, r3, #5
 8004c28:	0d1b      	lsrs	r3, r3, #20
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	fb02 f303 	mul.w	r3, r2, r3
 8004c30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c32:	e054      	b.n	8004cde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3a:	d050      	beq.n	8004cde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c3c:	f7fd fd22 	bl	8002684 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d902      	bls.n	8004c52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d13d      	bne.n	8004cce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c6a:	d111      	bne.n	8004c90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c74:	d004      	beq.n	8004c80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c7e:	d107      	bne.n	8004c90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c98:	d10f      	bne.n	8004cba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e017      	b.n	8004cfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	bf0c      	ite	eq
 8004cee:	2301      	moveq	r3, #1
 8004cf0:	2300      	movne	r3, #0
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d19b      	bne.n	8004c34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000070 	.word	0x20000070

08004d0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	; 0x28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d1e:	f7fd fcb1 	bl	8002684 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004d2e:	f7fd fca9 	bl	8002684 <HAL_GetTick>
 8004d32:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	330c      	adds	r3, #12
 8004d3a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d3c:	4b3d      	ldr	r3, [pc, #244]	; (8004e34 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	00da      	lsls	r2, r3, #3
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	0d1b      	lsrs	r3, r3, #20
 8004d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d4e:	fb02 f303 	mul.w	r3, r2, r3
 8004d52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d54:	e060      	b.n	8004e18 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d5c:	d107      	bne.n	8004d6e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d104      	bne.n	8004d6e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d6c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d050      	beq.n	8004e18 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d76:	f7fd fc85 	bl	8002684 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d902      	bls.n	8004d8c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d13d      	bne.n	8004e08 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004da4:	d111      	bne.n	8004dca <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dae:	d004      	beq.n	8004dba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db8:	d107      	bne.n	8004dca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd2:	d10f      	bne.n	8004df4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004df2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e010      	b.n	8004e2a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4013      	ands	r3, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d196      	bne.n	8004d56 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3728      	adds	r7, #40	; 0x28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000070 	.word	0x20000070

08004e38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f7ff ff5b 	bl	8004d0c <SPI_WaitFifoStateUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e60:	f043 0220 	orr.w	r2, r3, #32
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e027      	b.n	8004ebc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2200      	movs	r2, #0
 8004e74:	2180      	movs	r1, #128	; 0x80
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f7ff fec0 	bl	8004bfc <SPI_WaitFlagStateUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d007      	beq.n	8004e92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e86:	f043 0220 	orr.w	r2, r3, #32
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e014      	b.n	8004ebc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7ff ff34 	bl	8004d0c <SPI_WaitFifoStateUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d007      	beq.n	8004eba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eae:	f043 0220 	orr.w	r2, r3, #32
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e000      	b.n	8004ebc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e049      	b.n	8004f6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fd f9e0 	bl	80022b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3304      	adds	r3, #4
 8004f00:	4619      	mov	r1, r3
 8004f02:	4610      	mov	r0, r2
 8004f04:	f000 f968 	bl	80051d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d001      	beq.n	8004f8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e047      	b.n	800501c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a23      	ldr	r2, [pc, #140]	; (8005028 <HAL_TIM_Base_Start+0xb4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01d      	beq.n	8004fda <HAL_TIM_Base_Start+0x66>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa6:	d018      	beq.n	8004fda <HAL_TIM_Base_Start+0x66>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1f      	ldr	r2, [pc, #124]	; (800502c <HAL_TIM_Base_Start+0xb8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d013      	beq.n	8004fda <HAL_TIM_Base_Start+0x66>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a1e      	ldr	r2, [pc, #120]	; (8005030 <HAL_TIM_Base_Start+0xbc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00e      	beq.n	8004fda <HAL_TIM_Base_Start+0x66>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1c      	ldr	r2, [pc, #112]	; (8005034 <HAL_TIM_Base_Start+0xc0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d009      	beq.n	8004fda <HAL_TIM_Base_Start+0x66>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1b      	ldr	r2, [pc, #108]	; (8005038 <HAL_TIM_Base_Start+0xc4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d004      	beq.n	8004fda <HAL_TIM_Base_Start+0x66>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a19      	ldr	r2, [pc, #100]	; (800503c <HAL_TIM_Base_Start+0xc8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d115      	bne.n	8005006 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	4b17      	ldr	r3, [pc, #92]	; (8005040 <HAL_TIM_Base_Start+0xcc>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b06      	cmp	r3, #6
 8004fea:	d015      	beq.n	8005018 <HAL_TIM_Base_Start+0xa4>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff2:	d011      	beq.n	8005018 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0201 	orr.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005004:	e008      	b.n	8005018 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0201 	orr.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	e000      	b.n	800501a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005018:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	40012c00 	.word	0x40012c00
 800502c:	40000400 	.word	0x40000400
 8005030:	40000800 	.word	0x40000800
 8005034:	40000c00 	.word	0x40000c00
 8005038:	40013400 	.word	0x40013400
 800503c:	40014000 	.word	0x40014000
 8005040:	00010007 	.word	0x00010007

08005044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_TIM_ConfigClockSource+0x1c>
 800505c:	2302      	movs	r3, #2
 800505e:	e0b6      	b.n	80051ce <HAL_TIM_ConfigClockSource+0x18a>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800507e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800508a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800509c:	d03e      	beq.n	800511c <HAL_TIM_ConfigClockSource+0xd8>
 800509e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a2:	f200 8087 	bhi.w	80051b4 <HAL_TIM_ConfigClockSource+0x170>
 80050a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050aa:	f000 8086 	beq.w	80051ba <HAL_TIM_ConfigClockSource+0x176>
 80050ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b2:	d87f      	bhi.n	80051b4 <HAL_TIM_ConfigClockSource+0x170>
 80050b4:	2b70      	cmp	r3, #112	; 0x70
 80050b6:	d01a      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0xaa>
 80050b8:	2b70      	cmp	r3, #112	; 0x70
 80050ba:	d87b      	bhi.n	80051b4 <HAL_TIM_ConfigClockSource+0x170>
 80050bc:	2b60      	cmp	r3, #96	; 0x60
 80050be:	d050      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x11e>
 80050c0:	2b60      	cmp	r3, #96	; 0x60
 80050c2:	d877      	bhi.n	80051b4 <HAL_TIM_ConfigClockSource+0x170>
 80050c4:	2b50      	cmp	r3, #80	; 0x50
 80050c6:	d03c      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0xfe>
 80050c8:	2b50      	cmp	r3, #80	; 0x50
 80050ca:	d873      	bhi.n	80051b4 <HAL_TIM_ConfigClockSource+0x170>
 80050cc:	2b40      	cmp	r3, #64	; 0x40
 80050ce:	d058      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0x13e>
 80050d0:	2b40      	cmp	r3, #64	; 0x40
 80050d2:	d86f      	bhi.n	80051b4 <HAL_TIM_ConfigClockSource+0x170>
 80050d4:	2b30      	cmp	r3, #48	; 0x30
 80050d6:	d064      	beq.n	80051a2 <HAL_TIM_ConfigClockSource+0x15e>
 80050d8:	2b30      	cmp	r3, #48	; 0x30
 80050da:	d86b      	bhi.n	80051b4 <HAL_TIM_ConfigClockSource+0x170>
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d060      	beq.n	80051a2 <HAL_TIM_ConfigClockSource+0x15e>
 80050e0:	2b20      	cmp	r3, #32
 80050e2:	d867      	bhi.n	80051b4 <HAL_TIM_ConfigClockSource+0x170>
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d05c      	beq.n	80051a2 <HAL_TIM_ConfigClockSource+0x15e>
 80050e8:	2b10      	cmp	r3, #16
 80050ea:	d05a      	beq.n	80051a2 <HAL_TIM_ConfigClockSource+0x15e>
 80050ec:	e062      	b.n	80051b4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6899      	ldr	r1, [r3, #8]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f000 f97f 	bl	8005400 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	609a      	str	r2, [r3, #8]
      break;
 800511a:	e04f      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6818      	ldr	r0, [r3, #0]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	6899      	ldr	r1, [r3, #8]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f000 f968 	bl	8005400 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800513e:	609a      	str	r2, [r3, #8]
      break;
 8005140:	e03c      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6859      	ldr	r1, [r3, #4]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	461a      	mov	r2, r3
 8005150:	f000 f8dc 	bl	800530c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2150      	movs	r1, #80	; 0x50
 800515a:	4618      	mov	r0, r3
 800515c:	f000 f935 	bl	80053ca <TIM_ITRx_SetConfig>
      break;
 8005160:	e02c      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6859      	ldr	r1, [r3, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	461a      	mov	r2, r3
 8005170:	f000 f8fb 	bl	800536a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2160      	movs	r1, #96	; 0x60
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f925 	bl	80053ca <TIM_ITRx_SetConfig>
      break;
 8005180:	e01c      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6859      	ldr	r1, [r3, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	461a      	mov	r2, r3
 8005190:	f000 f8bc 	bl	800530c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2140      	movs	r1, #64	; 0x40
 800519a:	4618      	mov	r0, r3
 800519c:	f000 f915 	bl	80053ca <TIM_ITRx_SetConfig>
      break;
 80051a0:	e00c      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4619      	mov	r1, r3
 80051ac:	4610      	mov	r0, r2
 80051ae:	f000 f90c 	bl	80053ca <TIM_ITRx_SetConfig>
      break;
 80051b2:	e003      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]
      break;
 80051b8:	e000      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80051ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
	...

080051d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a40      	ldr	r2, [pc, #256]	; (80052ec <TIM_Base_SetConfig+0x114>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d013      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f6:	d00f      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a3d      	ldr	r2, [pc, #244]	; (80052f0 <TIM_Base_SetConfig+0x118>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00b      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a3c      	ldr	r2, [pc, #240]	; (80052f4 <TIM_Base_SetConfig+0x11c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d007      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a3b      	ldr	r2, [pc, #236]	; (80052f8 <TIM_Base_SetConfig+0x120>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a3a      	ldr	r2, [pc, #232]	; (80052fc <TIM_Base_SetConfig+0x124>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d108      	bne.n	800522a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2f      	ldr	r2, [pc, #188]	; (80052ec <TIM_Base_SetConfig+0x114>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d01f      	beq.n	8005272 <TIM_Base_SetConfig+0x9a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005238:	d01b      	beq.n	8005272 <TIM_Base_SetConfig+0x9a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2c      	ldr	r2, [pc, #176]	; (80052f0 <TIM_Base_SetConfig+0x118>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d017      	beq.n	8005272 <TIM_Base_SetConfig+0x9a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2b      	ldr	r2, [pc, #172]	; (80052f4 <TIM_Base_SetConfig+0x11c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d013      	beq.n	8005272 <TIM_Base_SetConfig+0x9a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2a      	ldr	r2, [pc, #168]	; (80052f8 <TIM_Base_SetConfig+0x120>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00f      	beq.n	8005272 <TIM_Base_SetConfig+0x9a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a29      	ldr	r2, [pc, #164]	; (80052fc <TIM_Base_SetConfig+0x124>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00b      	beq.n	8005272 <TIM_Base_SetConfig+0x9a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a28      	ldr	r2, [pc, #160]	; (8005300 <TIM_Base_SetConfig+0x128>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d007      	beq.n	8005272 <TIM_Base_SetConfig+0x9a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a27      	ldr	r2, [pc, #156]	; (8005304 <TIM_Base_SetConfig+0x12c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <TIM_Base_SetConfig+0x9a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a26      	ldr	r2, [pc, #152]	; (8005308 <TIM_Base_SetConfig+0x130>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d108      	bne.n	8005284 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a10      	ldr	r2, [pc, #64]	; (80052ec <TIM_Base_SetConfig+0x114>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00f      	beq.n	80052d0 <TIM_Base_SetConfig+0xf8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a12      	ldr	r2, [pc, #72]	; (80052fc <TIM_Base_SetConfig+0x124>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00b      	beq.n	80052d0 <TIM_Base_SetConfig+0xf8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a11      	ldr	r2, [pc, #68]	; (8005300 <TIM_Base_SetConfig+0x128>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d007      	beq.n	80052d0 <TIM_Base_SetConfig+0xf8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a10      	ldr	r2, [pc, #64]	; (8005304 <TIM_Base_SetConfig+0x12c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d003      	beq.n	80052d0 <TIM_Base_SetConfig+0xf8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a0f      	ldr	r2, [pc, #60]	; (8005308 <TIM_Base_SetConfig+0x130>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d103      	bne.n	80052d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	615a      	str	r2, [r3, #20]
}
 80052de:	bf00      	nop
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40012c00 	.word	0x40012c00
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800
 80052f8:	40000c00 	.word	0x40000c00
 80052fc:	40013400 	.word	0x40013400
 8005300:	40014000 	.word	0x40014000
 8005304:	40014400 	.word	0x40014400
 8005308:	40014800 	.word	0x40014800

0800530c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f023 0201 	bic.w	r2, r3, #1
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f023 030a 	bic.w	r3, r3, #10
 8005348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800536a:	b480      	push	{r7}
 800536c:	b087      	sub	sp, #28
 800536e:	af00      	add	r7, sp, #0
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	f023 0210 	bic.w	r2, r3, #16
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005394:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	031b      	lsls	r3, r3, #12
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	621a      	str	r2, [r3, #32]
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f043 0307 	orr.w	r3, r3, #7
 80053ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	609a      	str	r2, [r3, #8]
}
 80053f4:	bf00      	nop
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800541a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	021a      	lsls	r2, r3, #8
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	431a      	orrs	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4313      	orrs	r3, r2
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	609a      	str	r2, [r3, #8]
}
 8005434:	bf00      	nop
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005454:	2302      	movs	r3, #2
 8005456:	e068      	b.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a2e      	ldr	r2, [pc, #184]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d004      	beq.n	800548c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a2d      	ldr	r2, [pc, #180]	; (800553c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d108      	bne.n	800549e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005492:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a1e      	ldr	r2, [pc, #120]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d01d      	beq.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ca:	d018      	beq.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1b      	ldr	r2, [pc, #108]	; (8005540 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d013      	beq.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1a      	ldr	r2, [pc, #104]	; (8005544 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00e      	beq.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a18      	ldr	r2, [pc, #96]	; (8005548 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d009      	beq.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a13      	ldr	r2, [pc, #76]	; (800553c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d004      	beq.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a14      	ldr	r2, [pc, #80]	; (800554c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d10c      	bne.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005504:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	4313      	orrs	r3, r2
 800550e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40012c00 	.word	0x40012c00
 800553c:	40013400 	.word	0x40013400
 8005540:	40000400 	.word	0x40000400
 8005544:	40000800 	.word	0x40000800
 8005548:	40000c00 	.word	0x40000c00
 800554c:	40014000 	.word	0x40014000

08005550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e042      	b.n	80055e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005568:	2b00      	cmp	r3, #0
 800556a:	d106      	bne.n	800557a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7fc fdf7 	bl	8002168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2224      	movs	r2, #36	; 0x24
 800557e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0201 	bic.w	r2, r2, #1
 8005590:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f8c4 	bl	8005720 <UART_SetConfig>
 8005598:	4603      	mov	r3, r0
 800559a:	2b01      	cmp	r3, #1
 800559c:	d101      	bne.n	80055a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e022      	b.n	80055e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fbb4 	bl	8005d18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fc3b 	bl	8005e5c <UART_CheckIdleState>
 80055e6:	4603      	mov	r3, r0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	; 0x28
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	4613      	mov	r3, r2
 80055fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005606:	2b20      	cmp	r3, #32
 8005608:	f040 8084 	bne.w	8005714 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <HAL_UART_Transmit+0x28>
 8005612:	88fb      	ldrh	r3, [r7, #6]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e07c      	b.n	8005716 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005622:	2b01      	cmp	r3, #1
 8005624:	d101      	bne.n	800562a <HAL_UART_Transmit+0x3a>
 8005626:	2302      	movs	r3, #2
 8005628:	e075      	b.n	8005716 <HAL_UART_Transmit+0x126>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2221      	movs	r2, #33	; 0x21
 800563e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005642:	f7fd f81f 	bl	8002684 <HAL_GetTick>
 8005646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	88fa      	ldrh	r2, [r7, #6]
 800564c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005660:	d108      	bne.n	8005674 <HAL_UART_Transmit+0x84>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d104      	bne.n	8005674 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	e003      	b.n	800567c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005678:	2300      	movs	r3, #0
 800567a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005684:	e02d      	b.n	80056e2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2200      	movs	r2, #0
 800568e:	2180      	movs	r1, #128	; 0x80
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 fc2e 	bl	8005ef2 <UART_WaitOnFlagUntilTimeout>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e03a      	b.n	8005716 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10b      	bne.n	80056be <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	881a      	ldrh	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056b2:	b292      	uxth	r2, r2
 80056b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	3302      	adds	r3, #2
 80056ba:	61bb      	str	r3, [r7, #24]
 80056bc:	e008      	b.n	80056d0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	781a      	ldrb	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	b292      	uxth	r2, r2
 80056c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	3301      	adds	r3, #1
 80056ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1cb      	bne.n	8005686 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2140      	movs	r1, #64	; 0x40
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 fbfa 	bl	8005ef2 <UART_WaitOnFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e006      	b.n	8005716 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	e000      	b.n	8005716 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005714:	2302      	movs	r3, #2
  }
}
 8005716:	4618      	mov	r0, r3
 8005718:	3720      	adds	r7, #32
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
	...

08005720 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005724:	b08c      	sub	sp, #48	; 0x30
 8005726:	af00      	add	r7, sp, #0
 8005728:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	431a      	orrs	r2, r3
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	431a      	orrs	r2, r3
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	4313      	orrs	r3, r2
 8005746:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4baa      	ldr	r3, [pc, #680]	; (80059f8 <UART_SetConfig+0x2d8>)
 8005750:	4013      	ands	r3, r2
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	6812      	ldr	r2, [r2, #0]
 8005756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005758:	430b      	orrs	r3, r1
 800575a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a9f      	ldr	r2, [pc, #636]	; (80059fc <UART_SetConfig+0x2dc>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d004      	beq.n	800578c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005788:	4313      	orrs	r3, r2
 800578a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005796:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	6812      	ldr	r2, [r2, #0]
 800579e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057a0:	430b      	orrs	r3, r1
 80057a2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	f023 010f 	bic.w	r1, r3, #15
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a90      	ldr	r2, [pc, #576]	; (8005a00 <UART_SetConfig+0x2e0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d125      	bne.n	8005810 <UART_SetConfig+0xf0>
 80057c4:	4b8f      	ldr	r3, [pc, #572]	; (8005a04 <UART_SetConfig+0x2e4>)
 80057c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	d81a      	bhi.n	8005808 <UART_SetConfig+0xe8>
 80057d2:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <UART_SetConfig+0xb8>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	080057e9 	.word	0x080057e9
 80057dc:	080057f9 	.word	0x080057f9
 80057e0:	080057f1 	.word	0x080057f1
 80057e4:	08005801 	.word	0x08005801
 80057e8:	2301      	movs	r3, #1
 80057ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ee:	e116      	b.n	8005a1e <UART_SetConfig+0x2fe>
 80057f0:	2302      	movs	r3, #2
 80057f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057f6:	e112      	b.n	8005a1e <UART_SetConfig+0x2fe>
 80057f8:	2304      	movs	r3, #4
 80057fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057fe:	e10e      	b.n	8005a1e <UART_SetConfig+0x2fe>
 8005800:	2308      	movs	r3, #8
 8005802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005806:	e10a      	b.n	8005a1e <UART_SetConfig+0x2fe>
 8005808:	2310      	movs	r3, #16
 800580a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800580e:	e106      	b.n	8005a1e <UART_SetConfig+0x2fe>
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a7c      	ldr	r2, [pc, #496]	; (8005a08 <UART_SetConfig+0x2e8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d138      	bne.n	800588c <UART_SetConfig+0x16c>
 800581a:	4b7a      	ldr	r3, [pc, #488]	; (8005a04 <UART_SetConfig+0x2e4>)
 800581c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005820:	f003 030c 	and.w	r3, r3, #12
 8005824:	2b0c      	cmp	r3, #12
 8005826:	d82d      	bhi.n	8005884 <UART_SetConfig+0x164>
 8005828:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <UART_SetConfig+0x110>)
 800582a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582e:	bf00      	nop
 8005830:	08005865 	.word	0x08005865
 8005834:	08005885 	.word	0x08005885
 8005838:	08005885 	.word	0x08005885
 800583c:	08005885 	.word	0x08005885
 8005840:	08005875 	.word	0x08005875
 8005844:	08005885 	.word	0x08005885
 8005848:	08005885 	.word	0x08005885
 800584c:	08005885 	.word	0x08005885
 8005850:	0800586d 	.word	0x0800586d
 8005854:	08005885 	.word	0x08005885
 8005858:	08005885 	.word	0x08005885
 800585c:	08005885 	.word	0x08005885
 8005860:	0800587d 	.word	0x0800587d
 8005864:	2300      	movs	r3, #0
 8005866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800586a:	e0d8      	b.n	8005a1e <UART_SetConfig+0x2fe>
 800586c:	2302      	movs	r3, #2
 800586e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005872:	e0d4      	b.n	8005a1e <UART_SetConfig+0x2fe>
 8005874:	2304      	movs	r3, #4
 8005876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800587a:	e0d0      	b.n	8005a1e <UART_SetConfig+0x2fe>
 800587c:	2308      	movs	r3, #8
 800587e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005882:	e0cc      	b.n	8005a1e <UART_SetConfig+0x2fe>
 8005884:	2310      	movs	r3, #16
 8005886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800588a:	e0c8      	b.n	8005a1e <UART_SetConfig+0x2fe>
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a5e      	ldr	r2, [pc, #376]	; (8005a0c <UART_SetConfig+0x2ec>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d125      	bne.n	80058e2 <UART_SetConfig+0x1c2>
 8005896:	4b5b      	ldr	r3, [pc, #364]	; (8005a04 <UART_SetConfig+0x2e4>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058a0:	2b30      	cmp	r3, #48	; 0x30
 80058a2:	d016      	beq.n	80058d2 <UART_SetConfig+0x1b2>
 80058a4:	2b30      	cmp	r3, #48	; 0x30
 80058a6:	d818      	bhi.n	80058da <UART_SetConfig+0x1ba>
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	d00a      	beq.n	80058c2 <UART_SetConfig+0x1a2>
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d814      	bhi.n	80058da <UART_SetConfig+0x1ba>
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <UART_SetConfig+0x19a>
 80058b4:	2b10      	cmp	r3, #16
 80058b6:	d008      	beq.n	80058ca <UART_SetConfig+0x1aa>
 80058b8:	e00f      	b.n	80058da <UART_SetConfig+0x1ba>
 80058ba:	2300      	movs	r3, #0
 80058bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c0:	e0ad      	b.n	8005a1e <UART_SetConfig+0x2fe>
 80058c2:	2302      	movs	r3, #2
 80058c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c8:	e0a9      	b.n	8005a1e <UART_SetConfig+0x2fe>
 80058ca:	2304      	movs	r3, #4
 80058cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d0:	e0a5      	b.n	8005a1e <UART_SetConfig+0x2fe>
 80058d2:	2308      	movs	r3, #8
 80058d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d8:	e0a1      	b.n	8005a1e <UART_SetConfig+0x2fe>
 80058da:	2310      	movs	r3, #16
 80058dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058e0:	e09d      	b.n	8005a1e <UART_SetConfig+0x2fe>
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a4a      	ldr	r2, [pc, #296]	; (8005a10 <UART_SetConfig+0x2f0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d125      	bne.n	8005938 <UART_SetConfig+0x218>
 80058ec:	4b45      	ldr	r3, [pc, #276]	; (8005a04 <UART_SetConfig+0x2e4>)
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058f6:	2bc0      	cmp	r3, #192	; 0xc0
 80058f8:	d016      	beq.n	8005928 <UART_SetConfig+0x208>
 80058fa:	2bc0      	cmp	r3, #192	; 0xc0
 80058fc:	d818      	bhi.n	8005930 <UART_SetConfig+0x210>
 80058fe:	2b80      	cmp	r3, #128	; 0x80
 8005900:	d00a      	beq.n	8005918 <UART_SetConfig+0x1f8>
 8005902:	2b80      	cmp	r3, #128	; 0x80
 8005904:	d814      	bhi.n	8005930 <UART_SetConfig+0x210>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <UART_SetConfig+0x1f0>
 800590a:	2b40      	cmp	r3, #64	; 0x40
 800590c:	d008      	beq.n	8005920 <UART_SetConfig+0x200>
 800590e:	e00f      	b.n	8005930 <UART_SetConfig+0x210>
 8005910:	2300      	movs	r3, #0
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005916:	e082      	b.n	8005a1e <UART_SetConfig+0x2fe>
 8005918:	2302      	movs	r3, #2
 800591a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591e:	e07e      	b.n	8005a1e <UART_SetConfig+0x2fe>
 8005920:	2304      	movs	r3, #4
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005926:	e07a      	b.n	8005a1e <UART_SetConfig+0x2fe>
 8005928:	2308      	movs	r3, #8
 800592a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592e:	e076      	b.n	8005a1e <UART_SetConfig+0x2fe>
 8005930:	2310      	movs	r3, #16
 8005932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005936:	e072      	b.n	8005a1e <UART_SetConfig+0x2fe>
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a35      	ldr	r2, [pc, #212]	; (8005a14 <UART_SetConfig+0x2f4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d12a      	bne.n	8005998 <UART_SetConfig+0x278>
 8005942:	4b30      	ldr	r3, [pc, #192]	; (8005a04 <UART_SetConfig+0x2e4>)
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800594c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005950:	d01a      	beq.n	8005988 <UART_SetConfig+0x268>
 8005952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005956:	d81b      	bhi.n	8005990 <UART_SetConfig+0x270>
 8005958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800595c:	d00c      	beq.n	8005978 <UART_SetConfig+0x258>
 800595e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005962:	d815      	bhi.n	8005990 <UART_SetConfig+0x270>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <UART_SetConfig+0x250>
 8005968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800596c:	d008      	beq.n	8005980 <UART_SetConfig+0x260>
 800596e:	e00f      	b.n	8005990 <UART_SetConfig+0x270>
 8005970:	2300      	movs	r3, #0
 8005972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005976:	e052      	b.n	8005a1e <UART_SetConfig+0x2fe>
 8005978:	2302      	movs	r3, #2
 800597a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800597e:	e04e      	b.n	8005a1e <UART_SetConfig+0x2fe>
 8005980:	2304      	movs	r3, #4
 8005982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005986:	e04a      	b.n	8005a1e <UART_SetConfig+0x2fe>
 8005988:	2308      	movs	r3, #8
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800598e:	e046      	b.n	8005a1e <UART_SetConfig+0x2fe>
 8005990:	2310      	movs	r3, #16
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005996:	e042      	b.n	8005a1e <UART_SetConfig+0x2fe>
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a17      	ldr	r2, [pc, #92]	; (80059fc <UART_SetConfig+0x2dc>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d13a      	bne.n	8005a18 <UART_SetConfig+0x2f8>
 80059a2:	4b18      	ldr	r3, [pc, #96]	; (8005a04 <UART_SetConfig+0x2e4>)
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059b0:	d01a      	beq.n	80059e8 <UART_SetConfig+0x2c8>
 80059b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059b6:	d81b      	bhi.n	80059f0 <UART_SetConfig+0x2d0>
 80059b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059bc:	d00c      	beq.n	80059d8 <UART_SetConfig+0x2b8>
 80059be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059c2:	d815      	bhi.n	80059f0 <UART_SetConfig+0x2d0>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <UART_SetConfig+0x2b0>
 80059c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059cc:	d008      	beq.n	80059e0 <UART_SetConfig+0x2c0>
 80059ce:	e00f      	b.n	80059f0 <UART_SetConfig+0x2d0>
 80059d0:	2300      	movs	r3, #0
 80059d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d6:	e022      	b.n	8005a1e <UART_SetConfig+0x2fe>
 80059d8:	2302      	movs	r3, #2
 80059da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059de:	e01e      	b.n	8005a1e <UART_SetConfig+0x2fe>
 80059e0:	2304      	movs	r3, #4
 80059e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e6:	e01a      	b.n	8005a1e <UART_SetConfig+0x2fe>
 80059e8:	2308      	movs	r3, #8
 80059ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ee:	e016      	b.n	8005a1e <UART_SetConfig+0x2fe>
 80059f0:	2310      	movs	r3, #16
 80059f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f6:	e012      	b.n	8005a1e <UART_SetConfig+0x2fe>
 80059f8:	cfff69f3 	.word	0xcfff69f3
 80059fc:	40008000 	.word	0x40008000
 8005a00:	40013800 	.word	0x40013800
 8005a04:	40021000 	.word	0x40021000
 8005a08:	40004400 	.word	0x40004400
 8005a0c:	40004800 	.word	0x40004800
 8005a10:	40004c00 	.word	0x40004c00
 8005a14:	40005000 	.word	0x40005000
 8005a18:	2310      	movs	r3, #16
 8005a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4aae      	ldr	r2, [pc, #696]	; (8005cdc <UART_SetConfig+0x5bc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	f040 8097 	bne.w	8005b58 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d823      	bhi.n	8005a7a <UART_SetConfig+0x35a>
 8005a32:	a201      	add	r2, pc, #4	; (adr r2, 8005a38 <UART_SetConfig+0x318>)
 8005a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a38:	08005a5d 	.word	0x08005a5d
 8005a3c:	08005a7b 	.word	0x08005a7b
 8005a40:	08005a65 	.word	0x08005a65
 8005a44:	08005a7b 	.word	0x08005a7b
 8005a48:	08005a6b 	.word	0x08005a6b
 8005a4c:	08005a7b 	.word	0x08005a7b
 8005a50:	08005a7b 	.word	0x08005a7b
 8005a54:	08005a7b 	.word	0x08005a7b
 8005a58:	08005a73 	.word	0x08005a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a5c:	f7fe f8b6 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8005a60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a62:	e010      	b.n	8005a86 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a64:	4b9e      	ldr	r3, [pc, #632]	; (8005ce0 <UART_SetConfig+0x5c0>)
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a68:	e00d      	b.n	8005a86 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a6a:	f7fe f817 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 8005a6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a70:	e009      	b.n	8005a86 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a78:	e005      	b.n	8005a86 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 8130 	beq.w	8005cee <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	4a94      	ldr	r2, [pc, #592]	; (8005ce4 <UART_SetConfig+0x5c4>)
 8005a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	4413      	add	r3, r2
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d305      	bcc.n	8005abe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d903      	bls.n	8005ac6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ac4:	e113      	b.n	8005cee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	2200      	movs	r2, #0
 8005aca:	60bb      	str	r3, [r7, #8]
 8005acc:	60fa      	str	r2, [r7, #12]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	4a84      	ldr	r2, [pc, #528]	; (8005ce4 <UART_SetConfig+0x5c4>)
 8005ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2200      	movs	r2, #0
 8005adc:	603b      	str	r3, [r7, #0]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ae4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ae8:	f7fb fd2e 	bl	8001548 <__aeabi_uldivmod>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4610      	mov	r0, r2
 8005af2:	4619      	mov	r1, r3
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	f04f 0300 	mov.w	r3, #0
 8005afc:	020b      	lsls	r3, r1, #8
 8005afe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b02:	0202      	lsls	r2, r0, #8
 8005b04:	6979      	ldr	r1, [r7, #20]
 8005b06:	6849      	ldr	r1, [r1, #4]
 8005b08:	0849      	lsrs	r1, r1, #1
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	4605      	mov	r5, r0
 8005b10:	eb12 0804 	adds.w	r8, r2, r4
 8005b14:	eb43 0905 	adc.w	r9, r3, r5
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	469a      	mov	sl, r3
 8005b20:	4693      	mov	fp, r2
 8005b22:	4652      	mov	r2, sl
 8005b24:	465b      	mov	r3, fp
 8005b26:	4640      	mov	r0, r8
 8005b28:	4649      	mov	r1, r9
 8005b2a:	f7fb fd0d 	bl	8001548 <__aeabi_uldivmod>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4613      	mov	r3, r2
 8005b34:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b3c:	d308      	bcc.n	8005b50 <UART_SetConfig+0x430>
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b44:	d204      	bcs.n	8005b50 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6a3a      	ldr	r2, [r7, #32]
 8005b4c:	60da      	str	r2, [r3, #12]
 8005b4e:	e0ce      	b.n	8005cee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b56:	e0ca      	b.n	8005cee <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b60:	d166      	bne.n	8005c30 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005b62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d827      	bhi.n	8005bba <UART_SetConfig+0x49a>
 8005b6a:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <UART_SetConfig+0x450>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005b95 	.word	0x08005b95
 8005b74:	08005b9d 	.word	0x08005b9d
 8005b78:	08005ba5 	.word	0x08005ba5
 8005b7c:	08005bbb 	.word	0x08005bbb
 8005b80:	08005bab 	.word	0x08005bab
 8005b84:	08005bbb 	.word	0x08005bbb
 8005b88:	08005bbb 	.word	0x08005bbb
 8005b8c:	08005bbb 	.word	0x08005bbb
 8005b90:	08005bb3 	.word	0x08005bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b94:	f7fe f81a 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8005b98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b9a:	e014      	b.n	8005bc6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b9c:	f7fe f82c 	bl	8003bf8 <HAL_RCC_GetPCLK2Freq>
 8005ba0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ba2:	e010      	b.n	8005bc6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba4:	4b4e      	ldr	r3, [pc, #312]	; (8005ce0 <UART_SetConfig+0x5c0>)
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ba8:	e00d      	b.n	8005bc6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005baa:	f7fd ff77 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 8005bae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bb0:	e009      	b.n	8005bc6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bb8:	e005      	b.n	8005bc6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005bc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 8090 	beq.w	8005cee <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	4a44      	ldr	r2, [pc, #272]	; (8005ce4 <UART_SetConfig+0x5c4>)
 8005bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005be0:	005a      	lsls	r2, r3, #1
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	085b      	lsrs	r3, r3, #1
 8005be8:	441a      	add	r2, r3
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d916      	bls.n	8005c28 <UART_SetConfig+0x508>
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c00:	d212      	bcs.n	8005c28 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f023 030f 	bic.w	r3, r3, #15
 8005c0a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	085b      	lsrs	r3, r3, #1
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	8bfb      	ldrh	r3, [r7, #30]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	8bfa      	ldrh	r2, [r7, #30]
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	e062      	b.n	8005cee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c2e:	e05e      	b.n	8005cee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d828      	bhi.n	8005c8a <UART_SetConfig+0x56a>
 8005c38:	a201      	add	r2, pc, #4	; (adr r2, 8005c40 <UART_SetConfig+0x520>)
 8005c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3e:	bf00      	nop
 8005c40:	08005c65 	.word	0x08005c65
 8005c44:	08005c6d 	.word	0x08005c6d
 8005c48:	08005c75 	.word	0x08005c75
 8005c4c:	08005c8b 	.word	0x08005c8b
 8005c50:	08005c7b 	.word	0x08005c7b
 8005c54:	08005c8b 	.word	0x08005c8b
 8005c58:	08005c8b 	.word	0x08005c8b
 8005c5c:	08005c8b 	.word	0x08005c8b
 8005c60:	08005c83 	.word	0x08005c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c64:	f7fd ffb2 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8005c68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c6a:	e014      	b.n	8005c96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c6c:	f7fd ffc4 	bl	8003bf8 <HAL_RCC_GetPCLK2Freq>
 8005c70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c72:	e010      	b.n	8005c96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c74:	4b1a      	ldr	r3, [pc, #104]	; (8005ce0 <UART_SetConfig+0x5c0>)
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c78:	e00d      	b.n	8005c96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c7a:	f7fd ff0f 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 8005c7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c80:	e009      	b.n	8005c96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c88:	e005      	b.n	8005c96 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c94:	bf00      	nop
    }

    if (pclk != 0U)
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d028      	beq.n	8005cee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	4a10      	ldr	r2, [pc, #64]	; (8005ce4 <UART_SetConfig+0x5c4>)
 8005ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	085b      	lsrs	r3, r3, #1
 8005cb4:	441a      	add	r2, r3
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cbe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	2b0f      	cmp	r3, #15
 8005cc4:	d910      	bls.n	8005ce8 <UART_SetConfig+0x5c8>
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ccc:	d20c      	bcs.n	8005ce8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60da      	str	r2, [r3, #12]
 8005cd8:	e009      	b.n	8005cee <UART_SetConfig+0x5ce>
 8005cda:	bf00      	nop
 8005cdc:	40008000 	.word	0x40008000
 8005ce0:	00f42400 	.word	0x00f42400
 8005ce4:	08008e20 	.word	0x08008e20
      }
      else
      {
        ret = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2200      	movs	r2, #0
 8005d02:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2200      	movs	r2, #0
 8005d08:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005d0a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3730      	adds	r7, #48	; 0x30
 8005d12:	46bd      	mov	sp, r7
 8005d14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00a      	beq.n	8005d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8a:	f003 0308 	and.w	r3, r3, #8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00a      	beq.n	8005dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01a      	beq.n	8005e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e16:	d10a      	bne.n	8005e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	605a      	str	r2, [r3, #4]
  }
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af02      	add	r7, sp, #8
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e6c:	f7fc fc0a 	bl	8002684 <HAL_GetTick>
 8005e70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0308 	and.w	r3, r3, #8
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d10e      	bne.n	8005e9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f82f 	bl	8005ef2 <UART_WaitOnFlagUntilTimeout>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e025      	b.n	8005eea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	d10e      	bne.n	8005eca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f819 	bl	8005ef2 <UART_WaitOnFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e00f      	b.n	8005eea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b09c      	sub	sp, #112	; 0x70
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	60b9      	str	r1, [r7, #8]
 8005efc:	603b      	str	r3, [r7, #0]
 8005efe:	4613      	mov	r3, r2
 8005f00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f02:	e0a9      	b.n	8006058 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0a:	f000 80a5 	beq.w	8006058 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f0e:	f7fc fbb9 	bl	8002684 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d302      	bcc.n	8005f24 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d140      	bne.n	8005fa6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f38:	667b      	str	r3, [r7, #100]	; 0x64
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f44:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e6      	bne.n	8005f24 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	f023 0301 	bic.w	r3, r3, #1
 8005f6c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3308      	adds	r3, #8
 8005f74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f76:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e5      	bne.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e069      	b.n	800607a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d051      	beq.n	8006058 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fc2:	d149      	bne.n	8006058 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fcc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fec:	637b      	str	r3, [r7, #52]	; 0x34
 8005fee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ff4:	e841 2300 	strex	r3, r2, [r1]
 8005ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1e6      	bne.n	8005fce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3308      	adds	r3, #8
 8006006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	613b      	str	r3, [r7, #16]
   return(result);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f023 0301 	bic.w	r3, r3, #1
 8006016:	66bb      	str	r3, [r7, #104]	; 0x68
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3308      	adds	r3, #8
 800601e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006020:	623a      	str	r2, [r7, #32]
 8006022:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	69f9      	ldr	r1, [r7, #28]
 8006026:	6a3a      	ldr	r2, [r7, #32]
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	61bb      	str	r3, [r7, #24]
   return(result);
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e5      	bne.n	8006000 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2220      	movs	r2, #32
 8006038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2220      	movs	r2, #32
 8006040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2220      	movs	r2, #32
 8006048:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e010      	b.n	800607a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69da      	ldr	r2, [r3, #28]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4013      	ands	r3, r2
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	429a      	cmp	r2, r3
 8006066:	bf0c      	ite	eq
 8006068:	2301      	moveq	r3, #1
 800606a:	2300      	movne	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	429a      	cmp	r2, r3
 8006074:	f43f af46 	beq.w	8005f04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3770      	adds	r7, #112	; 0x70
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006082:	b480      	push	{r7}
 8006084:	b085      	sub	sp, #20
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_UARTEx_DisableFifoMode+0x16>
 8006094:	2302      	movs	r3, #2
 8006096:	e027      	b.n	80060e8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2224      	movs	r2, #36	; 0x24
 80060a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0201 	bic.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2220      	movs	r2, #32
 80060da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006108:	2302      	movs	r3, #2
 800610a:	e02d      	b.n	8006168 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2224      	movs	r2, #36	; 0x24
 8006118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0201 	bic.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f84f 	bl	80061ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2220      	movs	r2, #32
 800615a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006180:	2b01      	cmp	r3, #1
 8006182:	d101      	bne.n	8006188 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006184:	2302      	movs	r3, #2
 8006186:	e02d      	b.n	80061e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2224      	movs	r2, #36	; 0x24
 8006194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0201 	bic.w	r2, r2, #1
 80061ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f811 	bl	80061ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d108      	bne.n	800620e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800620c:	e031      	b.n	8006272 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800620e:	2308      	movs	r3, #8
 8006210:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006212:	2308      	movs	r3, #8
 8006214:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	0e5b      	lsrs	r3, r3, #25
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	0f5b      	lsrs	r3, r3, #29
 800622e:	b2db      	uxtb	r3, r3
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006236:	7bbb      	ldrb	r3, [r7, #14]
 8006238:	7b3a      	ldrb	r2, [r7, #12]
 800623a:	4911      	ldr	r1, [pc, #68]	; (8006280 <UARTEx_SetNbDataToProcess+0x94>)
 800623c:	5c8a      	ldrb	r2, [r1, r2]
 800623e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006242:	7b3a      	ldrb	r2, [r7, #12]
 8006244:	490f      	ldr	r1, [pc, #60]	; (8006284 <UARTEx_SetNbDataToProcess+0x98>)
 8006246:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006248:	fb93 f3f2 	sdiv	r3, r3, r2
 800624c:	b29a      	uxth	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	7b7a      	ldrb	r2, [r7, #13]
 8006258:	4909      	ldr	r1, [pc, #36]	; (8006280 <UARTEx_SetNbDataToProcess+0x94>)
 800625a:	5c8a      	ldrb	r2, [r1, r2]
 800625c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006260:	7b7a      	ldrb	r2, [r7, #13]
 8006262:	4908      	ldr	r1, [pc, #32]	; (8006284 <UARTEx_SetNbDataToProcess+0x98>)
 8006264:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006266:	fb93 f3f2 	sdiv	r3, r3, r2
 800626a:	b29a      	uxth	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	08008e38 	.word	0x08008e38
 8006284:	08008e40 	.word	0x08008e40

08006288 <__errno>:
 8006288:	4b01      	ldr	r3, [pc, #4]	; (8006290 <__errno+0x8>)
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	2000007c 	.word	0x2000007c

08006294 <__libc_init_array>:
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	4d0d      	ldr	r5, [pc, #52]	; (80062cc <__libc_init_array+0x38>)
 8006298:	4c0d      	ldr	r4, [pc, #52]	; (80062d0 <__libc_init_array+0x3c>)
 800629a:	1b64      	subs	r4, r4, r5
 800629c:	10a4      	asrs	r4, r4, #2
 800629e:	2600      	movs	r6, #0
 80062a0:	42a6      	cmp	r6, r4
 80062a2:	d109      	bne.n	80062b8 <__libc_init_array+0x24>
 80062a4:	4d0b      	ldr	r5, [pc, #44]	; (80062d4 <__libc_init_array+0x40>)
 80062a6:	4c0c      	ldr	r4, [pc, #48]	; (80062d8 <__libc_init_array+0x44>)
 80062a8:	f002 fd50 	bl	8008d4c <_init>
 80062ac:	1b64      	subs	r4, r4, r5
 80062ae:	10a4      	asrs	r4, r4, #2
 80062b0:	2600      	movs	r6, #0
 80062b2:	42a6      	cmp	r6, r4
 80062b4:	d105      	bne.n	80062c2 <__libc_init_array+0x2e>
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80062bc:	4798      	blx	r3
 80062be:	3601      	adds	r6, #1
 80062c0:	e7ee      	b.n	80062a0 <__libc_init_array+0xc>
 80062c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c6:	4798      	blx	r3
 80062c8:	3601      	adds	r6, #1
 80062ca:	e7f2      	b.n	80062b2 <__libc_init_array+0x1e>
 80062cc:	0800922c 	.word	0x0800922c
 80062d0:	0800922c 	.word	0x0800922c
 80062d4:	0800922c 	.word	0x0800922c
 80062d8:	08009230 	.word	0x08009230

080062dc <memcpy>:
 80062dc:	440a      	add	r2, r1
 80062de:	4291      	cmp	r1, r2
 80062e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80062e4:	d100      	bne.n	80062e8 <memcpy+0xc>
 80062e6:	4770      	bx	lr
 80062e8:	b510      	push	{r4, lr}
 80062ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062f2:	4291      	cmp	r1, r2
 80062f4:	d1f9      	bne.n	80062ea <memcpy+0xe>
 80062f6:	bd10      	pop	{r4, pc}

080062f8 <memset>:
 80062f8:	4402      	add	r2, r0
 80062fa:	4603      	mov	r3, r0
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d100      	bne.n	8006302 <memset+0xa>
 8006300:	4770      	bx	lr
 8006302:	f803 1b01 	strb.w	r1, [r3], #1
 8006306:	e7f9      	b.n	80062fc <memset+0x4>

08006308 <__cvt>:
 8006308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800630c:	ec55 4b10 	vmov	r4, r5, d0
 8006310:	2d00      	cmp	r5, #0
 8006312:	460e      	mov	r6, r1
 8006314:	4619      	mov	r1, r3
 8006316:	462b      	mov	r3, r5
 8006318:	bfbb      	ittet	lt
 800631a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800631e:	461d      	movlt	r5, r3
 8006320:	2300      	movge	r3, #0
 8006322:	232d      	movlt	r3, #45	; 0x2d
 8006324:	700b      	strb	r3, [r1, #0]
 8006326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006328:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800632c:	4691      	mov	r9, r2
 800632e:	f023 0820 	bic.w	r8, r3, #32
 8006332:	bfbc      	itt	lt
 8006334:	4622      	movlt	r2, r4
 8006336:	4614      	movlt	r4, r2
 8006338:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800633c:	d005      	beq.n	800634a <__cvt+0x42>
 800633e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006342:	d100      	bne.n	8006346 <__cvt+0x3e>
 8006344:	3601      	adds	r6, #1
 8006346:	2102      	movs	r1, #2
 8006348:	e000      	b.n	800634c <__cvt+0x44>
 800634a:	2103      	movs	r1, #3
 800634c:	ab03      	add	r3, sp, #12
 800634e:	9301      	str	r3, [sp, #4]
 8006350:	ab02      	add	r3, sp, #8
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	ec45 4b10 	vmov	d0, r4, r5
 8006358:	4653      	mov	r3, sl
 800635a:	4632      	mov	r2, r6
 800635c:	f000 fce4 	bl	8006d28 <_dtoa_r>
 8006360:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006364:	4607      	mov	r7, r0
 8006366:	d102      	bne.n	800636e <__cvt+0x66>
 8006368:	f019 0f01 	tst.w	r9, #1
 800636c:	d022      	beq.n	80063b4 <__cvt+0xac>
 800636e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006372:	eb07 0906 	add.w	r9, r7, r6
 8006376:	d110      	bne.n	800639a <__cvt+0x92>
 8006378:	783b      	ldrb	r3, [r7, #0]
 800637a:	2b30      	cmp	r3, #48	; 0x30
 800637c:	d10a      	bne.n	8006394 <__cvt+0x8c>
 800637e:	2200      	movs	r2, #0
 8006380:	2300      	movs	r3, #0
 8006382:	4620      	mov	r0, r4
 8006384:	4629      	mov	r1, r5
 8006386:	f7fb f86f 	bl	8001468 <__aeabi_dcmpeq>
 800638a:	b918      	cbnz	r0, 8006394 <__cvt+0x8c>
 800638c:	f1c6 0601 	rsb	r6, r6, #1
 8006390:	f8ca 6000 	str.w	r6, [sl]
 8006394:	f8da 3000 	ldr.w	r3, [sl]
 8006398:	4499      	add	r9, r3
 800639a:	2200      	movs	r2, #0
 800639c:	2300      	movs	r3, #0
 800639e:	4620      	mov	r0, r4
 80063a0:	4629      	mov	r1, r5
 80063a2:	f7fb f861 	bl	8001468 <__aeabi_dcmpeq>
 80063a6:	b108      	cbz	r0, 80063ac <__cvt+0xa4>
 80063a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80063ac:	2230      	movs	r2, #48	; 0x30
 80063ae:	9b03      	ldr	r3, [sp, #12]
 80063b0:	454b      	cmp	r3, r9
 80063b2:	d307      	bcc.n	80063c4 <__cvt+0xbc>
 80063b4:	9b03      	ldr	r3, [sp, #12]
 80063b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063b8:	1bdb      	subs	r3, r3, r7
 80063ba:	4638      	mov	r0, r7
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	b004      	add	sp, #16
 80063c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c4:	1c59      	adds	r1, r3, #1
 80063c6:	9103      	str	r1, [sp, #12]
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	e7f0      	b.n	80063ae <__cvt+0xa6>

080063cc <__exponent>:
 80063cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063ce:	4603      	mov	r3, r0
 80063d0:	2900      	cmp	r1, #0
 80063d2:	bfb8      	it	lt
 80063d4:	4249      	neglt	r1, r1
 80063d6:	f803 2b02 	strb.w	r2, [r3], #2
 80063da:	bfb4      	ite	lt
 80063dc:	222d      	movlt	r2, #45	; 0x2d
 80063de:	222b      	movge	r2, #43	; 0x2b
 80063e0:	2909      	cmp	r1, #9
 80063e2:	7042      	strb	r2, [r0, #1]
 80063e4:	dd2a      	ble.n	800643c <__exponent+0x70>
 80063e6:	f10d 0407 	add.w	r4, sp, #7
 80063ea:	46a4      	mov	ip, r4
 80063ec:	270a      	movs	r7, #10
 80063ee:	46a6      	mov	lr, r4
 80063f0:	460a      	mov	r2, r1
 80063f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80063f6:	fb07 1516 	mls	r5, r7, r6, r1
 80063fa:	3530      	adds	r5, #48	; 0x30
 80063fc:	2a63      	cmp	r2, #99	; 0x63
 80063fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8006402:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006406:	4631      	mov	r1, r6
 8006408:	dcf1      	bgt.n	80063ee <__exponent+0x22>
 800640a:	3130      	adds	r1, #48	; 0x30
 800640c:	f1ae 0502 	sub.w	r5, lr, #2
 8006410:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006414:	1c44      	adds	r4, r0, #1
 8006416:	4629      	mov	r1, r5
 8006418:	4561      	cmp	r1, ip
 800641a:	d30a      	bcc.n	8006432 <__exponent+0x66>
 800641c:	f10d 0209 	add.w	r2, sp, #9
 8006420:	eba2 020e 	sub.w	r2, r2, lr
 8006424:	4565      	cmp	r5, ip
 8006426:	bf88      	it	hi
 8006428:	2200      	movhi	r2, #0
 800642a:	4413      	add	r3, r2
 800642c:	1a18      	subs	r0, r3, r0
 800642e:	b003      	add	sp, #12
 8006430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006432:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006436:	f804 2f01 	strb.w	r2, [r4, #1]!
 800643a:	e7ed      	b.n	8006418 <__exponent+0x4c>
 800643c:	2330      	movs	r3, #48	; 0x30
 800643e:	3130      	adds	r1, #48	; 0x30
 8006440:	7083      	strb	r3, [r0, #2]
 8006442:	70c1      	strb	r1, [r0, #3]
 8006444:	1d03      	adds	r3, r0, #4
 8006446:	e7f1      	b.n	800642c <__exponent+0x60>

08006448 <_printf_float>:
 8006448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644c:	ed2d 8b02 	vpush	{d8}
 8006450:	b08d      	sub	sp, #52	; 0x34
 8006452:	460c      	mov	r4, r1
 8006454:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006458:	4616      	mov	r6, r2
 800645a:	461f      	mov	r7, r3
 800645c:	4605      	mov	r5, r0
 800645e:	f001 fb47 	bl	8007af0 <_localeconv_r>
 8006462:	f8d0 a000 	ldr.w	sl, [r0]
 8006466:	4650      	mov	r0, sl
 8006468:	f7fa fb82 	bl	8000b70 <strlen>
 800646c:	2300      	movs	r3, #0
 800646e:	930a      	str	r3, [sp, #40]	; 0x28
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	9305      	str	r3, [sp, #20]
 8006474:	f8d8 3000 	ldr.w	r3, [r8]
 8006478:	f894 b018 	ldrb.w	fp, [r4, #24]
 800647c:	3307      	adds	r3, #7
 800647e:	f023 0307 	bic.w	r3, r3, #7
 8006482:	f103 0208 	add.w	r2, r3, #8
 8006486:	f8c8 2000 	str.w	r2, [r8]
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006492:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006496:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800649a:	9307      	str	r3, [sp, #28]
 800649c:	f8cd 8018 	str.w	r8, [sp, #24]
 80064a0:	ee08 0a10 	vmov	s16, r0
 80064a4:	4b9f      	ldr	r3, [pc, #636]	; (8006724 <_printf_float+0x2dc>)
 80064a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064aa:	f04f 32ff 	mov.w	r2, #4294967295
 80064ae:	f7fb f80d 	bl	80014cc <__aeabi_dcmpun>
 80064b2:	bb88      	cbnz	r0, 8006518 <_printf_float+0xd0>
 80064b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064b8:	4b9a      	ldr	r3, [pc, #616]	; (8006724 <_printf_float+0x2dc>)
 80064ba:	f04f 32ff 	mov.w	r2, #4294967295
 80064be:	f7fa ffe7 	bl	8001490 <__aeabi_dcmple>
 80064c2:	bb48      	cbnz	r0, 8006518 <_printf_float+0xd0>
 80064c4:	2200      	movs	r2, #0
 80064c6:	2300      	movs	r3, #0
 80064c8:	4640      	mov	r0, r8
 80064ca:	4649      	mov	r1, r9
 80064cc:	f7fa ffd6 	bl	800147c <__aeabi_dcmplt>
 80064d0:	b110      	cbz	r0, 80064d8 <_printf_float+0x90>
 80064d2:	232d      	movs	r3, #45	; 0x2d
 80064d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064d8:	4b93      	ldr	r3, [pc, #588]	; (8006728 <_printf_float+0x2e0>)
 80064da:	4894      	ldr	r0, [pc, #592]	; (800672c <_printf_float+0x2e4>)
 80064dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80064e0:	bf94      	ite	ls
 80064e2:	4698      	movls	r8, r3
 80064e4:	4680      	movhi	r8, r0
 80064e6:	2303      	movs	r3, #3
 80064e8:	6123      	str	r3, [r4, #16]
 80064ea:	9b05      	ldr	r3, [sp, #20]
 80064ec:	f023 0204 	bic.w	r2, r3, #4
 80064f0:	6022      	str	r2, [r4, #0]
 80064f2:	f04f 0900 	mov.w	r9, #0
 80064f6:	9700      	str	r7, [sp, #0]
 80064f8:	4633      	mov	r3, r6
 80064fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80064fc:	4621      	mov	r1, r4
 80064fe:	4628      	mov	r0, r5
 8006500:	f000 f9d8 	bl	80068b4 <_printf_common>
 8006504:	3001      	adds	r0, #1
 8006506:	f040 8090 	bne.w	800662a <_printf_float+0x1e2>
 800650a:	f04f 30ff 	mov.w	r0, #4294967295
 800650e:	b00d      	add	sp, #52	; 0x34
 8006510:	ecbd 8b02 	vpop	{d8}
 8006514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006518:	4642      	mov	r2, r8
 800651a:	464b      	mov	r3, r9
 800651c:	4640      	mov	r0, r8
 800651e:	4649      	mov	r1, r9
 8006520:	f7fa ffd4 	bl	80014cc <__aeabi_dcmpun>
 8006524:	b140      	cbz	r0, 8006538 <_printf_float+0xf0>
 8006526:	464b      	mov	r3, r9
 8006528:	2b00      	cmp	r3, #0
 800652a:	bfbc      	itt	lt
 800652c:	232d      	movlt	r3, #45	; 0x2d
 800652e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006532:	487f      	ldr	r0, [pc, #508]	; (8006730 <_printf_float+0x2e8>)
 8006534:	4b7f      	ldr	r3, [pc, #508]	; (8006734 <_printf_float+0x2ec>)
 8006536:	e7d1      	b.n	80064dc <_printf_float+0x94>
 8006538:	6863      	ldr	r3, [r4, #4]
 800653a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800653e:	9206      	str	r2, [sp, #24]
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	d13f      	bne.n	80065c4 <_printf_float+0x17c>
 8006544:	2306      	movs	r3, #6
 8006546:	6063      	str	r3, [r4, #4]
 8006548:	9b05      	ldr	r3, [sp, #20]
 800654a:	6861      	ldr	r1, [r4, #4]
 800654c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006550:	2300      	movs	r3, #0
 8006552:	9303      	str	r3, [sp, #12]
 8006554:	ab0a      	add	r3, sp, #40	; 0x28
 8006556:	e9cd b301 	strd	fp, r3, [sp, #4]
 800655a:	ab09      	add	r3, sp, #36	; 0x24
 800655c:	ec49 8b10 	vmov	d0, r8, r9
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	6022      	str	r2, [r4, #0]
 8006564:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006568:	4628      	mov	r0, r5
 800656a:	f7ff fecd 	bl	8006308 <__cvt>
 800656e:	9b06      	ldr	r3, [sp, #24]
 8006570:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006572:	2b47      	cmp	r3, #71	; 0x47
 8006574:	4680      	mov	r8, r0
 8006576:	d108      	bne.n	800658a <_printf_float+0x142>
 8006578:	1cc8      	adds	r0, r1, #3
 800657a:	db02      	blt.n	8006582 <_printf_float+0x13a>
 800657c:	6863      	ldr	r3, [r4, #4]
 800657e:	4299      	cmp	r1, r3
 8006580:	dd41      	ble.n	8006606 <_printf_float+0x1be>
 8006582:	f1ab 0b02 	sub.w	fp, fp, #2
 8006586:	fa5f fb8b 	uxtb.w	fp, fp
 800658a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800658e:	d820      	bhi.n	80065d2 <_printf_float+0x18a>
 8006590:	3901      	subs	r1, #1
 8006592:	465a      	mov	r2, fp
 8006594:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006598:	9109      	str	r1, [sp, #36]	; 0x24
 800659a:	f7ff ff17 	bl	80063cc <__exponent>
 800659e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065a0:	1813      	adds	r3, r2, r0
 80065a2:	2a01      	cmp	r2, #1
 80065a4:	4681      	mov	r9, r0
 80065a6:	6123      	str	r3, [r4, #16]
 80065a8:	dc02      	bgt.n	80065b0 <_printf_float+0x168>
 80065aa:	6822      	ldr	r2, [r4, #0]
 80065ac:	07d2      	lsls	r2, r2, #31
 80065ae:	d501      	bpl.n	80065b4 <_printf_float+0x16c>
 80065b0:	3301      	adds	r3, #1
 80065b2:	6123      	str	r3, [r4, #16]
 80065b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d09c      	beq.n	80064f6 <_printf_float+0xae>
 80065bc:	232d      	movs	r3, #45	; 0x2d
 80065be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065c2:	e798      	b.n	80064f6 <_printf_float+0xae>
 80065c4:	9a06      	ldr	r2, [sp, #24]
 80065c6:	2a47      	cmp	r2, #71	; 0x47
 80065c8:	d1be      	bne.n	8006548 <_printf_float+0x100>
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1bc      	bne.n	8006548 <_printf_float+0x100>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e7b9      	b.n	8006546 <_printf_float+0xfe>
 80065d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80065d6:	d118      	bne.n	800660a <_printf_float+0x1c2>
 80065d8:	2900      	cmp	r1, #0
 80065da:	6863      	ldr	r3, [r4, #4]
 80065dc:	dd0b      	ble.n	80065f6 <_printf_float+0x1ae>
 80065de:	6121      	str	r1, [r4, #16]
 80065e0:	b913      	cbnz	r3, 80065e8 <_printf_float+0x1a0>
 80065e2:	6822      	ldr	r2, [r4, #0]
 80065e4:	07d0      	lsls	r0, r2, #31
 80065e6:	d502      	bpl.n	80065ee <_printf_float+0x1a6>
 80065e8:	3301      	adds	r3, #1
 80065ea:	440b      	add	r3, r1
 80065ec:	6123      	str	r3, [r4, #16]
 80065ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80065f0:	f04f 0900 	mov.w	r9, #0
 80065f4:	e7de      	b.n	80065b4 <_printf_float+0x16c>
 80065f6:	b913      	cbnz	r3, 80065fe <_printf_float+0x1b6>
 80065f8:	6822      	ldr	r2, [r4, #0]
 80065fa:	07d2      	lsls	r2, r2, #31
 80065fc:	d501      	bpl.n	8006602 <_printf_float+0x1ba>
 80065fe:	3302      	adds	r3, #2
 8006600:	e7f4      	b.n	80065ec <_printf_float+0x1a4>
 8006602:	2301      	movs	r3, #1
 8006604:	e7f2      	b.n	80065ec <_printf_float+0x1a4>
 8006606:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800660a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800660c:	4299      	cmp	r1, r3
 800660e:	db05      	blt.n	800661c <_printf_float+0x1d4>
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	6121      	str	r1, [r4, #16]
 8006614:	07d8      	lsls	r0, r3, #31
 8006616:	d5ea      	bpl.n	80065ee <_printf_float+0x1a6>
 8006618:	1c4b      	adds	r3, r1, #1
 800661a:	e7e7      	b.n	80065ec <_printf_float+0x1a4>
 800661c:	2900      	cmp	r1, #0
 800661e:	bfd4      	ite	le
 8006620:	f1c1 0202 	rsble	r2, r1, #2
 8006624:	2201      	movgt	r2, #1
 8006626:	4413      	add	r3, r2
 8006628:	e7e0      	b.n	80065ec <_printf_float+0x1a4>
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	055a      	lsls	r2, r3, #21
 800662e:	d407      	bmi.n	8006640 <_printf_float+0x1f8>
 8006630:	6923      	ldr	r3, [r4, #16]
 8006632:	4642      	mov	r2, r8
 8006634:	4631      	mov	r1, r6
 8006636:	4628      	mov	r0, r5
 8006638:	47b8      	blx	r7
 800663a:	3001      	adds	r0, #1
 800663c:	d12c      	bne.n	8006698 <_printf_float+0x250>
 800663e:	e764      	b.n	800650a <_printf_float+0xc2>
 8006640:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006644:	f240 80e0 	bls.w	8006808 <_printf_float+0x3c0>
 8006648:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800664c:	2200      	movs	r2, #0
 800664e:	2300      	movs	r3, #0
 8006650:	f7fa ff0a 	bl	8001468 <__aeabi_dcmpeq>
 8006654:	2800      	cmp	r0, #0
 8006656:	d034      	beq.n	80066c2 <_printf_float+0x27a>
 8006658:	4a37      	ldr	r2, [pc, #220]	; (8006738 <_printf_float+0x2f0>)
 800665a:	2301      	movs	r3, #1
 800665c:	4631      	mov	r1, r6
 800665e:	4628      	mov	r0, r5
 8006660:	47b8      	blx	r7
 8006662:	3001      	adds	r0, #1
 8006664:	f43f af51 	beq.w	800650a <_printf_float+0xc2>
 8006668:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800666c:	429a      	cmp	r2, r3
 800666e:	db02      	blt.n	8006676 <_printf_float+0x22e>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	07d8      	lsls	r0, r3, #31
 8006674:	d510      	bpl.n	8006698 <_printf_float+0x250>
 8006676:	ee18 3a10 	vmov	r3, s16
 800667a:	4652      	mov	r2, sl
 800667c:	4631      	mov	r1, r6
 800667e:	4628      	mov	r0, r5
 8006680:	47b8      	blx	r7
 8006682:	3001      	adds	r0, #1
 8006684:	f43f af41 	beq.w	800650a <_printf_float+0xc2>
 8006688:	f04f 0800 	mov.w	r8, #0
 800668c:	f104 091a 	add.w	r9, r4, #26
 8006690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006692:	3b01      	subs	r3, #1
 8006694:	4543      	cmp	r3, r8
 8006696:	dc09      	bgt.n	80066ac <_printf_float+0x264>
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	079b      	lsls	r3, r3, #30
 800669c:	f100 8105 	bmi.w	80068aa <_printf_float+0x462>
 80066a0:	68e0      	ldr	r0, [r4, #12]
 80066a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066a4:	4298      	cmp	r0, r3
 80066a6:	bfb8      	it	lt
 80066a8:	4618      	movlt	r0, r3
 80066aa:	e730      	b.n	800650e <_printf_float+0xc6>
 80066ac:	2301      	movs	r3, #1
 80066ae:	464a      	mov	r2, r9
 80066b0:	4631      	mov	r1, r6
 80066b2:	4628      	mov	r0, r5
 80066b4:	47b8      	blx	r7
 80066b6:	3001      	adds	r0, #1
 80066b8:	f43f af27 	beq.w	800650a <_printf_float+0xc2>
 80066bc:	f108 0801 	add.w	r8, r8, #1
 80066c0:	e7e6      	b.n	8006690 <_printf_float+0x248>
 80066c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	dc39      	bgt.n	800673c <_printf_float+0x2f4>
 80066c8:	4a1b      	ldr	r2, [pc, #108]	; (8006738 <_printf_float+0x2f0>)
 80066ca:	2301      	movs	r3, #1
 80066cc:	4631      	mov	r1, r6
 80066ce:	4628      	mov	r0, r5
 80066d0:	47b8      	blx	r7
 80066d2:	3001      	adds	r0, #1
 80066d4:	f43f af19 	beq.w	800650a <_printf_float+0xc2>
 80066d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066dc:	4313      	orrs	r3, r2
 80066de:	d102      	bne.n	80066e6 <_printf_float+0x29e>
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	07d9      	lsls	r1, r3, #31
 80066e4:	d5d8      	bpl.n	8006698 <_printf_float+0x250>
 80066e6:	ee18 3a10 	vmov	r3, s16
 80066ea:	4652      	mov	r2, sl
 80066ec:	4631      	mov	r1, r6
 80066ee:	4628      	mov	r0, r5
 80066f0:	47b8      	blx	r7
 80066f2:	3001      	adds	r0, #1
 80066f4:	f43f af09 	beq.w	800650a <_printf_float+0xc2>
 80066f8:	f04f 0900 	mov.w	r9, #0
 80066fc:	f104 0a1a 	add.w	sl, r4, #26
 8006700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006702:	425b      	negs	r3, r3
 8006704:	454b      	cmp	r3, r9
 8006706:	dc01      	bgt.n	800670c <_printf_float+0x2c4>
 8006708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800670a:	e792      	b.n	8006632 <_printf_float+0x1ea>
 800670c:	2301      	movs	r3, #1
 800670e:	4652      	mov	r2, sl
 8006710:	4631      	mov	r1, r6
 8006712:	4628      	mov	r0, r5
 8006714:	47b8      	blx	r7
 8006716:	3001      	adds	r0, #1
 8006718:	f43f aef7 	beq.w	800650a <_printf_float+0xc2>
 800671c:	f109 0901 	add.w	r9, r9, #1
 8006720:	e7ee      	b.n	8006700 <_printf_float+0x2b8>
 8006722:	bf00      	nop
 8006724:	7fefffff 	.word	0x7fefffff
 8006728:	08008e4c 	.word	0x08008e4c
 800672c:	08008e50 	.word	0x08008e50
 8006730:	08008e58 	.word	0x08008e58
 8006734:	08008e54 	.word	0x08008e54
 8006738:	08008e5c 	.word	0x08008e5c
 800673c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800673e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006740:	429a      	cmp	r2, r3
 8006742:	bfa8      	it	ge
 8006744:	461a      	movge	r2, r3
 8006746:	2a00      	cmp	r2, #0
 8006748:	4691      	mov	r9, r2
 800674a:	dc37      	bgt.n	80067bc <_printf_float+0x374>
 800674c:	f04f 0b00 	mov.w	fp, #0
 8006750:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006754:	f104 021a 	add.w	r2, r4, #26
 8006758:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800675a:	9305      	str	r3, [sp, #20]
 800675c:	eba3 0309 	sub.w	r3, r3, r9
 8006760:	455b      	cmp	r3, fp
 8006762:	dc33      	bgt.n	80067cc <_printf_float+0x384>
 8006764:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006768:	429a      	cmp	r2, r3
 800676a:	db3b      	blt.n	80067e4 <_printf_float+0x39c>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	07da      	lsls	r2, r3, #31
 8006770:	d438      	bmi.n	80067e4 <_printf_float+0x39c>
 8006772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006774:	9a05      	ldr	r2, [sp, #20]
 8006776:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006778:	1a9a      	subs	r2, r3, r2
 800677a:	eba3 0901 	sub.w	r9, r3, r1
 800677e:	4591      	cmp	r9, r2
 8006780:	bfa8      	it	ge
 8006782:	4691      	movge	r9, r2
 8006784:	f1b9 0f00 	cmp.w	r9, #0
 8006788:	dc35      	bgt.n	80067f6 <_printf_float+0x3ae>
 800678a:	f04f 0800 	mov.w	r8, #0
 800678e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006792:	f104 0a1a 	add.w	sl, r4, #26
 8006796:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800679a:	1a9b      	subs	r3, r3, r2
 800679c:	eba3 0309 	sub.w	r3, r3, r9
 80067a0:	4543      	cmp	r3, r8
 80067a2:	f77f af79 	ble.w	8006698 <_printf_float+0x250>
 80067a6:	2301      	movs	r3, #1
 80067a8:	4652      	mov	r2, sl
 80067aa:	4631      	mov	r1, r6
 80067ac:	4628      	mov	r0, r5
 80067ae:	47b8      	blx	r7
 80067b0:	3001      	adds	r0, #1
 80067b2:	f43f aeaa 	beq.w	800650a <_printf_float+0xc2>
 80067b6:	f108 0801 	add.w	r8, r8, #1
 80067ba:	e7ec      	b.n	8006796 <_printf_float+0x34e>
 80067bc:	4613      	mov	r3, r2
 80067be:	4631      	mov	r1, r6
 80067c0:	4642      	mov	r2, r8
 80067c2:	4628      	mov	r0, r5
 80067c4:	47b8      	blx	r7
 80067c6:	3001      	adds	r0, #1
 80067c8:	d1c0      	bne.n	800674c <_printf_float+0x304>
 80067ca:	e69e      	b.n	800650a <_printf_float+0xc2>
 80067cc:	2301      	movs	r3, #1
 80067ce:	4631      	mov	r1, r6
 80067d0:	4628      	mov	r0, r5
 80067d2:	9205      	str	r2, [sp, #20]
 80067d4:	47b8      	blx	r7
 80067d6:	3001      	adds	r0, #1
 80067d8:	f43f ae97 	beq.w	800650a <_printf_float+0xc2>
 80067dc:	9a05      	ldr	r2, [sp, #20]
 80067de:	f10b 0b01 	add.w	fp, fp, #1
 80067e2:	e7b9      	b.n	8006758 <_printf_float+0x310>
 80067e4:	ee18 3a10 	vmov	r3, s16
 80067e8:	4652      	mov	r2, sl
 80067ea:	4631      	mov	r1, r6
 80067ec:	4628      	mov	r0, r5
 80067ee:	47b8      	blx	r7
 80067f0:	3001      	adds	r0, #1
 80067f2:	d1be      	bne.n	8006772 <_printf_float+0x32a>
 80067f4:	e689      	b.n	800650a <_printf_float+0xc2>
 80067f6:	9a05      	ldr	r2, [sp, #20]
 80067f8:	464b      	mov	r3, r9
 80067fa:	4442      	add	r2, r8
 80067fc:	4631      	mov	r1, r6
 80067fe:	4628      	mov	r0, r5
 8006800:	47b8      	blx	r7
 8006802:	3001      	adds	r0, #1
 8006804:	d1c1      	bne.n	800678a <_printf_float+0x342>
 8006806:	e680      	b.n	800650a <_printf_float+0xc2>
 8006808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800680a:	2a01      	cmp	r2, #1
 800680c:	dc01      	bgt.n	8006812 <_printf_float+0x3ca>
 800680e:	07db      	lsls	r3, r3, #31
 8006810:	d538      	bpl.n	8006884 <_printf_float+0x43c>
 8006812:	2301      	movs	r3, #1
 8006814:	4642      	mov	r2, r8
 8006816:	4631      	mov	r1, r6
 8006818:	4628      	mov	r0, r5
 800681a:	47b8      	blx	r7
 800681c:	3001      	adds	r0, #1
 800681e:	f43f ae74 	beq.w	800650a <_printf_float+0xc2>
 8006822:	ee18 3a10 	vmov	r3, s16
 8006826:	4652      	mov	r2, sl
 8006828:	4631      	mov	r1, r6
 800682a:	4628      	mov	r0, r5
 800682c:	47b8      	blx	r7
 800682e:	3001      	adds	r0, #1
 8006830:	f43f ae6b 	beq.w	800650a <_printf_float+0xc2>
 8006834:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006838:	2200      	movs	r2, #0
 800683a:	2300      	movs	r3, #0
 800683c:	f7fa fe14 	bl	8001468 <__aeabi_dcmpeq>
 8006840:	b9d8      	cbnz	r0, 800687a <_printf_float+0x432>
 8006842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006844:	f108 0201 	add.w	r2, r8, #1
 8006848:	3b01      	subs	r3, #1
 800684a:	4631      	mov	r1, r6
 800684c:	4628      	mov	r0, r5
 800684e:	47b8      	blx	r7
 8006850:	3001      	adds	r0, #1
 8006852:	d10e      	bne.n	8006872 <_printf_float+0x42a>
 8006854:	e659      	b.n	800650a <_printf_float+0xc2>
 8006856:	2301      	movs	r3, #1
 8006858:	4652      	mov	r2, sl
 800685a:	4631      	mov	r1, r6
 800685c:	4628      	mov	r0, r5
 800685e:	47b8      	blx	r7
 8006860:	3001      	adds	r0, #1
 8006862:	f43f ae52 	beq.w	800650a <_printf_float+0xc2>
 8006866:	f108 0801 	add.w	r8, r8, #1
 800686a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800686c:	3b01      	subs	r3, #1
 800686e:	4543      	cmp	r3, r8
 8006870:	dcf1      	bgt.n	8006856 <_printf_float+0x40e>
 8006872:	464b      	mov	r3, r9
 8006874:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006878:	e6dc      	b.n	8006634 <_printf_float+0x1ec>
 800687a:	f04f 0800 	mov.w	r8, #0
 800687e:	f104 0a1a 	add.w	sl, r4, #26
 8006882:	e7f2      	b.n	800686a <_printf_float+0x422>
 8006884:	2301      	movs	r3, #1
 8006886:	4642      	mov	r2, r8
 8006888:	e7df      	b.n	800684a <_printf_float+0x402>
 800688a:	2301      	movs	r3, #1
 800688c:	464a      	mov	r2, r9
 800688e:	4631      	mov	r1, r6
 8006890:	4628      	mov	r0, r5
 8006892:	47b8      	blx	r7
 8006894:	3001      	adds	r0, #1
 8006896:	f43f ae38 	beq.w	800650a <_printf_float+0xc2>
 800689a:	f108 0801 	add.w	r8, r8, #1
 800689e:	68e3      	ldr	r3, [r4, #12]
 80068a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068a2:	1a5b      	subs	r3, r3, r1
 80068a4:	4543      	cmp	r3, r8
 80068a6:	dcf0      	bgt.n	800688a <_printf_float+0x442>
 80068a8:	e6fa      	b.n	80066a0 <_printf_float+0x258>
 80068aa:	f04f 0800 	mov.w	r8, #0
 80068ae:	f104 0919 	add.w	r9, r4, #25
 80068b2:	e7f4      	b.n	800689e <_printf_float+0x456>

080068b4 <_printf_common>:
 80068b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b8:	4616      	mov	r6, r2
 80068ba:	4699      	mov	r9, r3
 80068bc:	688a      	ldr	r2, [r1, #8]
 80068be:	690b      	ldr	r3, [r1, #16]
 80068c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068c4:	4293      	cmp	r3, r2
 80068c6:	bfb8      	it	lt
 80068c8:	4613      	movlt	r3, r2
 80068ca:	6033      	str	r3, [r6, #0]
 80068cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068d0:	4607      	mov	r7, r0
 80068d2:	460c      	mov	r4, r1
 80068d4:	b10a      	cbz	r2, 80068da <_printf_common+0x26>
 80068d6:	3301      	adds	r3, #1
 80068d8:	6033      	str	r3, [r6, #0]
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	0699      	lsls	r1, r3, #26
 80068de:	bf42      	ittt	mi
 80068e0:	6833      	ldrmi	r3, [r6, #0]
 80068e2:	3302      	addmi	r3, #2
 80068e4:	6033      	strmi	r3, [r6, #0]
 80068e6:	6825      	ldr	r5, [r4, #0]
 80068e8:	f015 0506 	ands.w	r5, r5, #6
 80068ec:	d106      	bne.n	80068fc <_printf_common+0x48>
 80068ee:	f104 0a19 	add.w	sl, r4, #25
 80068f2:	68e3      	ldr	r3, [r4, #12]
 80068f4:	6832      	ldr	r2, [r6, #0]
 80068f6:	1a9b      	subs	r3, r3, r2
 80068f8:	42ab      	cmp	r3, r5
 80068fa:	dc26      	bgt.n	800694a <_printf_common+0x96>
 80068fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006900:	1e13      	subs	r3, r2, #0
 8006902:	6822      	ldr	r2, [r4, #0]
 8006904:	bf18      	it	ne
 8006906:	2301      	movne	r3, #1
 8006908:	0692      	lsls	r2, r2, #26
 800690a:	d42b      	bmi.n	8006964 <_printf_common+0xb0>
 800690c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006910:	4649      	mov	r1, r9
 8006912:	4638      	mov	r0, r7
 8006914:	47c0      	blx	r8
 8006916:	3001      	adds	r0, #1
 8006918:	d01e      	beq.n	8006958 <_printf_common+0xa4>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	68e5      	ldr	r5, [r4, #12]
 800691e:	6832      	ldr	r2, [r6, #0]
 8006920:	f003 0306 	and.w	r3, r3, #6
 8006924:	2b04      	cmp	r3, #4
 8006926:	bf08      	it	eq
 8006928:	1aad      	subeq	r5, r5, r2
 800692a:	68a3      	ldr	r3, [r4, #8]
 800692c:	6922      	ldr	r2, [r4, #16]
 800692e:	bf0c      	ite	eq
 8006930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006934:	2500      	movne	r5, #0
 8006936:	4293      	cmp	r3, r2
 8006938:	bfc4      	itt	gt
 800693a:	1a9b      	subgt	r3, r3, r2
 800693c:	18ed      	addgt	r5, r5, r3
 800693e:	2600      	movs	r6, #0
 8006940:	341a      	adds	r4, #26
 8006942:	42b5      	cmp	r5, r6
 8006944:	d11a      	bne.n	800697c <_printf_common+0xc8>
 8006946:	2000      	movs	r0, #0
 8006948:	e008      	b.n	800695c <_printf_common+0xa8>
 800694a:	2301      	movs	r3, #1
 800694c:	4652      	mov	r2, sl
 800694e:	4649      	mov	r1, r9
 8006950:	4638      	mov	r0, r7
 8006952:	47c0      	blx	r8
 8006954:	3001      	adds	r0, #1
 8006956:	d103      	bne.n	8006960 <_printf_common+0xac>
 8006958:	f04f 30ff 	mov.w	r0, #4294967295
 800695c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006960:	3501      	adds	r5, #1
 8006962:	e7c6      	b.n	80068f2 <_printf_common+0x3e>
 8006964:	18e1      	adds	r1, r4, r3
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	2030      	movs	r0, #48	; 0x30
 800696a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800696e:	4422      	add	r2, r4
 8006970:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006974:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006978:	3302      	adds	r3, #2
 800697a:	e7c7      	b.n	800690c <_printf_common+0x58>
 800697c:	2301      	movs	r3, #1
 800697e:	4622      	mov	r2, r4
 8006980:	4649      	mov	r1, r9
 8006982:	4638      	mov	r0, r7
 8006984:	47c0      	blx	r8
 8006986:	3001      	adds	r0, #1
 8006988:	d0e6      	beq.n	8006958 <_printf_common+0xa4>
 800698a:	3601      	adds	r6, #1
 800698c:	e7d9      	b.n	8006942 <_printf_common+0x8e>
	...

08006990 <_printf_i>:
 8006990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006994:	7e0f      	ldrb	r7, [r1, #24]
 8006996:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006998:	2f78      	cmp	r7, #120	; 0x78
 800699a:	4691      	mov	r9, r2
 800699c:	4680      	mov	r8, r0
 800699e:	460c      	mov	r4, r1
 80069a0:	469a      	mov	sl, r3
 80069a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069a6:	d807      	bhi.n	80069b8 <_printf_i+0x28>
 80069a8:	2f62      	cmp	r7, #98	; 0x62
 80069aa:	d80a      	bhi.n	80069c2 <_printf_i+0x32>
 80069ac:	2f00      	cmp	r7, #0
 80069ae:	f000 80d8 	beq.w	8006b62 <_printf_i+0x1d2>
 80069b2:	2f58      	cmp	r7, #88	; 0x58
 80069b4:	f000 80a3 	beq.w	8006afe <_printf_i+0x16e>
 80069b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069c0:	e03a      	b.n	8006a38 <_printf_i+0xa8>
 80069c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069c6:	2b15      	cmp	r3, #21
 80069c8:	d8f6      	bhi.n	80069b8 <_printf_i+0x28>
 80069ca:	a101      	add	r1, pc, #4	; (adr r1, 80069d0 <_printf_i+0x40>)
 80069cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069d0:	08006a29 	.word	0x08006a29
 80069d4:	08006a3d 	.word	0x08006a3d
 80069d8:	080069b9 	.word	0x080069b9
 80069dc:	080069b9 	.word	0x080069b9
 80069e0:	080069b9 	.word	0x080069b9
 80069e4:	080069b9 	.word	0x080069b9
 80069e8:	08006a3d 	.word	0x08006a3d
 80069ec:	080069b9 	.word	0x080069b9
 80069f0:	080069b9 	.word	0x080069b9
 80069f4:	080069b9 	.word	0x080069b9
 80069f8:	080069b9 	.word	0x080069b9
 80069fc:	08006b49 	.word	0x08006b49
 8006a00:	08006a6d 	.word	0x08006a6d
 8006a04:	08006b2b 	.word	0x08006b2b
 8006a08:	080069b9 	.word	0x080069b9
 8006a0c:	080069b9 	.word	0x080069b9
 8006a10:	08006b6b 	.word	0x08006b6b
 8006a14:	080069b9 	.word	0x080069b9
 8006a18:	08006a6d 	.word	0x08006a6d
 8006a1c:	080069b9 	.word	0x080069b9
 8006a20:	080069b9 	.word	0x080069b9
 8006a24:	08006b33 	.word	0x08006b33
 8006a28:	682b      	ldr	r3, [r5, #0]
 8006a2a:	1d1a      	adds	r2, r3, #4
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	602a      	str	r2, [r5, #0]
 8006a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e0a3      	b.n	8006b84 <_printf_i+0x1f4>
 8006a3c:	6820      	ldr	r0, [r4, #0]
 8006a3e:	6829      	ldr	r1, [r5, #0]
 8006a40:	0606      	lsls	r6, r0, #24
 8006a42:	f101 0304 	add.w	r3, r1, #4
 8006a46:	d50a      	bpl.n	8006a5e <_printf_i+0xce>
 8006a48:	680e      	ldr	r6, [r1, #0]
 8006a4a:	602b      	str	r3, [r5, #0]
 8006a4c:	2e00      	cmp	r6, #0
 8006a4e:	da03      	bge.n	8006a58 <_printf_i+0xc8>
 8006a50:	232d      	movs	r3, #45	; 0x2d
 8006a52:	4276      	negs	r6, r6
 8006a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a58:	485e      	ldr	r0, [pc, #376]	; (8006bd4 <_printf_i+0x244>)
 8006a5a:	230a      	movs	r3, #10
 8006a5c:	e019      	b.n	8006a92 <_printf_i+0x102>
 8006a5e:	680e      	ldr	r6, [r1, #0]
 8006a60:	602b      	str	r3, [r5, #0]
 8006a62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a66:	bf18      	it	ne
 8006a68:	b236      	sxthne	r6, r6
 8006a6a:	e7ef      	b.n	8006a4c <_printf_i+0xbc>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	6820      	ldr	r0, [r4, #0]
 8006a70:	1d19      	adds	r1, r3, #4
 8006a72:	6029      	str	r1, [r5, #0]
 8006a74:	0601      	lsls	r1, r0, #24
 8006a76:	d501      	bpl.n	8006a7c <_printf_i+0xec>
 8006a78:	681e      	ldr	r6, [r3, #0]
 8006a7a:	e002      	b.n	8006a82 <_printf_i+0xf2>
 8006a7c:	0646      	lsls	r6, r0, #25
 8006a7e:	d5fb      	bpl.n	8006a78 <_printf_i+0xe8>
 8006a80:	881e      	ldrh	r6, [r3, #0]
 8006a82:	4854      	ldr	r0, [pc, #336]	; (8006bd4 <_printf_i+0x244>)
 8006a84:	2f6f      	cmp	r7, #111	; 0x6f
 8006a86:	bf0c      	ite	eq
 8006a88:	2308      	moveq	r3, #8
 8006a8a:	230a      	movne	r3, #10
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a92:	6865      	ldr	r5, [r4, #4]
 8006a94:	60a5      	str	r5, [r4, #8]
 8006a96:	2d00      	cmp	r5, #0
 8006a98:	bfa2      	ittt	ge
 8006a9a:	6821      	ldrge	r1, [r4, #0]
 8006a9c:	f021 0104 	bicge.w	r1, r1, #4
 8006aa0:	6021      	strge	r1, [r4, #0]
 8006aa2:	b90e      	cbnz	r6, 8006aa8 <_printf_i+0x118>
 8006aa4:	2d00      	cmp	r5, #0
 8006aa6:	d04d      	beq.n	8006b44 <_printf_i+0x1b4>
 8006aa8:	4615      	mov	r5, r2
 8006aaa:	fbb6 f1f3 	udiv	r1, r6, r3
 8006aae:	fb03 6711 	mls	r7, r3, r1, r6
 8006ab2:	5dc7      	ldrb	r7, [r0, r7]
 8006ab4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ab8:	4637      	mov	r7, r6
 8006aba:	42bb      	cmp	r3, r7
 8006abc:	460e      	mov	r6, r1
 8006abe:	d9f4      	bls.n	8006aaa <_printf_i+0x11a>
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d10b      	bne.n	8006adc <_printf_i+0x14c>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	07de      	lsls	r6, r3, #31
 8006ac8:	d508      	bpl.n	8006adc <_printf_i+0x14c>
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	6861      	ldr	r1, [r4, #4]
 8006ace:	4299      	cmp	r1, r3
 8006ad0:	bfde      	ittt	le
 8006ad2:	2330      	movle	r3, #48	; 0x30
 8006ad4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ad8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006adc:	1b52      	subs	r2, r2, r5
 8006ade:	6122      	str	r2, [r4, #16]
 8006ae0:	f8cd a000 	str.w	sl, [sp]
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	aa03      	add	r2, sp, #12
 8006ae8:	4621      	mov	r1, r4
 8006aea:	4640      	mov	r0, r8
 8006aec:	f7ff fee2 	bl	80068b4 <_printf_common>
 8006af0:	3001      	adds	r0, #1
 8006af2:	d14c      	bne.n	8006b8e <_printf_i+0x1fe>
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	b004      	add	sp, #16
 8006afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afe:	4835      	ldr	r0, [pc, #212]	; (8006bd4 <_printf_i+0x244>)
 8006b00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b04:	6829      	ldr	r1, [r5, #0]
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b0c:	6029      	str	r1, [r5, #0]
 8006b0e:	061d      	lsls	r5, r3, #24
 8006b10:	d514      	bpl.n	8006b3c <_printf_i+0x1ac>
 8006b12:	07df      	lsls	r7, r3, #31
 8006b14:	bf44      	itt	mi
 8006b16:	f043 0320 	orrmi.w	r3, r3, #32
 8006b1a:	6023      	strmi	r3, [r4, #0]
 8006b1c:	b91e      	cbnz	r6, 8006b26 <_printf_i+0x196>
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	f023 0320 	bic.w	r3, r3, #32
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	2310      	movs	r3, #16
 8006b28:	e7b0      	b.n	8006a8c <_printf_i+0xfc>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	f043 0320 	orr.w	r3, r3, #32
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	2378      	movs	r3, #120	; 0x78
 8006b34:	4828      	ldr	r0, [pc, #160]	; (8006bd8 <_printf_i+0x248>)
 8006b36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b3a:	e7e3      	b.n	8006b04 <_printf_i+0x174>
 8006b3c:	0659      	lsls	r1, r3, #25
 8006b3e:	bf48      	it	mi
 8006b40:	b2b6      	uxthmi	r6, r6
 8006b42:	e7e6      	b.n	8006b12 <_printf_i+0x182>
 8006b44:	4615      	mov	r5, r2
 8006b46:	e7bb      	b.n	8006ac0 <_printf_i+0x130>
 8006b48:	682b      	ldr	r3, [r5, #0]
 8006b4a:	6826      	ldr	r6, [r4, #0]
 8006b4c:	6961      	ldr	r1, [r4, #20]
 8006b4e:	1d18      	adds	r0, r3, #4
 8006b50:	6028      	str	r0, [r5, #0]
 8006b52:	0635      	lsls	r5, r6, #24
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	d501      	bpl.n	8006b5c <_printf_i+0x1cc>
 8006b58:	6019      	str	r1, [r3, #0]
 8006b5a:	e002      	b.n	8006b62 <_printf_i+0x1d2>
 8006b5c:	0670      	lsls	r0, r6, #25
 8006b5e:	d5fb      	bpl.n	8006b58 <_printf_i+0x1c8>
 8006b60:	8019      	strh	r1, [r3, #0]
 8006b62:	2300      	movs	r3, #0
 8006b64:	6123      	str	r3, [r4, #16]
 8006b66:	4615      	mov	r5, r2
 8006b68:	e7ba      	b.n	8006ae0 <_printf_i+0x150>
 8006b6a:	682b      	ldr	r3, [r5, #0]
 8006b6c:	1d1a      	adds	r2, r3, #4
 8006b6e:	602a      	str	r2, [r5, #0]
 8006b70:	681d      	ldr	r5, [r3, #0]
 8006b72:	6862      	ldr	r2, [r4, #4]
 8006b74:	2100      	movs	r1, #0
 8006b76:	4628      	mov	r0, r5
 8006b78:	f7fa f802 	bl	8000b80 <memchr>
 8006b7c:	b108      	cbz	r0, 8006b82 <_printf_i+0x1f2>
 8006b7e:	1b40      	subs	r0, r0, r5
 8006b80:	6060      	str	r0, [r4, #4]
 8006b82:	6863      	ldr	r3, [r4, #4]
 8006b84:	6123      	str	r3, [r4, #16]
 8006b86:	2300      	movs	r3, #0
 8006b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b8c:	e7a8      	b.n	8006ae0 <_printf_i+0x150>
 8006b8e:	6923      	ldr	r3, [r4, #16]
 8006b90:	462a      	mov	r2, r5
 8006b92:	4649      	mov	r1, r9
 8006b94:	4640      	mov	r0, r8
 8006b96:	47d0      	blx	sl
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d0ab      	beq.n	8006af4 <_printf_i+0x164>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	079b      	lsls	r3, r3, #30
 8006ba0:	d413      	bmi.n	8006bca <_printf_i+0x23a>
 8006ba2:	68e0      	ldr	r0, [r4, #12]
 8006ba4:	9b03      	ldr	r3, [sp, #12]
 8006ba6:	4298      	cmp	r0, r3
 8006ba8:	bfb8      	it	lt
 8006baa:	4618      	movlt	r0, r3
 8006bac:	e7a4      	b.n	8006af8 <_printf_i+0x168>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	4632      	mov	r2, r6
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	4640      	mov	r0, r8
 8006bb6:	47d0      	blx	sl
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d09b      	beq.n	8006af4 <_printf_i+0x164>
 8006bbc:	3501      	adds	r5, #1
 8006bbe:	68e3      	ldr	r3, [r4, #12]
 8006bc0:	9903      	ldr	r1, [sp, #12]
 8006bc2:	1a5b      	subs	r3, r3, r1
 8006bc4:	42ab      	cmp	r3, r5
 8006bc6:	dcf2      	bgt.n	8006bae <_printf_i+0x21e>
 8006bc8:	e7eb      	b.n	8006ba2 <_printf_i+0x212>
 8006bca:	2500      	movs	r5, #0
 8006bcc:	f104 0619 	add.w	r6, r4, #25
 8006bd0:	e7f5      	b.n	8006bbe <_printf_i+0x22e>
 8006bd2:	bf00      	nop
 8006bd4:	08008e5e 	.word	0x08008e5e
 8006bd8:	08008e6f 	.word	0x08008e6f

08006bdc <iprintf>:
 8006bdc:	b40f      	push	{r0, r1, r2, r3}
 8006bde:	4b0a      	ldr	r3, [pc, #40]	; (8006c08 <iprintf+0x2c>)
 8006be0:	b513      	push	{r0, r1, r4, lr}
 8006be2:	681c      	ldr	r4, [r3, #0]
 8006be4:	b124      	cbz	r4, 8006bf0 <iprintf+0x14>
 8006be6:	69a3      	ldr	r3, [r4, #24]
 8006be8:	b913      	cbnz	r3, 8006bf0 <iprintf+0x14>
 8006bea:	4620      	mov	r0, r4
 8006bec:	f000 fee2 	bl	80079b4 <__sinit>
 8006bf0:	ab05      	add	r3, sp, #20
 8006bf2:	9a04      	ldr	r2, [sp, #16]
 8006bf4:	68a1      	ldr	r1, [r4, #8]
 8006bf6:	9301      	str	r3, [sp, #4]
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f001 fc2d 	bl	8008458 <_vfiprintf_r>
 8006bfe:	b002      	add	sp, #8
 8006c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c04:	b004      	add	sp, #16
 8006c06:	4770      	bx	lr
 8006c08:	2000007c 	.word	0x2000007c

08006c0c <quorem>:
 8006c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c10:	6903      	ldr	r3, [r0, #16]
 8006c12:	690c      	ldr	r4, [r1, #16]
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	4607      	mov	r7, r0
 8006c18:	f2c0 8081 	blt.w	8006d1e <quorem+0x112>
 8006c1c:	3c01      	subs	r4, #1
 8006c1e:	f101 0814 	add.w	r8, r1, #20
 8006c22:	f100 0514 	add.w	r5, r0, #20
 8006c26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c2a:	9301      	str	r3, [sp, #4]
 8006c2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c34:	3301      	adds	r3, #1
 8006c36:	429a      	cmp	r2, r3
 8006c38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c40:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c44:	d331      	bcc.n	8006caa <quorem+0x9e>
 8006c46:	f04f 0e00 	mov.w	lr, #0
 8006c4a:	4640      	mov	r0, r8
 8006c4c:	46ac      	mov	ip, r5
 8006c4e:	46f2      	mov	sl, lr
 8006c50:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c54:	b293      	uxth	r3, r2
 8006c56:	fb06 e303 	mla	r3, r6, r3, lr
 8006c5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	ebaa 0303 	sub.w	r3, sl, r3
 8006c64:	f8dc a000 	ldr.w	sl, [ip]
 8006c68:	0c12      	lsrs	r2, r2, #16
 8006c6a:	fa13 f38a 	uxtah	r3, r3, sl
 8006c6e:	fb06 e202 	mla	r2, r6, r2, lr
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	9b00      	ldr	r3, [sp, #0]
 8006c76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c7a:	b292      	uxth	r2, r2
 8006c7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006c80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c84:	f8bd 3000 	ldrh.w	r3, [sp]
 8006c88:	4581      	cmp	r9, r0
 8006c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c8e:	f84c 3b04 	str.w	r3, [ip], #4
 8006c92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c96:	d2db      	bcs.n	8006c50 <quorem+0x44>
 8006c98:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c9c:	b92b      	cbnz	r3, 8006caa <quorem+0x9e>
 8006c9e:	9b01      	ldr	r3, [sp, #4]
 8006ca0:	3b04      	subs	r3, #4
 8006ca2:	429d      	cmp	r5, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	d32e      	bcc.n	8006d06 <quorem+0xfa>
 8006ca8:	613c      	str	r4, [r7, #16]
 8006caa:	4638      	mov	r0, r7
 8006cac:	f001 f9b2 	bl	8008014 <__mcmp>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	db24      	blt.n	8006cfe <quorem+0xf2>
 8006cb4:	3601      	adds	r6, #1
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	f04f 0c00 	mov.w	ip, #0
 8006cbc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006cc0:	f8d0 e000 	ldr.w	lr, [r0]
 8006cc4:	b293      	uxth	r3, r2
 8006cc6:	ebac 0303 	sub.w	r3, ip, r3
 8006cca:	0c12      	lsrs	r2, r2, #16
 8006ccc:	fa13 f38e 	uxtah	r3, r3, lr
 8006cd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006cd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cde:	45c1      	cmp	r9, r8
 8006ce0:	f840 3b04 	str.w	r3, [r0], #4
 8006ce4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006ce8:	d2e8      	bcs.n	8006cbc <quorem+0xb0>
 8006cea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cf2:	b922      	cbnz	r2, 8006cfe <quorem+0xf2>
 8006cf4:	3b04      	subs	r3, #4
 8006cf6:	429d      	cmp	r5, r3
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	d30a      	bcc.n	8006d12 <quorem+0x106>
 8006cfc:	613c      	str	r4, [r7, #16]
 8006cfe:	4630      	mov	r0, r6
 8006d00:	b003      	add	sp, #12
 8006d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d06:	6812      	ldr	r2, [r2, #0]
 8006d08:	3b04      	subs	r3, #4
 8006d0a:	2a00      	cmp	r2, #0
 8006d0c:	d1cc      	bne.n	8006ca8 <quorem+0x9c>
 8006d0e:	3c01      	subs	r4, #1
 8006d10:	e7c7      	b.n	8006ca2 <quorem+0x96>
 8006d12:	6812      	ldr	r2, [r2, #0]
 8006d14:	3b04      	subs	r3, #4
 8006d16:	2a00      	cmp	r2, #0
 8006d18:	d1f0      	bne.n	8006cfc <quorem+0xf0>
 8006d1a:	3c01      	subs	r4, #1
 8006d1c:	e7eb      	b.n	8006cf6 <quorem+0xea>
 8006d1e:	2000      	movs	r0, #0
 8006d20:	e7ee      	b.n	8006d00 <quorem+0xf4>
 8006d22:	0000      	movs	r0, r0
 8006d24:	0000      	movs	r0, r0
	...

08006d28 <_dtoa_r>:
 8006d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2c:	ed2d 8b04 	vpush	{d8-d9}
 8006d30:	ec57 6b10 	vmov	r6, r7, d0
 8006d34:	b093      	sub	sp, #76	; 0x4c
 8006d36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006d3c:	9106      	str	r1, [sp, #24]
 8006d3e:	ee10 aa10 	vmov	sl, s0
 8006d42:	4604      	mov	r4, r0
 8006d44:	9209      	str	r2, [sp, #36]	; 0x24
 8006d46:	930c      	str	r3, [sp, #48]	; 0x30
 8006d48:	46bb      	mov	fp, r7
 8006d4a:	b975      	cbnz	r5, 8006d6a <_dtoa_r+0x42>
 8006d4c:	2010      	movs	r0, #16
 8006d4e:	f000 fed7 	bl	8007b00 <malloc>
 8006d52:	4602      	mov	r2, r0
 8006d54:	6260      	str	r0, [r4, #36]	; 0x24
 8006d56:	b920      	cbnz	r0, 8006d62 <_dtoa_r+0x3a>
 8006d58:	4ba7      	ldr	r3, [pc, #668]	; (8006ff8 <_dtoa_r+0x2d0>)
 8006d5a:	21ea      	movs	r1, #234	; 0xea
 8006d5c:	48a7      	ldr	r0, [pc, #668]	; (8006ffc <_dtoa_r+0x2d4>)
 8006d5e:	f001 fdd1 	bl	8008904 <__assert_func>
 8006d62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d66:	6005      	str	r5, [r0, #0]
 8006d68:	60c5      	str	r5, [r0, #12]
 8006d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d6c:	6819      	ldr	r1, [r3, #0]
 8006d6e:	b151      	cbz	r1, 8006d86 <_dtoa_r+0x5e>
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	604a      	str	r2, [r1, #4]
 8006d74:	2301      	movs	r3, #1
 8006d76:	4093      	lsls	r3, r2
 8006d78:	608b      	str	r3, [r1, #8]
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f000 ff08 	bl	8007b90 <_Bfree>
 8006d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	1e3b      	subs	r3, r7, #0
 8006d88:	bfaa      	itet	ge
 8006d8a:	2300      	movge	r3, #0
 8006d8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006d90:	f8c8 3000 	strge.w	r3, [r8]
 8006d94:	4b9a      	ldr	r3, [pc, #616]	; (8007000 <_dtoa_r+0x2d8>)
 8006d96:	bfbc      	itt	lt
 8006d98:	2201      	movlt	r2, #1
 8006d9a:	f8c8 2000 	strlt.w	r2, [r8]
 8006d9e:	ea33 030b 	bics.w	r3, r3, fp
 8006da2:	d11b      	bne.n	8006ddc <_dtoa_r+0xb4>
 8006da4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006da6:	f242 730f 	movw	r3, #9999	; 0x270f
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006db0:	4333      	orrs	r3, r6
 8006db2:	f000 8592 	beq.w	80078da <_dtoa_r+0xbb2>
 8006db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006db8:	b963      	cbnz	r3, 8006dd4 <_dtoa_r+0xac>
 8006dba:	4b92      	ldr	r3, [pc, #584]	; (8007004 <_dtoa_r+0x2dc>)
 8006dbc:	e022      	b.n	8006e04 <_dtoa_r+0xdc>
 8006dbe:	4b92      	ldr	r3, [pc, #584]	; (8007008 <_dtoa_r+0x2e0>)
 8006dc0:	9301      	str	r3, [sp, #4]
 8006dc2:	3308      	adds	r3, #8
 8006dc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	9801      	ldr	r0, [sp, #4]
 8006dca:	b013      	add	sp, #76	; 0x4c
 8006dcc:	ecbd 8b04 	vpop	{d8-d9}
 8006dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd4:	4b8b      	ldr	r3, [pc, #556]	; (8007004 <_dtoa_r+0x2dc>)
 8006dd6:	9301      	str	r3, [sp, #4]
 8006dd8:	3303      	adds	r3, #3
 8006dda:	e7f3      	b.n	8006dc4 <_dtoa_r+0x9c>
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2300      	movs	r3, #0
 8006de0:	4650      	mov	r0, sl
 8006de2:	4659      	mov	r1, fp
 8006de4:	f7fa fb40 	bl	8001468 <__aeabi_dcmpeq>
 8006de8:	ec4b ab19 	vmov	d9, sl, fp
 8006dec:	4680      	mov	r8, r0
 8006dee:	b158      	cbz	r0, 8006e08 <_dtoa_r+0xe0>
 8006df0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006df2:	2301      	movs	r3, #1
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 856b 	beq.w	80078d4 <_dtoa_r+0xbac>
 8006dfe:	4883      	ldr	r0, [pc, #524]	; (800700c <_dtoa_r+0x2e4>)
 8006e00:	6018      	str	r0, [r3, #0]
 8006e02:	1e43      	subs	r3, r0, #1
 8006e04:	9301      	str	r3, [sp, #4]
 8006e06:	e7df      	b.n	8006dc8 <_dtoa_r+0xa0>
 8006e08:	ec4b ab10 	vmov	d0, sl, fp
 8006e0c:	aa10      	add	r2, sp, #64	; 0x40
 8006e0e:	a911      	add	r1, sp, #68	; 0x44
 8006e10:	4620      	mov	r0, r4
 8006e12:	f001 f9a5 	bl	8008160 <__d2b>
 8006e16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006e1a:	ee08 0a10 	vmov	s16, r0
 8006e1e:	2d00      	cmp	r5, #0
 8006e20:	f000 8084 	beq.w	8006f2c <_dtoa_r+0x204>
 8006e24:	ee19 3a90 	vmov	r3, s19
 8006e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006e30:	4656      	mov	r6, sl
 8006e32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006e36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006e3e:	4b74      	ldr	r3, [pc, #464]	; (8007010 <_dtoa_r+0x2e8>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	4630      	mov	r0, r6
 8006e44:	4639      	mov	r1, r7
 8006e46:	f7f9 feef 	bl	8000c28 <__aeabi_dsub>
 8006e4a:	a365      	add	r3, pc, #404	; (adr r3, 8006fe0 <_dtoa_r+0x2b8>)
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	f7fa f8a2 	bl	8000f98 <__aeabi_dmul>
 8006e54:	a364      	add	r3, pc, #400	; (adr r3, 8006fe8 <_dtoa_r+0x2c0>)
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	f7f9 fee7 	bl	8000c2c <__adddf3>
 8006e5e:	4606      	mov	r6, r0
 8006e60:	4628      	mov	r0, r5
 8006e62:	460f      	mov	r7, r1
 8006e64:	f7fa f82e 	bl	8000ec4 <__aeabi_i2d>
 8006e68:	a361      	add	r3, pc, #388	; (adr r3, 8006ff0 <_dtoa_r+0x2c8>)
 8006e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6e:	f7fa f893 	bl	8000f98 <__aeabi_dmul>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4630      	mov	r0, r6
 8006e78:	4639      	mov	r1, r7
 8006e7a:	f7f9 fed7 	bl	8000c2c <__adddf3>
 8006e7e:	4606      	mov	r6, r0
 8006e80:	460f      	mov	r7, r1
 8006e82:	f7fa fb39 	bl	80014f8 <__aeabi_d2iz>
 8006e86:	2200      	movs	r2, #0
 8006e88:	9000      	str	r0, [sp, #0]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	4639      	mov	r1, r7
 8006e90:	f7fa faf4 	bl	800147c <__aeabi_dcmplt>
 8006e94:	b150      	cbz	r0, 8006eac <_dtoa_r+0x184>
 8006e96:	9800      	ldr	r0, [sp, #0]
 8006e98:	f7fa f814 	bl	8000ec4 <__aeabi_i2d>
 8006e9c:	4632      	mov	r2, r6
 8006e9e:	463b      	mov	r3, r7
 8006ea0:	f7fa fae2 	bl	8001468 <__aeabi_dcmpeq>
 8006ea4:	b910      	cbnz	r0, 8006eac <_dtoa_r+0x184>
 8006ea6:	9b00      	ldr	r3, [sp, #0]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	9b00      	ldr	r3, [sp, #0]
 8006eae:	2b16      	cmp	r3, #22
 8006eb0:	d85a      	bhi.n	8006f68 <_dtoa_r+0x240>
 8006eb2:	9a00      	ldr	r2, [sp, #0]
 8006eb4:	4b57      	ldr	r3, [pc, #348]	; (8007014 <_dtoa_r+0x2ec>)
 8006eb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	ec51 0b19 	vmov	r0, r1, d9
 8006ec2:	f7fa fadb 	bl	800147c <__aeabi_dcmplt>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d050      	beq.n	8006f6c <_dtoa_r+0x244>
 8006eca:	9b00      	ldr	r3, [sp, #0]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ed6:	1b5d      	subs	r5, r3, r5
 8006ed8:	1e6b      	subs	r3, r5, #1
 8006eda:	9305      	str	r3, [sp, #20]
 8006edc:	bf45      	ittet	mi
 8006ede:	f1c5 0301 	rsbmi	r3, r5, #1
 8006ee2:	9304      	strmi	r3, [sp, #16]
 8006ee4:	2300      	movpl	r3, #0
 8006ee6:	2300      	movmi	r3, #0
 8006ee8:	bf4c      	ite	mi
 8006eea:	9305      	strmi	r3, [sp, #20]
 8006eec:	9304      	strpl	r3, [sp, #16]
 8006eee:	9b00      	ldr	r3, [sp, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	db3d      	blt.n	8006f70 <_dtoa_r+0x248>
 8006ef4:	9b05      	ldr	r3, [sp, #20]
 8006ef6:	9a00      	ldr	r2, [sp, #0]
 8006ef8:	920a      	str	r2, [sp, #40]	; 0x28
 8006efa:	4413      	add	r3, r2
 8006efc:	9305      	str	r3, [sp, #20]
 8006efe:	2300      	movs	r3, #0
 8006f00:	9307      	str	r3, [sp, #28]
 8006f02:	9b06      	ldr	r3, [sp, #24]
 8006f04:	2b09      	cmp	r3, #9
 8006f06:	f200 8089 	bhi.w	800701c <_dtoa_r+0x2f4>
 8006f0a:	2b05      	cmp	r3, #5
 8006f0c:	bfc4      	itt	gt
 8006f0e:	3b04      	subgt	r3, #4
 8006f10:	9306      	strgt	r3, [sp, #24]
 8006f12:	9b06      	ldr	r3, [sp, #24]
 8006f14:	f1a3 0302 	sub.w	r3, r3, #2
 8006f18:	bfcc      	ite	gt
 8006f1a:	2500      	movgt	r5, #0
 8006f1c:	2501      	movle	r5, #1
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	f200 8087 	bhi.w	8007032 <_dtoa_r+0x30a>
 8006f24:	e8df f003 	tbb	[pc, r3]
 8006f28:	59383a2d 	.word	0x59383a2d
 8006f2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006f30:	441d      	add	r5, r3
 8006f32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	bfc1      	itttt	gt
 8006f3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006f42:	fa0b f303 	lslgt.w	r3, fp, r3
 8006f46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006f4a:	bfda      	itte	le
 8006f4c:	f1c3 0320 	rsble	r3, r3, #32
 8006f50:	fa06 f003 	lslle.w	r0, r6, r3
 8006f54:	4318      	orrgt	r0, r3
 8006f56:	f7f9 ffa5 	bl	8000ea4 <__aeabi_ui2d>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	4606      	mov	r6, r0
 8006f5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006f62:	3d01      	subs	r5, #1
 8006f64:	930e      	str	r3, [sp, #56]	; 0x38
 8006f66:	e76a      	b.n	8006e3e <_dtoa_r+0x116>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e7b2      	b.n	8006ed2 <_dtoa_r+0x1aa>
 8006f6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006f6e:	e7b1      	b.n	8006ed4 <_dtoa_r+0x1ac>
 8006f70:	9b04      	ldr	r3, [sp, #16]
 8006f72:	9a00      	ldr	r2, [sp, #0]
 8006f74:	1a9b      	subs	r3, r3, r2
 8006f76:	9304      	str	r3, [sp, #16]
 8006f78:	4253      	negs	r3, r2
 8006f7a:	9307      	str	r3, [sp, #28]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8006f80:	e7bf      	b.n	8006f02 <_dtoa_r+0x1da>
 8006f82:	2300      	movs	r3, #0
 8006f84:	9308      	str	r3, [sp, #32]
 8006f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	dc55      	bgt.n	8007038 <_dtoa_r+0x310>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006f92:	461a      	mov	r2, r3
 8006f94:	9209      	str	r2, [sp, #36]	; 0x24
 8006f96:	e00c      	b.n	8006fb2 <_dtoa_r+0x28a>
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e7f3      	b.n	8006f84 <_dtoa_r+0x25c>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fa0:	9308      	str	r3, [sp, #32]
 8006fa2:	9b00      	ldr	r3, [sp, #0]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	9302      	str	r3, [sp, #8]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	9303      	str	r3, [sp, #12]
 8006fae:	bfb8      	it	lt
 8006fb0:	2301      	movlt	r3, #1
 8006fb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	6042      	str	r2, [r0, #4]
 8006fb8:	2204      	movs	r2, #4
 8006fba:	f102 0614 	add.w	r6, r2, #20
 8006fbe:	429e      	cmp	r6, r3
 8006fc0:	6841      	ldr	r1, [r0, #4]
 8006fc2:	d93d      	bls.n	8007040 <_dtoa_r+0x318>
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f000 fda3 	bl	8007b10 <_Balloc>
 8006fca:	9001      	str	r0, [sp, #4]
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d13b      	bne.n	8007048 <_dtoa_r+0x320>
 8006fd0:	4b11      	ldr	r3, [pc, #68]	; (8007018 <_dtoa_r+0x2f0>)
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006fd8:	e6c0      	b.n	8006d5c <_dtoa_r+0x34>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e7df      	b.n	8006f9e <_dtoa_r+0x276>
 8006fde:	bf00      	nop
 8006fe0:	636f4361 	.word	0x636f4361
 8006fe4:	3fd287a7 	.word	0x3fd287a7
 8006fe8:	8b60c8b3 	.word	0x8b60c8b3
 8006fec:	3fc68a28 	.word	0x3fc68a28
 8006ff0:	509f79fb 	.word	0x509f79fb
 8006ff4:	3fd34413 	.word	0x3fd34413
 8006ff8:	08008e8d 	.word	0x08008e8d
 8006ffc:	08008ea4 	.word	0x08008ea4
 8007000:	7ff00000 	.word	0x7ff00000
 8007004:	08008e89 	.word	0x08008e89
 8007008:	08008e80 	.word	0x08008e80
 800700c:	08008e5d 	.word	0x08008e5d
 8007010:	3ff80000 	.word	0x3ff80000
 8007014:	08008ff8 	.word	0x08008ff8
 8007018:	08008eff 	.word	0x08008eff
 800701c:	2501      	movs	r5, #1
 800701e:	2300      	movs	r3, #0
 8007020:	9306      	str	r3, [sp, #24]
 8007022:	9508      	str	r5, [sp, #32]
 8007024:	f04f 33ff 	mov.w	r3, #4294967295
 8007028:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800702c:	2200      	movs	r2, #0
 800702e:	2312      	movs	r3, #18
 8007030:	e7b0      	b.n	8006f94 <_dtoa_r+0x26c>
 8007032:	2301      	movs	r3, #1
 8007034:	9308      	str	r3, [sp, #32]
 8007036:	e7f5      	b.n	8007024 <_dtoa_r+0x2fc>
 8007038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800703a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800703e:	e7b8      	b.n	8006fb2 <_dtoa_r+0x28a>
 8007040:	3101      	adds	r1, #1
 8007042:	6041      	str	r1, [r0, #4]
 8007044:	0052      	lsls	r2, r2, #1
 8007046:	e7b8      	b.n	8006fba <_dtoa_r+0x292>
 8007048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800704a:	9a01      	ldr	r2, [sp, #4]
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	9b03      	ldr	r3, [sp, #12]
 8007050:	2b0e      	cmp	r3, #14
 8007052:	f200 809d 	bhi.w	8007190 <_dtoa_r+0x468>
 8007056:	2d00      	cmp	r5, #0
 8007058:	f000 809a 	beq.w	8007190 <_dtoa_r+0x468>
 800705c:	9b00      	ldr	r3, [sp, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	dd32      	ble.n	80070c8 <_dtoa_r+0x3a0>
 8007062:	4ab7      	ldr	r2, [pc, #732]	; (8007340 <_dtoa_r+0x618>)
 8007064:	f003 030f 	and.w	r3, r3, #15
 8007068:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800706c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007070:	9b00      	ldr	r3, [sp, #0]
 8007072:	05d8      	lsls	r0, r3, #23
 8007074:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007078:	d516      	bpl.n	80070a8 <_dtoa_r+0x380>
 800707a:	4bb2      	ldr	r3, [pc, #712]	; (8007344 <_dtoa_r+0x61c>)
 800707c:	ec51 0b19 	vmov	r0, r1, d9
 8007080:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007084:	f7fa f8b2 	bl	80011ec <__aeabi_ddiv>
 8007088:	f007 070f 	and.w	r7, r7, #15
 800708c:	4682      	mov	sl, r0
 800708e:	468b      	mov	fp, r1
 8007090:	2503      	movs	r5, #3
 8007092:	4eac      	ldr	r6, [pc, #688]	; (8007344 <_dtoa_r+0x61c>)
 8007094:	b957      	cbnz	r7, 80070ac <_dtoa_r+0x384>
 8007096:	4642      	mov	r2, r8
 8007098:	464b      	mov	r3, r9
 800709a:	4650      	mov	r0, sl
 800709c:	4659      	mov	r1, fp
 800709e:	f7fa f8a5 	bl	80011ec <__aeabi_ddiv>
 80070a2:	4682      	mov	sl, r0
 80070a4:	468b      	mov	fp, r1
 80070a6:	e028      	b.n	80070fa <_dtoa_r+0x3d2>
 80070a8:	2502      	movs	r5, #2
 80070aa:	e7f2      	b.n	8007092 <_dtoa_r+0x36a>
 80070ac:	07f9      	lsls	r1, r7, #31
 80070ae:	d508      	bpl.n	80070c2 <_dtoa_r+0x39a>
 80070b0:	4640      	mov	r0, r8
 80070b2:	4649      	mov	r1, r9
 80070b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070b8:	f7f9 ff6e 	bl	8000f98 <__aeabi_dmul>
 80070bc:	3501      	adds	r5, #1
 80070be:	4680      	mov	r8, r0
 80070c0:	4689      	mov	r9, r1
 80070c2:	107f      	asrs	r7, r7, #1
 80070c4:	3608      	adds	r6, #8
 80070c6:	e7e5      	b.n	8007094 <_dtoa_r+0x36c>
 80070c8:	f000 809b 	beq.w	8007202 <_dtoa_r+0x4da>
 80070cc:	9b00      	ldr	r3, [sp, #0]
 80070ce:	4f9d      	ldr	r7, [pc, #628]	; (8007344 <_dtoa_r+0x61c>)
 80070d0:	425e      	negs	r6, r3
 80070d2:	4b9b      	ldr	r3, [pc, #620]	; (8007340 <_dtoa_r+0x618>)
 80070d4:	f006 020f 	and.w	r2, r6, #15
 80070d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e0:	ec51 0b19 	vmov	r0, r1, d9
 80070e4:	f7f9 ff58 	bl	8000f98 <__aeabi_dmul>
 80070e8:	1136      	asrs	r6, r6, #4
 80070ea:	4682      	mov	sl, r0
 80070ec:	468b      	mov	fp, r1
 80070ee:	2300      	movs	r3, #0
 80070f0:	2502      	movs	r5, #2
 80070f2:	2e00      	cmp	r6, #0
 80070f4:	d17a      	bne.n	80071ec <_dtoa_r+0x4c4>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1d3      	bne.n	80070a2 <_dtoa_r+0x37a>
 80070fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8082 	beq.w	8007206 <_dtoa_r+0x4de>
 8007102:	4b91      	ldr	r3, [pc, #580]	; (8007348 <_dtoa_r+0x620>)
 8007104:	2200      	movs	r2, #0
 8007106:	4650      	mov	r0, sl
 8007108:	4659      	mov	r1, fp
 800710a:	f7fa f9b7 	bl	800147c <__aeabi_dcmplt>
 800710e:	2800      	cmp	r0, #0
 8007110:	d079      	beq.n	8007206 <_dtoa_r+0x4de>
 8007112:	9b03      	ldr	r3, [sp, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d076      	beq.n	8007206 <_dtoa_r+0x4de>
 8007118:	9b02      	ldr	r3, [sp, #8]
 800711a:	2b00      	cmp	r3, #0
 800711c:	dd36      	ble.n	800718c <_dtoa_r+0x464>
 800711e:	9b00      	ldr	r3, [sp, #0]
 8007120:	4650      	mov	r0, sl
 8007122:	4659      	mov	r1, fp
 8007124:	1e5f      	subs	r7, r3, #1
 8007126:	2200      	movs	r2, #0
 8007128:	4b88      	ldr	r3, [pc, #544]	; (800734c <_dtoa_r+0x624>)
 800712a:	f7f9 ff35 	bl	8000f98 <__aeabi_dmul>
 800712e:	9e02      	ldr	r6, [sp, #8]
 8007130:	4682      	mov	sl, r0
 8007132:	468b      	mov	fp, r1
 8007134:	3501      	adds	r5, #1
 8007136:	4628      	mov	r0, r5
 8007138:	f7f9 fec4 	bl	8000ec4 <__aeabi_i2d>
 800713c:	4652      	mov	r2, sl
 800713e:	465b      	mov	r3, fp
 8007140:	f7f9 ff2a 	bl	8000f98 <__aeabi_dmul>
 8007144:	4b82      	ldr	r3, [pc, #520]	; (8007350 <_dtoa_r+0x628>)
 8007146:	2200      	movs	r2, #0
 8007148:	f7f9 fd70 	bl	8000c2c <__adddf3>
 800714c:	46d0      	mov	r8, sl
 800714e:	46d9      	mov	r9, fp
 8007150:	4682      	mov	sl, r0
 8007152:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007156:	2e00      	cmp	r6, #0
 8007158:	d158      	bne.n	800720c <_dtoa_r+0x4e4>
 800715a:	4b7e      	ldr	r3, [pc, #504]	; (8007354 <_dtoa_r+0x62c>)
 800715c:	2200      	movs	r2, #0
 800715e:	4640      	mov	r0, r8
 8007160:	4649      	mov	r1, r9
 8007162:	f7f9 fd61 	bl	8000c28 <__aeabi_dsub>
 8007166:	4652      	mov	r2, sl
 8007168:	465b      	mov	r3, fp
 800716a:	4680      	mov	r8, r0
 800716c:	4689      	mov	r9, r1
 800716e:	f7fa f9a3 	bl	80014b8 <__aeabi_dcmpgt>
 8007172:	2800      	cmp	r0, #0
 8007174:	f040 8295 	bne.w	80076a2 <_dtoa_r+0x97a>
 8007178:	4652      	mov	r2, sl
 800717a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800717e:	4640      	mov	r0, r8
 8007180:	4649      	mov	r1, r9
 8007182:	f7fa f97b 	bl	800147c <__aeabi_dcmplt>
 8007186:	2800      	cmp	r0, #0
 8007188:	f040 8289 	bne.w	800769e <_dtoa_r+0x976>
 800718c:	ec5b ab19 	vmov	sl, fp, d9
 8007190:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007192:	2b00      	cmp	r3, #0
 8007194:	f2c0 8148 	blt.w	8007428 <_dtoa_r+0x700>
 8007198:	9a00      	ldr	r2, [sp, #0]
 800719a:	2a0e      	cmp	r2, #14
 800719c:	f300 8144 	bgt.w	8007428 <_dtoa_r+0x700>
 80071a0:	4b67      	ldr	r3, [pc, #412]	; (8007340 <_dtoa_r+0x618>)
 80071a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f280 80d5 	bge.w	800735c <_dtoa_r+0x634>
 80071b2:	9b03      	ldr	r3, [sp, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f300 80d1 	bgt.w	800735c <_dtoa_r+0x634>
 80071ba:	f040 826f 	bne.w	800769c <_dtoa_r+0x974>
 80071be:	4b65      	ldr	r3, [pc, #404]	; (8007354 <_dtoa_r+0x62c>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	4640      	mov	r0, r8
 80071c4:	4649      	mov	r1, r9
 80071c6:	f7f9 fee7 	bl	8000f98 <__aeabi_dmul>
 80071ca:	4652      	mov	r2, sl
 80071cc:	465b      	mov	r3, fp
 80071ce:	f7fa f969 	bl	80014a4 <__aeabi_dcmpge>
 80071d2:	9e03      	ldr	r6, [sp, #12]
 80071d4:	4637      	mov	r7, r6
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f040 8245 	bne.w	8007666 <_dtoa_r+0x93e>
 80071dc:	9d01      	ldr	r5, [sp, #4]
 80071de:	2331      	movs	r3, #49	; 0x31
 80071e0:	f805 3b01 	strb.w	r3, [r5], #1
 80071e4:	9b00      	ldr	r3, [sp, #0]
 80071e6:	3301      	adds	r3, #1
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	e240      	b.n	800766e <_dtoa_r+0x946>
 80071ec:	07f2      	lsls	r2, r6, #31
 80071ee:	d505      	bpl.n	80071fc <_dtoa_r+0x4d4>
 80071f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f4:	f7f9 fed0 	bl	8000f98 <__aeabi_dmul>
 80071f8:	3501      	adds	r5, #1
 80071fa:	2301      	movs	r3, #1
 80071fc:	1076      	asrs	r6, r6, #1
 80071fe:	3708      	adds	r7, #8
 8007200:	e777      	b.n	80070f2 <_dtoa_r+0x3ca>
 8007202:	2502      	movs	r5, #2
 8007204:	e779      	b.n	80070fa <_dtoa_r+0x3d2>
 8007206:	9f00      	ldr	r7, [sp, #0]
 8007208:	9e03      	ldr	r6, [sp, #12]
 800720a:	e794      	b.n	8007136 <_dtoa_r+0x40e>
 800720c:	9901      	ldr	r1, [sp, #4]
 800720e:	4b4c      	ldr	r3, [pc, #304]	; (8007340 <_dtoa_r+0x618>)
 8007210:	4431      	add	r1, r6
 8007212:	910d      	str	r1, [sp, #52]	; 0x34
 8007214:	9908      	ldr	r1, [sp, #32]
 8007216:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800721a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800721e:	2900      	cmp	r1, #0
 8007220:	d043      	beq.n	80072aa <_dtoa_r+0x582>
 8007222:	494d      	ldr	r1, [pc, #308]	; (8007358 <_dtoa_r+0x630>)
 8007224:	2000      	movs	r0, #0
 8007226:	f7f9 ffe1 	bl	80011ec <__aeabi_ddiv>
 800722a:	4652      	mov	r2, sl
 800722c:	465b      	mov	r3, fp
 800722e:	f7f9 fcfb 	bl	8000c28 <__aeabi_dsub>
 8007232:	9d01      	ldr	r5, [sp, #4]
 8007234:	4682      	mov	sl, r0
 8007236:	468b      	mov	fp, r1
 8007238:	4649      	mov	r1, r9
 800723a:	4640      	mov	r0, r8
 800723c:	f7fa f95c 	bl	80014f8 <__aeabi_d2iz>
 8007240:	4606      	mov	r6, r0
 8007242:	f7f9 fe3f 	bl	8000ec4 <__aeabi_i2d>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	4640      	mov	r0, r8
 800724c:	4649      	mov	r1, r9
 800724e:	f7f9 fceb 	bl	8000c28 <__aeabi_dsub>
 8007252:	3630      	adds	r6, #48	; 0x30
 8007254:	f805 6b01 	strb.w	r6, [r5], #1
 8007258:	4652      	mov	r2, sl
 800725a:	465b      	mov	r3, fp
 800725c:	4680      	mov	r8, r0
 800725e:	4689      	mov	r9, r1
 8007260:	f7fa f90c 	bl	800147c <__aeabi_dcmplt>
 8007264:	2800      	cmp	r0, #0
 8007266:	d163      	bne.n	8007330 <_dtoa_r+0x608>
 8007268:	4642      	mov	r2, r8
 800726a:	464b      	mov	r3, r9
 800726c:	4936      	ldr	r1, [pc, #216]	; (8007348 <_dtoa_r+0x620>)
 800726e:	2000      	movs	r0, #0
 8007270:	f7f9 fcda 	bl	8000c28 <__aeabi_dsub>
 8007274:	4652      	mov	r2, sl
 8007276:	465b      	mov	r3, fp
 8007278:	f7fa f900 	bl	800147c <__aeabi_dcmplt>
 800727c:	2800      	cmp	r0, #0
 800727e:	f040 80b5 	bne.w	80073ec <_dtoa_r+0x6c4>
 8007282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007284:	429d      	cmp	r5, r3
 8007286:	d081      	beq.n	800718c <_dtoa_r+0x464>
 8007288:	4b30      	ldr	r3, [pc, #192]	; (800734c <_dtoa_r+0x624>)
 800728a:	2200      	movs	r2, #0
 800728c:	4650      	mov	r0, sl
 800728e:	4659      	mov	r1, fp
 8007290:	f7f9 fe82 	bl	8000f98 <__aeabi_dmul>
 8007294:	4b2d      	ldr	r3, [pc, #180]	; (800734c <_dtoa_r+0x624>)
 8007296:	4682      	mov	sl, r0
 8007298:	468b      	mov	fp, r1
 800729a:	4640      	mov	r0, r8
 800729c:	4649      	mov	r1, r9
 800729e:	2200      	movs	r2, #0
 80072a0:	f7f9 fe7a 	bl	8000f98 <__aeabi_dmul>
 80072a4:	4680      	mov	r8, r0
 80072a6:	4689      	mov	r9, r1
 80072a8:	e7c6      	b.n	8007238 <_dtoa_r+0x510>
 80072aa:	4650      	mov	r0, sl
 80072ac:	4659      	mov	r1, fp
 80072ae:	f7f9 fe73 	bl	8000f98 <__aeabi_dmul>
 80072b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072b4:	9d01      	ldr	r5, [sp, #4]
 80072b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80072b8:	4682      	mov	sl, r0
 80072ba:	468b      	mov	fp, r1
 80072bc:	4649      	mov	r1, r9
 80072be:	4640      	mov	r0, r8
 80072c0:	f7fa f91a 	bl	80014f8 <__aeabi_d2iz>
 80072c4:	4606      	mov	r6, r0
 80072c6:	f7f9 fdfd 	bl	8000ec4 <__aeabi_i2d>
 80072ca:	3630      	adds	r6, #48	; 0x30
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	4640      	mov	r0, r8
 80072d2:	4649      	mov	r1, r9
 80072d4:	f7f9 fca8 	bl	8000c28 <__aeabi_dsub>
 80072d8:	f805 6b01 	strb.w	r6, [r5], #1
 80072dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072de:	429d      	cmp	r5, r3
 80072e0:	4680      	mov	r8, r0
 80072e2:	4689      	mov	r9, r1
 80072e4:	f04f 0200 	mov.w	r2, #0
 80072e8:	d124      	bne.n	8007334 <_dtoa_r+0x60c>
 80072ea:	4b1b      	ldr	r3, [pc, #108]	; (8007358 <_dtoa_r+0x630>)
 80072ec:	4650      	mov	r0, sl
 80072ee:	4659      	mov	r1, fp
 80072f0:	f7f9 fc9c 	bl	8000c2c <__adddf3>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4640      	mov	r0, r8
 80072fa:	4649      	mov	r1, r9
 80072fc:	f7fa f8dc 	bl	80014b8 <__aeabi_dcmpgt>
 8007300:	2800      	cmp	r0, #0
 8007302:	d173      	bne.n	80073ec <_dtoa_r+0x6c4>
 8007304:	4652      	mov	r2, sl
 8007306:	465b      	mov	r3, fp
 8007308:	4913      	ldr	r1, [pc, #76]	; (8007358 <_dtoa_r+0x630>)
 800730a:	2000      	movs	r0, #0
 800730c:	f7f9 fc8c 	bl	8000c28 <__aeabi_dsub>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	4640      	mov	r0, r8
 8007316:	4649      	mov	r1, r9
 8007318:	f7fa f8b0 	bl	800147c <__aeabi_dcmplt>
 800731c:	2800      	cmp	r0, #0
 800731e:	f43f af35 	beq.w	800718c <_dtoa_r+0x464>
 8007322:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007324:	1e6b      	subs	r3, r5, #1
 8007326:	930f      	str	r3, [sp, #60]	; 0x3c
 8007328:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800732c:	2b30      	cmp	r3, #48	; 0x30
 800732e:	d0f8      	beq.n	8007322 <_dtoa_r+0x5fa>
 8007330:	9700      	str	r7, [sp, #0]
 8007332:	e049      	b.n	80073c8 <_dtoa_r+0x6a0>
 8007334:	4b05      	ldr	r3, [pc, #20]	; (800734c <_dtoa_r+0x624>)
 8007336:	f7f9 fe2f 	bl	8000f98 <__aeabi_dmul>
 800733a:	4680      	mov	r8, r0
 800733c:	4689      	mov	r9, r1
 800733e:	e7bd      	b.n	80072bc <_dtoa_r+0x594>
 8007340:	08008ff8 	.word	0x08008ff8
 8007344:	08008fd0 	.word	0x08008fd0
 8007348:	3ff00000 	.word	0x3ff00000
 800734c:	40240000 	.word	0x40240000
 8007350:	401c0000 	.word	0x401c0000
 8007354:	40140000 	.word	0x40140000
 8007358:	3fe00000 	.word	0x3fe00000
 800735c:	9d01      	ldr	r5, [sp, #4]
 800735e:	4656      	mov	r6, sl
 8007360:	465f      	mov	r7, fp
 8007362:	4642      	mov	r2, r8
 8007364:	464b      	mov	r3, r9
 8007366:	4630      	mov	r0, r6
 8007368:	4639      	mov	r1, r7
 800736a:	f7f9 ff3f 	bl	80011ec <__aeabi_ddiv>
 800736e:	f7fa f8c3 	bl	80014f8 <__aeabi_d2iz>
 8007372:	4682      	mov	sl, r0
 8007374:	f7f9 fda6 	bl	8000ec4 <__aeabi_i2d>
 8007378:	4642      	mov	r2, r8
 800737a:	464b      	mov	r3, r9
 800737c:	f7f9 fe0c 	bl	8000f98 <__aeabi_dmul>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4630      	mov	r0, r6
 8007386:	4639      	mov	r1, r7
 8007388:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800738c:	f7f9 fc4c 	bl	8000c28 <__aeabi_dsub>
 8007390:	f805 6b01 	strb.w	r6, [r5], #1
 8007394:	9e01      	ldr	r6, [sp, #4]
 8007396:	9f03      	ldr	r7, [sp, #12]
 8007398:	1bae      	subs	r6, r5, r6
 800739a:	42b7      	cmp	r7, r6
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	d135      	bne.n	800740e <_dtoa_r+0x6e6>
 80073a2:	f7f9 fc43 	bl	8000c2c <__adddf3>
 80073a6:	4642      	mov	r2, r8
 80073a8:	464b      	mov	r3, r9
 80073aa:	4606      	mov	r6, r0
 80073ac:	460f      	mov	r7, r1
 80073ae:	f7fa f883 	bl	80014b8 <__aeabi_dcmpgt>
 80073b2:	b9d0      	cbnz	r0, 80073ea <_dtoa_r+0x6c2>
 80073b4:	4642      	mov	r2, r8
 80073b6:	464b      	mov	r3, r9
 80073b8:	4630      	mov	r0, r6
 80073ba:	4639      	mov	r1, r7
 80073bc:	f7fa f854 	bl	8001468 <__aeabi_dcmpeq>
 80073c0:	b110      	cbz	r0, 80073c8 <_dtoa_r+0x6a0>
 80073c2:	f01a 0f01 	tst.w	sl, #1
 80073c6:	d110      	bne.n	80073ea <_dtoa_r+0x6c2>
 80073c8:	4620      	mov	r0, r4
 80073ca:	ee18 1a10 	vmov	r1, s16
 80073ce:	f000 fbdf 	bl	8007b90 <_Bfree>
 80073d2:	2300      	movs	r3, #0
 80073d4:	9800      	ldr	r0, [sp, #0]
 80073d6:	702b      	strb	r3, [r5, #0]
 80073d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073da:	3001      	adds	r0, #1
 80073dc:	6018      	str	r0, [r3, #0]
 80073de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f43f acf1 	beq.w	8006dc8 <_dtoa_r+0xa0>
 80073e6:	601d      	str	r5, [r3, #0]
 80073e8:	e4ee      	b.n	8006dc8 <_dtoa_r+0xa0>
 80073ea:	9f00      	ldr	r7, [sp, #0]
 80073ec:	462b      	mov	r3, r5
 80073ee:	461d      	mov	r5, r3
 80073f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073f4:	2a39      	cmp	r2, #57	; 0x39
 80073f6:	d106      	bne.n	8007406 <_dtoa_r+0x6de>
 80073f8:	9a01      	ldr	r2, [sp, #4]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d1f7      	bne.n	80073ee <_dtoa_r+0x6c6>
 80073fe:	9901      	ldr	r1, [sp, #4]
 8007400:	2230      	movs	r2, #48	; 0x30
 8007402:	3701      	adds	r7, #1
 8007404:	700a      	strb	r2, [r1, #0]
 8007406:	781a      	ldrb	r2, [r3, #0]
 8007408:	3201      	adds	r2, #1
 800740a:	701a      	strb	r2, [r3, #0]
 800740c:	e790      	b.n	8007330 <_dtoa_r+0x608>
 800740e:	4ba6      	ldr	r3, [pc, #664]	; (80076a8 <_dtoa_r+0x980>)
 8007410:	2200      	movs	r2, #0
 8007412:	f7f9 fdc1 	bl	8000f98 <__aeabi_dmul>
 8007416:	2200      	movs	r2, #0
 8007418:	2300      	movs	r3, #0
 800741a:	4606      	mov	r6, r0
 800741c:	460f      	mov	r7, r1
 800741e:	f7fa f823 	bl	8001468 <__aeabi_dcmpeq>
 8007422:	2800      	cmp	r0, #0
 8007424:	d09d      	beq.n	8007362 <_dtoa_r+0x63a>
 8007426:	e7cf      	b.n	80073c8 <_dtoa_r+0x6a0>
 8007428:	9a08      	ldr	r2, [sp, #32]
 800742a:	2a00      	cmp	r2, #0
 800742c:	f000 80d7 	beq.w	80075de <_dtoa_r+0x8b6>
 8007430:	9a06      	ldr	r2, [sp, #24]
 8007432:	2a01      	cmp	r2, #1
 8007434:	f300 80ba 	bgt.w	80075ac <_dtoa_r+0x884>
 8007438:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800743a:	2a00      	cmp	r2, #0
 800743c:	f000 80b2 	beq.w	80075a4 <_dtoa_r+0x87c>
 8007440:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007444:	9e07      	ldr	r6, [sp, #28]
 8007446:	9d04      	ldr	r5, [sp, #16]
 8007448:	9a04      	ldr	r2, [sp, #16]
 800744a:	441a      	add	r2, r3
 800744c:	9204      	str	r2, [sp, #16]
 800744e:	9a05      	ldr	r2, [sp, #20]
 8007450:	2101      	movs	r1, #1
 8007452:	441a      	add	r2, r3
 8007454:	4620      	mov	r0, r4
 8007456:	9205      	str	r2, [sp, #20]
 8007458:	f000 fc52 	bl	8007d00 <__i2b>
 800745c:	4607      	mov	r7, r0
 800745e:	2d00      	cmp	r5, #0
 8007460:	dd0c      	ble.n	800747c <_dtoa_r+0x754>
 8007462:	9b05      	ldr	r3, [sp, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	dd09      	ble.n	800747c <_dtoa_r+0x754>
 8007468:	42ab      	cmp	r3, r5
 800746a:	9a04      	ldr	r2, [sp, #16]
 800746c:	bfa8      	it	ge
 800746e:	462b      	movge	r3, r5
 8007470:	1ad2      	subs	r2, r2, r3
 8007472:	9204      	str	r2, [sp, #16]
 8007474:	9a05      	ldr	r2, [sp, #20]
 8007476:	1aed      	subs	r5, r5, r3
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	9305      	str	r3, [sp, #20]
 800747c:	9b07      	ldr	r3, [sp, #28]
 800747e:	b31b      	cbz	r3, 80074c8 <_dtoa_r+0x7a0>
 8007480:	9b08      	ldr	r3, [sp, #32]
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 80af 	beq.w	80075e6 <_dtoa_r+0x8be>
 8007488:	2e00      	cmp	r6, #0
 800748a:	dd13      	ble.n	80074b4 <_dtoa_r+0x78c>
 800748c:	4639      	mov	r1, r7
 800748e:	4632      	mov	r2, r6
 8007490:	4620      	mov	r0, r4
 8007492:	f000 fcf5 	bl	8007e80 <__pow5mult>
 8007496:	ee18 2a10 	vmov	r2, s16
 800749a:	4601      	mov	r1, r0
 800749c:	4607      	mov	r7, r0
 800749e:	4620      	mov	r0, r4
 80074a0:	f000 fc44 	bl	8007d2c <__multiply>
 80074a4:	ee18 1a10 	vmov	r1, s16
 80074a8:	4680      	mov	r8, r0
 80074aa:	4620      	mov	r0, r4
 80074ac:	f000 fb70 	bl	8007b90 <_Bfree>
 80074b0:	ee08 8a10 	vmov	s16, r8
 80074b4:	9b07      	ldr	r3, [sp, #28]
 80074b6:	1b9a      	subs	r2, r3, r6
 80074b8:	d006      	beq.n	80074c8 <_dtoa_r+0x7a0>
 80074ba:	ee18 1a10 	vmov	r1, s16
 80074be:	4620      	mov	r0, r4
 80074c0:	f000 fcde 	bl	8007e80 <__pow5mult>
 80074c4:	ee08 0a10 	vmov	s16, r0
 80074c8:	2101      	movs	r1, #1
 80074ca:	4620      	mov	r0, r4
 80074cc:	f000 fc18 	bl	8007d00 <__i2b>
 80074d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	4606      	mov	r6, r0
 80074d6:	f340 8088 	ble.w	80075ea <_dtoa_r+0x8c2>
 80074da:	461a      	mov	r2, r3
 80074dc:	4601      	mov	r1, r0
 80074de:	4620      	mov	r0, r4
 80074e0:	f000 fcce 	bl	8007e80 <__pow5mult>
 80074e4:	9b06      	ldr	r3, [sp, #24]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	4606      	mov	r6, r0
 80074ea:	f340 8081 	ble.w	80075f0 <_dtoa_r+0x8c8>
 80074ee:	f04f 0800 	mov.w	r8, #0
 80074f2:	6933      	ldr	r3, [r6, #16]
 80074f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80074f8:	6918      	ldr	r0, [r3, #16]
 80074fa:	f000 fbb1 	bl	8007c60 <__hi0bits>
 80074fe:	f1c0 0020 	rsb	r0, r0, #32
 8007502:	9b05      	ldr	r3, [sp, #20]
 8007504:	4418      	add	r0, r3
 8007506:	f010 001f 	ands.w	r0, r0, #31
 800750a:	f000 8092 	beq.w	8007632 <_dtoa_r+0x90a>
 800750e:	f1c0 0320 	rsb	r3, r0, #32
 8007512:	2b04      	cmp	r3, #4
 8007514:	f340 808a 	ble.w	800762c <_dtoa_r+0x904>
 8007518:	f1c0 001c 	rsb	r0, r0, #28
 800751c:	9b04      	ldr	r3, [sp, #16]
 800751e:	4403      	add	r3, r0
 8007520:	9304      	str	r3, [sp, #16]
 8007522:	9b05      	ldr	r3, [sp, #20]
 8007524:	4403      	add	r3, r0
 8007526:	4405      	add	r5, r0
 8007528:	9305      	str	r3, [sp, #20]
 800752a:	9b04      	ldr	r3, [sp, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	dd07      	ble.n	8007540 <_dtoa_r+0x818>
 8007530:	ee18 1a10 	vmov	r1, s16
 8007534:	461a      	mov	r2, r3
 8007536:	4620      	mov	r0, r4
 8007538:	f000 fcfc 	bl	8007f34 <__lshift>
 800753c:	ee08 0a10 	vmov	s16, r0
 8007540:	9b05      	ldr	r3, [sp, #20]
 8007542:	2b00      	cmp	r3, #0
 8007544:	dd05      	ble.n	8007552 <_dtoa_r+0x82a>
 8007546:	4631      	mov	r1, r6
 8007548:	461a      	mov	r2, r3
 800754a:	4620      	mov	r0, r4
 800754c:	f000 fcf2 	bl	8007f34 <__lshift>
 8007550:	4606      	mov	r6, r0
 8007552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007554:	2b00      	cmp	r3, #0
 8007556:	d06e      	beq.n	8007636 <_dtoa_r+0x90e>
 8007558:	ee18 0a10 	vmov	r0, s16
 800755c:	4631      	mov	r1, r6
 800755e:	f000 fd59 	bl	8008014 <__mcmp>
 8007562:	2800      	cmp	r0, #0
 8007564:	da67      	bge.n	8007636 <_dtoa_r+0x90e>
 8007566:	9b00      	ldr	r3, [sp, #0]
 8007568:	3b01      	subs	r3, #1
 800756a:	ee18 1a10 	vmov	r1, s16
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	220a      	movs	r2, #10
 8007572:	2300      	movs	r3, #0
 8007574:	4620      	mov	r0, r4
 8007576:	f000 fb2d 	bl	8007bd4 <__multadd>
 800757a:	9b08      	ldr	r3, [sp, #32]
 800757c:	ee08 0a10 	vmov	s16, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 81b1 	beq.w	80078e8 <_dtoa_r+0xbc0>
 8007586:	2300      	movs	r3, #0
 8007588:	4639      	mov	r1, r7
 800758a:	220a      	movs	r2, #10
 800758c:	4620      	mov	r0, r4
 800758e:	f000 fb21 	bl	8007bd4 <__multadd>
 8007592:	9b02      	ldr	r3, [sp, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	4607      	mov	r7, r0
 8007598:	f300 808e 	bgt.w	80076b8 <_dtoa_r+0x990>
 800759c:	9b06      	ldr	r3, [sp, #24]
 800759e:	2b02      	cmp	r3, #2
 80075a0:	dc51      	bgt.n	8007646 <_dtoa_r+0x91e>
 80075a2:	e089      	b.n	80076b8 <_dtoa_r+0x990>
 80075a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80075aa:	e74b      	b.n	8007444 <_dtoa_r+0x71c>
 80075ac:	9b03      	ldr	r3, [sp, #12]
 80075ae:	1e5e      	subs	r6, r3, #1
 80075b0:	9b07      	ldr	r3, [sp, #28]
 80075b2:	42b3      	cmp	r3, r6
 80075b4:	bfbf      	itttt	lt
 80075b6:	9b07      	ldrlt	r3, [sp, #28]
 80075b8:	9607      	strlt	r6, [sp, #28]
 80075ba:	1af2      	sublt	r2, r6, r3
 80075bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80075be:	bfb6      	itet	lt
 80075c0:	189b      	addlt	r3, r3, r2
 80075c2:	1b9e      	subge	r6, r3, r6
 80075c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80075c6:	9b03      	ldr	r3, [sp, #12]
 80075c8:	bfb8      	it	lt
 80075ca:	2600      	movlt	r6, #0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	bfb7      	itett	lt
 80075d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80075d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80075d8:	1a9d      	sublt	r5, r3, r2
 80075da:	2300      	movlt	r3, #0
 80075dc:	e734      	b.n	8007448 <_dtoa_r+0x720>
 80075de:	9e07      	ldr	r6, [sp, #28]
 80075e0:	9d04      	ldr	r5, [sp, #16]
 80075e2:	9f08      	ldr	r7, [sp, #32]
 80075e4:	e73b      	b.n	800745e <_dtoa_r+0x736>
 80075e6:	9a07      	ldr	r2, [sp, #28]
 80075e8:	e767      	b.n	80074ba <_dtoa_r+0x792>
 80075ea:	9b06      	ldr	r3, [sp, #24]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	dc18      	bgt.n	8007622 <_dtoa_r+0x8fa>
 80075f0:	f1ba 0f00 	cmp.w	sl, #0
 80075f4:	d115      	bne.n	8007622 <_dtoa_r+0x8fa>
 80075f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075fa:	b993      	cbnz	r3, 8007622 <_dtoa_r+0x8fa>
 80075fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007600:	0d1b      	lsrs	r3, r3, #20
 8007602:	051b      	lsls	r3, r3, #20
 8007604:	b183      	cbz	r3, 8007628 <_dtoa_r+0x900>
 8007606:	9b04      	ldr	r3, [sp, #16]
 8007608:	3301      	adds	r3, #1
 800760a:	9304      	str	r3, [sp, #16]
 800760c:	9b05      	ldr	r3, [sp, #20]
 800760e:	3301      	adds	r3, #1
 8007610:	9305      	str	r3, [sp, #20]
 8007612:	f04f 0801 	mov.w	r8, #1
 8007616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007618:	2b00      	cmp	r3, #0
 800761a:	f47f af6a 	bne.w	80074f2 <_dtoa_r+0x7ca>
 800761e:	2001      	movs	r0, #1
 8007620:	e76f      	b.n	8007502 <_dtoa_r+0x7da>
 8007622:	f04f 0800 	mov.w	r8, #0
 8007626:	e7f6      	b.n	8007616 <_dtoa_r+0x8ee>
 8007628:	4698      	mov	r8, r3
 800762a:	e7f4      	b.n	8007616 <_dtoa_r+0x8ee>
 800762c:	f43f af7d 	beq.w	800752a <_dtoa_r+0x802>
 8007630:	4618      	mov	r0, r3
 8007632:	301c      	adds	r0, #28
 8007634:	e772      	b.n	800751c <_dtoa_r+0x7f4>
 8007636:	9b03      	ldr	r3, [sp, #12]
 8007638:	2b00      	cmp	r3, #0
 800763a:	dc37      	bgt.n	80076ac <_dtoa_r+0x984>
 800763c:	9b06      	ldr	r3, [sp, #24]
 800763e:	2b02      	cmp	r3, #2
 8007640:	dd34      	ble.n	80076ac <_dtoa_r+0x984>
 8007642:	9b03      	ldr	r3, [sp, #12]
 8007644:	9302      	str	r3, [sp, #8]
 8007646:	9b02      	ldr	r3, [sp, #8]
 8007648:	b96b      	cbnz	r3, 8007666 <_dtoa_r+0x93e>
 800764a:	4631      	mov	r1, r6
 800764c:	2205      	movs	r2, #5
 800764e:	4620      	mov	r0, r4
 8007650:	f000 fac0 	bl	8007bd4 <__multadd>
 8007654:	4601      	mov	r1, r0
 8007656:	4606      	mov	r6, r0
 8007658:	ee18 0a10 	vmov	r0, s16
 800765c:	f000 fcda 	bl	8008014 <__mcmp>
 8007660:	2800      	cmp	r0, #0
 8007662:	f73f adbb 	bgt.w	80071dc <_dtoa_r+0x4b4>
 8007666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007668:	9d01      	ldr	r5, [sp, #4]
 800766a:	43db      	mvns	r3, r3
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	f04f 0800 	mov.w	r8, #0
 8007672:	4631      	mov	r1, r6
 8007674:	4620      	mov	r0, r4
 8007676:	f000 fa8b 	bl	8007b90 <_Bfree>
 800767a:	2f00      	cmp	r7, #0
 800767c:	f43f aea4 	beq.w	80073c8 <_dtoa_r+0x6a0>
 8007680:	f1b8 0f00 	cmp.w	r8, #0
 8007684:	d005      	beq.n	8007692 <_dtoa_r+0x96a>
 8007686:	45b8      	cmp	r8, r7
 8007688:	d003      	beq.n	8007692 <_dtoa_r+0x96a>
 800768a:	4641      	mov	r1, r8
 800768c:	4620      	mov	r0, r4
 800768e:	f000 fa7f 	bl	8007b90 <_Bfree>
 8007692:	4639      	mov	r1, r7
 8007694:	4620      	mov	r0, r4
 8007696:	f000 fa7b 	bl	8007b90 <_Bfree>
 800769a:	e695      	b.n	80073c8 <_dtoa_r+0x6a0>
 800769c:	2600      	movs	r6, #0
 800769e:	4637      	mov	r7, r6
 80076a0:	e7e1      	b.n	8007666 <_dtoa_r+0x93e>
 80076a2:	9700      	str	r7, [sp, #0]
 80076a4:	4637      	mov	r7, r6
 80076a6:	e599      	b.n	80071dc <_dtoa_r+0x4b4>
 80076a8:	40240000 	.word	0x40240000
 80076ac:	9b08      	ldr	r3, [sp, #32]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 80ca 	beq.w	8007848 <_dtoa_r+0xb20>
 80076b4:	9b03      	ldr	r3, [sp, #12]
 80076b6:	9302      	str	r3, [sp, #8]
 80076b8:	2d00      	cmp	r5, #0
 80076ba:	dd05      	ble.n	80076c8 <_dtoa_r+0x9a0>
 80076bc:	4639      	mov	r1, r7
 80076be:	462a      	mov	r2, r5
 80076c0:	4620      	mov	r0, r4
 80076c2:	f000 fc37 	bl	8007f34 <__lshift>
 80076c6:	4607      	mov	r7, r0
 80076c8:	f1b8 0f00 	cmp.w	r8, #0
 80076cc:	d05b      	beq.n	8007786 <_dtoa_r+0xa5e>
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	4620      	mov	r0, r4
 80076d2:	f000 fa1d 	bl	8007b10 <_Balloc>
 80076d6:	4605      	mov	r5, r0
 80076d8:	b928      	cbnz	r0, 80076e6 <_dtoa_r+0x9be>
 80076da:	4b87      	ldr	r3, [pc, #540]	; (80078f8 <_dtoa_r+0xbd0>)
 80076dc:	4602      	mov	r2, r0
 80076de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80076e2:	f7ff bb3b 	b.w	8006d5c <_dtoa_r+0x34>
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	3202      	adds	r2, #2
 80076ea:	0092      	lsls	r2, r2, #2
 80076ec:	f107 010c 	add.w	r1, r7, #12
 80076f0:	300c      	adds	r0, #12
 80076f2:	f7fe fdf3 	bl	80062dc <memcpy>
 80076f6:	2201      	movs	r2, #1
 80076f8:	4629      	mov	r1, r5
 80076fa:	4620      	mov	r0, r4
 80076fc:	f000 fc1a 	bl	8007f34 <__lshift>
 8007700:	9b01      	ldr	r3, [sp, #4]
 8007702:	f103 0901 	add.w	r9, r3, #1
 8007706:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800770a:	4413      	add	r3, r2
 800770c:	9305      	str	r3, [sp, #20]
 800770e:	f00a 0301 	and.w	r3, sl, #1
 8007712:	46b8      	mov	r8, r7
 8007714:	9304      	str	r3, [sp, #16]
 8007716:	4607      	mov	r7, r0
 8007718:	4631      	mov	r1, r6
 800771a:	ee18 0a10 	vmov	r0, s16
 800771e:	f7ff fa75 	bl	8006c0c <quorem>
 8007722:	4641      	mov	r1, r8
 8007724:	9002      	str	r0, [sp, #8]
 8007726:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800772a:	ee18 0a10 	vmov	r0, s16
 800772e:	f000 fc71 	bl	8008014 <__mcmp>
 8007732:	463a      	mov	r2, r7
 8007734:	9003      	str	r0, [sp, #12]
 8007736:	4631      	mov	r1, r6
 8007738:	4620      	mov	r0, r4
 800773a:	f000 fc87 	bl	800804c <__mdiff>
 800773e:	68c2      	ldr	r2, [r0, #12]
 8007740:	f109 3bff 	add.w	fp, r9, #4294967295
 8007744:	4605      	mov	r5, r0
 8007746:	bb02      	cbnz	r2, 800778a <_dtoa_r+0xa62>
 8007748:	4601      	mov	r1, r0
 800774a:	ee18 0a10 	vmov	r0, s16
 800774e:	f000 fc61 	bl	8008014 <__mcmp>
 8007752:	4602      	mov	r2, r0
 8007754:	4629      	mov	r1, r5
 8007756:	4620      	mov	r0, r4
 8007758:	9207      	str	r2, [sp, #28]
 800775a:	f000 fa19 	bl	8007b90 <_Bfree>
 800775e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007762:	ea43 0102 	orr.w	r1, r3, r2
 8007766:	9b04      	ldr	r3, [sp, #16]
 8007768:	430b      	orrs	r3, r1
 800776a:	464d      	mov	r5, r9
 800776c:	d10f      	bne.n	800778e <_dtoa_r+0xa66>
 800776e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007772:	d02a      	beq.n	80077ca <_dtoa_r+0xaa2>
 8007774:	9b03      	ldr	r3, [sp, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	dd02      	ble.n	8007780 <_dtoa_r+0xa58>
 800777a:	9b02      	ldr	r3, [sp, #8]
 800777c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007780:	f88b a000 	strb.w	sl, [fp]
 8007784:	e775      	b.n	8007672 <_dtoa_r+0x94a>
 8007786:	4638      	mov	r0, r7
 8007788:	e7ba      	b.n	8007700 <_dtoa_r+0x9d8>
 800778a:	2201      	movs	r2, #1
 800778c:	e7e2      	b.n	8007754 <_dtoa_r+0xa2c>
 800778e:	9b03      	ldr	r3, [sp, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	db04      	blt.n	800779e <_dtoa_r+0xa76>
 8007794:	9906      	ldr	r1, [sp, #24]
 8007796:	430b      	orrs	r3, r1
 8007798:	9904      	ldr	r1, [sp, #16]
 800779a:	430b      	orrs	r3, r1
 800779c:	d122      	bne.n	80077e4 <_dtoa_r+0xabc>
 800779e:	2a00      	cmp	r2, #0
 80077a0:	ddee      	ble.n	8007780 <_dtoa_r+0xa58>
 80077a2:	ee18 1a10 	vmov	r1, s16
 80077a6:	2201      	movs	r2, #1
 80077a8:	4620      	mov	r0, r4
 80077aa:	f000 fbc3 	bl	8007f34 <__lshift>
 80077ae:	4631      	mov	r1, r6
 80077b0:	ee08 0a10 	vmov	s16, r0
 80077b4:	f000 fc2e 	bl	8008014 <__mcmp>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	dc03      	bgt.n	80077c4 <_dtoa_r+0xa9c>
 80077bc:	d1e0      	bne.n	8007780 <_dtoa_r+0xa58>
 80077be:	f01a 0f01 	tst.w	sl, #1
 80077c2:	d0dd      	beq.n	8007780 <_dtoa_r+0xa58>
 80077c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80077c8:	d1d7      	bne.n	800777a <_dtoa_r+0xa52>
 80077ca:	2339      	movs	r3, #57	; 0x39
 80077cc:	f88b 3000 	strb.w	r3, [fp]
 80077d0:	462b      	mov	r3, r5
 80077d2:	461d      	mov	r5, r3
 80077d4:	3b01      	subs	r3, #1
 80077d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80077da:	2a39      	cmp	r2, #57	; 0x39
 80077dc:	d071      	beq.n	80078c2 <_dtoa_r+0xb9a>
 80077de:	3201      	adds	r2, #1
 80077e0:	701a      	strb	r2, [r3, #0]
 80077e2:	e746      	b.n	8007672 <_dtoa_r+0x94a>
 80077e4:	2a00      	cmp	r2, #0
 80077e6:	dd07      	ble.n	80077f8 <_dtoa_r+0xad0>
 80077e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80077ec:	d0ed      	beq.n	80077ca <_dtoa_r+0xaa2>
 80077ee:	f10a 0301 	add.w	r3, sl, #1
 80077f2:	f88b 3000 	strb.w	r3, [fp]
 80077f6:	e73c      	b.n	8007672 <_dtoa_r+0x94a>
 80077f8:	9b05      	ldr	r3, [sp, #20]
 80077fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80077fe:	4599      	cmp	r9, r3
 8007800:	d047      	beq.n	8007892 <_dtoa_r+0xb6a>
 8007802:	ee18 1a10 	vmov	r1, s16
 8007806:	2300      	movs	r3, #0
 8007808:	220a      	movs	r2, #10
 800780a:	4620      	mov	r0, r4
 800780c:	f000 f9e2 	bl	8007bd4 <__multadd>
 8007810:	45b8      	cmp	r8, r7
 8007812:	ee08 0a10 	vmov	s16, r0
 8007816:	f04f 0300 	mov.w	r3, #0
 800781a:	f04f 020a 	mov.w	r2, #10
 800781e:	4641      	mov	r1, r8
 8007820:	4620      	mov	r0, r4
 8007822:	d106      	bne.n	8007832 <_dtoa_r+0xb0a>
 8007824:	f000 f9d6 	bl	8007bd4 <__multadd>
 8007828:	4680      	mov	r8, r0
 800782a:	4607      	mov	r7, r0
 800782c:	f109 0901 	add.w	r9, r9, #1
 8007830:	e772      	b.n	8007718 <_dtoa_r+0x9f0>
 8007832:	f000 f9cf 	bl	8007bd4 <__multadd>
 8007836:	4639      	mov	r1, r7
 8007838:	4680      	mov	r8, r0
 800783a:	2300      	movs	r3, #0
 800783c:	220a      	movs	r2, #10
 800783e:	4620      	mov	r0, r4
 8007840:	f000 f9c8 	bl	8007bd4 <__multadd>
 8007844:	4607      	mov	r7, r0
 8007846:	e7f1      	b.n	800782c <_dtoa_r+0xb04>
 8007848:	9b03      	ldr	r3, [sp, #12]
 800784a:	9302      	str	r3, [sp, #8]
 800784c:	9d01      	ldr	r5, [sp, #4]
 800784e:	ee18 0a10 	vmov	r0, s16
 8007852:	4631      	mov	r1, r6
 8007854:	f7ff f9da 	bl	8006c0c <quorem>
 8007858:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800785c:	9b01      	ldr	r3, [sp, #4]
 800785e:	f805 ab01 	strb.w	sl, [r5], #1
 8007862:	1aea      	subs	r2, r5, r3
 8007864:	9b02      	ldr	r3, [sp, #8]
 8007866:	4293      	cmp	r3, r2
 8007868:	dd09      	ble.n	800787e <_dtoa_r+0xb56>
 800786a:	ee18 1a10 	vmov	r1, s16
 800786e:	2300      	movs	r3, #0
 8007870:	220a      	movs	r2, #10
 8007872:	4620      	mov	r0, r4
 8007874:	f000 f9ae 	bl	8007bd4 <__multadd>
 8007878:	ee08 0a10 	vmov	s16, r0
 800787c:	e7e7      	b.n	800784e <_dtoa_r+0xb26>
 800787e:	9b02      	ldr	r3, [sp, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	bfc8      	it	gt
 8007884:	461d      	movgt	r5, r3
 8007886:	9b01      	ldr	r3, [sp, #4]
 8007888:	bfd8      	it	le
 800788a:	2501      	movle	r5, #1
 800788c:	441d      	add	r5, r3
 800788e:	f04f 0800 	mov.w	r8, #0
 8007892:	ee18 1a10 	vmov	r1, s16
 8007896:	2201      	movs	r2, #1
 8007898:	4620      	mov	r0, r4
 800789a:	f000 fb4b 	bl	8007f34 <__lshift>
 800789e:	4631      	mov	r1, r6
 80078a0:	ee08 0a10 	vmov	s16, r0
 80078a4:	f000 fbb6 	bl	8008014 <__mcmp>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	dc91      	bgt.n	80077d0 <_dtoa_r+0xaa8>
 80078ac:	d102      	bne.n	80078b4 <_dtoa_r+0xb8c>
 80078ae:	f01a 0f01 	tst.w	sl, #1
 80078b2:	d18d      	bne.n	80077d0 <_dtoa_r+0xaa8>
 80078b4:	462b      	mov	r3, r5
 80078b6:	461d      	mov	r5, r3
 80078b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078bc:	2a30      	cmp	r2, #48	; 0x30
 80078be:	d0fa      	beq.n	80078b6 <_dtoa_r+0xb8e>
 80078c0:	e6d7      	b.n	8007672 <_dtoa_r+0x94a>
 80078c2:	9a01      	ldr	r2, [sp, #4]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d184      	bne.n	80077d2 <_dtoa_r+0xaaa>
 80078c8:	9b00      	ldr	r3, [sp, #0]
 80078ca:	3301      	adds	r3, #1
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	2331      	movs	r3, #49	; 0x31
 80078d0:	7013      	strb	r3, [r2, #0]
 80078d2:	e6ce      	b.n	8007672 <_dtoa_r+0x94a>
 80078d4:	4b09      	ldr	r3, [pc, #36]	; (80078fc <_dtoa_r+0xbd4>)
 80078d6:	f7ff ba95 	b.w	8006e04 <_dtoa_r+0xdc>
 80078da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f47f aa6e 	bne.w	8006dbe <_dtoa_r+0x96>
 80078e2:	4b07      	ldr	r3, [pc, #28]	; (8007900 <_dtoa_r+0xbd8>)
 80078e4:	f7ff ba8e 	b.w	8006e04 <_dtoa_r+0xdc>
 80078e8:	9b02      	ldr	r3, [sp, #8]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	dcae      	bgt.n	800784c <_dtoa_r+0xb24>
 80078ee:	9b06      	ldr	r3, [sp, #24]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	f73f aea8 	bgt.w	8007646 <_dtoa_r+0x91e>
 80078f6:	e7a9      	b.n	800784c <_dtoa_r+0xb24>
 80078f8:	08008eff 	.word	0x08008eff
 80078fc:	08008e5c 	.word	0x08008e5c
 8007900:	08008e80 	.word	0x08008e80

08007904 <std>:
 8007904:	2300      	movs	r3, #0
 8007906:	b510      	push	{r4, lr}
 8007908:	4604      	mov	r4, r0
 800790a:	e9c0 3300 	strd	r3, r3, [r0]
 800790e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007912:	6083      	str	r3, [r0, #8]
 8007914:	8181      	strh	r1, [r0, #12]
 8007916:	6643      	str	r3, [r0, #100]	; 0x64
 8007918:	81c2      	strh	r2, [r0, #14]
 800791a:	6183      	str	r3, [r0, #24]
 800791c:	4619      	mov	r1, r3
 800791e:	2208      	movs	r2, #8
 8007920:	305c      	adds	r0, #92	; 0x5c
 8007922:	f7fe fce9 	bl	80062f8 <memset>
 8007926:	4b05      	ldr	r3, [pc, #20]	; (800793c <std+0x38>)
 8007928:	6263      	str	r3, [r4, #36]	; 0x24
 800792a:	4b05      	ldr	r3, [pc, #20]	; (8007940 <std+0x3c>)
 800792c:	62a3      	str	r3, [r4, #40]	; 0x28
 800792e:	4b05      	ldr	r3, [pc, #20]	; (8007944 <std+0x40>)
 8007930:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007932:	4b05      	ldr	r3, [pc, #20]	; (8007948 <std+0x44>)
 8007934:	6224      	str	r4, [r4, #32]
 8007936:	6323      	str	r3, [r4, #48]	; 0x30
 8007938:	bd10      	pop	{r4, pc}
 800793a:	bf00      	nop
 800793c:	080086d9 	.word	0x080086d9
 8007940:	080086fb 	.word	0x080086fb
 8007944:	08008733 	.word	0x08008733
 8007948:	08008757 	.word	0x08008757

0800794c <_cleanup_r>:
 800794c:	4901      	ldr	r1, [pc, #4]	; (8007954 <_cleanup_r+0x8>)
 800794e:	f000 b8af 	b.w	8007ab0 <_fwalk_reent>
 8007952:	bf00      	nop
 8007954:	08008a6d 	.word	0x08008a6d

08007958 <__sfmoreglue>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	2268      	movs	r2, #104	; 0x68
 800795c:	1e4d      	subs	r5, r1, #1
 800795e:	4355      	muls	r5, r2
 8007960:	460e      	mov	r6, r1
 8007962:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007966:	f000 fcd9 	bl	800831c <_malloc_r>
 800796a:	4604      	mov	r4, r0
 800796c:	b140      	cbz	r0, 8007980 <__sfmoreglue+0x28>
 800796e:	2100      	movs	r1, #0
 8007970:	e9c0 1600 	strd	r1, r6, [r0]
 8007974:	300c      	adds	r0, #12
 8007976:	60a0      	str	r0, [r4, #8]
 8007978:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800797c:	f7fe fcbc 	bl	80062f8 <memset>
 8007980:	4620      	mov	r0, r4
 8007982:	bd70      	pop	{r4, r5, r6, pc}

08007984 <__sfp_lock_acquire>:
 8007984:	4801      	ldr	r0, [pc, #4]	; (800798c <__sfp_lock_acquire+0x8>)
 8007986:	f000 b8b8 	b.w	8007afa <__retarget_lock_acquire_recursive>
 800798a:	bf00      	nop
 800798c:	20000521 	.word	0x20000521

08007990 <__sfp_lock_release>:
 8007990:	4801      	ldr	r0, [pc, #4]	; (8007998 <__sfp_lock_release+0x8>)
 8007992:	f000 b8b3 	b.w	8007afc <__retarget_lock_release_recursive>
 8007996:	bf00      	nop
 8007998:	20000521 	.word	0x20000521

0800799c <__sinit_lock_acquire>:
 800799c:	4801      	ldr	r0, [pc, #4]	; (80079a4 <__sinit_lock_acquire+0x8>)
 800799e:	f000 b8ac 	b.w	8007afa <__retarget_lock_acquire_recursive>
 80079a2:	bf00      	nop
 80079a4:	20000522 	.word	0x20000522

080079a8 <__sinit_lock_release>:
 80079a8:	4801      	ldr	r0, [pc, #4]	; (80079b0 <__sinit_lock_release+0x8>)
 80079aa:	f000 b8a7 	b.w	8007afc <__retarget_lock_release_recursive>
 80079ae:	bf00      	nop
 80079b0:	20000522 	.word	0x20000522

080079b4 <__sinit>:
 80079b4:	b510      	push	{r4, lr}
 80079b6:	4604      	mov	r4, r0
 80079b8:	f7ff fff0 	bl	800799c <__sinit_lock_acquire>
 80079bc:	69a3      	ldr	r3, [r4, #24]
 80079be:	b11b      	cbz	r3, 80079c8 <__sinit+0x14>
 80079c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c4:	f7ff bff0 	b.w	80079a8 <__sinit_lock_release>
 80079c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80079cc:	6523      	str	r3, [r4, #80]	; 0x50
 80079ce:	4b13      	ldr	r3, [pc, #76]	; (8007a1c <__sinit+0x68>)
 80079d0:	4a13      	ldr	r2, [pc, #76]	; (8007a20 <__sinit+0x6c>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80079d6:	42a3      	cmp	r3, r4
 80079d8:	bf04      	itt	eq
 80079da:	2301      	moveq	r3, #1
 80079dc:	61a3      	streq	r3, [r4, #24]
 80079de:	4620      	mov	r0, r4
 80079e0:	f000 f820 	bl	8007a24 <__sfp>
 80079e4:	6060      	str	r0, [r4, #4]
 80079e6:	4620      	mov	r0, r4
 80079e8:	f000 f81c 	bl	8007a24 <__sfp>
 80079ec:	60a0      	str	r0, [r4, #8]
 80079ee:	4620      	mov	r0, r4
 80079f0:	f000 f818 	bl	8007a24 <__sfp>
 80079f4:	2200      	movs	r2, #0
 80079f6:	60e0      	str	r0, [r4, #12]
 80079f8:	2104      	movs	r1, #4
 80079fa:	6860      	ldr	r0, [r4, #4]
 80079fc:	f7ff ff82 	bl	8007904 <std>
 8007a00:	68a0      	ldr	r0, [r4, #8]
 8007a02:	2201      	movs	r2, #1
 8007a04:	2109      	movs	r1, #9
 8007a06:	f7ff ff7d 	bl	8007904 <std>
 8007a0a:	68e0      	ldr	r0, [r4, #12]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	2112      	movs	r1, #18
 8007a10:	f7ff ff78 	bl	8007904 <std>
 8007a14:	2301      	movs	r3, #1
 8007a16:	61a3      	str	r3, [r4, #24]
 8007a18:	e7d2      	b.n	80079c0 <__sinit+0xc>
 8007a1a:	bf00      	nop
 8007a1c:	08008e48 	.word	0x08008e48
 8007a20:	0800794d 	.word	0x0800794d

08007a24 <__sfp>:
 8007a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a26:	4607      	mov	r7, r0
 8007a28:	f7ff ffac 	bl	8007984 <__sfp_lock_acquire>
 8007a2c:	4b1e      	ldr	r3, [pc, #120]	; (8007aa8 <__sfp+0x84>)
 8007a2e:	681e      	ldr	r6, [r3, #0]
 8007a30:	69b3      	ldr	r3, [r6, #24]
 8007a32:	b913      	cbnz	r3, 8007a3a <__sfp+0x16>
 8007a34:	4630      	mov	r0, r6
 8007a36:	f7ff ffbd 	bl	80079b4 <__sinit>
 8007a3a:	3648      	adds	r6, #72	; 0x48
 8007a3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a40:	3b01      	subs	r3, #1
 8007a42:	d503      	bpl.n	8007a4c <__sfp+0x28>
 8007a44:	6833      	ldr	r3, [r6, #0]
 8007a46:	b30b      	cbz	r3, 8007a8c <__sfp+0x68>
 8007a48:	6836      	ldr	r6, [r6, #0]
 8007a4a:	e7f7      	b.n	8007a3c <__sfp+0x18>
 8007a4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a50:	b9d5      	cbnz	r5, 8007a88 <__sfp+0x64>
 8007a52:	4b16      	ldr	r3, [pc, #88]	; (8007aac <__sfp+0x88>)
 8007a54:	60e3      	str	r3, [r4, #12]
 8007a56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a5a:	6665      	str	r5, [r4, #100]	; 0x64
 8007a5c:	f000 f84c 	bl	8007af8 <__retarget_lock_init_recursive>
 8007a60:	f7ff ff96 	bl	8007990 <__sfp_lock_release>
 8007a64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a6c:	6025      	str	r5, [r4, #0]
 8007a6e:	61a5      	str	r5, [r4, #24]
 8007a70:	2208      	movs	r2, #8
 8007a72:	4629      	mov	r1, r5
 8007a74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a78:	f7fe fc3e 	bl	80062f8 <memset>
 8007a7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a84:	4620      	mov	r0, r4
 8007a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a88:	3468      	adds	r4, #104	; 0x68
 8007a8a:	e7d9      	b.n	8007a40 <__sfp+0x1c>
 8007a8c:	2104      	movs	r1, #4
 8007a8e:	4638      	mov	r0, r7
 8007a90:	f7ff ff62 	bl	8007958 <__sfmoreglue>
 8007a94:	4604      	mov	r4, r0
 8007a96:	6030      	str	r0, [r6, #0]
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d1d5      	bne.n	8007a48 <__sfp+0x24>
 8007a9c:	f7ff ff78 	bl	8007990 <__sfp_lock_release>
 8007aa0:	230c      	movs	r3, #12
 8007aa2:	603b      	str	r3, [r7, #0]
 8007aa4:	e7ee      	b.n	8007a84 <__sfp+0x60>
 8007aa6:	bf00      	nop
 8007aa8:	08008e48 	.word	0x08008e48
 8007aac:	ffff0001 	.word	0xffff0001

08007ab0 <_fwalk_reent>:
 8007ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	4688      	mov	r8, r1
 8007ab8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007abc:	2700      	movs	r7, #0
 8007abe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ac2:	f1b9 0901 	subs.w	r9, r9, #1
 8007ac6:	d505      	bpl.n	8007ad4 <_fwalk_reent+0x24>
 8007ac8:	6824      	ldr	r4, [r4, #0]
 8007aca:	2c00      	cmp	r4, #0
 8007acc:	d1f7      	bne.n	8007abe <_fwalk_reent+0xe>
 8007ace:	4638      	mov	r0, r7
 8007ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ad4:	89ab      	ldrh	r3, [r5, #12]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d907      	bls.n	8007aea <_fwalk_reent+0x3a>
 8007ada:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	d003      	beq.n	8007aea <_fwalk_reent+0x3a>
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	47c0      	blx	r8
 8007ae8:	4307      	orrs	r7, r0
 8007aea:	3568      	adds	r5, #104	; 0x68
 8007aec:	e7e9      	b.n	8007ac2 <_fwalk_reent+0x12>
	...

08007af0 <_localeconv_r>:
 8007af0:	4800      	ldr	r0, [pc, #0]	; (8007af4 <_localeconv_r+0x4>)
 8007af2:	4770      	bx	lr
 8007af4:	200001d0 	.word	0x200001d0

08007af8 <__retarget_lock_init_recursive>:
 8007af8:	4770      	bx	lr

08007afa <__retarget_lock_acquire_recursive>:
 8007afa:	4770      	bx	lr

08007afc <__retarget_lock_release_recursive>:
 8007afc:	4770      	bx	lr
	...

08007b00 <malloc>:
 8007b00:	4b02      	ldr	r3, [pc, #8]	; (8007b0c <malloc+0xc>)
 8007b02:	4601      	mov	r1, r0
 8007b04:	6818      	ldr	r0, [r3, #0]
 8007b06:	f000 bc09 	b.w	800831c <_malloc_r>
 8007b0a:	bf00      	nop
 8007b0c:	2000007c 	.word	0x2000007c

08007b10 <_Balloc>:
 8007b10:	b570      	push	{r4, r5, r6, lr}
 8007b12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b14:	4604      	mov	r4, r0
 8007b16:	460d      	mov	r5, r1
 8007b18:	b976      	cbnz	r6, 8007b38 <_Balloc+0x28>
 8007b1a:	2010      	movs	r0, #16
 8007b1c:	f7ff fff0 	bl	8007b00 <malloc>
 8007b20:	4602      	mov	r2, r0
 8007b22:	6260      	str	r0, [r4, #36]	; 0x24
 8007b24:	b920      	cbnz	r0, 8007b30 <_Balloc+0x20>
 8007b26:	4b18      	ldr	r3, [pc, #96]	; (8007b88 <_Balloc+0x78>)
 8007b28:	4818      	ldr	r0, [pc, #96]	; (8007b8c <_Balloc+0x7c>)
 8007b2a:	2166      	movs	r1, #102	; 0x66
 8007b2c:	f000 feea 	bl	8008904 <__assert_func>
 8007b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b34:	6006      	str	r6, [r0, #0]
 8007b36:	60c6      	str	r6, [r0, #12]
 8007b38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b3a:	68f3      	ldr	r3, [r6, #12]
 8007b3c:	b183      	cbz	r3, 8007b60 <_Balloc+0x50>
 8007b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b46:	b9b8      	cbnz	r0, 8007b78 <_Balloc+0x68>
 8007b48:	2101      	movs	r1, #1
 8007b4a:	fa01 f605 	lsl.w	r6, r1, r5
 8007b4e:	1d72      	adds	r2, r6, #5
 8007b50:	0092      	lsls	r2, r2, #2
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 fb60 	bl	8008218 <_calloc_r>
 8007b58:	b160      	cbz	r0, 8007b74 <_Balloc+0x64>
 8007b5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b5e:	e00e      	b.n	8007b7e <_Balloc+0x6e>
 8007b60:	2221      	movs	r2, #33	; 0x21
 8007b62:	2104      	movs	r1, #4
 8007b64:	4620      	mov	r0, r4
 8007b66:	f000 fb57 	bl	8008218 <_calloc_r>
 8007b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b6c:	60f0      	str	r0, [r6, #12]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e4      	bne.n	8007b3e <_Balloc+0x2e>
 8007b74:	2000      	movs	r0, #0
 8007b76:	bd70      	pop	{r4, r5, r6, pc}
 8007b78:	6802      	ldr	r2, [r0, #0]
 8007b7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b84:	e7f7      	b.n	8007b76 <_Balloc+0x66>
 8007b86:	bf00      	nop
 8007b88:	08008e8d 	.word	0x08008e8d
 8007b8c:	08008f70 	.word	0x08008f70

08007b90 <_Bfree>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b94:	4605      	mov	r5, r0
 8007b96:	460c      	mov	r4, r1
 8007b98:	b976      	cbnz	r6, 8007bb8 <_Bfree+0x28>
 8007b9a:	2010      	movs	r0, #16
 8007b9c:	f7ff ffb0 	bl	8007b00 <malloc>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	6268      	str	r0, [r5, #36]	; 0x24
 8007ba4:	b920      	cbnz	r0, 8007bb0 <_Bfree+0x20>
 8007ba6:	4b09      	ldr	r3, [pc, #36]	; (8007bcc <_Bfree+0x3c>)
 8007ba8:	4809      	ldr	r0, [pc, #36]	; (8007bd0 <_Bfree+0x40>)
 8007baa:	218a      	movs	r1, #138	; 0x8a
 8007bac:	f000 feaa 	bl	8008904 <__assert_func>
 8007bb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bb4:	6006      	str	r6, [r0, #0]
 8007bb6:	60c6      	str	r6, [r0, #12]
 8007bb8:	b13c      	cbz	r4, 8007bca <_Bfree+0x3a>
 8007bba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007bbc:	6862      	ldr	r2, [r4, #4]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bc4:	6021      	str	r1, [r4, #0]
 8007bc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007bca:	bd70      	pop	{r4, r5, r6, pc}
 8007bcc:	08008e8d 	.word	0x08008e8d
 8007bd0:	08008f70 	.word	0x08008f70

08007bd4 <__multadd>:
 8007bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd8:	690d      	ldr	r5, [r1, #16]
 8007bda:	4607      	mov	r7, r0
 8007bdc:	460c      	mov	r4, r1
 8007bde:	461e      	mov	r6, r3
 8007be0:	f101 0c14 	add.w	ip, r1, #20
 8007be4:	2000      	movs	r0, #0
 8007be6:	f8dc 3000 	ldr.w	r3, [ip]
 8007bea:	b299      	uxth	r1, r3
 8007bec:	fb02 6101 	mla	r1, r2, r1, r6
 8007bf0:	0c1e      	lsrs	r6, r3, #16
 8007bf2:	0c0b      	lsrs	r3, r1, #16
 8007bf4:	fb02 3306 	mla	r3, r2, r6, r3
 8007bf8:	b289      	uxth	r1, r1
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c00:	4285      	cmp	r5, r0
 8007c02:	f84c 1b04 	str.w	r1, [ip], #4
 8007c06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c0a:	dcec      	bgt.n	8007be6 <__multadd+0x12>
 8007c0c:	b30e      	cbz	r6, 8007c52 <__multadd+0x7e>
 8007c0e:	68a3      	ldr	r3, [r4, #8]
 8007c10:	42ab      	cmp	r3, r5
 8007c12:	dc19      	bgt.n	8007c48 <__multadd+0x74>
 8007c14:	6861      	ldr	r1, [r4, #4]
 8007c16:	4638      	mov	r0, r7
 8007c18:	3101      	adds	r1, #1
 8007c1a:	f7ff ff79 	bl	8007b10 <_Balloc>
 8007c1e:	4680      	mov	r8, r0
 8007c20:	b928      	cbnz	r0, 8007c2e <__multadd+0x5a>
 8007c22:	4602      	mov	r2, r0
 8007c24:	4b0c      	ldr	r3, [pc, #48]	; (8007c58 <__multadd+0x84>)
 8007c26:	480d      	ldr	r0, [pc, #52]	; (8007c5c <__multadd+0x88>)
 8007c28:	21b5      	movs	r1, #181	; 0xb5
 8007c2a:	f000 fe6b 	bl	8008904 <__assert_func>
 8007c2e:	6922      	ldr	r2, [r4, #16]
 8007c30:	3202      	adds	r2, #2
 8007c32:	f104 010c 	add.w	r1, r4, #12
 8007c36:	0092      	lsls	r2, r2, #2
 8007c38:	300c      	adds	r0, #12
 8007c3a:	f7fe fb4f 	bl	80062dc <memcpy>
 8007c3e:	4621      	mov	r1, r4
 8007c40:	4638      	mov	r0, r7
 8007c42:	f7ff ffa5 	bl	8007b90 <_Bfree>
 8007c46:	4644      	mov	r4, r8
 8007c48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c4c:	3501      	adds	r5, #1
 8007c4e:	615e      	str	r6, [r3, #20]
 8007c50:	6125      	str	r5, [r4, #16]
 8007c52:	4620      	mov	r0, r4
 8007c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c58:	08008eff 	.word	0x08008eff
 8007c5c:	08008f70 	.word	0x08008f70

08007c60 <__hi0bits>:
 8007c60:	0c03      	lsrs	r3, r0, #16
 8007c62:	041b      	lsls	r3, r3, #16
 8007c64:	b9d3      	cbnz	r3, 8007c9c <__hi0bits+0x3c>
 8007c66:	0400      	lsls	r0, r0, #16
 8007c68:	2310      	movs	r3, #16
 8007c6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c6e:	bf04      	itt	eq
 8007c70:	0200      	lsleq	r0, r0, #8
 8007c72:	3308      	addeq	r3, #8
 8007c74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c78:	bf04      	itt	eq
 8007c7a:	0100      	lsleq	r0, r0, #4
 8007c7c:	3304      	addeq	r3, #4
 8007c7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c82:	bf04      	itt	eq
 8007c84:	0080      	lsleq	r0, r0, #2
 8007c86:	3302      	addeq	r3, #2
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	db05      	blt.n	8007c98 <__hi0bits+0x38>
 8007c8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c90:	f103 0301 	add.w	r3, r3, #1
 8007c94:	bf08      	it	eq
 8007c96:	2320      	moveq	r3, #32
 8007c98:	4618      	mov	r0, r3
 8007c9a:	4770      	bx	lr
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	e7e4      	b.n	8007c6a <__hi0bits+0xa>

08007ca0 <__lo0bits>:
 8007ca0:	6803      	ldr	r3, [r0, #0]
 8007ca2:	f013 0207 	ands.w	r2, r3, #7
 8007ca6:	4601      	mov	r1, r0
 8007ca8:	d00b      	beq.n	8007cc2 <__lo0bits+0x22>
 8007caa:	07da      	lsls	r2, r3, #31
 8007cac:	d423      	bmi.n	8007cf6 <__lo0bits+0x56>
 8007cae:	0798      	lsls	r0, r3, #30
 8007cb0:	bf49      	itett	mi
 8007cb2:	085b      	lsrmi	r3, r3, #1
 8007cb4:	089b      	lsrpl	r3, r3, #2
 8007cb6:	2001      	movmi	r0, #1
 8007cb8:	600b      	strmi	r3, [r1, #0]
 8007cba:	bf5c      	itt	pl
 8007cbc:	600b      	strpl	r3, [r1, #0]
 8007cbe:	2002      	movpl	r0, #2
 8007cc0:	4770      	bx	lr
 8007cc2:	b298      	uxth	r0, r3
 8007cc4:	b9a8      	cbnz	r0, 8007cf2 <__lo0bits+0x52>
 8007cc6:	0c1b      	lsrs	r3, r3, #16
 8007cc8:	2010      	movs	r0, #16
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	b90a      	cbnz	r2, 8007cd2 <__lo0bits+0x32>
 8007cce:	3008      	adds	r0, #8
 8007cd0:	0a1b      	lsrs	r3, r3, #8
 8007cd2:	071a      	lsls	r2, r3, #28
 8007cd4:	bf04      	itt	eq
 8007cd6:	091b      	lsreq	r3, r3, #4
 8007cd8:	3004      	addeq	r0, #4
 8007cda:	079a      	lsls	r2, r3, #30
 8007cdc:	bf04      	itt	eq
 8007cde:	089b      	lsreq	r3, r3, #2
 8007ce0:	3002      	addeq	r0, #2
 8007ce2:	07da      	lsls	r2, r3, #31
 8007ce4:	d403      	bmi.n	8007cee <__lo0bits+0x4e>
 8007ce6:	085b      	lsrs	r3, r3, #1
 8007ce8:	f100 0001 	add.w	r0, r0, #1
 8007cec:	d005      	beq.n	8007cfa <__lo0bits+0x5a>
 8007cee:	600b      	str	r3, [r1, #0]
 8007cf0:	4770      	bx	lr
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	e7e9      	b.n	8007cca <__lo0bits+0x2a>
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	4770      	bx	lr
 8007cfa:	2020      	movs	r0, #32
 8007cfc:	4770      	bx	lr
	...

08007d00 <__i2b>:
 8007d00:	b510      	push	{r4, lr}
 8007d02:	460c      	mov	r4, r1
 8007d04:	2101      	movs	r1, #1
 8007d06:	f7ff ff03 	bl	8007b10 <_Balloc>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	b928      	cbnz	r0, 8007d1a <__i2b+0x1a>
 8007d0e:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <__i2b+0x24>)
 8007d10:	4805      	ldr	r0, [pc, #20]	; (8007d28 <__i2b+0x28>)
 8007d12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007d16:	f000 fdf5 	bl	8008904 <__assert_func>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	6144      	str	r4, [r0, #20]
 8007d1e:	6103      	str	r3, [r0, #16]
 8007d20:	bd10      	pop	{r4, pc}
 8007d22:	bf00      	nop
 8007d24:	08008eff 	.word	0x08008eff
 8007d28:	08008f70 	.word	0x08008f70

08007d2c <__multiply>:
 8007d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d30:	4691      	mov	r9, r2
 8007d32:	690a      	ldr	r2, [r1, #16]
 8007d34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	bfb8      	it	lt
 8007d3c:	460b      	movlt	r3, r1
 8007d3e:	460c      	mov	r4, r1
 8007d40:	bfbc      	itt	lt
 8007d42:	464c      	movlt	r4, r9
 8007d44:	4699      	movlt	r9, r3
 8007d46:	6927      	ldr	r7, [r4, #16]
 8007d48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d4c:	68a3      	ldr	r3, [r4, #8]
 8007d4e:	6861      	ldr	r1, [r4, #4]
 8007d50:	eb07 060a 	add.w	r6, r7, sl
 8007d54:	42b3      	cmp	r3, r6
 8007d56:	b085      	sub	sp, #20
 8007d58:	bfb8      	it	lt
 8007d5a:	3101      	addlt	r1, #1
 8007d5c:	f7ff fed8 	bl	8007b10 <_Balloc>
 8007d60:	b930      	cbnz	r0, 8007d70 <__multiply+0x44>
 8007d62:	4602      	mov	r2, r0
 8007d64:	4b44      	ldr	r3, [pc, #272]	; (8007e78 <__multiply+0x14c>)
 8007d66:	4845      	ldr	r0, [pc, #276]	; (8007e7c <__multiply+0x150>)
 8007d68:	f240 115d 	movw	r1, #349	; 0x15d
 8007d6c:	f000 fdca 	bl	8008904 <__assert_func>
 8007d70:	f100 0514 	add.w	r5, r0, #20
 8007d74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d78:	462b      	mov	r3, r5
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	4543      	cmp	r3, r8
 8007d7e:	d321      	bcc.n	8007dc4 <__multiply+0x98>
 8007d80:	f104 0314 	add.w	r3, r4, #20
 8007d84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007d88:	f109 0314 	add.w	r3, r9, #20
 8007d8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007d90:	9202      	str	r2, [sp, #8]
 8007d92:	1b3a      	subs	r2, r7, r4
 8007d94:	3a15      	subs	r2, #21
 8007d96:	f022 0203 	bic.w	r2, r2, #3
 8007d9a:	3204      	adds	r2, #4
 8007d9c:	f104 0115 	add.w	r1, r4, #21
 8007da0:	428f      	cmp	r7, r1
 8007da2:	bf38      	it	cc
 8007da4:	2204      	movcc	r2, #4
 8007da6:	9201      	str	r2, [sp, #4]
 8007da8:	9a02      	ldr	r2, [sp, #8]
 8007daa:	9303      	str	r3, [sp, #12]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d80c      	bhi.n	8007dca <__multiply+0x9e>
 8007db0:	2e00      	cmp	r6, #0
 8007db2:	dd03      	ble.n	8007dbc <__multiply+0x90>
 8007db4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d05a      	beq.n	8007e72 <__multiply+0x146>
 8007dbc:	6106      	str	r6, [r0, #16]
 8007dbe:	b005      	add	sp, #20
 8007dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc4:	f843 2b04 	str.w	r2, [r3], #4
 8007dc8:	e7d8      	b.n	8007d7c <__multiply+0x50>
 8007dca:	f8b3 a000 	ldrh.w	sl, [r3]
 8007dce:	f1ba 0f00 	cmp.w	sl, #0
 8007dd2:	d024      	beq.n	8007e1e <__multiply+0xf2>
 8007dd4:	f104 0e14 	add.w	lr, r4, #20
 8007dd8:	46a9      	mov	r9, r5
 8007dda:	f04f 0c00 	mov.w	ip, #0
 8007dde:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007de2:	f8d9 1000 	ldr.w	r1, [r9]
 8007de6:	fa1f fb82 	uxth.w	fp, r2
 8007dea:	b289      	uxth	r1, r1
 8007dec:	fb0a 110b 	mla	r1, sl, fp, r1
 8007df0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007df4:	f8d9 2000 	ldr.w	r2, [r9]
 8007df8:	4461      	add	r1, ip
 8007dfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007dfe:	fb0a c20b 	mla	r2, sl, fp, ip
 8007e02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e06:	b289      	uxth	r1, r1
 8007e08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e0c:	4577      	cmp	r7, lr
 8007e0e:	f849 1b04 	str.w	r1, [r9], #4
 8007e12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e16:	d8e2      	bhi.n	8007dde <__multiply+0xb2>
 8007e18:	9a01      	ldr	r2, [sp, #4]
 8007e1a:	f845 c002 	str.w	ip, [r5, r2]
 8007e1e:	9a03      	ldr	r2, [sp, #12]
 8007e20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e24:	3304      	adds	r3, #4
 8007e26:	f1b9 0f00 	cmp.w	r9, #0
 8007e2a:	d020      	beq.n	8007e6e <__multiply+0x142>
 8007e2c:	6829      	ldr	r1, [r5, #0]
 8007e2e:	f104 0c14 	add.w	ip, r4, #20
 8007e32:	46ae      	mov	lr, r5
 8007e34:	f04f 0a00 	mov.w	sl, #0
 8007e38:	f8bc b000 	ldrh.w	fp, [ip]
 8007e3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e40:	fb09 220b 	mla	r2, r9, fp, r2
 8007e44:	4492      	add	sl, r2
 8007e46:	b289      	uxth	r1, r1
 8007e48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007e4c:	f84e 1b04 	str.w	r1, [lr], #4
 8007e50:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007e54:	f8be 1000 	ldrh.w	r1, [lr]
 8007e58:	0c12      	lsrs	r2, r2, #16
 8007e5a:	fb09 1102 	mla	r1, r9, r2, r1
 8007e5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007e62:	4567      	cmp	r7, ip
 8007e64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e68:	d8e6      	bhi.n	8007e38 <__multiply+0x10c>
 8007e6a:	9a01      	ldr	r2, [sp, #4]
 8007e6c:	50a9      	str	r1, [r5, r2]
 8007e6e:	3504      	adds	r5, #4
 8007e70:	e79a      	b.n	8007da8 <__multiply+0x7c>
 8007e72:	3e01      	subs	r6, #1
 8007e74:	e79c      	b.n	8007db0 <__multiply+0x84>
 8007e76:	bf00      	nop
 8007e78:	08008eff 	.word	0x08008eff
 8007e7c:	08008f70 	.word	0x08008f70

08007e80 <__pow5mult>:
 8007e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e84:	4615      	mov	r5, r2
 8007e86:	f012 0203 	ands.w	r2, r2, #3
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	460f      	mov	r7, r1
 8007e8e:	d007      	beq.n	8007ea0 <__pow5mult+0x20>
 8007e90:	4c25      	ldr	r4, [pc, #148]	; (8007f28 <__pow5mult+0xa8>)
 8007e92:	3a01      	subs	r2, #1
 8007e94:	2300      	movs	r3, #0
 8007e96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e9a:	f7ff fe9b 	bl	8007bd4 <__multadd>
 8007e9e:	4607      	mov	r7, r0
 8007ea0:	10ad      	asrs	r5, r5, #2
 8007ea2:	d03d      	beq.n	8007f20 <__pow5mult+0xa0>
 8007ea4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ea6:	b97c      	cbnz	r4, 8007ec8 <__pow5mult+0x48>
 8007ea8:	2010      	movs	r0, #16
 8007eaa:	f7ff fe29 	bl	8007b00 <malloc>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	6270      	str	r0, [r6, #36]	; 0x24
 8007eb2:	b928      	cbnz	r0, 8007ec0 <__pow5mult+0x40>
 8007eb4:	4b1d      	ldr	r3, [pc, #116]	; (8007f2c <__pow5mult+0xac>)
 8007eb6:	481e      	ldr	r0, [pc, #120]	; (8007f30 <__pow5mult+0xb0>)
 8007eb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007ebc:	f000 fd22 	bl	8008904 <__assert_func>
 8007ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ec4:	6004      	str	r4, [r0, #0]
 8007ec6:	60c4      	str	r4, [r0, #12]
 8007ec8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007ecc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ed0:	b94c      	cbnz	r4, 8007ee6 <__pow5mult+0x66>
 8007ed2:	f240 2171 	movw	r1, #625	; 0x271
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	f7ff ff12 	bl	8007d00 <__i2b>
 8007edc:	2300      	movs	r3, #0
 8007ede:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	6003      	str	r3, [r0, #0]
 8007ee6:	f04f 0900 	mov.w	r9, #0
 8007eea:	07eb      	lsls	r3, r5, #31
 8007eec:	d50a      	bpl.n	8007f04 <__pow5mult+0x84>
 8007eee:	4639      	mov	r1, r7
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f7ff ff1a 	bl	8007d2c <__multiply>
 8007ef8:	4639      	mov	r1, r7
 8007efa:	4680      	mov	r8, r0
 8007efc:	4630      	mov	r0, r6
 8007efe:	f7ff fe47 	bl	8007b90 <_Bfree>
 8007f02:	4647      	mov	r7, r8
 8007f04:	106d      	asrs	r5, r5, #1
 8007f06:	d00b      	beq.n	8007f20 <__pow5mult+0xa0>
 8007f08:	6820      	ldr	r0, [r4, #0]
 8007f0a:	b938      	cbnz	r0, 8007f1c <__pow5mult+0x9c>
 8007f0c:	4622      	mov	r2, r4
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4630      	mov	r0, r6
 8007f12:	f7ff ff0b 	bl	8007d2c <__multiply>
 8007f16:	6020      	str	r0, [r4, #0]
 8007f18:	f8c0 9000 	str.w	r9, [r0]
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	e7e4      	b.n	8007eea <__pow5mult+0x6a>
 8007f20:	4638      	mov	r0, r7
 8007f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f26:	bf00      	nop
 8007f28:	080090c0 	.word	0x080090c0
 8007f2c:	08008e8d 	.word	0x08008e8d
 8007f30:	08008f70 	.word	0x08008f70

08007f34 <__lshift>:
 8007f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f38:	460c      	mov	r4, r1
 8007f3a:	6849      	ldr	r1, [r1, #4]
 8007f3c:	6923      	ldr	r3, [r4, #16]
 8007f3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f42:	68a3      	ldr	r3, [r4, #8]
 8007f44:	4607      	mov	r7, r0
 8007f46:	4691      	mov	r9, r2
 8007f48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f4c:	f108 0601 	add.w	r6, r8, #1
 8007f50:	42b3      	cmp	r3, r6
 8007f52:	db0b      	blt.n	8007f6c <__lshift+0x38>
 8007f54:	4638      	mov	r0, r7
 8007f56:	f7ff fddb 	bl	8007b10 <_Balloc>
 8007f5a:	4605      	mov	r5, r0
 8007f5c:	b948      	cbnz	r0, 8007f72 <__lshift+0x3e>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	4b2a      	ldr	r3, [pc, #168]	; (800800c <__lshift+0xd8>)
 8007f62:	482b      	ldr	r0, [pc, #172]	; (8008010 <__lshift+0xdc>)
 8007f64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f68:	f000 fccc 	bl	8008904 <__assert_func>
 8007f6c:	3101      	adds	r1, #1
 8007f6e:	005b      	lsls	r3, r3, #1
 8007f70:	e7ee      	b.n	8007f50 <__lshift+0x1c>
 8007f72:	2300      	movs	r3, #0
 8007f74:	f100 0114 	add.w	r1, r0, #20
 8007f78:	f100 0210 	add.w	r2, r0, #16
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	4553      	cmp	r3, sl
 8007f80:	db37      	blt.n	8007ff2 <__lshift+0xbe>
 8007f82:	6920      	ldr	r0, [r4, #16]
 8007f84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f88:	f104 0314 	add.w	r3, r4, #20
 8007f8c:	f019 091f 	ands.w	r9, r9, #31
 8007f90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007f98:	d02f      	beq.n	8007ffa <__lshift+0xc6>
 8007f9a:	f1c9 0e20 	rsb	lr, r9, #32
 8007f9e:	468a      	mov	sl, r1
 8007fa0:	f04f 0c00 	mov.w	ip, #0
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	fa02 f209 	lsl.w	r2, r2, r9
 8007faa:	ea42 020c 	orr.w	r2, r2, ip
 8007fae:	f84a 2b04 	str.w	r2, [sl], #4
 8007fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fb6:	4298      	cmp	r0, r3
 8007fb8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007fbc:	d8f2      	bhi.n	8007fa4 <__lshift+0x70>
 8007fbe:	1b03      	subs	r3, r0, r4
 8007fc0:	3b15      	subs	r3, #21
 8007fc2:	f023 0303 	bic.w	r3, r3, #3
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	f104 0215 	add.w	r2, r4, #21
 8007fcc:	4290      	cmp	r0, r2
 8007fce:	bf38      	it	cc
 8007fd0:	2304      	movcc	r3, #4
 8007fd2:	f841 c003 	str.w	ip, [r1, r3]
 8007fd6:	f1bc 0f00 	cmp.w	ip, #0
 8007fda:	d001      	beq.n	8007fe0 <__lshift+0xac>
 8007fdc:	f108 0602 	add.w	r6, r8, #2
 8007fe0:	3e01      	subs	r6, #1
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	612e      	str	r6, [r5, #16]
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	f7ff fdd2 	bl	8007b90 <_Bfree>
 8007fec:	4628      	mov	r0, r5
 8007fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	e7c1      	b.n	8007f7e <__lshift+0x4a>
 8007ffa:	3904      	subs	r1, #4
 8007ffc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008000:	f841 2f04 	str.w	r2, [r1, #4]!
 8008004:	4298      	cmp	r0, r3
 8008006:	d8f9      	bhi.n	8007ffc <__lshift+0xc8>
 8008008:	e7ea      	b.n	8007fe0 <__lshift+0xac>
 800800a:	bf00      	nop
 800800c:	08008eff 	.word	0x08008eff
 8008010:	08008f70 	.word	0x08008f70

08008014 <__mcmp>:
 8008014:	b530      	push	{r4, r5, lr}
 8008016:	6902      	ldr	r2, [r0, #16]
 8008018:	690c      	ldr	r4, [r1, #16]
 800801a:	1b12      	subs	r2, r2, r4
 800801c:	d10e      	bne.n	800803c <__mcmp+0x28>
 800801e:	f100 0314 	add.w	r3, r0, #20
 8008022:	3114      	adds	r1, #20
 8008024:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008028:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800802c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008030:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008034:	42a5      	cmp	r5, r4
 8008036:	d003      	beq.n	8008040 <__mcmp+0x2c>
 8008038:	d305      	bcc.n	8008046 <__mcmp+0x32>
 800803a:	2201      	movs	r2, #1
 800803c:	4610      	mov	r0, r2
 800803e:	bd30      	pop	{r4, r5, pc}
 8008040:	4283      	cmp	r3, r0
 8008042:	d3f3      	bcc.n	800802c <__mcmp+0x18>
 8008044:	e7fa      	b.n	800803c <__mcmp+0x28>
 8008046:	f04f 32ff 	mov.w	r2, #4294967295
 800804a:	e7f7      	b.n	800803c <__mcmp+0x28>

0800804c <__mdiff>:
 800804c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008050:	460c      	mov	r4, r1
 8008052:	4606      	mov	r6, r0
 8008054:	4611      	mov	r1, r2
 8008056:	4620      	mov	r0, r4
 8008058:	4690      	mov	r8, r2
 800805a:	f7ff ffdb 	bl	8008014 <__mcmp>
 800805e:	1e05      	subs	r5, r0, #0
 8008060:	d110      	bne.n	8008084 <__mdiff+0x38>
 8008062:	4629      	mov	r1, r5
 8008064:	4630      	mov	r0, r6
 8008066:	f7ff fd53 	bl	8007b10 <_Balloc>
 800806a:	b930      	cbnz	r0, 800807a <__mdiff+0x2e>
 800806c:	4b3a      	ldr	r3, [pc, #232]	; (8008158 <__mdiff+0x10c>)
 800806e:	4602      	mov	r2, r0
 8008070:	f240 2132 	movw	r1, #562	; 0x232
 8008074:	4839      	ldr	r0, [pc, #228]	; (800815c <__mdiff+0x110>)
 8008076:	f000 fc45 	bl	8008904 <__assert_func>
 800807a:	2301      	movs	r3, #1
 800807c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008080:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008084:	bfa4      	itt	ge
 8008086:	4643      	movge	r3, r8
 8008088:	46a0      	movge	r8, r4
 800808a:	4630      	mov	r0, r6
 800808c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008090:	bfa6      	itte	ge
 8008092:	461c      	movge	r4, r3
 8008094:	2500      	movge	r5, #0
 8008096:	2501      	movlt	r5, #1
 8008098:	f7ff fd3a 	bl	8007b10 <_Balloc>
 800809c:	b920      	cbnz	r0, 80080a8 <__mdiff+0x5c>
 800809e:	4b2e      	ldr	r3, [pc, #184]	; (8008158 <__mdiff+0x10c>)
 80080a0:	4602      	mov	r2, r0
 80080a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80080a6:	e7e5      	b.n	8008074 <__mdiff+0x28>
 80080a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80080ac:	6926      	ldr	r6, [r4, #16]
 80080ae:	60c5      	str	r5, [r0, #12]
 80080b0:	f104 0914 	add.w	r9, r4, #20
 80080b4:	f108 0514 	add.w	r5, r8, #20
 80080b8:	f100 0e14 	add.w	lr, r0, #20
 80080bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80080c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80080c4:	f108 0210 	add.w	r2, r8, #16
 80080c8:	46f2      	mov	sl, lr
 80080ca:	2100      	movs	r1, #0
 80080cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80080d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80080d4:	fa1f f883 	uxth.w	r8, r3
 80080d8:	fa11 f18b 	uxtah	r1, r1, fp
 80080dc:	0c1b      	lsrs	r3, r3, #16
 80080de:	eba1 0808 	sub.w	r8, r1, r8
 80080e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80080e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80080ea:	fa1f f888 	uxth.w	r8, r8
 80080ee:	1419      	asrs	r1, r3, #16
 80080f0:	454e      	cmp	r6, r9
 80080f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80080f6:	f84a 3b04 	str.w	r3, [sl], #4
 80080fa:	d8e7      	bhi.n	80080cc <__mdiff+0x80>
 80080fc:	1b33      	subs	r3, r6, r4
 80080fe:	3b15      	subs	r3, #21
 8008100:	f023 0303 	bic.w	r3, r3, #3
 8008104:	3304      	adds	r3, #4
 8008106:	3415      	adds	r4, #21
 8008108:	42a6      	cmp	r6, r4
 800810a:	bf38      	it	cc
 800810c:	2304      	movcc	r3, #4
 800810e:	441d      	add	r5, r3
 8008110:	4473      	add	r3, lr
 8008112:	469e      	mov	lr, r3
 8008114:	462e      	mov	r6, r5
 8008116:	4566      	cmp	r6, ip
 8008118:	d30e      	bcc.n	8008138 <__mdiff+0xec>
 800811a:	f10c 0203 	add.w	r2, ip, #3
 800811e:	1b52      	subs	r2, r2, r5
 8008120:	f022 0203 	bic.w	r2, r2, #3
 8008124:	3d03      	subs	r5, #3
 8008126:	45ac      	cmp	ip, r5
 8008128:	bf38      	it	cc
 800812a:	2200      	movcc	r2, #0
 800812c:	441a      	add	r2, r3
 800812e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008132:	b17b      	cbz	r3, 8008154 <__mdiff+0x108>
 8008134:	6107      	str	r7, [r0, #16]
 8008136:	e7a3      	b.n	8008080 <__mdiff+0x34>
 8008138:	f856 8b04 	ldr.w	r8, [r6], #4
 800813c:	fa11 f288 	uxtah	r2, r1, r8
 8008140:	1414      	asrs	r4, r2, #16
 8008142:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008146:	b292      	uxth	r2, r2
 8008148:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800814c:	f84e 2b04 	str.w	r2, [lr], #4
 8008150:	1421      	asrs	r1, r4, #16
 8008152:	e7e0      	b.n	8008116 <__mdiff+0xca>
 8008154:	3f01      	subs	r7, #1
 8008156:	e7ea      	b.n	800812e <__mdiff+0xe2>
 8008158:	08008eff 	.word	0x08008eff
 800815c:	08008f70 	.word	0x08008f70

08008160 <__d2b>:
 8008160:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008164:	4689      	mov	r9, r1
 8008166:	2101      	movs	r1, #1
 8008168:	ec57 6b10 	vmov	r6, r7, d0
 800816c:	4690      	mov	r8, r2
 800816e:	f7ff fccf 	bl	8007b10 <_Balloc>
 8008172:	4604      	mov	r4, r0
 8008174:	b930      	cbnz	r0, 8008184 <__d2b+0x24>
 8008176:	4602      	mov	r2, r0
 8008178:	4b25      	ldr	r3, [pc, #148]	; (8008210 <__d2b+0xb0>)
 800817a:	4826      	ldr	r0, [pc, #152]	; (8008214 <__d2b+0xb4>)
 800817c:	f240 310a 	movw	r1, #778	; 0x30a
 8008180:	f000 fbc0 	bl	8008904 <__assert_func>
 8008184:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008188:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800818c:	bb35      	cbnz	r5, 80081dc <__d2b+0x7c>
 800818e:	2e00      	cmp	r6, #0
 8008190:	9301      	str	r3, [sp, #4]
 8008192:	d028      	beq.n	80081e6 <__d2b+0x86>
 8008194:	4668      	mov	r0, sp
 8008196:	9600      	str	r6, [sp, #0]
 8008198:	f7ff fd82 	bl	8007ca0 <__lo0bits>
 800819c:	9900      	ldr	r1, [sp, #0]
 800819e:	b300      	cbz	r0, 80081e2 <__d2b+0x82>
 80081a0:	9a01      	ldr	r2, [sp, #4]
 80081a2:	f1c0 0320 	rsb	r3, r0, #32
 80081a6:	fa02 f303 	lsl.w	r3, r2, r3
 80081aa:	430b      	orrs	r3, r1
 80081ac:	40c2      	lsrs	r2, r0
 80081ae:	6163      	str	r3, [r4, #20]
 80081b0:	9201      	str	r2, [sp, #4]
 80081b2:	9b01      	ldr	r3, [sp, #4]
 80081b4:	61a3      	str	r3, [r4, #24]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	bf14      	ite	ne
 80081ba:	2202      	movne	r2, #2
 80081bc:	2201      	moveq	r2, #1
 80081be:	6122      	str	r2, [r4, #16]
 80081c0:	b1d5      	cbz	r5, 80081f8 <__d2b+0x98>
 80081c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80081c6:	4405      	add	r5, r0
 80081c8:	f8c9 5000 	str.w	r5, [r9]
 80081cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081d0:	f8c8 0000 	str.w	r0, [r8]
 80081d4:	4620      	mov	r0, r4
 80081d6:	b003      	add	sp, #12
 80081d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081e0:	e7d5      	b.n	800818e <__d2b+0x2e>
 80081e2:	6161      	str	r1, [r4, #20]
 80081e4:	e7e5      	b.n	80081b2 <__d2b+0x52>
 80081e6:	a801      	add	r0, sp, #4
 80081e8:	f7ff fd5a 	bl	8007ca0 <__lo0bits>
 80081ec:	9b01      	ldr	r3, [sp, #4]
 80081ee:	6163      	str	r3, [r4, #20]
 80081f0:	2201      	movs	r2, #1
 80081f2:	6122      	str	r2, [r4, #16]
 80081f4:	3020      	adds	r0, #32
 80081f6:	e7e3      	b.n	80081c0 <__d2b+0x60>
 80081f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008200:	f8c9 0000 	str.w	r0, [r9]
 8008204:	6918      	ldr	r0, [r3, #16]
 8008206:	f7ff fd2b 	bl	8007c60 <__hi0bits>
 800820a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800820e:	e7df      	b.n	80081d0 <__d2b+0x70>
 8008210:	08008eff 	.word	0x08008eff
 8008214:	08008f70 	.word	0x08008f70

08008218 <_calloc_r>:
 8008218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800821a:	fba1 2402 	umull	r2, r4, r1, r2
 800821e:	b94c      	cbnz	r4, 8008234 <_calloc_r+0x1c>
 8008220:	4611      	mov	r1, r2
 8008222:	9201      	str	r2, [sp, #4]
 8008224:	f000 f87a 	bl	800831c <_malloc_r>
 8008228:	9a01      	ldr	r2, [sp, #4]
 800822a:	4605      	mov	r5, r0
 800822c:	b930      	cbnz	r0, 800823c <_calloc_r+0x24>
 800822e:	4628      	mov	r0, r5
 8008230:	b003      	add	sp, #12
 8008232:	bd30      	pop	{r4, r5, pc}
 8008234:	220c      	movs	r2, #12
 8008236:	6002      	str	r2, [r0, #0]
 8008238:	2500      	movs	r5, #0
 800823a:	e7f8      	b.n	800822e <_calloc_r+0x16>
 800823c:	4621      	mov	r1, r4
 800823e:	f7fe f85b 	bl	80062f8 <memset>
 8008242:	e7f4      	b.n	800822e <_calloc_r+0x16>

08008244 <_free_r>:
 8008244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008246:	2900      	cmp	r1, #0
 8008248:	d044      	beq.n	80082d4 <_free_r+0x90>
 800824a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800824e:	9001      	str	r0, [sp, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	f1a1 0404 	sub.w	r4, r1, #4
 8008256:	bfb8      	it	lt
 8008258:	18e4      	addlt	r4, r4, r3
 800825a:	f000 fcdf 	bl	8008c1c <__malloc_lock>
 800825e:	4a1e      	ldr	r2, [pc, #120]	; (80082d8 <_free_r+0x94>)
 8008260:	9801      	ldr	r0, [sp, #4]
 8008262:	6813      	ldr	r3, [r2, #0]
 8008264:	b933      	cbnz	r3, 8008274 <_free_r+0x30>
 8008266:	6063      	str	r3, [r4, #4]
 8008268:	6014      	str	r4, [r2, #0]
 800826a:	b003      	add	sp, #12
 800826c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008270:	f000 bcda 	b.w	8008c28 <__malloc_unlock>
 8008274:	42a3      	cmp	r3, r4
 8008276:	d908      	bls.n	800828a <_free_r+0x46>
 8008278:	6825      	ldr	r5, [r4, #0]
 800827a:	1961      	adds	r1, r4, r5
 800827c:	428b      	cmp	r3, r1
 800827e:	bf01      	itttt	eq
 8008280:	6819      	ldreq	r1, [r3, #0]
 8008282:	685b      	ldreq	r3, [r3, #4]
 8008284:	1949      	addeq	r1, r1, r5
 8008286:	6021      	streq	r1, [r4, #0]
 8008288:	e7ed      	b.n	8008266 <_free_r+0x22>
 800828a:	461a      	mov	r2, r3
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	b10b      	cbz	r3, 8008294 <_free_r+0x50>
 8008290:	42a3      	cmp	r3, r4
 8008292:	d9fa      	bls.n	800828a <_free_r+0x46>
 8008294:	6811      	ldr	r1, [r2, #0]
 8008296:	1855      	adds	r5, r2, r1
 8008298:	42a5      	cmp	r5, r4
 800829a:	d10b      	bne.n	80082b4 <_free_r+0x70>
 800829c:	6824      	ldr	r4, [r4, #0]
 800829e:	4421      	add	r1, r4
 80082a0:	1854      	adds	r4, r2, r1
 80082a2:	42a3      	cmp	r3, r4
 80082a4:	6011      	str	r1, [r2, #0]
 80082a6:	d1e0      	bne.n	800826a <_free_r+0x26>
 80082a8:	681c      	ldr	r4, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	6053      	str	r3, [r2, #4]
 80082ae:	4421      	add	r1, r4
 80082b0:	6011      	str	r1, [r2, #0]
 80082b2:	e7da      	b.n	800826a <_free_r+0x26>
 80082b4:	d902      	bls.n	80082bc <_free_r+0x78>
 80082b6:	230c      	movs	r3, #12
 80082b8:	6003      	str	r3, [r0, #0]
 80082ba:	e7d6      	b.n	800826a <_free_r+0x26>
 80082bc:	6825      	ldr	r5, [r4, #0]
 80082be:	1961      	adds	r1, r4, r5
 80082c0:	428b      	cmp	r3, r1
 80082c2:	bf04      	itt	eq
 80082c4:	6819      	ldreq	r1, [r3, #0]
 80082c6:	685b      	ldreq	r3, [r3, #4]
 80082c8:	6063      	str	r3, [r4, #4]
 80082ca:	bf04      	itt	eq
 80082cc:	1949      	addeq	r1, r1, r5
 80082ce:	6021      	streq	r1, [r4, #0]
 80082d0:	6054      	str	r4, [r2, #4]
 80082d2:	e7ca      	b.n	800826a <_free_r+0x26>
 80082d4:	b003      	add	sp, #12
 80082d6:	bd30      	pop	{r4, r5, pc}
 80082d8:	20000524 	.word	0x20000524

080082dc <sbrk_aligned>:
 80082dc:	b570      	push	{r4, r5, r6, lr}
 80082de:	4e0e      	ldr	r6, [pc, #56]	; (8008318 <sbrk_aligned+0x3c>)
 80082e0:	460c      	mov	r4, r1
 80082e2:	6831      	ldr	r1, [r6, #0]
 80082e4:	4605      	mov	r5, r0
 80082e6:	b911      	cbnz	r1, 80082ee <sbrk_aligned+0x12>
 80082e8:	f000 f9e6 	bl	80086b8 <_sbrk_r>
 80082ec:	6030      	str	r0, [r6, #0]
 80082ee:	4621      	mov	r1, r4
 80082f0:	4628      	mov	r0, r5
 80082f2:	f000 f9e1 	bl	80086b8 <_sbrk_r>
 80082f6:	1c43      	adds	r3, r0, #1
 80082f8:	d00a      	beq.n	8008310 <sbrk_aligned+0x34>
 80082fa:	1cc4      	adds	r4, r0, #3
 80082fc:	f024 0403 	bic.w	r4, r4, #3
 8008300:	42a0      	cmp	r0, r4
 8008302:	d007      	beq.n	8008314 <sbrk_aligned+0x38>
 8008304:	1a21      	subs	r1, r4, r0
 8008306:	4628      	mov	r0, r5
 8008308:	f000 f9d6 	bl	80086b8 <_sbrk_r>
 800830c:	3001      	adds	r0, #1
 800830e:	d101      	bne.n	8008314 <sbrk_aligned+0x38>
 8008310:	f04f 34ff 	mov.w	r4, #4294967295
 8008314:	4620      	mov	r0, r4
 8008316:	bd70      	pop	{r4, r5, r6, pc}
 8008318:	20000528 	.word	0x20000528

0800831c <_malloc_r>:
 800831c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008320:	1ccd      	adds	r5, r1, #3
 8008322:	f025 0503 	bic.w	r5, r5, #3
 8008326:	3508      	adds	r5, #8
 8008328:	2d0c      	cmp	r5, #12
 800832a:	bf38      	it	cc
 800832c:	250c      	movcc	r5, #12
 800832e:	2d00      	cmp	r5, #0
 8008330:	4607      	mov	r7, r0
 8008332:	db01      	blt.n	8008338 <_malloc_r+0x1c>
 8008334:	42a9      	cmp	r1, r5
 8008336:	d905      	bls.n	8008344 <_malloc_r+0x28>
 8008338:	230c      	movs	r3, #12
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	2600      	movs	r6, #0
 800833e:	4630      	mov	r0, r6
 8008340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008344:	4e2e      	ldr	r6, [pc, #184]	; (8008400 <_malloc_r+0xe4>)
 8008346:	f000 fc69 	bl	8008c1c <__malloc_lock>
 800834a:	6833      	ldr	r3, [r6, #0]
 800834c:	461c      	mov	r4, r3
 800834e:	bb34      	cbnz	r4, 800839e <_malloc_r+0x82>
 8008350:	4629      	mov	r1, r5
 8008352:	4638      	mov	r0, r7
 8008354:	f7ff ffc2 	bl	80082dc <sbrk_aligned>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	4604      	mov	r4, r0
 800835c:	d14d      	bne.n	80083fa <_malloc_r+0xde>
 800835e:	6834      	ldr	r4, [r6, #0]
 8008360:	4626      	mov	r6, r4
 8008362:	2e00      	cmp	r6, #0
 8008364:	d140      	bne.n	80083e8 <_malloc_r+0xcc>
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	4631      	mov	r1, r6
 800836a:	4638      	mov	r0, r7
 800836c:	eb04 0803 	add.w	r8, r4, r3
 8008370:	f000 f9a2 	bl	80086b8 <_sbrk_r>
 8008374:	4580      	cmp	r8, r0
 8008376:	d13a      	bne.n	80083ee <_malloc_r+0xd2>
 8008378:	6821      	ldr	r1, [r4, #0]
 800837a:	3503      	adds	r5, #3
 800837c:	1a6d      	subs	r5, r5, r1
 800837e:	f025 0503 	bic.w	r5, r5, #3
 8008382:	3508      	adds	r5, #8
 8008384:	2d0c      	cmp	r5, #12
 8008386:	bf38      	it	cc
 8008388:	250c      	movcc	r5, #12
 800838a:	4629      	mov	r1, r5
 800838c:	4638      	mov	r0, r7
 800838e:	f7ff ffa5 	bl	80082dc <sbrk_aligned>
 8008392:	3001      	adds	r0, #1
 8008394:	d02b      	beq.n	80083ee <_malloc_r+0xd2>
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	442b      	add	r3, r5
 800839a:	6023      	str	r3, [r4, #0]
 800839c:	e00e      	b.n	80083bc <_malloc_r+0xa0>
 800839e:	6822      	ldr	r2, [r4, #0]
 80083a0:	1b52      	subs	r2, r2, r5
 80083a2:	d41e      	bmi.n	80083e2 <_malloc_r+0xc6>
 80083a4:	2a0b      	cmp	r2, #11
 80083a6:	d916      	bls.n	80083d6 <_malloc_r+0xba>
 80083a8:	1961      	adds	r1, r4, r5
 80083aa:	42a3      	cmp	r3, r4
 80083ac:	6025      	str	r5, [r4, #0]
 80083ae:	bf18      	it	ne
 80083b0:	6059      	strne	r1, [r3, #4]
 80083b2:	6863      	ldr	r3, [r4, #4]
 80083b4:	bf08      	it	eq
 80083b6:	6031      	streq	r1, [r6, #0]
 80083b8:	5162      	str	r2, [r4, r5]
 80083ba:	604b      	str	r3, [r1, #4]
 80083bc:	4638      	mov	r0, r7
 80083be:	f104 060b 	add.w	r6, r4, #11
 80083c2:	f000 fc31 	bl	8008c28 <__malloc_unlock>
 80083c6:	f026 0607 	bic.w	r6, r6, #7
 80083ca:	1d23      	adds	r3, r4, #4
 80083cc:	1af2      	subs	r2, r6, r3
 80083ce:	d0b6      	beq.n	800833e <_malloc_r+0x22>
 80083d0:	1b9b      	subs	r3, r3, r6
 80083d2:	50a3      	str	r3, [r4, r2]
 80083d4:	e7b3      	b.n	800833e <_malloc_r+0x22>
 80083d6:	6862      	ldr	r2, [r4, #4]
 80083d8:	42a3      	cmp	r3, r4
 80083da:	bf0c      	ite	eq
 80083dc:	6032      	streq	r2, [r6, #0]
 80083de:	605a      	strne	r2, [r3, #4]
 80083e0:	e7ec      	b.n	80083bc <_malloc_r+0xa0>
 80083e2:	4623      	mov	r3, r4
 80083e4:	6864      	ldr	r4, [r4, #4]
 80083e6:	e7b2      	b.n	800834e <_malloc_r+0x32>
 80083e8:	4634      	mov	r4, r6
 80083ea:	6876      	ldr	r6, [r6, #4]
 80083ec:	e7b9      	b.n	8008362 <_malloc_r+0x46>
 80083ee:	230c      	movs	r3, #12
 80083f0:	603b      	str	r3, [r7, #0]
 80083f2:	4638      	mov	r0, r7
 80083f4:	f000 fc18 	bl	8008c28 <__malloc_unlock>
 80083f8:	e7a1      	b.n	800833e <_malloc_r+0x22>
 80083fa:	6025      	str	r5, [r4, #0]
 80083fc:	e7de      	b.n	80083bc <_malloc_r+0xa0>
 80083fe:	bf00      	nop
 8008400:	20000524 	.word	0x20000524

08008404 <__sfputc_r>:
 8008404:	6893      	ldr	r3, [r2, #8]
 8008406:	3b01      	subs	r3, #1
 8008408:	2b00      	cmp	r3, #0
 800840a:	b410      	push	{r4}
 800840c:	6093      	str	r3, [r2, #8]
 800840e:	da08      	bge.n	8008422 <__sfputc_r+0x1e>
 8008410:	6994      	ldr	r4, [r2, #24]
 8008412:	42a3      	cmp	r3, r4
 8008414:	db01      	blt.n	800841a <__sfputc_r+0x16>
 8008416:	290a      	cmp	r1, #10
 8008418:	d103      	bne.n	8008422 <__sfputc_r+0x1e>
 800841a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800841e:	f000 b99f 	b.w	8008760 <__swbuf_r>
 8008422:	6813      	ldr	r3, [r2, #0]
 8008424:	1c58      	adds	r0, r3, #1
 8008426:	6010      	str	r0, [r2, #0]
 8008428:	7019      	strb	r1, [r3, #0]
 800842a:	4608      	mov	r0, r1
 800842c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008430:	4770      	bx	lr

08008432 <__sfputs_r>:
 8008432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008434:	4606      	mov	r6, r0
 8008436:	460f      	mov	r7, r1
 8008438:	4614      	mov	r4, r2
 800843a:	18d5      	adds	r5, r2, r3
 800843c:	42ac      	cmp	r4, r5
 800843e:	d101      	bne.n	8008444 <__sfputs_r+0x12>
 8008440:	2000      	movs	r0, #0
 8008442:	e007      	b.n	8008454 <__sfputs_r+0x22>
 8008444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008448:	463a      	mov	r2, r7
 800844a:	4630      	mov	r0, r6
 800844c:	f7ff ffda 	bl	8008404 <__sfputc_r>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d1f3      	bne.n	800843c <__sfputs_r+0xa>
 8008454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008458 <_vfiprintf_r>:
 8008458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845c:	460d      	mov	r5, r1
 800845e:	b09d      	sub	sp, #116	; 0x74
 8008460:	4614      	mov	r4, r2
 8008462:	4698      	mov	r8, r3
 8008464:	4606      	mov	r6, r0
 8008466:	b118      	cbz	r0, 8008470 <_vfiprintf_r+0x18>
 8008468:	6983      	ldr	r3, [r0, #24]
 800846a:	b90b      	cbnz	r3, 8008470 <_vfiprintf_r+0x18>
 800846c:	f7ff faa2 	bl	80079b4 <__sinit>
 8008470:	4b89      	ldr	r3, [pc, #548]	; (8008698 <_vfiprintf_r+0x240>)
 8008472:	429d      	cmp	r5, r3
 8008474:	d11b      	bne.n	80084ae <_vfiprintf_r+0x56>
 8008476:	6875      	ldr	r5, [r6, #4]
 8008478:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800847a:	07d9      	lsls	r1, r3, #31
 800847c:	d405      	bmi.n	800848a <_vfiprintf_r+0x32>
 800847e:	89ab      	ldrh	r3, [r5, #12]
 8008480:	059a      	lsls	r2, r3, #22
 8008482:	d402      	bmi.n	800848a <_vfiprintf_r+0x32>
 8008484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008486:	f7ff fb38 	bl	8007afa <__retarget_lock_acquire_recursive>
 800848a:	89ab      	ldrh	r3, [r5, #12]
 800848c:	071b      	lsls	r3, r3, #28
 800848e:	d501      	bpl.n	8008494 <_vfiprintf_r+0x3c>
 8008490:	692b      	ldr	r3, [r5, #16]
 8008492:	b9eb      	cbnz	r3, 80084d0 <_vfiprintf_r+0x78>
 8008494:	4629      	mov	r1, r5
 8008496:	4630      	mov	r0, r6
 8008498:	f000 f9c6 	bl	8008828 <__swsetup_r>
 800849c:	b1c0      	cbz	r0, 80084d0 <_vfiprintf_r+0x78>
 800849e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084a0:	07dc      	lsls	r4, r3, #31
 80084a2:	d50e      	bpl.n	80084c2 <_vfiprintf_r+0x6a>
 80084a4:	f04f 30ff 	mov.w	r0, #4294967295
 80084a8:	b01d      	add	sp, #116	; 0x74
 80084aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ae:	4b7b      	ldr	r3, [pc, #492]	; (800869c <_vfiprintf_r+0x244>)
 80084b0:	429d      	cmp	r5, r3
 80084b2:	d101      	bne.n	80084b8 <_vfiprintf_r+0x60>
 80084b4:	68b5      	ldr	r5, [r6, #8]
 80084b6:	e7df      	b.n	8008478 <_vfiprintf_r+0x20>
 80084b8:	4b79      	ldr	r3, [pc, #484]	; (80086a0 <_vfiprintf_r+0x248>)
 80084ba:	429d      	cmp	r5, r3
 80084bc:	bf08      	it	eq
 80084be:	68f5      	ldreq	r5, [r6, #12]
 80084c0:	e7da      	b.n	8008478 <_vfiprintf_r+0x20>
 80084c2:	89ab      	ldrh	r3, [r5, #12]
 80084c4:	0598      	lsls	r0, r3, #22
 80084c6:	d4ed      	bmi.n	80084a4 <_vfiprintf_r+0x4c>
 80084c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ca:	f7ff fb17 	bl	8007afc <__retarget_lock_release_recursive>
 80084ce:	e7e9      	b.n	80084a4 <_vfiprintf_r+0x4c>
 80084d0:	2300      	movs	r3, #0
 80084d2:	9309      	str	r3, [sp, #36]	; 0x24
 80084d4:	2320      	movs	r3, #32
 80084d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084da:	f8cd 800c 	str.w	r8, [sp, #12]
 80084de:	2330      	movs	r3, #48	; 0x30
 80084e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80086a4 <_vfiprintf_r+0x24c>
 80084e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084e8:	f04f 0901 	mov.w	r9, #1
 80084ec:	4623      	mov	r3, r4
 80084ee:	469a      	mov	sl, r3
 80084f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084f4:	b10a      	cbz	r2, 80084fa <_vfiprintf_r+0xa2>
 80084f6:	2a25      	cmp	r2, #37	; 0x25
 80084f8:	d1f9      	bne.n	80084ee <_vfiprintf_r+0x96>
 80084fa:	ebba 0b04 	subs.w	fp, sl, r4
 80084fe:	d00b      	beq.n	8008518 <_vfiprintf_r+0xc0>
 8008500:	465b      	mov	r3, fp
 8008502:	4622      	mov	r2, r4
 8008504:	4629      	mov	r1, r5
 8008506:	4630      	mov	r0, r6
 8008508:	f7ff ff93 	bl	8008432 <__sfputs_r>
 800850c:	3001      	adds	r0, #1
 800850e:	f000 80aa 	beq.w	8008666 <_vfiprintf_r+0x20e>
 8008512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008514:	445a      	add	r2, fp
 8008516:	9209      	str	r2, [sp, #36]	; 0x24
 8008518:	f89a 3000 	ldrb.w	r3, [sl]
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 80a2 	beq.w	8008666 <_vfiprintf_r+0x20e>
 8008522:	2300      	movs	r3, #0
 8008524:	f04f 32ff 	mov.w	r2, #4294967295
 8008528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800852c:	f10a 0a01 	add.w	sl, sl, #1
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	9307      	str	r3, [sp, #28]
 8008534:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008538:	931a      	str	r3, [sp, #104]	; 0x68
 800853a:	4654      	mov	r4, sl
 800853c:	2205      	movs	r2, #5
 800853e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008542:	4858      	ldr	r0, [pc, #352]	; (80086a4 <_vfiprintf_r+0x24c>)
 8008544:	f7f8 fb1c 	bl	8000b80 <memchr>
 8008548:	9a04      	ldr	r2, [sp, #16]
 800854a:	b9d8      	cbnz	r0, 8008584 <_vfiprintf_r+0x12c>
 800854c:	06d1      	lsls	r1, r2, #27
 800854e:	bf44      	itt	mi
 8008550:	2320      	movmi	r3, #32
 8008552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008556:	0713      	lsls	r3, r2, #28
 8008558:	bf44      	itt	mi
 800855a:	232b      	movmi	r3, #43	; 0x2b
 800855c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008560:	f89a 3000 	ldrb.w	r3, [sl]
 8008564:	2b2a      	cmp	r3, #42	; 0x2a
 8008566:	d015      	beq.n	8008594 <_vfiprintf_r+0x13c>
 8008568:	9a07      	ldr	r2, [sp, #28]
 800856a:	4654      	mov	r4, sl
 800856c:	2000      	movs	r0, #0
 800856e:	f04f 0c0a 	mov.w	ip, #10
 8008572:	4621      	mov	r1, r4
 8008574:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008578:	3b30      	subs	r3, #48	; 0x30
 800857a:	2b09      	cmp	r3, #9
 800857c:	d94e      	bls.n	800861c <_vfiprintf_r+0x1c4>
 800857e:	b1b0      	cbz	r0, 80085ae <_vfiprintf_r+0x156>
 8008580:	9207      	str	r2, [sp, #28]
 8008582:	e014      	b.n	80085ae <_vfiprintf_r+0x156>
 8008584:	eba0 0308 	sub.w	r3, r0, r8
 8008588:	fa09 f303 	lsl.w	r3, r9, r3
 800858c:	4313      	orrs	r3, r2
 800858e:	9304      	str	r3, [sp, #16]
 8008590:	46a2      	mov	sl, r4
 8008592:	e7d2      	b.n	800853a <_vfiprintf_r+0xe2>
 8008594:	9b03      	ldr	r3, [sp, #12]
 8008596:	1d19      	adds	r1, r3, #4
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	9103      	str	r1, [sp, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	bfbb      	ittet	lt
 80085a0:	425b      	neglt	r3, r3
 80085a2:	f042 0202 	orrlt.w	r2, r2, #2
 80085a6:	9307      	strge	r3, [sp, #28]
 80085a8:	9307      	strlt	r3, [sp, #28]
 80085aa:	bfb8      	it	lt
 80085ac:	9204      	strlt	r2, [sp, #16]
 80085ae:	7823      	ldrb	r3, [r4, #0]
 80085b0:	2b2e      	cmp	r3, #46	; 0x2e
 80085b2:	d10c      	bne.n	80085ce <_vfiprintf_r+0x176>
 80085b4:	7863      	ldrb	r3, [r4, #1]
 80085b6:	2b2a      	cmp	r3, #42	; 0x2a
 80085b8:	d135      	bne.n	8008626 <_vfiprintf_r+0x1ce>
 80085ba:	9b03      	ldr	r3, [sp, #12]
 80085bc:	1d1a      	adds	r2, r3, #4
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	9203      	str	r2, [sp, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	bfb8      	it	lt
 80085c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80085ca:	3402      	adds	r4, #2
 80085cc:	9305      	str	r3, [sp, #20]
 80085ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80086b4 <_vfiprintf_r+0x25c>
 80085d2:	7821      	ldrb	r1, [r4, #0]
 80085d4:	2203      	movs	r2, #3
 80085d6:	4650      	mov	r0, sl
 80085d8:	f7f8 fad2 	bl	8000b80 <memchr>
 80085dc:	b140      	cbz	r0, 80085f0 <_vfiprintf_r+0x198>
 80085de:	2340      	movs	r3, #64	; 0x40
 80085e0:	eba0 000a 	sub.w	r0, r0, sl
 80085e4:	fa03 f000 	lsl.w	r0, r3, r0
 80085e8:	9b04      	ldr	r3, [sp, #16]
 80085ea:	4303      	orrs	r3, r0
 80085ec:	3401      	adds	r4, #1
 80085ee:	9304      	str	r3, [sp, #16]
 80085f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f4:	482c      	ldr	r0, [pc, #176]	; (80086a8 <_vfiprintf_r+0x250>)
 80085f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085fa:	2206      	movs	r2, #6
 80085fc:	f7f8 fac0 	bl	8000b80 <memchr>
 8008600:	2800      	cmp	r0, #0
 8008602:	d03f      	beq.n	8008684 <_vfiprintf_r+0x22c>
 8008604:	4b29      	ldr	r3, [pc, #164]	; (80086ac <_vfiprintf_r+0x254>)
 8008606:	bb1b      	cbnz	r3, 8008650 <_vfiprintf_r+0x1f8>
 8008608:	9b03      	ldr	r3, [sp, #12]
 800860a:	3307      	adds	r3, #7
 800860c:	f023 0307 	bic.w	r3, r3, #7
 8008610:	3308      	adds	r3, #8
 8008612:	9303      	str	r3, [sp, #12]
 8008614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008616:	443b      	add	r3, r7
 8008618:	9309      	str	r3, [sp, #36]	; 0x24
 800861a:	e767      	b.n	80084ec <_vfiprintf_r+0x94>
 800861c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008620:	460c      	mov	r4, r1
 8008622:	2001      	movs	r0, #1
 8008624:	e7a5      	b.n	8008572 <_vfiprintf_r+0x11a>
 8008626:	2300      	movs	r3, #0
 8008628:	3401      	adds	r4, #1
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	4619      	mov	r1, r3
 800862e:	f04f 0c0a 	mov.w	ip, #10
 8008632:	4620      	mov	r0, r4
 8008634:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008638:	3a30      	subs	r2, #48	; 0x30
 800863a:	2a09      	cmp	r2, #9
 800863c:	d903      	bls.n	8008646 <_vfiprintf_r+0x1ee>
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0c5      	beq.n	80085ce <_vfiprintf_r+0x176>
 8008642:	9105      	str	r1, [sp, #20]
 8008644:	e7c3      	b.n	80085ce <_vfiprintf_r+0x176>
 8008646:	fb0c 2101 	mla	r1, ip, r1, r2
 800864a:	4604      	mov	r4, r0
 800864c:	2301      	movs	r3, #1
 800864e:	e7f0      	b.n	8008632 <_vfiprintf_r+0x1da>
 8008650:	ab03      	add	r3, sp, #12
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	462a      	mov	r2, r5
 8008656:	4b16      	ldr	r3, [pc, #88]	; (80086b0 <_vfiprintf_r+0x258>)
 8008658:	a904      	add	r1, sp, #16
 800865a:	4630      	mov	r0, r6
 800865c:	f7fd fef4 	bl	8006448 <_printf_float>
 8008660:	4607      	mov	r7, r0
 8008662:	1c78      	adds	r0, r7, #1
 8008664:	d1d6      	bne.n	8008614 <_vfiprintf_r+0x1bc>
 8008666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008668:	07d9      	lsls	r1, r3, #31
 800866a:	d405      	bmi.n	8008678 <_vfiprintf_r+0x220>
 800866c:	89ab      	ldrh	r3, [r5, #12]
 800866e:	059a      	lsls	r2, r3, #22
 8008670:	d402      	bmi.n	8008678 <_vfiprintf_r+0x220>
 8008672:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008674:	f7ff fa42 	bl	8007afc <__retarget_lock_release_recursive>
 8008678:	89ab      	ldrh	r3, [r5, #12]
 800867a:	065b      	lsls	r3, r3, #25
 800867c:	f53f af12 	bmi.w	80084a4 <_vfiprintf_r+0x4c>
 8008680:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008682:	e711      	b.n	80084a8 <_vfiprintf_r+0x50>
 8008684:	ab03      	add	r3, sp, #12
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	462a      	mov	r2, r5
 800868a:	4b09      	ldr	r3, [pc, #36]	; (80086b0 <_vfiprintf_r+0x258>)
 800868c:	a904      	add	r1, sp, #16
 800868e:	4630      	mov	r0, r6
 8008690:	f7fe f97e 	bl	8006990 <_printf_i>
 8008694:	e7e4      	b.n	8008660 <_vfiprintf_r+0x208>
 8008696:	bf00      	nop
 8008698:	08008f30 	.word	0x08008f30
 800869c:	08008f50 	.word	0x08008f50
 80086a0:	08008f10 	.word	0x08008f10
 80086a4:	080090cc 	.word	0x080090cc
 80086a8:	080090d6 	.word	0x080090d6
 80086ac:	08006449 	.word	0x08006449
 80086b0:	08008433 	.word	0x08008433
 80086b4:	080090d2 	.word	0x080090d2

080086b8 <_sbrk_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4d06      	ldr	r5, [pc, #24]	; (80086d4 <_sbrk_r+0x1c>)
 80086bc:	2300      	movs	r3, #0
 80086be:	4604      	mov	r4, r0
 80086c0:	4608      	mov	r0, r1
 80086c2:	602b      	str	r3, [r5, #0]
 80086c4:	f7f9 ff04 	bl	80024d0 <_sbrk>
 80086c8:	1c43      	adds	r3, r0, #1
 80086ca:	d102      	bne.n	80086d2 <_sbrk_r+0x1a>
 80086cc:	682b      	ldr	r3, [r5, #0]
 80086ce:	b103      	cbz	r3, 80086d2 <_sbrk_r+0x1a>
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	bd38      	pop	{r3, r4, r5, pc}
 80086d4:	2000052c 	.word	0x2000052c

080086d8 <__sread>:
 80086d8:	b510      	push	{r4, lr}
 80086da:	460c      	mov	r4, r1
 80086dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e0:	f000 faa8 	bl	8008c34 <_read_r>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	bfab      	itete	ge
 80086e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086ea:	89a3      	ldrhlt	r3, [r4, #12]
 80086ec:	181b      	addge	r3, r3, r0
 80086ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086f2:	bfac      	ite	ge
 80086f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80086f6:	81a3      	strhlt	r3, [r4, #12]
 80086f8:	bd10      	pop	{r4, pc}

080086fa <__swrite>:
 80086fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086fe:	461f      	mov	r7, r3
 8008700:	898b      	ldrh	r3, [r1, #12]
 8008702:	05db      	lsls	r3, r3, #23
 8008704:	4605      	mov	r5, r0
 8008706:	460c      	mov	r4, r1
 8008708:	4616      	mov	r6, r2
 800870a:	d505      	bpl.n	8008718 <__swrite+0x1e>
 800870c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008710:	2302      	movs	r3, #2
 8008712:	2200      	movs	r2, #0
 8008714:	f000 f9f8 	bl	8008b08 <_lseek_r>
 8008718:	89a3      	ldrh	r3, [r4, #12]
 800871a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800871e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008722:	81a3      	strh	r3, [r4, #12]
 8008724:	4632      	mov	r2, r6
 8008726:	463b      	mov	r3, r7
 8008728:	4628      	mov	r0, r5
 800872a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800872e:	f000 b869 	b.w	8008804 <_write_r>

08008732 <__sseek>:
 8008732:	b510      	push	{r4, lr}
 8008734:	460c      	mov	r4, r1
 8008736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800873a:	f000 f9e5 	bl	8008b08 <_lseek_r>
 800873e:	1c43      	adds	r3, r0, #1
 8008740:	89a3      	ldrh	r3, [r4, #12]
 8008742:	bf15      	itete	ne
 8008744:	6560      	strne	r0, [r4, #84]	; 0x54
 8008746:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800874a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800874e:	81a3      	strheq	r3, [r4, #12]
 8008750:	bf18      	it	ne
 8008752:	81a3      	strhne	r3, [r4, #12]
 8008754:	bd10      	pop	{r4, pc}

08008756 <__sclose>:
 8008756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800875a:	f000 b8f1 	b.w	8008940 <_close_r>
	...

08008760 <__swbuf_r>:
 8008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008762:	460e      	mov	r6, r1
 8008764:	4614      	mov	r4, r2
 8008766:	4605      	mov	r5, r0
 8008768:	b118      	cbz	r0, 8008772 <__swbuf_r+0x12>
 800876a:	6983      	ldr	r3, [r0, #24]
 800876c:	b90b      	cbnz	r3, 8008772 <__swbuf_r+0x12>
 800876e:	f7ff f921 	bl	80079b4 <__sinit>
 8008772:	4b21      	ldr	r3, [pc, #132]	; (80087f8 <__swbuf_r+0x98>)
 8008774:	429c      	cmp	r4, r3
 8008776:	d12b      	bne.n	80087d0 <__swbuf_r+0x70>
 8008778:	686c      	ldr	r4, [r5, #4]
 800877a:	69a3      	ldr	r3, [r4, #24]
 800877c:	60a3      	str	r3, [r4, #8]
 800877e:	89a3      	ldrh	r3, [r4, #12]
 8008780:	071a      	lsls	r2, r3, #28
 8008782:	d52f      	bpl.n	80087e4 <__swbuf_r+0x84>
 8008784:	6923      	ldr	r3, [r4, #16]
 8008786:	b36b      	cbz	r3, 80087e4 <__swbuf_r+0x84>
 8008788:	6923      	ldr	r3, [r4, #16]
 800878a:	6820      	ldr	r0, [r4, #0]
 800878c:	1ac0      	subs	r0, r0, r3
 800878e:	6963      	ldr	r3, [r4, #20]
 8008790:	b2f6      	uxtb	r6, r6
 8008792:	4283      	cmp	r3, r0
 8008794:	4637      	mov	r7, r6
 8008796:	dc04      	bgt.n	80087a2 <__swbuf_r+0x42>
 8008798:	4621      	mov	r1, r4
 800879a:	4628      	mov	r0, r5
 800879c:	f000 f966 	bl	8008a6c <_fflush_r>
 80087a0:	bb30      	cbnz	r0, 80087f0 <__swbuf_r+0x90>
 80087a2:	68a3      	ldr	r3, [r4, #8]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	60a3      	str	r3, [r4, #8]
 80087a8:	6823      	ldr	r3, [r4, #0]
 80087aa:	1c5a      	adds	r2, r3, #1
 80087ac:	6022      	str	r2, [r4, #0]
 80087ae:	701e      	strb	r6, [r3, #0]
 80087b0:	6963      	ldr	r3, [r4, #20]
 80087b2:	3001      	adds	r0, #1
 80087b4:	4283      	cmp	r3, r0
 80087b6:	d004      	beq.n	80087c2 <__swbuf_r+0x62>
 80087b8:	89a3      	ldrh	r3, [r4, #12]
 80087ba:	07db      	lsls	r3, r3, #31
 80087bc:	d506      	bpl.n	80087cc <__swbuf_r+0x6c>
 80087be:	2e0a      	cmp	r6, #10
 80087c0:	d104      	bne.n	80087cc <__swbuf_r+0x6c>
 80087c2:	4621      	mov	r1, r4
 80087c4:	4628      	mov	r0, r5
 80087c6:	f000 f951 	bl	8008a6c <_fflush_r>
 80087ca:	b988      	cbnz	r0, 80087f0 <__swbuf_r+0x90>
 80087cc:	4638      	mov	r0, r7
 80087ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087d0:	4b0a      	ldr	r3, [pc, #40]	; (80087fc <__swbuf_r+0x9c>)
 80087d2:	429c      	cmp	r4, r3
 80087d4:	d101      	bne.n	80087da <__swbuf_r+0x7a>
 80087d6:	68ac      	ldr	r4, [r5, #8]
 80087d8:	e7cf      	b.n	800877a <__swbuf_r+0x1a>
 80087da:	4b09      	ldr	r3, [pc, #36]	; (8008800 <__swbuf_r+0xa0>)
 80087dc:	429c      	cmp	r4, r3
 80087de:	bf08      	it	eq
 80087e0:	68ec      	ldreq	r4, [r5, #12]
 80087e2:	e7ca      	b.n	800877a <__swbuf_r+0x1a>
 80087e4:	4621      	mov	r1, r4
 80087e6:	4628      	mov	r0, r5
 80087e8:	f000 f81e 	bl	8008828 <__swsetup_r>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d0cb      	beq.n	8008788 <__swbuf_r+0x28>
 80087f0:	f04f 37ff 	mov.w	r7, #4294967295
 80087f4:	e7ea      	b.n	80087cc <__swbuf_r+0x6c>
 80087f6:	bf00      	nop
 80087f8:	08008f30 	.word	0x08008f30
 80087fc:	08008f50 	.word	0x08008f50
 8008800:	08008f10 	.word	0x08008f10

08008804 <_write_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4d07      	ldr	r5, [pc, #28]	; (8008824 <_write_r+0x20>)
 8008808:	4604      	mov	r4, r0
 800880a:	4608      	mov	r0, r1
 800880c:	4611      	mov	r1, r2
 800880e:	2200      	movs	r2, #0
 8008810:	602a      	str	r2, [r5, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	f7f9 fe0b 	bl	800242e <_write>
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	d102      	bne.n	8008822 <_write_r+0x1e>
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	b103      	cbz	r3, 8008822 <_write_r+0x1e>
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	2000052c 	.word	0x2000052c

08008828 <__swsetup_r>:
 8008828:	4b32      	ldr	r3, [pc, #200]	; (80088f4 <__swsetup_r+0xcc>)
 800882a:	b570      	push	{r4, r5, r6, lr}
 800882c:	681d      	ldr	r5, [r3, #0]
 800882e:	4606      	mov	r6, r0
 8008830:	460c      	mov	r4, r1
 8008832:	b125      	cbz	r5, 800883e <__swsetup_r+0x16>
 8008834:	69ab      	ldr	r3, [r5, #24]
 8008836:	b913      	cbnz	r3, 800883e <__swsetup_r+0x16>
 8008838:	4628      	mov	r0, r5
 800883a:	f7ff f8bb 	bl	80079b4 <__sinit>
 800883e:	4b2e      	ldr	r3, [pc, #184]	; (80088f8 <__swsetup_r+0xd0>)
 8008840:	429c      	cmp	r4, r3
 8008842:	d10f      	bne.n	8008864 <__swsetup_r+0x3c>
 8008844:	686c      	ldr	r4, [r5, #4]
 8008846:	89a3      	ldrh	r3, [r4, #12]
 8008848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800884c:	0719      	lsls	r1, r3, #28
 800884e:	d42c      	bmi.n	80088aa <__swsetup_r+0x82>
 8008850:	06dd      	lsls	r5, r3, #27
 8008852:	d411      	bmi.n	8008878 <__swsetup_r+0x50>
 8008854:	2309      	movs	r3, #9
 8008856:	6033      	str	r3, [r6, #0]
 8008858:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800885c:	81a3      	strh	r3, [r4, #12]
 800885e:	f04f 30ff 	mov.w	r0, #4294967295
 8008862:	e03e      	b.n	80088e2 <__swsetup_r+0xba>
 8008864:	4b25      	ldr	r3, [pc, #148]	; (80088fc <__swsetup_r+0xd4>)
 8008866:	429c      	cmp	r4, r3
 8008868:	d101      	bne.n	800886e <__swsetup_r+0x46>
 800886a:	68ac      	ldr	r4, [r5, #8]
 800886c:	e7eb      	b.n	8008846 <__swsetup_r+0x1e>
 800886e:	4b24      	ldr	r3, [pc, #144]	; (8008900 <__swsetup_r+0xd8>)
 8008870:	429c      	cmp	r4, r3
 8008872:	bf08      	it	eq
 8008874:	68ec      	ldreq	r4, [r5, #12]
 8008876:	e7e6      	b.n	8008846 <__swsetup_r+0x1e>
 8008878:	0758      	lsls	r0, r3, #29
 800887a:	d512      	bpl.n	80088a2 <__swsetup_r+0x7a>
 800887c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800887e:	b141      	cbz	r1, 8008892 <__swsetup_r+0x6a>
 8008880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008884:	4299      	cmp	r1, r3
 8008886:	d002      	beq.n	800888e <__swsetup_r+0x66>
 8008888:	4630      	mov	r0, r6
 800888a:	f7ff fcdb 	bl	8008244 <_free_r>
 800888e:	2300      	movs	r3, #0
 8008890:	6363      	str	r3, [r4, #52]	; 0x34
 8008892:	89a3      	ldrh	r3, [r4, #12]
 8008894:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008898:	81a3      	strh	r3, [r4, #12]
 800889a:	2300      	movs	r3, #0
 800889c:	6063      	str	r3, [r4, #4]
 800889e:	6923      	ldr	r3, [r4, #16]
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	f043 0308 	orr.w	r3, r3, #8
 80088a8:	81a3      	strh	r3, [r4, #12]
 80088aa:	6923      	ldr	r3, [r4, #16]
 80088ac:	b94b      	cbnz	r3, 80088c2 <__swsetup_r+0x9a>
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088b8:	d003      	beq.n	80088c2 <__swsetup_r+0x9a>
 80088ba:	4621      	mov	r1, r4
 80088bc:	4630      	mov	r0, r6
 80088be:	f000 f95b 	bl	8008b78 <__smakebuf_r>
 80088c2:	89a0      	ldrh	r0, [r4, #12]
 80088c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088c8:	f010 0301 	ands.w	r3, r0, #1
 80088cc:	d00a      	beq.n	80088e4 <__swsetup_r+0xbc>
 80088ce:	2300      	movs	r3, #0
 80088d0:	60a3      	str	r3, [r4, #8]
 80088d2:	6963      	ldr	r3, [r4, #20]
 80088d4:	425b      	negs	r3, r3
 80088d6:	61a3      	str	r3, [r4, #24]
 80088d8:	6923      	ldr	r3, [r4, #16]
 80088da:	b943      	cbnz	r3, 80088ee <__swsetup_r+0xc6>
 80088dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088e0:	d1ba      	bne.n	8008858 <__swsetup_r+0x30>
 80088e2:	bd70      	pop	{r4, r5, r6, pc}
 80088e4:	0781      	lsls	r1, r0, #30
 80088e6:	bf58      	it	pl
 80088e8:	6963      	ldrpl	r3, [r4, #20]
 80088ea:	60a3      	str	r3, [r4, #8]
 80088ec:	e7f4      	b.n	80088d8 <__swsetup_r+0xb0>
 80088ee:	2000      	movs	r0, #0
 80088f0:	e7f7      	b.n	80088e2 <__swsetup_r+0xba>
 80088f2:	bf00      	nop
 80088f4:	2000007c 	.word	0x2000007c
 80088f8:	08008f30 	.word	0x08008f30
 80088fc:	08008f50 	.word	0x08008f50
 8008900:	08008f10 	.word	0x08008f10

08008904 <__assert_func>:
 8008904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008906:	4614      	mov	r4, r2
 8008908:	461a      	mov	r2, r3
 800890a:	4b09      	ldr	r3, [pc, #36]	; (8008930 <__assert_func+0x2c>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4605      	mov	r5, r0
 8008910:	68d8      	ldr	r0, [r3, #12]
 8008912:	b14c      	cbz	r4, 8008928 <__assert_func+0x24>
 8008914:	4b07      	ldr	r3, [pc, #28]	; (8008934 <__assert_func+0x30>)
 8008916:	9100      	str	r1, [sp, #0]
 8008918:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800891c:	4906      	ldr	r1, [pc, #24]	; (8008938 <__assert_func+0x34>)
 800891e:	462b      	mov	r3, r5
 8008920:	f000 f8e0 	bl	8008ae4 <fiprintf>
 8008924:	f000 f9a5 	bl	8008c72 <abort>
 8008928:	4b04      	ldr	r3, [pc, #16]	; (800893c <__assert_func+0x38>)
 800892a:	461c      	mov	r4, r3
 800892c:	e7f3      	b.n	8008916 <__assert_func+0x12>
 800892e:	bf00      	nop
 8008930:	2000007c 	.word	0x2000007c
 8008934:	080090dd 	.word	0x080090dd
 8008938:	080090ea 	.word	0x080090ea
 800893c:	08009118 	.word	0x08009118

08008940 <_close_r>:
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	4d06      	ldr	r5, [pc, #24]	; (800895c <_close_r+0x1c>)
 8008944:	2300      	movs	r3, #0
 8008946:	4604      	mov	r4, r0
 8008948:	4608      	mov	r0, r1
 800894a:	602b      	str	r3, [r5, #0]
 800894c:	f7f9 fd8b 	bl	8002466 <_close>
 8008950:	1c43      	adds	r3, r0, #1
 8008952:	d102      	bne.n	800895a <_close_r+0x1a>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	b103      	cbz	r3, 800895a <_close_r+0x1a>
 8008958:	6023      	str	r3, [r4, #0]
 800895a:	bd38      	pop	{r3, r4, r5, pc}
 800895c:	2000052c 	.word	0x2000052c

08008960 <__sflush_r>:
 8008960:	898a      	ldrh	r2, [r1, #12]
 8008962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008966:	4605      	mov	r5, r0
 8008968:	0710      	lsls	r0, r2, #28
 800896a:	460c      	mov	r4, r1
 800896c:	d458      	bmi.n	8008a20 <__sflush_r+0xc0>
 800896e:	684b      	ldr	r3, [r1, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	dc05      	bgt.n	8008980 <__sflush_r+0x20>
 8008974:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008976:	2b00      	cmp	r3, #0
 8008978:	dc02      	bgt.n	8008980 <__sflush_r+0x20>
 800897a:	2000      	movs	r0, #0
 800897c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008980:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008982:	2e00      	cmp	r6, #0
 8008984:	d0f9      	beq.n	800897a <__sflush_r+0x1a>
 8008986:	2300      	movs	r3, #0
 8008988:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800898c:	682f      	ldr	r7, [r5, #0]
 800898e:	602b      	str	r3, [r5, #0]
 8008990:	d032      	beq.n	80089f8 <__sflush_r+0x98>
 8008992:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008994:	89a3      	ldrh	r3, [r4, #12]
 8008996:	075a      	lsls	r2, r3, #29
 8008998:	d505      	bpl.n	80089a6 <__sflush_r+0x46>
 800899a:	6863      	ldr	r3, [r4, #4]
 800899c:	1ac0      	subs	r0, r0, r3
 800899e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089a0:	b10b      	cbz	r3, 80089a6 <__sflush_r+0x46>
 80089a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089a4:	1ac0      	subs	r0, r0, r3
 80089a6:	2300      	movs	r3, #0
 80089a8:	4602      	mov	r2, r0
 80089aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089ac:	6a21      	ldr	r1, [r4, #32]
 80089ae:	4628      	mov	r0, r5
 80089b0:	47b0      	blx	r6
 80089b2:	1c43      	adds	r3, r0, #1
 80089b4:	89a3      	ldrh	r3, [r4, #12]
 80089b6:	d106      	bne.n	80089c6 <__sflush_r+0x66>
 80089b8:	6829      	ldr	r1, [r5, #0]
 80089ba:	291d      	cmp	r1, #29
 80089bc:	d82c      	bhi.n	8008a18 <__sflush_r+0xb8>
 80089be:	4a2a      	ldr	r2, [pc, #168]	; (8008a68 <__sflush_r+0x108>)
 80089c0:	40ca      	lsrs	r2, r1
 80089c2:	07d6      	lsls	r6, r2, #31
 80089c4:	d528      	bpl.n	8008a18 <__sflush_r+0xb8>
 80089c6:	2200      	movs	r2, #0
 80089c8:	6062      	str	r2, [r4, #4]
 80089ca:	04d9      	lsls	r1, r3, #19
 80089cc:	6922      	ldr	r2, [r4, #16]
 80089ce:	6022      	str	r2, [r4, #0]
 80089d0:	d504      	bpl.n	80089dc <__sflush_r+0x7c>
 80089d2:	1c42      	adds	r2, r0, #1
 80089d4:	d101      	bne.n	80089da <__sflush_r+0x7a>
 80089d6:	682b      	ldr	r3, [r5, #0]
 80089d8:	b903      	cbnz	r3, 80089dc <__sflush_r+0x7c>
 80089da:	6560      	str	r0, [r4, #84]	; 0x54
 80089dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089de:	602f      	str	r7, [r5, #0]
 80089e0:	2900      	cmp	r1, #0
 80089e2:	d0ca      	beq.n	800897a <__sflush_r+0x1a>
 80089e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089e8:	4299      	cmp	r1, r3
 80089ea:	d002      	beq.n	80089f2 <__sflush_r+0x92>
 80089ec:	4628      	mov	r0, r5
 80089ee:	f7ff fc29 	bl	8008244 <_free_r>
 80089f2:	2000      	movs	r0, #0
 80089f4:	6360      	str	r0, [r4, #52]	; 0x34
 80089f6:	e7c1      	b.n	800897c <__sflush_r+0x1c>
 80089f8:	6a21      	ldr	r1, [r4, #32]
 80089fa:	2301      	movs	r3, #1
 80089fc:	4628      	mov	r0, r5
 80089fe:	47b0      	blx	r6
 8008a00:	1c41      	adds	r1, r0, #1
 8008a02:	d1c7      	bne.n	8008994 <__sflush_r+0x34>
 8008a04:	682b      	ldr	r3, [r5, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0c4      	beq.n	8008994 <__sflush_r+0x34>
 8008a0a:	2b1d      	cmp	r3, #29
 8008a0c:	d001      	beq.n	8008a12 <__sflush_r+0xb2>
 8008a0e:	2b16      	cmp	r3, #22
 8008a10:	d101      	bne.n	8008a16 <__sflush_r+0xb6>
 8008a12:	602f      	str	r7, [r5, #0]
 8008a14:	e7b1      	b.n	800897a <__sflush_r+0x1a>
 8008a16:	89a3      	ldrh	r3, [r4, #12]
 8008a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a1c:	81a3      	strh	r3, [r4, #12]
 8008a1e:	e7ad      	b.n	800897c <__sflush_r+0x1c>
 8008a20:	690f      	ldr	r7, [r1, #16]
 8008a22:	2f00      	cmp	r7, #0
 8008a24:	d0a9      	beq.n	800897a <__sflush_r+0x1a>
 8008a26:	0793      	lsls	r3, r2, #30
 8008a28:	680e      	ldr	r6, [r1, #0]
 8008a2a:	bf08      	it	eq
 8008a2c:	694b      	ldreq	r3, [r1, #20]
 8008a2e:	600f      	str	r7, [r1, #0]
 8008a30:	bf18      	it	ne
 8008a32:	2300      	movne	r3, #0
 8008a34:	eba6 0807 	sub.w	r8, r6, r7
 8008a38:	608b      	str	r3, [r1, #8]
 8008a3a:	f1b8 0f00 	cmp.w	r8, #0
 8008a3e:	dd9c      	ble.n	800897a <__sflush_r+0x1a>
 8008a40:	6a21      	ldr	r1, [r4, #32]
 8008a42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a44:	4643      	mov	r3, r8
 8008a46:	463a      	mov	r2, r7
 8008a48:	4628      	mov	r0, r5
 8008a4a:	47b0      	blx	r6
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	dc06      	bgt.n	8008a5e <__sflush_r+0xfe>
 8008a50:	89a3      	ldrh	r3, [r4, #12]
 8008a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a56:	81a3      	strh	r3, [r4, #12]
 8008a58:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5c:	e78e      	b.n	800897c <__sflush_r+0x1c>
 8008a5e:	4407      	add	r7, r0
 8008a60:	eba8 0800 	sub.w	r8, r8, r0
 8008a64:	e7e9      	b.n	8008a3a <__sflush_r+0xda>
 8008a66:	bf00      	nop
 8008a68:	20400001 	.word	0x20400001

08008a6c <_fflush_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	690b      	ldr	r3, [r1, #16]
 8008a70:	4605      	mov	r5, r0
 8008a72:	460c      	mov	r4, r1
 8008a74:	b913      	cbnz	r3, 8008a7c <_fflush_r+0x10>
 8008a76:	2500      	movs	r5, #0
 8008a78:	4628      	mov	r0, r5
 8008a7a:	bd38      	pop	{r3, r4, r5, pc}
 8008a7c:	b118      	cbz	r0, 8008a86 <_fflush_r+0x1a>
 8008a7e:	6983      	ldr	r3, [r0, #24]
 8008a80:	b90b      	cbnz	r3, 8008a86 <_fflush_r+0x1a>
 8008a82:	f7fe ff97 	bl	80079b4 <__sinit>
 8008a86:	4b14      	ldr	r3, [pc, #80]	; (8008ad8 <_fflush_r+0x6c>)
 8008a88:	429c      	cmp	r4, r3
 8008a8a:	d11b      	bne.n	8008ac4 <_fflush_r+0x58>
 8008a8c:	686c      	ldr	r4, [r5, #4]
 8008a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d0ef      	beq.n	8008a76 <_fflush_r+0xa>
 8008a96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a98:	07d0      	lsls	r0, r2, #31
 8008a9a:	d404      	bmi.n	8008aa6 <_fflush_r+0x3a>
 8008a9c:	0599      	lsls	r1, r3, #22
 8008a9e:	d402      	bmi.n	8008aa6 <_fflush_r+0x3a>
 8008aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aa2:	f7ff f82a 	bl	8007afa <__retarget_lock_acquire_recursive>
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	f7ff ff59 	bl	8008960 <__sflush_r>
 8008aae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ab0:	07da      	lsls	r2, r3, #31
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	d4e0      	bmi.n	8008a78 <_fflush_r+0xc>
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	059b      	lsls	r3, r3, #22
 8008aba:	d4dd      	bmi.n	8008a78 <_fflush_r+0xc>
 8008abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008abe:	f7ff f81d 	bl	8007afc <__retarget_lock_release_recursive>
 8008ac2:	e7d9      	b.n	8008a78 <_fflush_r+0xc>
 8008ac4:	4b05      	ldr	r3, [pc, #20]	; (8008adc <_fflush_r+0x70>)
 8008ac6:	429c      	cmp	r4, r3
 8008ac8:	d101      	bne.n	8008ace <_fflush_r+0x62>
 8008aca:	68ac      	ldr	r4, [r5, #8]
 8008acc:	e7df      	b.n	8008a8e <_fflush_r+0x22>
 8008ace:	4b04      	ldr	r3, [pc, #16]	; (8008ae0 <_fflush_r+0x74>)
 8008ad0:	429c      	cmp	r4, r3
 8008ad2:	bf08      	it	eq
 8008ad4:	68ec      	ldreq	r4, [r5, #12]
 8008ad6:	e7da      	b.n	8008a8e <_fflush_r+0x22>
 8008ad8:	08008f30 	.word	0x08008f30
 8008adc:	08008f50 	.word	0x08008f50
 8008ae0:	08008f10 	.word	0x08008f10

08008ae4 <fiprintf>:
 8008ae4:	b40e      	push	{r1, r2, r3}
 8008ae6:	b503      	push	{r0, r1, lr}
 8008ae8:	4601      	mov	r1, r0
 8008aea:	ab03      	add	r3, sp, #12
 8008aec:	4805      	ldr	r0, [pc, #20]	; (8008b04 <fiprintf+0x20>)
 8008aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008af2:	6800      	ldr	r0, [r0, #0]
 8008af4:	9301      	str	r3, [sp, #4]
 8008af6:	f7ff fcaf 	bl	8008458 <_vfiprintf_r>
 8008afa:	b002      	add	sp, #8
 8008afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b00:	b003      	add	sp, #12
 8008b02:	4770      	bx	lr
 8008b04:	2000007c 	.word	0x2000007c

08008b08 <_lseek_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4d07      	ldr	r5, [pc, #28]	; (8008b28 <_lseek_r+0x20>)
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	4608      	mov	r0, r1
 8008b10:	4611      	mov	r1, r2
 8008b12:	2200      	movs	r2, #0
 8008b14:	602a      	str	r2, [r5, #0]
 8008b16:	461a      	mov	r2, r3
 8008b18:	f7f9 fccc 	bl	80024b4 <_lseek>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d102      	bne.n	8008b26 <_lseek_r+0x1e>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	b103      	cbz	r3, 8008b26 <_lseek_r+0x1e>
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	2000052c 	.word	0x2000052c

08008b2c <__swhatbuf_r>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	460e      	mov	r6, r1
 8008b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b34:	2900      	cmp	r1, #0
 8008b36:	b096      	sub	sp, #88	; 0x58
 8008b38:	4614      	mov	r4, r2
 8008b3a:	461d      	mov	r5, r3
 8008b3c:	da08      	bge.n	8008b50 <__swhatbuf_r+0x24>
 8008b3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	602a      	str	r2, [r5, #0]
 8008b46:	061a      	lsls	r2, r3, #24
 8008b48:	d410      	bmi.n	8008b6c <__swhatbuf_r+0x40>
 8008b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b4e:	e00e      	b.n	8008b6e <__swhatbuf_r+0x42>
 8008b50:	466a      	mov	r2, sp
 8008b52:	f000 f895 	bl	8008c80 <_fstat_r>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	dbf1      	blt.n	8008b3e <__swhatbuf_r+0x12>
 8008b5a:	9a01      	ldr	r2, [sp, #4]
 8008b5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b64:	425a      	negs	r2, r3
 8008b66:	415a      	adcs	r2, r3
 8008b68:	602a      	str	r2, [r5, #0]
 8008b6a:	e7ee      	b.n	8008b4a <__swhatbuf_r+0x1e>
 8008b6c:	2340      	movs	r3, #64	; 0x40
 8008b6e:	2000      	movs	r0, #0
 8008b70:	6023      	str	r3, [r4, #0]
 8008b72:	b016      	add	sp, #88	; 0x58
 8008b74:	bd70      	pop	{r4, r5, r6, pc}
	...

08008b78 <__smakebuf_r>:
 8008b78:	898b      	ldrh	r3, [r1, #12]
 8008b7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b7c:	079d      	lsls	r5, r3, #30
 8008b7e:	4606      	mov	r6, r0
 8008b80:	460c      	mov	r4, r1
 8008b82:	d507      	bpl.n	8008b94 <__smakebuf_r+0x1c>
 8008b84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	6123      	str	r3, [r4, #16]
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	6163      	str	r3, [r4, #20]
 8008b90:	b002      	add	sp, #8
 8008b92:	bd70      	pop	{r4, r5, r6, pc}
 8008b94:	ab01      	add	r3, sp, #4
 8008b96:	466a      	mov	r2, sp
 8008b98:	f7ff ffc8 	bl	8008b2c <__swhatbuf_r>
 8008b9c:	9900      	ldr	r1, [sp, #0]
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	f7ff fbbb 	bl	800831c <_malloc_r>
 8008ba6:	b948      	cbnz	r0, 8008bbc <__smakebuf_r+0x44>
 8008ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bac:	059a      	lsls	r2, r3, #22
 8008bae:	d4ef      	bmi.n	8008b90 <__smakebuf_r+0x18>
 8008bb0:	f023 0303 	bic.w	r3, r3, #3
 8008bb4:	f043 0302 	orr.w	r3, r3, #2
 8008bb8:	81a3      	strh	r3, [r4, #12]
 8008bba:	e7e3      	b.n	8008b84 <__smakebuf_r+0xc>
 8008bbc:	4b0d      	ldr	r3, [pc, #52]	; (8008bf4 <__smakebuf_r+0x7c>)
 8008bbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	6020      	str	r0, [r4, #0]
 8008bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bc8:	81a3      	strh	r3, [r4, #12]
 8008bca:	9b00      	ldr	r3, [sp, #0]
 8008bcc:	6163      	str	r3, [r4, #20]
 8008bce:	9b01      	ldr	r3, [sp, #4]
 8008bd0:	6120      	str	r0, [r4, #16]
 8008bd2:	b15b      	cbz	r3, 8008bec <__smakebuf_r+0x74>
 8008bd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f000 f863 	bl	8008ca4 <_isatty_r>
 8008bde:	b128      	cbz	r0, 8008bec <__smakebuf_r+0x74>
 8008be0:	89a3      	ldrh	r3, [r4, #12]
 8008be2:	f023 0303 	bic.w	r3, r3, #3
 8008be6:	f043 0301 	orr.w	r3, r3, #1
 8008bea:	81a3      	strh	r3, [r4, #12]
 8008bec:	89a0      	ldrh	r0, [r4, #12]
 8008bee:	4305      	orrs	r5, r0
 8008bf0:	81a5      	strh	r5, [r4, #12]
 8008bf2:	e7cd      	b.n	8008b90 <__smakebuf_r+0x18>
 8008bf4:	0800794d 	.word	0x0800794d

08008bf8 <__ascii_mbtowc>:
 8008bf8:	b082      	sub	sp, #8
 8008bfa:	b901      	cbnz	r1, 8008bfe <__ascii_mbtowc+0x6>
 8008bfc:	a901      	add	r1, sp, #4
 8008bfe:	b142      	cbz	r2, 8008c12 <__ascii_mbtowc+0x1a>
 8008c00:	b14b      	cbz	r3, 8008c16 <__ascii_mbtowc+0x1e>
 8008c02:	7813      	ldrb	r3, [r2, #0]
 8008c04:	600b      	str	r3, [r1, #0]
 8008c06:	7812      	ldrb	r2, [r2, #0]
 8008c08:	1e10      	subs	r0, r2, #0
 8008c0a:	bf18      	it	ne
 8008c0c:	2001      	movne	r0, #1
 8008c0e:	b002      	add	sp, #8
 8008c10:	4770      	bx	lr
 8008c12:	4610      	mov	r0, r2
 8008c14:	e7fb      	b.n	8008c0e <__ascii_mbtowc+0x16>
 8008c16:	f06f 0001 	mvn.w	r0, #1
 8008c1a:	e7f8      	b.n	8008c0e <__ascii_mbtowc+0x16>

08008c1c <__malloc_lock>:
 8008c1c:	4801      	ldr	r0, [pc, #4]	; (8008c24 <__malloc_lock+0x8>)
 8008c1e:	f7fe bf6c 	b.w	8007afa <__retarget_lock_acquire_recursive>
 8008c22:	bf00      	nop
 8008c24:	20000520 	.word	0x20000520

08008c28 <__malloc_unlock>:
 8008c28:	4801      	ldr	r0, [pc, #4]	; (8008c30 <__malloc_unlock+0x8>)
 8008c2a:	f7fe bf67 	b.w	8007afc <__retarget_lock_release_recursive>
 8008c2e:	bf00      	nop
 8008c30:	20000520 	.word	0x20000520

08008c34 <_read_r>:
 8008c34:	b538      	push	{r3, r4, r5, lr}
 8008c36:	4d07      	ldr	r5, [pc, #28]	; (8008c54 <_read_r+0x20>)
 8008c38:	4604      	mov	r4, r0
 8008c3a:	4608      	mov	r0, r1
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	2200      	movs	r2, #0
 8008c40:	602a      	str	r2, [r5, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	f7f9 fbd6 	bl	80023f4 <_read>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	d102      	bne.n	8008c52 <_read_r+0x1e>
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	b103      	cbz	r3, 8008c52 <_read_r+0x1e>
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	2000052c 	.word	0x2000052c

08008c58 <__ascii_wctomb>:
 8008c58:	b149      	cbz	r1, 8008c6e <__ascii_wctomb+0x16>
 8008c5a:	2aff      	cmp	r2, #255	; 0xff
 8008c5c:	bf85      	ittet	hi
 8008c5e:	238a      	movhi	r3, #138	; 0x8a
 8008c60:	6003      	strhi	r3, [r0, #0]
 8008c62:	700a      	strbls	r2, [r1, #0]
 8008c64:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c68:	bf98      	it	ls
 8008c6a:	2001      	movls	r0, #1
 8008c6c:	4770      	bx	lr
 8008c6e:	4608      	mov	r0, r1
 8008c70:	4770      	bx	lr

08008c72 <abort>:
 8008c72:	b508      	push	{r3, lr}
 8008c74:	2006      	movs	r0, #6
 8008c76:	f000 f84d 	bl	8008d14 <raise>
 8008c7a:	2001      	movs	r0, #1
 8008c7c:	f7f9 fbb0 	bl	80023e0 <_exit>

08008c80 <_fstat_r>:
 8008c80:	b538      	push	{r3, r4, r5, lr}
 8008c82:	4d07      	ldr	r5, [pc, #28]	; (8008ca0 <_fstat_r+0x20>)
 8008c84:	2300      	movs	r3, #0
 8008c86:	4604      	mov	r4, r0
 8008c88:	4608      	mov	r0, r1
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	602b      	str	r3, [r5, #0]
 8008c8e:	f7f9 fbf6 	bl	800247e <_fstat>
 8008c92:	1c43      	adds	r3, r0, #1
 8008c94:	d102      	bne.n	8008c9c <_fstat_r+0x1c>
 8008c96:	682b      	ldr	r3, [r5, #0]
 8008c98:	b103      	cbz	r3, 8008c9c <_fstat_r+0x1c>
 8008c9a:	6023      	str	r3, [r4, #0]
 8008c9c:	bd38      	pop	{r3, r4, r5, pc}
 8008c9e:	bf00      	nop
 8008ca0:	2000052c 	.word	0x2000052c

08008ca4 <_isatty_r>:
 8008ca4:	b538      	push	{r3, r4, r5, lr}
 8008ca6:	4d06      	ldr	r5, [pc, #24]	; (8008cc0 <_isatty_r+0x1c>)
 8008ca8:	2300      	movs	r3, #0
 8008caa:	4604      	mov	r4, r0
 8008cac:	4608      	mov	r0, r1
 8008cae:	602b      	str	r3, [r5, #0]
 8008cb0:	f7f9 fbf5 	bl	800249e <_isatty>
 8008cb4:	1c43      	adds	r3, r0, #1
 8008cb6:	d102      	bne.n	8008cbe <_isatty_r+0x1a>
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	b103      	cbz	r3, 8008cbe <_isatty_r+0x1a>
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	bd38      	pop	{r3, r4, r5, pc}
 8008cc0:	2000052c 	.word	0x2000052c

08008cc4 <_raise_r>:
 8008cc4:	291f      	cmp	r1, #31
 8008cc6:	b538      	push	{r3, r4, r5, lr}
 8008cc8:	4604      	mov	r4, r0
 8008cca:	460d      	mov	r5, r1
 8008ccc:	d904      	bls.n	8008cd8 <_raise_r+0x14>
 8008cce:	2316      	movs	r3, #22
 8008cd0:	6003      	str	r3, [r0, #0]
 8008cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008cda:	b112      	cbz	r2, 8008ce2 <_raise_r+0x1e>
 8008cdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ce0:	b94b      	cbnz	r3, 8008cf6 <_raise_r+0x32>
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 f830 	bl	8008d48 <_getpid_r>
 8008ce8:	462a      	mov	r2, r5
 8008cea:	4601      	mov	r1, r0
 8008cec:	4620      	mov	r0, r4
 8008cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cf2:	f000 b817 	b.w	8008d24 <_kill_r>
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d00a      	beq.n	8008d10 <_raise_r+0x4c>
 8008cfa:	1c59      	adds	r1, r3, #1
 8008cfc:	d103      	bne.n	8008d06 <_raise_r+0x42>
 8008cfe:	2316      	movs	r3, #22
 8008d00:	6003      	str	r3, [r0, #0]
 8008d02:	2001      	movs	r0, #1
 8008d04:	e7e7      	b.n	8008cd6 <_raise_r+0x12>
 8008d06:	2400      	movs	r4, #0
 8008d08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	4798      	blx	r3
 8008d10:	2000      	movs	r0, #0
 8008d12:	e7e0      	b.n	8008cd6 <_raise_r+0x12>

08008d14 <raise>:
 8008d14:	4b02      	ldr	r3, [pc, #8]	; (8008d20 <raise+0xc>)
 8008d16:	4601      	mov	r1, r0
 8008d18:	6818      	ldr	r0, [r3, #0]
 8008d1a:	f7ff bfd3 	b.w	8008cc4 <_raise_r>
 8008d1e:	bf00      	nop
 8008d20:	2000007c 	.word	0x2000007c

08008d24 <_kill_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4d07      	ldr	r5, [pc, #28]	; (8008d44 <_kill_r+0x20>)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	4611      	mov	r1, r2
 8008d30:	602b      	str	r3, [r5, #0]
 8008d32:	f7f9 fb45 	bl	80023c0 <_kill>
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	d102      	bne.n	8008d40 <_kill_r+0x1c>
 8008d3a:	682b      	ldr	r3, [r5, #0]
 8008d3c:	b103      	cbz	r3, 8008d40 <_kill_r+0x1c>
 8008d3e:	6023      	str	r3, [r4, #0]
 8008d40:	bd38      	pop	{r3, r4, r5, pc}
 8008d42:	bf00      	nop
 8008d44:	2000052c 	.word	0x2000052c

08008d48 <_getpid_r>:
 8008d48:	f7f9 bb32 	b.w	80023b0 <_getpid>

08008d4c <_init>:
 8008d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4e:	bf00      	nop
 8008d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d52:	bc08      	pop	{r3}
 8008d54:	469e      	mov	lr, r3
 8008d56:	4770      	bx	lr

08008d58 <_fini>:
 8008d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5a:	bf00      	nop
 8008d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d5e:	bc08      	pop	{r3}
 8008d60:	469e      	mov	lr, r3
 8008d62:	4770      	bx	lr
