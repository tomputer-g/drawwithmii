
FinalProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dbc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08008f80  08008f80  00018f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800943c  0800943c  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  0800943c  0800943c  0001943c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009444  08009444  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009444  08009444  00019444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009448  08009448  00019448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0800944c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000254  080096a0  00020254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  080096a0  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6fb  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e66  00000000  00000000  0003a97f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  0003d7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  0003eda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004aed  00000000  00000000  00040220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ade0  00000000  00000000  00044d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010eb38  00000000  00000000  0005faed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e625  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eb0  00000000  00000000  0016e678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000254 	.word	0x20000254
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008f64 	.word	0x08008f64

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000258 	.word	0x20000258
 80001fc:	08008f64 	.word	0x08008f64

08000200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000202:	b09b      	sub	sp, #108	; 0x6c
 8000204:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000206:	f002 fa9e 	bl	8002746 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020a:	f000 f915 	bl	8000438 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020e:	f000 fb1f 	bl	8000850 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000212:	f000 f9f3 	bl	80005fc <MX_SPI1_Init>
  MX_TIM4_Init();
 8000216:	f000 fa7f 	bl	8000718 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 800021a:	f000 f9a3 	bl	8000564 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800021e:	f000 fa2b 	bl	8000678 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000222:	f000 f95f 	bl	80004e4 <MX_I2C1_Init>
  MX_TIM5_Init();
 8000226:	f000 fac5 	bl	80007b4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  step_init(&htim2, 1, A0_GPIO, A0_PIN, A1_GPIO, A1_PIN, A2_GPIO, A2_PIN, A3_GPIO, A3_PIN, B0_GPIO, B0_PIN, B1_GPIO, B1_PIN, B2_GPIO, B2_PIN, B3_GPIO, B3_PIN);
 800022a:	4b60      	ldr	r3, [pc, #384]	; (80003ac <main+0x1ac>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	61fb      	str	r3, [r7, #28]
 8000230:	4b5f      	ldr	r3, [pc, #380]	; (80003b0 <main+0x1b0>)
 8000232:	f8b3 c000 	ldrh.w	ip, [r3]
 8000236:	4b5f      	ldr	r3, [pc, #380]	; (80003b4 <main+0x1b4>)
 8000238:	6818      	ldr	r0, [r3, #0]
 800023a:	4b5f      	ldr	r3, [pc, #380]	; (80003b8 <main+0x1b8>)
 800023c:	881c      	ldrh	r4, [r3, #0]
 800023e:	4b5f      	ldr	r3, [pc, #380]	; (80003bc <main+0x1bc>)
 8000240:	681d      	ldr	r5, [r3, #0]
 8000242:	4b5f      	ldr	r3, [pc, #380]	; (80003c0 <main+0x1c0>)
 8000244:	881e      	ldrh	r6, [r3, #0]
 8000246:	4b5f      	ldr	r3, [pc, #380]	; (80003c4 <main+0x1c4>)
 8000248:	6819      	ldr	r1, [r3, #0]
 800024a:	61b9      	str	r1, [r7, #24]
 800024c:	4b5e      	ldr	r3, [pc, #376]	; (80003c8 <main+0x1c8>)
 800024e:	881b      	ldrh	r3, [r3, #0]
 8000250:	617b      	str	r3, [r7, #20]
 8000252:	4b5e      	ldr	r3, [pc, #376]	; (80003cc <main+0x1cc>)
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	613a      	str	r2, [r7, #16]
 8000258:	4b5d      	ldr	r3, [pc, #372]	; (80003d0 <main+0x1d0>)
 800025a:	f8b3 e000 	ldrh.w	lr, [r3]
 800025e:	4671      	mov	r1, lr
 8000260:	60f9      	str	r1, [r7, #12]
 8000262:	4b5c      	ldr	r3, [pc, #368]	; (80003d4 <main+0x1d4>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	60bb      	str	r3, [r7, #8]
 8000268:	4b5b      	ldr	r3, [pc, #364]	; (80003d8 <main+0x1d8>)
 800026a:	f8b3 e000 	ldrh.w	lr, [r3]
 800026e:	4672      	mov	r2, lr
 8000270:	607a      	str	r2, [r7, #4]
 8000272:	4b5a      	ldr	r3, [pc, #360]	; (80003dc <main+0x1dc>)
 8000274:	6819      	ldr	r1, [r3, #0]
 8000276:	6039      	str	r1, [r7, #0]
 8000278:	4b59      	ldr	r3, [pc, #356]	; (80003e0 <main+0x1e0>)
 800027a:	8819      	ldrh	r1, [r3, #0]
 800027c:	4b59      	ldr	r3, [pc, #356]	; (80003e4 <main+0x1e4>)
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	4b59      	ldr	r3, [pc, #356]	; (80003e8 <main+0x1e8>)
 8000282:	881b      	ldrh	r3, [r3, #0]
 8000284:	930d      	str	r3, [sp, #52]	; 0x34
 8000286:	920c      	str	r2, [sp, #48]	; 0x30
 8000288:	910b      	str	r1, [sp, #44]	; 0x2c
 800028a:	6839      	ldr	r1, [r7, #0]
 800028c:	910a      	str	r1, [sp, #40]	; 0x28
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	9209      	str	r2, [sp, #36]	; 0x24
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	9308      	str	r3, [sp, #32]
 8000296:	68f9      	ldr	r1, [r7, #12]
 8000298:	9107      	str	r1, [sp, #28]
 800029a:	693a      	ldr	r2, [r7, #16]
 800029c:	9206      	str	r2, [sp, #24]
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	9305      	str	r3, [sp, #20]
 80002a2:	69b9      	ldr	r1, [r7, #24]
 80002a4:	9104      	str	r1, [sp, #16]
 80002a6:	9603      	str	r6, [sp, #12]
 80002a8:	9502      	str	r5, [sp, #8]
 80002aa:	9401      	str	r4, [sp, #4]
 80002ac:	9000      	str	r0, [sp, #0]
 80002ae:	4663      	mov	r3, ip
 80002b0:	69fa      	ldr	r2, [r7, #28]
 80002b2:	2101      	movs	r1, #1
 80002b4:	484d      	ldr	r0, [pc, #308]	; (80003ec <main+0x1ec>)
 80002b6:	f001 fefd 	bl	80020b4 <step_init>
  LCD_init(&hspi1, tftCS_GPIO, tftCS_PIN, tftDC_GPIO, tftDC_PIN, tftRESET_GPIO, tftRESET_PIN);
 80002ba:	4b4d      	ldr	r3, [pc, #308]	; (80003f0 <main+0x1f0>)
 80002bc:	6818      	ldr	r0, [r3, #0]
 80002be:	4b4d      	ldr	r3, [pc, #308]	; (80003f4 <main+0x1f4>)
 80002c0:	881c      	ldrh	r4, [r3, #0]
 80002c2:	4b4d      	ldr	r3, [pc, #308]	; (80003f8 <main+0x1f8>)
 80002c4:	681d      	ldr	r5, [r3, #0]
 80002c6:	4b4d      	ldr	r3, [pc, #308]	; (80003fc <main+0x1fc>)
 80002c8:	881b      	ldrh	r3, [r3, #0]
 80002ca:	4a4d      	ldr	r2, [pc, #308]	; (8000400 <main+0x200>)
 80002cc:	6812      	ldr	r2, [r2, #0]
 80002ce:	494d      	ldr	r1, [pc, #308]	; (8000404 <main+0x204>)
 80002d0:	8809      	ldrh	r1, [r1, #0]
 80002d2:	9102      	str	r1, [sp, #8]
 80002d4:	9201      	str	r2, [sp, #4]
 80002d6:	9300      	str	r3, [sp, #0]
 80002d8:	462b      	mov	r3, r5
 80002da:	4622      	mov	r2, r4
 80002dc:	4601      	mov	r1, r0
 80002de:	484a      	ldr	r0, [pc, #296]	; (8000408 <main+0x208>)
 80002e0:	f001 fbda 	bl	8001a98 <LCD_init>
  N64_init(&htim4, &htim5, n64_GPIO, n64_PIN, n64_DEBUG_GPIO, n64_DEBUG_PIN, n64_INT_GPIO, n64_INT_PIN);
 80002e4:	4b49      	ldr	r3, [pc, #292]	; (800040c <main+0x20c>)
 80002e6:	681c      	ldr	r4, [r3, #0]
 80002e8:	4b49      	ldr	r3, [pc, #292]	; (8000410 <main+0x210>)
 80002ea:	881d      	ldrh	r5, [r3, #0]
 80002ec:	4b49      	ldr	r3, [pc, #292]	; (8000414 <main+0x214>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a49      	ldr	r2, [pc, #292]	; (8000418 <main+0x218>)
 80002f2:	8812      	ldrh	r2, [r2, #0]
 80002f4:	4949      	ldr	r1, [pc, #292]	; (800041c <main+0x21c>)
 80002f6:	6809      	ldr	r1, [r1, #0]
 80002f8:	4849      	ldr	r0, [pc, #292]	; (8000420 <main+0x220>)
 80002fa:	8800      	ldrh	r0, [r0, #0]
 80002fc:	9003      	str	r0, [sp, #12]
 80002fe:	9102      	str	r1, [sp, #8]
 8000300:	9201      	str	r2, [sp, #4]
 8000302:	9300      	str	r3, [sp, #0]
 8000304:	462b      	mov	r3, r5
 8000306:	4622      	mov	r2, r4
 8000308:	4946      	ldr	r1, [pc, #280]	; (8000424 <main+0x224>)
 800030a:	4847      	ldr	r0, [pc, #284]	; (8000428 <main+0x228>)
 800030c:	f001 fe94 	bl	8002038 <N64_init>
  printf("Initing...\n\r");
 8000310:	4846      	ldr	r0, [pc, #280]	; (800042c <main+0x22c>)
 8000312:	f006 fd71 	bl	8006df8 <iprintf>
  HAL_Delay(200);
 8000316:	20c8      	movs	r0, #200	; 0xc8
 8000318:	f002 fa8a 	bl	8002830 <HAL_Delay>
  LCD_fill(HX8357_WHITE);
 800031c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000320:	f001 fd58 	bl	8001dd4 <LCD_fill>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //code assumes the jumper is connected for the enables and thus will not handle writing 1 to them
  setSpeed(200);
 8000324:	20c8      	movs	r0, #200	; 0xc8
 8000326:	f001 ff2f 	bl	8002188 <setSpeed>
  uint32_t vals = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	62fb      	str	r3, [r7, #44]	; 0x2c
  printf("Starting...\n\r");
 800032e:	4840      	ldr	r0, [pc, #256]	; (8000430 <main+0x230>)
 8000330:	f006 fd62 	bl	8006df8 <iprintf>
  while (1)
  {

	  vals = intRead(); // intRead();
 8000334:	f001 fde2 	bl	8001efc <intRead>
 8000338:	62f8      	str	r0, [r7, #44]	; 0x2c
	  int buttonval = vals >> 31;
 800033a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800033c:	0fdb      	lsrs	r3, r3, #31
 800033e:	62bb      	str	r3, [r7, #40]	; 0x28
	  signed char xval = (vals >> 8) & 0xff; //both were signed
 8000340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000342:	0a1b      	lsrs	r3, r3, #8
 8000344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  signed char yval = vals & 0xff;
 8000348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800034a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  printf("X: %d,Y: %d\n\r", xval, yval);
 800034e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000352:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 8000356:	4619      	mov	r1, r3
 8000358:	4836      	ldr	r0, [pc, #216]	; (8000434 <main+0x234>)
 800035a:	f006 fd4d 	bl	8006df8 <iprintf>

	  uint16_t XCenter = xval + (HX8357_TFTWIDTH/2);
 800035e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000362:	b29b      	uxth	r3, r3
 8000364:	33a0      	adds	r3, #160	; 0xa0
 8000366:	84bb      	strh	r3, [r7, #36]	; 0x24
	  uint16_t YCenter = -yval + (HX8357_TFTHEIGHT/2);
 8000368:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800036c:	b29b      	uxth	r3, r3
 800036e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000372:	847b      	strh	r3, [r7, #34]	; 0x22
	  uint16_t rectRadius = 2;
 8000374:	2302      	movs	r3, #2
 8000376:	843b      	strh	r3, [r7, #32]
	  LCD_rect(XCenter - rectRadius, YCenter - rectRadius, XCenter + rectRadius, YCenter + rectRadius, HX8357_BLACK);
 8000378:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800037a:	8c3b      	ldrh	r3, [r7, #32]
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	b298      	uxth	r0, r3
 8000380:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000382:	8c3b      	ldrh	r3, [r7, #32]
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	b299      	uxth	r1, r3
 8000388:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800038a:	8c3b      	ldrh	r3, [r7, #32]
 800038c:	4413      	add	r3, r2
 800038e:	b29c      	uxth	r4, r3
 8000390:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000392:	8c3b      	ldrh	r3, [r7, #32]
 8000394:	4413      	add	r3, r2
 8000396:	b29b      	uxth	r3, r3
 8000398:	2200      	movs	r2, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	4622      	mov	r2, r4
 800039e:	f001 fccd 	bl	8001d3c <LCD_rect>
//	  printf("Waiting...\n\r");
//	 uint8_t buf[4];
//	 getBlocks(&hi2c1, &buf[0]);
//	 printf("%d, %d, %d, %d\n\r", buf[0], buf[1], buf[2], buf[3]);

	  HAL_Delay(50);
 80003a2:	2032      	movs	r0, #50	; 0x32
 80003a4:	f002 fa44 	bl	8002830 <HAL_Delay>
  {
 80003a8:	e7c4      	b.n	8000334 <main+0x134>
 80003aa:	bf00      	nop
 80003ac:	20000030 	.word	0x20000030
 80003b0:	20000034 	.word	0x20000034
 80003b4:	20000038 	.word	0x20000038
 80003b8:	2000003c 	.word	0x2000003c
 80003bc:	20000040 	.word	0x20000040
 80003c0:	20000044 	.word	0x20000044
 80003c4:	20000048 	.word	0x20000048
 80003c8:	2000004c 	.word	0x2000004c
 80003cc:	20000050 	.word	0x20000050
 80003d0:	20000054 	.word	0x20000054
 80003d4:	20000058 	.word	0x20000058
 80003d8:	2000005c 	.word	0x2000005c
 80003dc:	20000060 	.word	0x20000060
 80003e0:	20000064 	.word	0x20000064
 80003e4:	20000068 	.word	0x20000068
 80003e8:	2000006c 	.word	0x2000006c
 80003ec:	200003b0 	.word	0x200003b0
 80003f0:	20000000 	.word	0x20000000
 80003f4:	20000004 	.word	0x20000004
 80003f8:	20000008 	.word	0x20000008
 80003fc:	2000000c 	.word	0x2000000c
 8000400:	20000010 	.word	0x20000010
 8000404:	20000014 	.word	0x20000014
 8000408:	2000034c 	.word	0x2000034c
 800040c:	20000018 	.word	0x20000018
 8000410:	2000001c 	.word	0x2000001c
 8000414:	20000020 	.word	0x20000020
 8000418:	20000024 	.word	0x20000024
 800041c:	20000028 	.word	0x20000028
 8000420:	2000002c 	.word	0x2000002c
 8000424:	20000448 	.word	0x20000448
 8000428:	200003fc 	.word	0x200003fc
 800042c:	08008fc0 	.word	0x08008fc0
 8000430:	08008fd0 	.word	0x08008fd0
 8000434:	08008fe0 	.word	0x08008fe0

08000438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b096      	sub	sp, #88	; 0x58
 800043c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043e:	f107 0314 	add.w	r3, r7, #20
 8000442:	2244      	movs	r2, #68	; 0x44
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f006 f864 	bl	8006514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044c:	463b      	mov	r3, r7
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800045a:	2000      	movs	r0, #0
 800045c:	f002 fe26 	bl	80030ac <HAL_PWREx_ControlVoltageScaling>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000466:	f000 fbf7 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800046a:	2312      	movs	r3, #18
 800046c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000472:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000474:	2340      	movs	r3, #64	; 0x40
 8000476:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000478:	2301      	movs	r3, #1
 800047a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000480:	2360      	movs	r3, #96	; 0x60
 8000482:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000484:	2302      	movs	r3, #2
 8000486:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000488:	2301      	movs	r3, #1
 800048a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800048c:	2301      	movs	r3, #1
 800048e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000490:	233c      	movs	r3, #60	; 0x3c
 8000492:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000494:	2302      	movs	r3, #2
 8000496:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000498:	2302      	movs	r3, #2
 800049a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800049c:	2302      	movs	r3, #2
 800049e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a0:	f107 0314 	add.w	r3, r7, #20
 80004a4:	4618      	mov	r0, r3
 80004a6:	f002 feb5 	bl	8003214 <HAL_RCC_OscConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80004b0:	f000 fbd2 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b4:	230f      	movs	r3, #15
 80004b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b8:	2303      	movs	r3, #3
 80004ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80004c8:	463b      	mov	r3, r7
 80004ca:	2105      	movs	r1, #5
 80004cc:	4618      	mov	r0, r3
 80004ce:	f003 fac7 	bl	8003a60 <HAL_RCC_ClockConfig>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80004d8:	f000 fbbe 	bl	8000c58 <Error_Handler>
  }
}
 80004dc:	bf00      	nop
 80004de:	3758      	adds	r7, #88	; 0x58
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <MX_I2C1_Init+0x74>)
 80004ea:	4a1c      	ldr	r2, [pc, #112]	; (800055c <MX_I2C1_Init+0x78>)
 80004ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <MX_I2C1_Init+0x74>)
 80004f0:	4a1b      	ldr	r2, [pc, #108]	; (8000560 <MX_I2C1_Init+0x7c>)
 80004f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <MX_I2C1_Init+0x74>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <MX_I2C1_Init+0x74>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000500:	4b15      	ldr	r3, [pc, #84]	; (8000558 <MX_I2C1_Init+0x74>)
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000506:	4b14      	ldr	r3, [pc, #80]	; (8000558 <MX_I2C1_Init+0x74>)
 8000508:	2200      	movs	r2, #0
 800050a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <MX_I2C1_Init+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_I2C1_Init+0x74>)
 8000514:	2200      	movs	r2, #0
 8000516:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <MX_I2C1_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800051e:	480e      	ldr	r0, [pc, #56]	; (8000558 <MX_I2C1_Init+0x74>)
 8000520:	f002 fc7e 	bl	8002e20 <HAL_I2C_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800052a:	f000 fb95 	bl	8000c58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800052e:	2100      	movs	r1, #0
 8000530:	4809      	ldr	r0, [pc, #36]	; (8000558 <MX_I2C1_Init+0x74>)
 8000532:	f002 fd04 	bl	8002f3e <HAL_I2CEx_ConfigAnalogFilter>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800053c:	f000 fb8c 	bl	8000c58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000540:	2100      	movs	r1, #0
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <MX_I2C1_Init+0x74>)
 8000544:	f002 fd46 	bl	8002fd4 <HAL_I2CEx_ConfigDigitalFilter>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800054e:	f000 fb83 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000270 	.word	0x20000270
 800055c:	40005400 	.word	0x40005400
 8000560:	307075b1 	.word	0x307075b1

08000564 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <MX_LPUART1_UART_Init+0x90>)
 800056a:	4a23      	ldr	r2, [pc, #140]	; (80005f8 <MX_LPUART1_UART_Init+0x94>)
 800056c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800056e:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <MX_LPUART1_UART_Init+0x90>)
 8000570:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000574:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000576:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <MX_LPUART1_UART_Init+0x90>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <MX_LPUART1_UART_Init+0x90>)
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000582:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <MX_LPUART1_UART_Init+0x90>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_LPUART1_UART_Init+0x90>)
 800058a:	220c      	movs	r2, #12
 800058c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800058e:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <MX_LPUART1_UART_Init+0x90>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <MX_LPUART1_UART_Init+0x90>)
 8000596:	2200      	movs	r2, #0
 8000598:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800059a:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <MX_LPUART1_UART_Init+0x90>)
 800059c:	2200      	movs	r2, #0
 800059e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_LPUART1_UART_Init+0x90>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <MX_LPUART1_UART_Init+0x90>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80005ac:	4811      	ldr	r0, [pc, #68]	; (80005f4 <MX_LPUART1_UART_Init+0x90>)
 80005ae:	f005 f8dd 	bl	800576c <HAL_UART_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80005b8:	f000 fb4e 	bl	8000c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005bc:	2100      	movs	r1, #0
 80005be:	480d      	ldr	r0, [pc, #52]	; (80005f4 <MX_LPUART1_UART_Init+0x90>)
 80005c0:	f005 fea6 	bl	8006310 <HAL_UARTEx_SetTxFifoThreshold>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80005ca:	f000 fb45 	bl	8000c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <MX_LPUART1_UART_Init+0x90>)
 80005d2:	f005 fedb 	bl	800638c <HAL_UARTEx_SetRxFifoThreshold>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80005dc:	f000 fb3c 	bl	8000c58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <MX_LPUART1_UART_Init+0x90>)
 80005e2:	f005 fe5c 	bl	800629e <HAL_UARTEx_DisableFifoMode>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80005ec:	f000 fb34 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200002bc 	.word	0x200002bc
 80005f8:	40008000 	.word	0x40008000

080005fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_SPI1_Init+0x74>)
 8000602:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <MX_SPI1_Init+0x78>)
 8000604:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_SPI1_Init+0x74>)
 8000608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800060c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_SPI1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_SPI1_Init+0x74>)
 8000616:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800061a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_SPI1_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_SPI1_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_SPI1_Init+0x74>)
 800062a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800062e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_SPI1_Init+0x74>)
 8000632:	2208      	movs	r2, #8
 8000634:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_SPI1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_SPI1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_SPI1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_SPI1_Init+0x74>)
 800064a:	2207      	movs	r2, #7
 800064c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_SPI1_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_SPI1_Init+0x74>)
 8000656:	2208      	movs	r2, #8
 8000658:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_SPI1_Init+0x74>)
 800065c:	f004 f9ca 	bl	80049f4 <HAL_SPI_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000666:	f000 faf7 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000034c 	.word	0x2000034c
 8000674:	40013000 	.word	0x40013000

08000678 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_TIM2_Init+0x9c>)
 8000698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59999;
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_TIM2_Init+0x9c>)
 80006a0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80006a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <MX_TIM2_Init+0x9c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_TIM2_Init+0x9c>)
 80006ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80006b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_TIM2_Init+0x9c>)
 80006b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006bc:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_TIM2_Init+0x9c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006c2:	4814      	ldr	r0, [pc, #80]	; (8000714 <MX_TIM2_Init+0x9c>)
 80006c4:	f004 fd0c 	bl	80050e0 <HAL_TIM_Base_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80006ce:	f000 fac3 	bl	8000c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4619      	mov	r1, r3
 80006de:	480d      	ldr	r0, [pc, #52]	; (8000714 <MX_TIM2_Init+0x9c>)
 80006e0:	f004 fdbe 	bl	8005260 <HAL_TIM_ConfigClockSource>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80006ea:	f000 fab5 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4619      	mov	r1, r3
 80006fa:	4806      	ldr	r0, [pc, #24]	; (8000714 <MX_TIM2_Init+0x9c>)
 80006fc:	f004 ffae 	bl	800565c <HAL_TIMEx_MasterConfigSynchronization>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000706:	f000 faa7 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	3720      	adds	r7, #32
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200003b0 	.word	0x200003b0

08000718 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_TIM4_Init+0x94>)
 8000738:	4a1d      	ldr	r2, [pc, #116]	; (80007b0 <MX_TIM4_Init+0x98>)
 800073a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 19;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_TIM4_Init+0x94>)
 800073e:	2213      	movs	r2, #19
 8000740:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_TIM4_Init+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_TIM4_Init+0x94>)
 800074a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800074e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_TIM4_Init+0x94>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_TIM4_Init+0x94>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800075c:	4813      	ldr	r0, [pc, #76]	; (80007ac <MX_TIM4_Init+0x94>)
 800075e:	f004 fcbf 	bl	80050e0 <HAL_TIM_Base_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000768:	f000 fa76 	bl	8000c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000770:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	4619      	mov	r1, r3
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_TIM4_Init+0x94>)
 800077a:	f004 fd71 	bl	8005260 <HAL_TIM_ConfigClockSource>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000784:	f000 fa68 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_TIM4_Init+0x94>)
 8000796:	f004 ff61 	bl	800565c <HAL_TIMEx_MasterConfigSynchronization>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80007a0:	f000 fa5a 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3720      	adds	r7, #32
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200003fc 	.word	0x200003fc
 80007b0:	40000800 	.word	0x40000800

080007b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_TIM5_Init+0x94>)
 80007d4:	4a1d      	ldr	r2, [pc, #116]	; (800084c <MX_TIM5_Init+0x98>)
 80007d6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 119;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_TIM5_Init+0x94>)
 80007da:	2277      	movs	r2, #119	; 0x77
 80007dc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_TIM5_Init+0x94>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_TIM5_Init+0x94>)
 80007e6:	f04f 32ff 	mov.w	r2, #4294967295
 80007ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_TIM5_Init+0x94>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_TIM5_Init+0x94>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80007f8:	4813      	ldr	r0, [pc, #76]	; (8000848 <MX_TIM5_Init+0x94>)
 80007fa:	f004 fc71 	bl	80050e0 <HAL_TIM_Base_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000804:	f000 fa28 	bl	8000c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	4619      	mov	r1, r3
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <MX_TIM5_Init+0x94>)
 8000816:	f004 fd23 	bl	8005260 <HAL_TIM_ConfigClockSource>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000820:	f000 fa1a 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_TIM5_Init+0x94>)
 8000832:	f004 ff13 	bl	800565c <HAL_TIMEx_MasterConfigSynchronization>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800083c:	f000 fa0c 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000448 	.word	0x20000448
 800084c:	40000c00 	.word	0x40000c00

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	; 0x38
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000866:	4bb4      	ldr	r3, [pc, #720]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4ab3      	ldr	r2, [pc, #716]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 800086c:	f043 0310 	orr.w	r3, r3, #16
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4bb1      	ldr	r3, [pc, #708]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0310 	and.w	r3, r3, #16
 800087a:	623b      	str	r3, [r7, #32]
 800087c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4bae      	ldr	r3, [pc, #696]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4aad      	ldr	r2, [pc, #692]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4bab      	ldr	r3, [pc, #684]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	61fb      	str	r3, [r7, #28]
 8000894:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000896:	4ba8      	ldr	r3, [pc, #672]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4aa7      	ldr	r2, [pc, #668]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 800089c:	f043 0320 	orr.w	r3, r3, #32
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4ba5      	ldr	r3, [pc, #660]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0320 	and.w	r3, r3, #32
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	4ba2      	ldr	r3, [pc, #648]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4aa1      	ldr	r2, [pc, #644]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 80008b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b9f      	ldr	r3, [pc, #636]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b9c      	ldr	r3, [pc, #624]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a9b      	ldr	r2, [pc, #620]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b99      	ldr	r3, [pc, #612]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008de:	4b96      	ldr	r3, [pc, #600]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a95      	ldr	r2, [pc, #596]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 80008e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b93      	ldr	r3, [pc, #588]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b90      	ldr	r3, [pc, #576]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a8f      	ldr	r2, [pc, #572]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b8d      	ldr	r3, [pc, #564]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	4b8a      	ldr	r3, [pc, #552]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a89      	ldr	r2, [pc, #548]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b87      	ldr	r3, [pc, #540]	; (8000b38 <MX_GPIO_Init+0x2e8>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000926:	f002 fc65 	bl	80031f4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 519c 	mov.w	r1, #4992	; 0x1380
 8000930:	4882      	ldr	r0, [pc, #520]	; (8000b3c <MX_GPIO_Init+0x2ec>)
 8000932:	f002 fa45 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2102      	movs	r1, #2
 800093a:	4881      	ldr	r0, [pc, #516]	; (8000b40 <MX_GPIO_Init+0x2f0>)
 800093c:	f002 fa40 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 8000946:	487f      	ldr	r0, [pc, #508]	; (8000b44 <MX_GPIO_Init+0x2f4>)
 8000948:	f002 fa3a 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000952:	487d      	ldr	r0, [pc, #500]	; (8000b48 <MX_GPIO_Init+0x2f8>)
 8000954:	f002 fa34 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800095e:	487b      	ldr	r0, [pc, #492]	; (8000b4c <MX_GPIO_Init+0x2fc>)
 8000960:	f002 fa2e 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2140      	movs	r1, #64	; 0x40
 8000968:	4879      	ldr	r0, [pc, #484]	; (8000b50 <MX_GPIO_Init+0x300>)
 800096a:	f002 fa29 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800096e:	230c      	movs	r3, #12
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800097e:	230d      	movs	r3, #13
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000986:	4619      	mov	r1, r3
 8000988:	486e      	ldr	r0, [pc, #440]	; (8000b44 <MX_GPIO_Init+0x2f4>)
 800098a:	f002 f887 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800098e:	2307      	movs	r3, #7
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000992:	2312      	movs	r3, #18
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800099e:	2304      	movs	r3, #4
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	4864      	ldr	r0, [pc, #400]	; (8000b3c <MX_GPIO_Init+0x2ec>)
 80009aa:	f002 f877 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
 80009ae:	f44f 539c 	mov.w	r3, #4992	; 0x1380
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	485d      	ldr	r0, [pc, #372]	; (8000b3c <MX_GPIO_Init+0x2ec>)
 80009c8:	f002 f868 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009cc:	233f      	movs	r3, #63	; 0x3f
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009d0:	230b      	movs	r3, #11
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	485c      	ldr	r0, [pc, #368]	; (8000b50 <MX_GPIO_Init+0x300>)
 80009e0:	f002 f85c 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009e4:	2302      	movs	r3, #2
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4851      	ldr	r0, [pc, #324]	; (8000b40 <MX_GPIO_Init+0x2f0>)
 80009fc:	f002 f84e 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000a00:	f44f 531e 	mov.w	r3, #10112	; 0x2780
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4849      	ldr	r0, [pc, #292]	; (8000b44 <MX_GPIO_Init+0x2f4>)
 8000a1e:	f002 f83d 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8000a22:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4842      	ldr	r0, [pc, #264]	; (8000b44 <MX_GPIO_Init+0x2f4>)
 8000a3c:	f002 f82e 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13;
 8000a40:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	483b      	ldr	r0, [pc, #236]	; (8000b48 <MX_GPIO_Init+0x2f8>)
 8000a5a:	f002 f81f 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000a70:	230d      	movs	r3, #13
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4833      	ldr	r0, [pc, #204]	; (8000b48 <MX_GPIO_Init+0x2f8>)
 8000a7c:	f002 f80e 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a94:	4619      	mov	r1, r3
 8000a96:	482c      	ldr	r0, [pc, #176]	; (8000b48 <MX_GPIO_Init+0x2f8>)
 8000a98:	f002 f800 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aae:	2307      	movs	r3, #7
 8000ab0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4824      	ldr	r0, [pc, #144]	; (8000b4c <MX_GPIO_Init+0x2fc>)
 8000aba:	f001 ffef 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000abe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481d      	ldr	r0, [pc, #116]	; (8000b4c <MX_GPIO_Init+0x2fc>)
 8000ad8:	f001 ffe0 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000adc:	2340      	movs	r3, #64	; 0x40
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ae0:	2311      	movs	r3, #17
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af0:	4619      	mov	r1, r3
 8000af2:	4817      	ldr	r0, [pc, #92]	; (8000b50 <MX_GPIO_Init+0x300>)
 8000af4:	f001 ffd2 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000af8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	4619      	mov	r1, r3
 8000b14:	480e      	ldr	r0, [pc, #56]	; (8000b50 <MX_GPIO_Init+0x300>)
 8000b16:	f001 ffc1 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000b1a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b2c:	230a      	movs	r3, #10
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	e00e      	b.n	8000b54 <MX_GPIO_Init+0x304>
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	48001400 	.word	0x48001400
 8000b40:	48001800 	.word	0x48001800
 8000b44:	48001000 	.word	0x48001000
 8000b48:	48000400 	.word	0x48000400
 8000b4c:	48000c00 	.word	0x48000c00
 8000b50:	48000800 	.word	0x48000800
 8000b54:	4619      	mov	r1, r3
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f001 ff9f 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b76:	f001 ff91 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b8a:	2309      	movs	r3, #9
 8000b8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b92:	4619      	mov	r1, r3
 8000b94:	4825      	ldr	r0, [pc, #148]	; (8000c2c <MX_GPIO_Init+0x3dc>)
 8000b96:	f001 ff81 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000baa:	230c      	movs	r3, #12
 8000bac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	481d      	ldr	r0, [pc, #116]	; (8000c2c <MX_GPIO_Init+0x3dc>)
 8000bb6:	f001 ff71 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000bba:	2378      	movs	r3, #120	; 0x78
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bca:	2307      	movs	r3, #7
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4815      	ldr	r0, [pc, #84]	; (8000c2c <MX_GPIO_Init+0x3dc>)
 8000bd6:	f001 ff61 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bda:	2330      	movs	r3, #48	; 0x30
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bea:	2306      	movs	r3, #6
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480e      	ldr	r0, [pc, #56]	; (8000c30 <MX_GPIO_Init+0x3e0>)
 8000bf6:	f001 ff51 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bfa:	2340      	movs	r3, #64	; 0x40
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4808      	ldr	r0, [pc, #32]	; (8000c30 <MX_GPIO_Init+0x3e0>)
 8000c0e:	f001 ff45 	bl	8002a9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2028      	movs	r0, #40	; 0x28
 8000c18:	f001 ff09 	bl	8002a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c1c:	2028      	movs	r0, #40	; 0x28
 8000c1e:	f001 ff22 	bl	8002a66 <HAL_NVIC_EnableIRQ>

}
 8000c22:	bf00      	nop
 8000c24:	3738      	adds	r7, #56	; 0x38
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	48000c00 	.word	0x48000c00
 8000c30:	48000400 	.word	0x48000400

08000c34 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000c3c:	1d39      	adds	r1, r7, #4
 8000c3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c42:	2201      	movs	r2, #1
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <__io_putchar+0x20>)
 8000c46:	f004 fde1 	bl	800580c <HAL_UART_Transmit>
  return ch;
 8000c4a:	687b      	ldr	r3, [r7, #4]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200002bc 	.word	0x200002bc

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <Error_Handler+0x8>
 8000c62:	bf00      	nop

08000c64 <strlen>:
 8000c64:	4603      	mov	r3, r0
 8000c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c6a:	2a00      	cmp	r2, #0
 8000c6c:	d1fb      	bne.n	8000c66 <strlen+0x2>
 8000c6e:	1a18      	subs	r0, r3, r0
 8000c70:	3801      	subs	r0, #1
 8000c72:	4770      	bx	lr
	...

08000c80 <memchr>:
 8000c80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000c84:	2a10      	cmp	r2, #16
 8000c86:	db2b      	blt.n	8000ce0 <memchr+0x60>
 8000c88:	f010 0f07 	tst.w	r0, #7
 8000c8c:	d008      	beq.n	8000ca0 <memchr+0x20>
 8000c8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000c92:	3a01      	subs	r2, #1
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d02d      	beq.n	8000cf4 <memchr+0x74>
 8000c98:	f010 0f07 	tst.w	r0, #7
 8000c9c:	b342      	cbz	r2, 8000cf0 <memchr+0x70>
 8000c9e:	d1f6      	bne.n	8000c8e <memchr+0xe>
 8000ca0:	b4f0      	push	{r4, r5, r6, r7}
 8000ca2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000ca6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000caa:	f022 0407 	bic.w	r4, r2, #7
 8000cae:	f07f 0700 	mvns.w	r7, #0
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000cb8:	3c08      	subs	r4, #8
 8000cba:	ea85 0501 	eor.w	r5, r5, r1
 8000cbe:	ea86 0601 	eor.w	r6, r6, r1
 8000cc2:	fa85 f547 	uadd8	r5, r5, r7
 8000cc6:	faa3 f587 	sel	r5, r3, r7
 8000cca:	fa86 f647 	uadd8	r6, r6, r7
 8000cce:	faa5 f687 	sel	r6, r5, r7
 8000cd2:	b98e      	cbnz	r6, 8000cf8 <memchr+0x78>
 8000cd4:	d1ee      	bne.n	8000cb4 <memchr+0x34>
 8000cd6:	bcf0      	pop	{r4, r5, r6, r7}
 8000cd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000cdc:	f002 0207 	and.w	r2, r2, #7
 8000ce0:	b132      	cbz	r2, 8000cf0 <memchr+0x70>
 8000ce2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000ce6:	3a01      	subs	r2, #1
 8000ce8:	ea83 0301 	eor.w	r3, r3, r1
 8000cec:	b113      	cbz	r3, 8000cf4 <memchr+0x74>
 8000cee:	d1f8      	bne.n	8000ce2 <memchr+0x62>
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	4770      	bx	lr
 8000cf4:	3801      	subs	r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	2d00      	cmp	r5, #0
 8000cfa:	bf06      	itte	eq
 8000cfc:	4635      	moveq	r5, r6
 8000cfe:	3803      	subeq	r0, #3
 8000d00:	3807      	subne	r0, #7
 8000d02:	f015 0f01 	tst.w	r5, #1
 8000d06:	d107      	bne.n	8000d18 <memchr+0x98>
 8000d08:	3001      	adds	r0, #1
 8000d0a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000d0e:	bf02      	ittt	eq
 8000d10:	3001      	addeq	r0, #1
 8000d12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000d16:	3001      	addeq	r0, #1
 8000d18:	bcf0      	pop	{r4, r5, r6, r7}
 8000d1a:	3801      	subs	r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <__aeabi_drsub>:
 8000d20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000d24:	e002      	b.n	8000d2c <__adddf3>
 8000d26:	bf00      	nop

08000d28 <__aeabi_dsub>:
 8000d28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000d2c <__adddf3>:
 8000d2c:	b530      	push	{r4, r5, lr}
 8000d2e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000d32:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000d36:	ea94 0f05 	teq	r4, r5
 8000d3a:	bf08      	it	eq
 8000d3c:	ea90 0f02 	teqeq	r0, r2
 8000d40:	bf1f      	itttt	ne
 8000d42:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000d46:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000d4a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000d4e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000d52:	f000 80e2 	beq.w	8000f1a <__adddf3+0x1ee>
 8000d56:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000d5a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000d5e:	bfb8      	it	lt
 8000d60:	426d      	neglt	r5, r5
 8000d62:	dd0c      	ble.n	8000d7e <__adddf3+0x52>
 8000d64:	442c      	add	r4, r5
 8000d66:	ea80 0202 	eor.w	r2, r0, r2
 8000d6a:	ea81 0303 	eor.w	r3, r1, r3
 8000d6e:	ea82 0000 	eor.w	r0, r2, r0
 8000d72:	ea83 0101 	eor.w	r1, r3, r1
 8000d76:	ea80 0202 	eor.w	r2, r0, r2
 8000d7a:	ea81 0303 	eor.w	r3, r1, r3
 8000d7e:	2d36      	cmp	r5, #54	; 0x36
 8000d80:	bf88      	it	hi
 8000d82:	bd30      	pophi	{r4, r5, pc}
 8000d84:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d88:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000d8c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000d90:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000d94:	d002      	beq.n	8000d9c <__adddf3+0x70>
 8000d96:	4240      	negs	r0, r0
 8000d98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d9c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000da0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000da4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000da8:	d002      	beq.n	8000db0 <__adddf3+0x84>
 8000daa:	4252      	negs	r2, r2
 8000dac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000db0:	ea94 0f05 	teq	r4, r5
 8000db4:	f000 80a7 	beq.w	8000f06 <__adddf3+0x1da>
 8000db8:	f1a4 0401 	sub.w	r4, r4, #1
 8000dbc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000dc0:	db0d      	blt.n	8000dde <__adddf3+0xb2>
 8000dc2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000dc6:	fa22 f205 	lsr.w	r2, r2, r5
 8000dca:	1880      	adds	r0, r0, r2
 8000dcc:	f141 0100 	adc.w	r1, r1, #0
 8000dd0:	fa03 f20e 	lsl.w	r2, r3, lr
 8000dd4:	1880      	adds	r0, r0, r2
 8000dd6:	fa43 f305 	asr.w	r3, r3, r5
 8000dda:	4159      	adcs	r1, r3
 8000ddc:	e00e      	b.n	8000dfc <__adddf3+0xd0>
 8000dde:	f1a5 0520 	sub.w	r5, r5, #32
 8000de2:	f10e 0e20 	add.w	lr, lr, #32
 8000de6:	2a01      	cmp	r2, #1
 8000de8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000dec:	bf28      	it	cs
 8000dee:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000df2:	fa43 f305 	asr.w	r3, r3, r5
 8000df6:	18c0      	adds	r0, r0, r3
 8000df8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000dfc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000e00:	d507      	bpl.n	8000e12 <__adddf3+0xe6>
 8000e02:	f04f 0e00 	mov.w	lr, #0
 8000e06:	f1dc 0c00 	rsbs	ip, ip, #0
 8000e0a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000e0e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000e12:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000e16:	d31b      	bcc.n	8000e50 <__adddf3+0x124>
 8000e18:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000e1c:	d30c      	bcc.n	8000e38 <__adddf3+0x10c>
 8000e1e:	0849      	lsrs	r1, r1, #1
 8000e20:	ea5f 0030 	movs.w	r0, r0, rrx
 8000e24:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000e28:	f104 0401 	add.w	r4, r4, #1
 8000e2c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000e30:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000e34:	f080 809a 	bcs.w	8000f6c <__adddf3+0x240>
 8000e38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e3c:	bf08      	it	eq
 8000e3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000e42:	f150 0000 	adcs.w	r0, r0, #0
 8000e46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000e4a:	ea41 0105 	orr.w	r1, r1, r5
 8000e4e:	bd30      	pop	{r4, r5, pc}
 8000e50:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000e54:	4140      	adcs	r0, r0
 8000e56:	eb41 0101 	adc.w	r1, r1, r1
 8000e5a:	3c01      	subs	r4, #1
 8000e5c:	bf28      	it	cs
 8000e5e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000e62:	d2e9      	bcs.n	8000e38 <__adddf3+0x10c>
 8000e64:	f091 0f00 	teq	r1, #0
 8000e68:	bf04      	itt	eq
 8000e6a:	4601      	moveq	r1, r0
 8000e6c:	2000      	moveq	r0, #0
 8000e6e:	fab1 f381 	clz	r3, r1
 8000e72:	bf08      	it	eq
 8000e74:	3320      	addeq	r3, #32
 8000e76:	f1a3 030b 	sub.w	r3, r3, #11
 8000e7a:	f1b3 0220 	subs.w	r2, r3, #32
 8000e7e:	da0c      	bge.n	8000e9a <__adddf3+0x16e>
 8000e80:	320c      	adds	r2, #12
 8000e82:	dd08      	ble.n	8000e96 <__adddf3+0x16a>
 8000e84:	f102 0c14 	add.w	ip, r2, #20
 8000e88:	f1c2 020c 	rsb	r2, r2, #12
 8000e8c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000e90:	fa21 f102 	lsr.w	r1, r1, r2
 8000e94:	e00c      	b.n	8000eb0 <__adddf3+0x184>
 8000e96:	f102 0214 	add.w	r2, r2, #20
 8000e9a:	bfd8      	it	le
 8000e9c:	f1c2 0c20 	rsble	ip, r2, #32
 8000ea0:	fa01 f102 	lsl.w	r1, r1, r2
 8000ea4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ea8:	bfdc      	itt	le
 8000eaa:	ea41 010c 	orrle.w	r1, r1, ip
 8000eae:	4090      	lslle	r0, r2
 8000eb0:	1ae4      	subs	r4, r4, r3
 8000eb2:	bfa2      	ittt	ge
 8000eb4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000eb8:	4329      	orrge	r1, r5
 8000eba:	bd30      	popge	{r4, r5, pc}
 8000ebc:	ea6f 0404 	mvn.w	r4, r4
 8000ec0:	3c1f      	subs	r4, #31
 8000ec2:	da1c      	bge.n	8000efe <__adddf3+0x1d2>
 8000ec4:	340c      	adds	r4, #12
 8000ec6:	dc0e      	bgt.n	8000ee6 <__adddf3+0x1ba>
 8000ec8:	f104 0414 	add.w	r4, r4, #20
 8000ecc:	f1c4 0220 	rsb	r2, r4, #32
 8000ed0:	fa20 f004 	lsr.w	r0, r0, r4
 8000ed4:	fa01 f302 	lsl.w	r3, r1, r2
 8000ed8:	ea40 0003 	orr.w	r0, r0, r3
 8000edc:	fa21 f304 	lsr.w	r3, r1, r4
 8000ee0:	ea45 0103 	orr.w	r1, r5, r3
 8000ee4:	bd30      	pop	{r4, r5, pc}
 8000ee6:	f1c4 040c 	rsb	r4, r4, #12
 8000eea:	f1c4 0220 	rsb	r2, r4, #32
 8000eee:	fa20 f002 	lsr.w	r0, r0, r2
 8000ef2:	fa01 f304 	lsl.w	r3, r1, r4
 8000ef6:	ea40 0003 	orr.w	r0, r0, r3
 8000efa:	4629      	mov	r1, r5
 8000efc:	bd30      	pop	{r4, r5, pc}
 8000efe:	fa21 f004 	lsr.w	r0, r1, r4
 8000f02:	4629      	mov	r1, r5
 8000f04:	bd30      	pop	{r4, r5, pc}
 8000f06:	f094 0f00 	teq	r4, #0
 8000f0a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000f0e:	bf06      	itte	eq
 8000f10:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000f14:	3401      	addeq	r4, #1
 8000f16:	3d01      	subne	r5, #1
 8000f18:	e74e      	b.n	8000db8 <__adddf3+0x8c>
 8000f1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000f1e:	bf18      	it	ne
 8000f20:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000f24:	d029      	beq.n	8000f7a <__adddf3+0x24e>
 8000f26:	ea94 0f05 	teq	r4, r5
 8000f2a:	bf08      	it	eq
 8000f2c:	ea90 0f02 	teqeq	r0, r2
 8000f30:	d005      	beq.n	8000f3e <__adddf3+0x212>
 8000f32:	ea54 0c00 	orrs.w	ip, r4, r0
 8000f36:	bf04      	itt	eq
 8000f38:	4619      	moveq	r1, r3
 8000f3a:	4610      	moveq	r0, r2
 8000f3c:	bd30      	pop	{r4, r5, pc}
 8000f3e:	ea91 0f03 	teq	r1, r3
 8000f42:	bf1e      	ittt	ne
 8000f44:	2100      	movne	r1, #0
 8000f46:	2000      	movne	r0, #0
 8000f48:	bd30      	popne	{r4, r5, pc}
 8000f4a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000f4e:	d105      	bne.n	8000f5c <__adddf3+0x230>
 8000f50:	0040      	lsls	r0, r0, #1
 8000f52:	4149      	adcs	r1, r1
 8000f54:	bf28      	it	cs
 8000f56:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000f5a:	bd30      	pop	{r4, r5, pc}
 8000f5c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000f60:	bf3c      	itt	cc
 8000f62:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000f66:	bd30      	popcc	{r4, r5, pc}
 8000f68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000f6c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000f70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000f74:	f04f 0000 	mov.w	r0, #0
 8000f78:	bd30      	pop	{r4, r5, pc}
 8000f7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000f7e:	bf1a      	itte	ne
 8000f80:	4619      	movne	r1, r3
 8000f82:	4610      	movne	r0, r2
 8000f84:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000f88:	bf1c      	itt	ne
 8000f8a:	460b      	movne	r3, r1
 8000f8c:	4602      	movne	r2, r0
 8000f8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000f92:	bf06      	itte	eq
 8000f94:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000f98:	ea91 0f03 	teqeq	r1, r3
 8000f9c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000fa0:	bd30      	pop	{r4, r5, pc}
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_ui2d>:
 8000fa4:	f090 0f00 	teq	r0, #0
 8000fa8:	bf04      	itt	eq
 8000faa:	2100      	moveq	r1, #0
 8000fac:	4770      	bxeq	lr
 8000fae:	b530      	push	{r4, r5, lr}
 8000fb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000fb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000fb8:	f04f 0500 	mov.w	r5, #0
 8000fbc:	f04f 0100 	mov.w	r1, #0
 8000fc0:	e750      	b.n	8000e64 <__adddf3+0x138>
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_i2d>:
 8000fc4:	f090 0f00 	teq	r0, #0
 8000fc8:	bf04      	itt	eq
 8000fca:	2100      	moveq	r1, #0
 8000fcc:	4770      	bxeq	lr
 8000fce:	b530      	push	{r4, r5, lr}
 8000fd0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000fd4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000fd8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000fdc:	bf48      	it	mi
 8000fde:	4240      	negmi	r0, r0
 8000fe0:	f04f 0100 	mov.w	r1, #0
 8000fe4:	e73e      	b.n	8000e64 <__adddf3+0x138>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_f2d>:
 8000fe8:	0042      	lsls	r2, r0, #1
 8000fea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000fee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ff2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000ff6:	bf1f      	itttt	ne
 8000ff8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000ffc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8001000:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8001004:	4770      	bxne	lr
 8001006:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800100a:	bf08      	it	eq
 800100c:	4770      	bxeq	lr
 800100e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8001012:	bf04      	itt	eq
 8001014:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8001018:	4770      	bxeq	lr
 800101a:	b530      	push	{r4, r5, lr}
 800101c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8001020:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001024:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001028:	e71c      	b.n	8000e64 <__adddf3+0x138>
 800102a:	bf00      	nop

0800102c <__aeabi_ul2d>:
 800102c:	ea50 0201 	orrs.w	r2, r0, r1
 8001030:	bf08      	it	eq
 8001032:	4770      	bxeq	lr
 8001034:	b530      	push	{r4, r5, lr}
 8001036:	f04f 0500 	mov.w	r5, #0
 800103a:	e00a      	b.n	8001052 <__aeabi_l2d+0x16>

0800103c <__aeabi_l2d>:
 800103c:	ea50 0201 	orrs.w	r2, r0, r1
 8001040:	bf08      	it	eq
 8001042:	4770      	bxeq	lr
 8001044:	b530      	push	{r4, r5, lr}
 8001046:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800104a:	d502      	bpl.n	8001052 <__aeabi_l2d+0x16>
 800104c:	4240      	negs	r0, r0
 800104e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001052:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001056:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800105a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800105e:	f43f aed8 	beq.w	8000e12 <__adddf3+0xe6>
 8001062:	f04f 0203 	mov.w	r2, #3
 8001066:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800106a:	bf18      	it	ne
 800106c:	3203      	addne	r2, #3
 800106e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001072:	bf18      	it	ne
 8001074:	3203      	addne	r2, #3
 8001076:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800107a:	f1c2 0320 	rsb	r3, r2, #32
 800107e:	fa00 fc03 	lsl.w	ip, r0, r3
 8001082:	fa20 f002 	lsr.w	r0, r0, r2
 8001086:	fa01 fe03 	lsl.w	lr, r1, r3
 800108a:	ea40 000e 	orr.w	r0, r0, lr
 800108e:	fa21 f102 	lsr.w	r1, r1, r2
 8001092:	4414      	add	r4, r2
 8001094:	e6bd      	b.n	8000e12 <__adddf3+0xe6>
 8001096:	bf00      	nop

08001098 <__aeabi_dmul>:
 8001098:	b570      	push	{r4, r5, r6, lr}
 800109a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800109e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80010a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80010a6:	bf1d      	ittte	ne
 80010a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80010ac:	ea94 0f0c 	teqne	r4, ip
 80010b0:	ea95 0f0c 	teqne	r5, ip
 80010b4:	f000 f8de 	bleq	8001274 <__aeabi_dmul+0x1dc>
 80010b8:	442c      	add	r4, r5
 80010ba:	ea81 0603 	eor.w	r6, r1, r3
 80010be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80010c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80010c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80010ca:	bf18      	it	ne
 80010cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80010d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80010d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010d8:	d038      	beq.n	800114c <__aeabi_dmul+0xb4>
 80010da:	fba0 ce02 	umull	ip, lr, r0, r2
 80010de:	f04f 0500 	mov.w	r5, #0
 80010e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80010e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80010ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80010ee:	f04f 0600 	mov.w	r6, #0
 80010f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80010f6:	f09c 0f00 	teq	ip, #0
 80010fa:	bf18      	it	ne
 80010fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8001100:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8001104:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8001108:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800110c:	d204      	bcs.n	8001118 <__aeabi_dmul+0x80>
 800110e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8001112:	416d      	adcs	r5, r5
 8001114:	eb46 0606 	adc.w	r6, r6, r6
 8001118:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800111c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8001120:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8001124:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8001128:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800112c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8001130:	bf88      	it	hi
 8001132:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001136:	d81e      	bhi.n	8001176 <__aeabi_dmul+0xde>
 8001138:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800113c:	bf08      	it	eq
 800113e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8001142:	f150 0000 	adcs.w	r0, r0, #0
 8001146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800114a:	bd70      	pop	{r4, r5, r6, pc}
 800114c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8001150:	ea46 0101 	orr.w	r1, r6, r1
 8001154:	ea40 0002 	orr.w	r0, r0, r2
 8001158:	ea81 0103 	eor.w	r1, r1, r3
 800115c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8001160:	bfc2      	ittt	gt
 8001162:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001166:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800116a:	bd70      	popgt	{r4, r5, r6, pc}
 800116c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001170:	f04f 0e00 	mov.w	lr, #0
 8001174:	3c01      	subs	r4, #1
 8001176:	f300 80ab 	bgt.w	80012d0 <__aeabi_dmul+0x238>
 800117a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800117e:	bfde      	ittt	le
 8001180:	2000      	movle	r0, #0
 8001182:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8001186:	bd70      	pople	{r4, r5, r6, pc}
 8001188:	f1c4 0400 	rsb	r4, r4, #0
 800118c:	3c20      	subs	r4, #32
 800118e:	da35      	bge.n	80011fc <__aeabi_dmul+0x164>
 8001190:	340c      	adds	r4, #12
 8001192:	dc1b      	bgt.n	80011cc <__aeabi_dmul+0x134>
 8001194:	f104 0414 	add.w	r4, r4, #20
 8001198:	f1c4 0520 	rsb	r5, r4, #32
 800119c:	fa00 f305 	lsl.w	r3, r0, r5
 80011a0:	fa20 f004 	lsr.w	r0, r0, r4
 80011a4:	fa01 f205 	lsl.w	r2, r1, r5
 80011a8:	ea40 0002 	orr.w	r0, r0, r2
 80011ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80011b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80011b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80011b8:	fa21 f604 	lsr.w	r6, r1, r4
 80011bc:	eb42 0106 	adc.w	r1, r2, r6
 80011c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80011c4:	bf08      	it	eq
 80011c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80011ca:	bd70      	pop	{r4, r5, r6, pc}
 80011cc:	f1c4 040c 	rsb	r4, r4, #12
 80011d0:	f1c4 0520 	rsb	r5, r4, #32
 80011d4:	fa00 f304 	lsl.w	r3, r0, r4
 80011d8:	fa20 f005 	lsr.w	r0, r0, r5
 80011dc:	fa01 f204 	lsl.w	r2, r1, r4
 80011e0:	ea40 0002 	orr.w	r0, r0, r2
 80011e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80011e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80011ec:	f141 0100 	adc.w	r1, r1, #0
 80011f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80011f4:	bf08      	it	eq
 80011f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
 80011fc:	f1c4 0520 	rsb	r5, r4, #32
 8001200:	fa00 f205 	lsl.w	r2, r0, r5
 8001204:	ea4e 0e02 	orr.w	lr, lr, r2
 8001208:	fa20 f304 	lsr.w	r3, r0, r4
 800120c:	fa01 f205 	lsl.w	r2, r1, r5
 8001210:	ea43 0302 	orr.w	r3, r3, r2
 8001214:	fa21 f004 	lsr.w	r0, r1, r4
 8001218:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800121c:	fa21 f204 	lsr.w	r2, r1, r4
 8001220:	ea20 0002 	bic.w	r0, r0, r2
 8001224:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8001228:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800122c:	bf08      	it	eq
 800122e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001232:	bd70      	pop	{r4, r5, r6, pc}
 8001234:	f094 0f00 	teq	r4, #0
 8001238:	d10f      	bne.n	800125a <__aeabi_dmul+0x1c2>
 800123a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800123e:	0040      	lsls	r0, r0, #1
 8001240:	eb41 0101 	adc.w	r1, r1, r1
 8001244:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001248:	bf08      	it	eq
 800124a:	3c01      	subeq	r4, #1
 800124c:	d0f7      	beq.n	800123e <__aeabi_dmul+0x1a6>
 800124e:	ea41 0106 	orr.w	r1, r1, r6
 8001252:	f095 0f00 	teq	r5, #0
 8001256:	bf18      	it	ne
 8001258:	4770      	bxne	lr
 800125a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800125e:	0052      	lsls	r2, r2, #1
 8001260:	eb43 0303 	adc.w	r3, r3, r3
 8001264:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001268:	bf08      	it	eq
 800126a:	3d01      	subeq	r5, #1
 800126c:	d0f7      	beq.n	800125e <__aeabi_dmul+0x1c6>
 800126e:	ea43 0306 	orr.w	r3, r3, r6
 8001272:	4770      	bx	lr
 8001274:	ea94 0f0c 	teq	r4, ip
 8001278:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800127c:	bf18      	it	ne
 800127e:	ea95 0f0c 	teqne	r5, ip
 8001282:	d00c      	beq.n	800129e <__aeabi_dmul+0x206>
 8001284:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001288:	bf18      	it	ne
 800128a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800128e:	d1d1      	bne.n	8001234 <__aeabi_dmul+0x19c>
 8001290:	ea81 0103 	eor.w	r1, r1, r3
 8001294:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001298:	f04f 0000 	mov.w	r0, #0
 800129c:	bd70      	pop	{r4, r5, r6, pc}
 800129e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80012a2:	bf06      	itte	eq
 80012a4:	4610      	moveq	r0, r2
 80012a6:	4619      	moveq	r1, r3
 80012a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80012ac:	d019      	beq.n	80012e2 <__aeabi_dmul+0x24a>
 80012ae:	ea94 0f0c 	teq	r4, ip
 80012b2:	d102      	bne.n	80012ba <__aeabi_dmul+0x222>
 80012b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80012b8:	d113      	bne.n	80012e2 <__aeabi_dmul+0x24a>
 80012ba:	ea95 0f0c 	teq	r5, ip
 80012be:	d105      	bne.n	80012cc <__aeabi_dmul+0x234>
 80012c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80012c4:	bf1c      	itt	ne
 80012c6:	4610      	movne	r0, r2
 80012c8:	4619      	movne	r1, r3
 80012ca:	d10a      	bne.n	80012e2 <__aeabi_dmul+0x24a>
 80012cc:	ea81 0103 	eor.w	r1, r1, r3
 80012d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80012d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80012d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80012dc:	f04f 0000 	mov.w	r0, #0
 80012e0:	bd70      	pop	{r4, r5, r6, pc}
 80012e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80012e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80012ea:	bd70      	pop	{r4, r5, r6, pc}

080012ec <__aeabi_ddiv>:
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80012f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80012f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80012fa:	bf1d      	ittte	ne
 80012fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001300:	ea94 0f0c 	teqne	r4, ip
 8001304:	ea95 0f0c 	teqne	r5, ip
 8001308:	f000 f8a7 	bleq	800145a <__aeabi_ddiv+0x16e>
 800130c:	eba4 0405 	sub.w	r4, r4, r5
 8001310:	ea81 0e03 	eor.w	lr, r1, r3
 8001314:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800131c:	f000 8088 	beq.w	8001430 <__aeabi_ddiv+0x144>
 8001320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001324:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8001328:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800132c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8001330:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8001334:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8001338:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800133c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8001340:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8001344:	429d      	cmp	r5, r3
 8001346:	bf08      	it	eq
 8001348:	4296      	cmpeq	r6, r2
 800134a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800134e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8001352:	d202      	bcs.n	800135a <__aeabi_ddiv+0x6e>
 8001354:	085b      	lsrs	r3, r3, #1
 8001356:	ea4f 0232 	mov.w	r2, r2, rrx
 800135a:	1ab6      	subs	r6, r6, r2
 800135c:	eb65 0503 	sbc.w	r5, r5, r3
 8001360:	085b      	lsrs	r3, r3, #1
 8001362:	ea4f 0232 	mov.w	r2, r2, rrx
 8001366:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800136a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800136e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001372:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001376:	bf22      	ittt	cs
 8001378:	1ab6      	subcs	r6, r6, r2
 800137a:	4675      	movcs	r5, lr
 800137c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001380:	085b      	lsrs	r3, r3, #1
 8001382:	ea4f 0232 	mov.w	r2, r2, rrx
 8001386:	ebb6 0e02 	subs.w	lr, r6, r2
 800138a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800138e:	bf22      	ittt	cs
 8001390:	1ab6      	subcs	r6, r6, r2
 8001392:	4675      	movcs	r5, lr
 8001394:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001398:	085b      	lsrs	r3, r3, #1
 800139a:	ea4f 0232 	mov.w	r2, r2, rrx
 800139e:	ebb6 0e02 	subs.w	lr, r6, r2
 80013a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80013a6:	bf22      	ittt	cs
 80013a8:	1ab6      	subcs	r6, r6, r2
 80013aa:	4675      	movcs	r5, lr
 80013ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80013b0:	085b      	lsrs	r3, r3, #1
 80013b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80013b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80013ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80013be:	bf22      	ittt	cs
 80013c0:	1ab6      	subcs	r6, r6, r2
 80013c2:	4675      	movcs	r5, lr
 80013c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80013c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80013cc:	d018      	beq.n	8001400 <__aeabi_ddiv+0x114>
 80013ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80013d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80013d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80013da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80013de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80013e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80013e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80013ea:	d1c0      	bne.n	800136e <__aeabi_ddiv+0x82>
 80013ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80013f0:	d10b      	bne.n	800140a <__aeabi_ddiv+0x11e>
 80013f2:	ea41 0100 	orr.w	r1, r1, r0
 80013f6:	f04f 0000 	mov.w	r0, #0
 80013fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80013fe:	e7b6      	b.n	800136e <__aeabi_ddiv+0x82>
 8001400:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001404:	bf04      	itt	eq
 8001406:	4301      	orreq	r1, r0
 8001408:	2000      	moveq	r0, #0
 800140a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800140e:	bf88      	it	hi
 8001410:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001414:	f63f aeaf 	bhi.w	8001176 <__aeabi_dmul+0xde>
 8001418:	ebb5 0c03 	subs.w	ip, r5, r3
 800141c:	bf04      	itt	eq
 800141e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8001422:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001426:	f150 0000 	adcs.w	r0, r0, #0
 800142a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800142e:	bd70      	pop	{r4, r5, r6, pc}
 8001430:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8001434:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8001438:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800143c:	bfc2      	ittt	gt
 800143e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001442:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001446:	bd70      	popgt	{r4, r5, r6, pc}
 8001448:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800144c:	f04f 0e00 	mov.w	lr, #0
 8001450:	3c01      	subs	r4, #1
 8001452:	e690      	b.n	8001176 <__aeabi_dmul+0xde>
 8001454:	ea45 0e06 	orr.w	lr, r5, r6
 8001458:	e68d      	b.n	8001176 <__aeabi_dmul+0xde>
 800145a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800145e:	ea94 0f0c 	teq	r4, ip
 8001462:	bf08      	it	eq
 8001464:	ea95 0f0c 	teqeq	r5, ip
 8001468:	f43f af3b 	beq.w	80012e2 <__aeabi_dmul+0x24a>
 800146c:	ea94 0f0c 	teq	r4, ip
 8001470:	d10a      	bne.n	8001488 <__aeabi_ddiv+0x19c>
 8001472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001476:	f47f af34 	bne.w	80012e2 <__aeabi_dmul+0x24a>
 800147a:	ea95 0f0c 	teq	r5, ip
 800147e:	f47f af25 	bne.w	80012cc <__aeabi_dmul+0x234>
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	e72c      	b.n	80012e2 <__aeabi_dmul+0x24a>
 8001488:	ea95 0f0c 	teq	r5, ip
 800148c:	d106      	bne.n	800149c <__aeabi_ddiv+0x1b0>
 800148e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001492:	f43f aefd 	beq.w	8001290 <__aeabi_dmul+0x1f8>
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	e722      	b.n	80012e2 <__aeabi_dmul+0x24a>
 800149c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80014a0:	bf18      	it	ne
 80014a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80014a6:	f47f aec5 	bne.w	8001234 <__aeabi_dmul+0x19c>
 80014aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80014ae:	f47f af0d 	bne.w	80012cc <__aeabi_dmul+0x234>
 80014b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80014b6:	f47f aeeb 	bne.w	8001290 <__aeabi_dmul+0x1f8>
 80014ba:	e712      	b.n	80012e2 <__aeabi_dmul+0x24a>

080014bc <__gedf2>:
 80014bc:	f04f 3cff 	mov.w	ip, #4294967295
 80014c0:	e006      	b.n	80014d0 <__cmpdf2+0x4>
 80014c2:	bf00      	nop

080014c4 <__ledf2>:
 80014c4:	f04f 0c01 	mov.w	ip, #1
 80014c8:	e002      	b.n	80014d0 <__cmpdf2+0x4>
 80014ca:	bf00      	nop

080014cc <__cmpdf2>:
 80014cc:	f04f 0c01 	mov.w	ip, #1
 80014d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80014d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80014d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80014dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80014e0:	bf18      	it	ne
 80014e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80014e6:	d01b      	beq.n	8001520 <__cmpdf2+0x54>
 80014e8:	b001      	add	sp, #4
 80014ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80014ee:	bf0c      	ite	eq
 80014f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80014f4:	ea91 0f03 	teqne	r1, r3
 80014f8:	bf02      	ittt	eq
 80014fa:	ea90 0f02 	teqeq	r0, r2
 80014fe:	2000      	moveq	r0, #0
 8001500:	4770      	bxeq	lr
 8001502:	f110 0f00 	cmn.w	r0, #0
 8001506:	ea91 0f03 	teq	r1, r3
 800150a:	bf58      	it	pl
 800150c:	4299      	cmppl	r1, r3
 800150e:	bf08      	it	eq
 8001510:	4290      	cmpeq	r0, r2
 8001512:	bf2c      	ite	cs
 8001514:	17d8      	asrcs	r0, r3, #31
 8001516:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800151a:	f040 0001 	orr.w	r0, r0, #1
 800151e:	4770      	bx	lr
 8001520:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001528:	d102      	bne.n	8001530 <__cmpdf2+0x64>
 800152a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800152e:	d107      	bne.n	8001540 <__cmpdf2+0x74>
 8001530:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001534:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001538:	d1d6      	bne.n	80014e8 <__cmpdf2+0x1c>
 800153a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800153e:	d0d3      	beq.n	80014e8 <__cmpdf2+0x1c>
 8001540:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <__aeabi_cdrcmple>:
 8001548:	4684      	mov	ip, r0
 800154a:	4610      	mov	r0, r2
 800154c:	4662      	mov	r2, ip
 800154e:	468c      	mov	ip, r1
 8001550:	4619      	mov	r1, r3
 8001552:	4663      	mov	r3, ip
 8001554:	e000      	b.n	8001558 <__aeabi_cdcmpeq>
 8001556:	bf00      	nop

08001558 <__aeabi_cdcmpeq>:
 8001558:	b501      	push	{r0, lr}
 800155a:	f7ff ffb7 	bl	80014cc <__cmpdf2>
 800155e:	2800      	cmp	r0, #0
 8001560:	bf48      	it	mi
 8001562:	f110 0f00 	cmnmi.w	r0, #0
 8001566:	bd01      	pop	{r0, pc}

08001568 <__aeabi_dcmpeq>:
 8001568:	f84d ed08 	str.w	lr, [sp, #-8]!
 800156c:	f7ff fff4 	bl	8001558 <__aeabi_cdcmpeq>
 8001570:	bf0c      	ite	eq
 8001572:	2001      	moveq	r0, #1
 8001574:	2000      	movne	r0, #0
 8001576:	f85d fb08 	ldr.w	pc, [sp], #8
 800157a:	bf00      	nop

0800157c <__aeabi_dcmplt>:
 800157c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001580:	f7ff ffea 	bl	8001558 <__aeabi_cdcmpeq>
 8001584:	bf34      	ite	cc
 8001586:	2001      	movcc	r0, #1
 8001588:	2000      	movcs	r0, #0
 800158a:	f85d fb08 	ldr.w	pc, [sp], #8
 800158e:	bf00      	nop

08001590 <__aeabi_dcmple>:
 8001590:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001594:	f7ff ffe0 	bl	8001558 <__aeabi_cdcmpeq>
 8001598:	bf94      	ite	ls
 800159a:	2001      	movls	r0, #1
 800159c:	2000      	movhi	r0, #0
 800159e:	f85d fb08 	ldr.w	pc, [sp], #8
 80015a2:	bf00      	nop

080015a4 <__aeabi_dcmpge>:
 80015a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80015a8:	f7ff ffce 	bl	8001548 <__aeabi_cdrcmple>
 80015ac:	bf94      	ite	ls
 80015ae:	2001      	movls	r0, #1
 80015b0:	2000      	movhi	r0, #0
 80015b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80015b6:	bf00      	nop

080015b8 <__aeabi_dcmpgt>:
 80015b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80015bc:	f7ff ffc4 	bl	8001548 <__aeabi_cdrcmple>
 80015c0:	bf34      	ite	cc
 80015c2:	2001      	movcc	r0, #1
 80015c4:	2000      	movcs	r0, #0
 80015c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80015ca:	bf00      	nop

080015cc <__aeabi_dcmpun>:
 80015cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80015d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80015d4:	d102      	bne.n	80015dc <__aeabi_dcmpun+0x10>
 80015d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80015da:	d10a      	bne.n	80015f2 <__aeabi_dcmpun+0x26>
 80015dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80015e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80015e4:	d102      	bne.n	80015ec <__aeabi_dcmpun+0x20>
 80015e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80015ea:	d102      	bne.n	80015f2 <__aeabi_dcmpun+0x26>
 80015ec:	f04f 0000 	mov.w	r0, #0
 80015f0:	4770      	bx	lr
 80015f2:	f04f 0001 	mov.w	r0, #1
 80015f6:	4770      	bx	lr

080015f8 <__aeabi_d2iz>:
 80015f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80015fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001600:	d215      	bcs.n	800162e <__aeabi_d2iz+0x36>
 8001602:	d511      	bpl.n	8001628 <__aeabi_d2iz+0x30>
 8001604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800160c:	d912      	bls.n	8001634 <__aeabi_d2iz+0x3c>
 800160e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800161a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800161e:	fa23 f002 	lsr.w	r0, r3, r2
 8001622:	bf18      	it	ne
 8001624:	4240      	negne	r0, r0
 8001626:	4770      	bx	lr
 8001628:	f04f 0000 	mov.w	r0, #0
 800162c:	4770      	bx	lr
 800162e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001632:	d105      	bne.n	8001640 <__aeabi_d2iz+0x48>
 8001634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001638:	bf08      	it	eq
 800163a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800163e:	4770      	bx	lr
 8001640:	f04f 0000 	mov.w	r0, #0
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop

08001648 <__aeabi_uldivmod>:
 8001648:	b953      	cbnz	r3, 8001660 <__aeabi_uldivmod+0x18>
 800164a:	b94a      	cbnz	r2, 8001660 <__aeabi_uldivmod+0x18>
 800164c:	2900      	cmp	r1, #0
 800164e:	bf08      	it	eq
 8001650:	2800      	cmpeq	r0, #0
 8001652:	bf1c      	itt	ne
 8001654:	f04f 31ff 	movne.w	r1, #4294967295
 8001658:	f04f 30ff 	movne.w	r0, #4294967295
 800165c:	f000 b974 	b.w	8001948 <__aeabi_idiv0>
 8001660:	f1ad 0c08 	sub.w	ip, sp, #8
 8001664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001668:	f000 f806 	bl	8001678 <__udivmoddi4>
 800166c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001674:	b004      	add	sp, #16
 8001676:	4770      	bx	lr

08001678 <__udivmoddi4>:
 8001678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800167c:	9d08      	ldr	r5, [sp, #32]
 800167e:	4604      	mov	r4, r0
 8001680:	468e      	mov	lr, r1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d14d      	bne.n	8001722 <__udivmoddi4+0xaa>
 8001686:	428a      	cmp	r2, r1
 8001688:	4694      	mov	ip, r2
 800168a:	d969      	bls.n	8001760 <__udivmoddi4+0xe8>
 800168c:	fab2 f282 	clz	r2, r2
 8001690:	b152      	cbz	r2, 80016a8 <__udivmoddi4+0x30>
 8001692:	fa01 f302 	lsl.w	r3, r1, r2
 8001696:	f1c2 0120 	rsb	r1, r2, #32
 800169a:	fa20 f101 	lsr.w	r1, r0, r1
 800169e:	fa0c fc02 	lsl.w	ip, ip, r2
 80016a2:	ea41 0e03 	orr.w	lr, r1, r3
 80016a6:	4094      	lsls	r4, r2
 80016a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80016ac:	0c21      	lsrs	r1, r4, #16
 80016ae:	fbbe f6f8 	udiv	r6, lr, r8
 80016b2:	fa1f f78c 	uxth.w	r7, ip
 80016b6:	fb08 e316 	mls	r3, r8, r6, lr
 80016ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80016be:	fb06 f107 	mul.w	r1, r6, r7
 80016c2:	4299      	cmp	r1, r3
 80016c4:	d90a      	bls.n	80016dc <__udivmoddi4+0x64>
 80016c6:	eb1c 0303 	adds.w	r3, ip, r3
 80016ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80016ce:	f080 811f 	bcs.w	8001910 <__udivmoddi4+0x298>
 80016d2:	4299      	cmp	r1, r3
 80016d4:	f240 811c 	bls.w	8001910 <__udivmoddi4+0x298>
 80016d8:	3e02      	subs	r6, #2
 80016da:	4463      	add	r3, ip
 80016dc:	1a5b      	subs	r3, r3, r1
 80016de:	b2a4      	uxth	r4, r4
 80016e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80016e4:	fb08 3310 	mls	r3, r8, r0, r3
 80016e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80016ec:	fb00 f707 	mul.w	r7, r0, r7
 80016f0:	42a7      	cmp	r7, r4
 80016f2:	d90a      	bls.n	800170a <__udivmoddi4+0x92>
 80016f4:	eb1c 0404 	adds.w	r4, ip, r4
 80016f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80016fc:	f080 810a 	bcs.w	8001914 <__udivmoddi4+0x29c>
 8001700:	42a7      	cmp	r7, r4
 8001702:	f240 8107 	bls.w	8001914 <__udivmoddi4+0x29c>
 8001706:	4464      	add	r4, ip
 8001708:	3802      	subs	r0, #2
 800170a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800170e:	1be4      	subs	r4, r4, r7
 8001710:	2600      	movs	r6, #0
 8001712:	b11d      	cbz	r5, 800171c <__udivmoddi4+0xa4>
 8001714:	40d4      	lsrs	r4, r2
 8001716:	2300      	movs	r3, #0
 8001718:	e9c5 4300 	strd	r4, r3, [r5]
 800171c:	4631      	mov	r1, r6
 800171e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001722:	428b      	cmp	r3, r1
 8001724:	d909      	bls.n	800173a <__udivmoddi4+0xc2>
 8001726:	2d00      	cmp	r5, #0
 8001728:	f000 80ef 	beq.w	800190a <__udivmoddi4+0x292>
 800172c:	2600      	movs	r6, #0
 800172e:	e9c5 0100 	strd	r0, r1, [r5]
 8001732:	4630      	mov	r0, r6
 8001734:	4631      	mov	r1, r6
 8001736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800173a:	fab3 f683 	clz	r6, r3
 800173e:	2e00      	cmp	r6, #0
 8001740:	d14a      	bne.n	80017d8 <__udivmoddi4+0x160>
 8001742:	428b      	cmp	r3, r1
 8001744:	d302      	bcc.n	800174c <__udivmoddi4+0xd4>
 8001746:	4282      	cmp	r2, r0
 8001748:	f200 80f9 	bhi.w	800193e <__udivmoddi4+0x2c6>
 800174c:	1a84      	subs	r4, r0, r2
 800174e:	eb61 0303 	sbc.w	r3, r1, r3
 8001752:	2001      	movs	r0, #1
 8001754:	469e      	mov	lr, r3
 8001756:	2d00      	cmp	r5, #0
 8001758:	d0e0      	beq.n	800171c <__udivmoddi4+0xa4>
 800175a:	e9c5 4e00 	strd	r4, lr, [r5]
 800175e:	e7dd      	b.n	800171c <__udivmoddi4+0xa4>
 8001760:	b902      	cbnz	r2, 8001764 <__udivmoddi4+0xec>
 8001762:	deff      	udf	#255	; 0xff
 8001764:	fab2 f282 	clz	r2, r2
 8001768:	2a00      	cmp	r2, #0
 800176a:	f040 8092 	bne.w	8001892 <__udivmoddi4+0x21a>
 800176e:	eba1 010c 	sub.w	r1, r1, ip
 8001772:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001776:	fa1f fe8c 	uxth.w	lr, ip
 800177a:	2601      	movs	r6, #1
 800177c:	0c20      	lsrs	r0, r4, #16
 800177e:	fbb1 f3f7 	udiv	r3, r1, r7
 8001782:	fb07 1113 	mls	r1, r7, r3, r1
 8001786:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800178a:	fb0e f003 	mul.w	r0, lr, r3
 800178e:	4288      	cmp	r0, r1
 8001790:	d908      	bls.n	80017a4 <__udivmoddi4+0x12c>
 8001792:	eb1c 0101 	adds.w	r1, ip, r1
 8001796:	f103 38ff 	add.w	r8, r3, #4294967295
 800179a:	d202      	bcs.n	80017a2 <__udivmoddi4+0x12a>
 800179c:	4288      	cmp	r0, r1
 800179e:	f200 80cb 	bhi.w	8001938 <__udivmoddi4+0x2c0>
 80017a2:	4643      	mov	r3, r8
 80017a4:	1a09      	subs	r1, r1, r0
 80017a6:	b2a4      	uxth	r4, r4
 80017a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80017ac:	fb07 1110 	mls	r1, r7, r0, r1
 80017b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80017b4:	fb0e fe00 	mul.w	lr, lr, r0
 80017b8:	45a6      	cmp	lr, r4
 80017ba:	d908      	bls.n	80017ce <__udivmoddi4+0x156>
 80017bc:	eb1c 0404 	adds.w	r4, ip, r4
 80017c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80017c4:	d202      	bcs.n	80017cc <__udivmoddi4+0x154>
 80017c6:	45a6      	cmp	lr, r4
 80017c8:	f200 80bb 	bhi.w	8001942 <__udivmoddi4+0x2ca>
 80017cc:	4608      	mov	r0, r1
 80017ce:	eba4 040e 	sub.w	r4, r4, lr
 80017d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80017d6:	e79c      	b.n	8001712 <__udivmoddi4+0x9a>
 80017d8:	f1c6 0720 	rsb	r7, r6, #32
 80017dc:	40b3      	lsls	r3, r6
 80017de:	fa22 fc07 	lsr.w	ip, r2, r7
 80017e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80017e6:	fa20 f407 	lsr.w	r4, r0, r7
 80017ea:	fa01 f306 	lsl.w	r3, r1, r6
 80017ee:	431c      	orrs	r4, r3
 80017f0:	40f9      	lsrs	r1, r7
 80017f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80017f6:	fa00 f306 	lsl.w	r3, r0, r6
 80017fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80017fe:	0c20      	lsrs	r0, r4, #16
 8001800:	fa1f fe8c 	uxth.w	lr, ip
 8001804:	fb09 1118 	mls	r1, r9, r8, r1
 8001808:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800180c:	fb08 f00e 	mul.w	r0, r8, lr
 8001810:	4288      	cmp	r0, r1
 8001812:	fa02 f206 	lsl.w	r2, r2, r6
 8001816:	d90b      	bls.n	8001830 <__udivmoddi4+0x1b8>
 8001818:	eb1c 0101 	adds.w	r1, ip, r1
 800181c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001820:	f080 8088 	bcs.w	8001934 <__udivmoddi4+0x2bc>
 8001824:	4288      	cmp	r0, r1
 8001826:	f240 8085 	bls.w	8001934 <__udivmoddi4+0x2bc>
 800182a:	f1a8 0802 	sub.w	r8, r8, #2
 800182e:	4461      	add	r1, ip
 8001830:	1a09      	subs	r1, r1, r0
 8001832:	b2a4      	uxth	r4, r4
 8001834:	fbb1 f0f9 	udiv	r0, r1, r9
 8001838:	fb09 1110 	mls	r1, r9, r0, r1
 800183c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001840:	fb00 fe0e 	mul.w	lr, r0, lr
 8001844:	458e      	cmp	lr, r1
 8001846:	d908      	bls.n	800185a <__udivmoddi4+0x1e2>
 8001848:	eb1c 0101 	adds.w	r1, ip, r1
 800184c:	f100 34ff 	add.w	r4, r0, #4294967295
 8001850:	d26c      	bcs.n	800192c <__udivmoddi4+0x2b4>
 8001852:	458e      	cmp	lr, r1
 8001854:	d96a      	bls.n	800192c <__udivmoddi4+0x2b4>
 8001856:	3802      	subs	r0, #2
 8001858:	4461      	add	r1, ip
 800185a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800185e:	fba0 9402 	umull	r9, r4, r0, r2
 8001862:	eba1 010e 	sub.w	r1, r1, lr
 8001866:	42a1      	cmp	r1, r4
 8001868:	46c8      	mov	r8, r9
 800186a:	46a6      	mov	lr, r4
 800186c:	d356      	bcc.n	800191c <__udivmoddi4+0x2a4>
 800186e:	d053      	beq.n	8001918 <__udivmoddi4+0x2a0>
 8001870:	b15d      	cbz	r5, 800188a <__udivmoddi4+0x212>
 8001872:	ebb3 0208 	subs.w	r2, r3, r8
 8001876:	eb61 010e 	sbc.w	r1, r1, lr
 800187a:	fa01 f707 	lsl.w	r7, r1, r7
 800187e:	fa22 f306 	lsr.w	r3, r2, r6
 8001882:	40f1      	lsrs	r1, r6
 8001884:	431f      	orrs	r7, r3
 8001886:	e9c5 7100 	strd	r7, r1, [r5]
 800188a:	2600      	movs	r6, #0
 800188c:	4631      	mov	r1, r6
 800188e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001892:	f1c2 0320 	rsb	r3, r2, #32
 8001896:	40d8      	lsrs	r0, r3
 8001898:	fa0c fc02 	lsl.w	ip, ip, r2
 800189c:	fa21 f303 	lsr.w	r3, r1, r3
 80018a0:	4091      	lsls	r1, r2
 80018a2:	4301      	orrs	r1, r0
 80018a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80018a8:	fa1f fe8c 	uxth.w	lr, ip
 80018ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80018b0:	fb07 3610 	mls	r6, r7, r0, r3
 80018b4:	0c0b      	lsrs	r3, r1, #16
 80018b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80018ba:	fb00 f60e 	mul.w	r6, r0, lr
 80018be:	429e      	cmp	r6, r3
 80018c0:	fa04 f402 	lsl.w	r4, r4, r2
 80018c4:	d908      	bls.n	80018d8 <__udivmoddi4+0x260>
 80018c6:	eb1c 0303 	adds.w	r3, ip, r3
 80018ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80018ce:	d22f      	bcs.n	8001930 <__udivmoddi4+0x2b8>
 80018d0:	429e      	cmp	r6, r3
 80018d2:	d92d      	bls.n	8001930 <__udivmoddi4+0x2b8>
 80018d4:	3802      	subs	r0, #2
 80018d6:	4463      	add	r3, ip
 80018d8:	1b9b      	subs	r3, r3, r6
 80018da:	b289      	uxth	r1, r1
 80018dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80018e0:	fb07 3316 	mls	r3, r7, r6, r3
 80018e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80018e8:	fb06 f30e 	mul.w	r3, r6, lr
 80018ec:	428b      	cmp	r3, r1
 80018ee:	d908      	bls.n	8001902 <__udivmoddi4+0x28a>
 80018f0:	eb1c 0101 	adds.w	r1, ip, r1
 80018f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80018f8:	d216      	bcs.n	8001928 <__udivmoddi4+0x2b0>
 80018fa:	428b      	cmp	r3, r1
 80018fc:	d914      	bls.n	8001928 <__udivmoddi4+0x2b0>
 80018fe:	3e02      	subs	r6, #2
 8001900:	4461      	add	r1, ip
 8001902:	1ac9      	subs	r1, r1, r3
 8001904:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001908:	e738      	b.n	800177c <__udivmoddi4+0x104>
 800190a:	462e      	mov	r6, r5
 800190c:	4628      	mov	r0, r5
 800190e:	e705      	b.n	800171c <__udivmoddi4+0xa4>
 8001910:	4606      	mov	r6, r0
 8001912:	e6e3      	b.n	80016dc <__udivmoddi4+0x64>
 8001914:	4618      	mov	r0, r3
 8001916:	e6f8      	b.n	800170a <__udivmoddi4+0x92>
 8001918:	454b      	cmp	r3, r9
 800191a:	d2a9      	bcs.n	8001870 <__udivmoddi4+0x1f8>
 800191c:	ebb9 0802 	subs.w	r8, r9, r2
 8001920:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001924:	3801      	subs	r0, #1
 8001926:	e7a3      	b.n	8001870 <__udivmoddi4+0x1f8>
 8001928:	4646      	mov	r6, r8
 800192a:	e7ea      	b.n	8001902 <__udivmoddi4+0x28a>
 800192c:	4620      	mov	r0, r4
 800192e:	e794      	b.n	800185a <__udivmoddi4+0x1e2>
 8001930:	4640      	mov	r0, r8
 8001932:	e7d1      	b.n	80018d8 <__udivmoddi4+0x260>
 8001934:	46d0      	mov	r8, sl
 8001936:	e77b      	b.n	8001830 <__udivmoddi4+0x1b8>
 8001938:	3b02      	subs	r3, #2
 800193a:	4461      	add	r1, ip
 800193c:	e732      	b.n	80017a4 <__udivmoddi4+0x12c>
 800193e:	4630      	mov	r0, r6
 8001940:	e709      	b.n	8001756 <__udivmoddi4+0xde>
 8001942:	4464      	add	r4, ip
 8001944:	3802      	subs	r0, #2
 8001946:	e742      	b.n	80017ce <__udivmoddi4+0x156>

08001948 <__aeabi_idiv0>:
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop

0800194c <LCD_sendCommand>:





void LCD_sendCommand(uint8_t com){
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
    uint8_t tmpCmd = com;
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 0);
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <LCD_sendCommand+0x54>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <LCD_sendCommand+0x58>)
 8001960:	8811      	ldrh	r1, [r2, #0]
 8001962:	2200      	movs	r2, #0
 8001964:	4618      	mov	r0, r3
 8001966:	f001 fa2b 	bl	8002dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <LCD_sendCommand+0x5c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <LCD_sendCommand+0x60>)
 8001970:	8811      	ldrh	r1, [r2, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f001 fa23 	bl	8002dc0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 1);
 800197a:	f107 010f 	add.w	r1, r7, #15
 800197e:	2301      	movs	r3, #1
 8001980:	2201      	movs	r2, #1
 8001982:	480b      	ldr	r0, [pc, #44]	; (80019b0 <LCD_sendCommand+0x64>)
 8001984:	f003 f8d9 	bl	8004b3a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <LCD_sendCommand+0x5c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <LCD_sendCommand+0x60>)
 800198e:	8811      	ldrh	r1, [r2, #0]
 8001990:	2201      	movs	r2, #1
 8001992:	4618      	mov	r0, r3
 8001994:	f001 fa14 	bl	8002dc0 <HAL_GPIO_WritePin>
}
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000500 	.word	0x20000500
 80019a4:	20000504 	.word	0x20000504
 80019a8:	200004f8 	.word	0x200004f8
 80019ac:	200004fc 	.word	0x200004fc
 80019b0:	20000494 	.word	0x20000494

080019b4 <LCD_sendData_NoCS>:
    uint8_t tmpCmd = com;
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 0);
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 1);
}

void LCD_sendData_NoCS(uint8_t data){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
	uint8_t tmpDat = data;
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 1);
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <LCD_sendData_NoCS+0x34>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <LCD_sendData_NoCS+0x38>)
 80019c8:	8811      	ldrh	r1, [r2, #0]
 80019ca:	2201      	movs	r2, #1
 80019cc:	4618      	mov	r0, r3
 80019ce:	f001 f9f7 	bl	8002dc0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpDat, 1, 1);
 80019d2:	f107 010f 	add.w	r1, r7, #15
 80019d6:	2301      	movs	r3, #1
 80019d8:	2201      	movs	r2, #1
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <LCD_sendData_NoCS+0x3c>)
 80019dc:	f003 f8ad 	bl	8004b3a <HAL_SPI_Transmit>
}
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000500 	.word	0x20000500
 80019ec:	20000504 	.word	0x20000504
 80019f0:	20000494 	.word	0x20000494

080019f4 <LCD_sendCommandArg>:

void LCD_sendCommandArg(uint8_t command, uint8_t *dataBytes, uint8_t dataLen){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
 8001a00:	4613      	mov	r3, r2
 8001a02:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 8001a04:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <LCD_sendCommandArg+0x90>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1f      	ldr	r2, [pc, #124]	; (8001a88 <LCD_sendCommandArg+0x94>)
 8001a0a:	8811      	ldrh	r1, [r2, #0]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f001 f9d6 	bl	8002dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 0); //0 for command
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <LCD_sendCommandArg+0x98>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <LCD_sendCommandArg+0x9c>)
 8001a1a:	8811      	ldrh	r1, [r2, #0]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 f9ce 	bl	8002dc0 <HAL_GPIO_WritePin>
    uint8_t buf = command;
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&lcdSPIhandle, &buf, 1, 1);
 8001a28:	f107 010b 	add.w	r1, r7, #11
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4818      	ldr	r0, [pc, #96]	; (8001a94 <LCD_sendCommandArg+0xa0>)
 8001a32:	f003 f882 	bl	8004b3a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 1); //start writing args
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <LCD_sendCommandArg+0x98>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <LCD_sendCommandArg+0x9c>)
 8001a3c:	8811      	ldrh	r1, [r2, #0]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 f9bd 	bl	8002dc0 <HAL_GPIO_WritePin>
    for(int i = 0; i < dataLen; ++i){
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	e00b      	b.n	8001a64 <LCD_sendCommandArg+0x70>
        HAL_SPI_Transmit(&lcdSPIhandle, dataBytes, 1, 1);
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	2201      	movs	r2, #1
 8001a50:	6839      	ldr	r1, [r7, #0]
 8001a52:	4810      	ldr	r0, [pc, #64]	; (8001a94 <LCD_sendCommandArg+0xa0>)
 8001a54:	f003 f871 	bl	8004b3a <HAL_SPI_Transmit>
        dataBytes++;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	603b      	str	r3, [r7, #0]
    for(int i = 0; i < dataLen; ++i){
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3301      	adds	r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	79bb      	ldrb	r3, [r7, #6]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dbef      	blt.n	8001a4c <LCD_sendCommandArg+0x58>
    }  
    HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <LCD_sendCommandArg+0x90>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <LCD_sendCommandArg+0x94>)
 8001a72:	8811      	ldrh	r1, [r2, #0]
 8001a74:	2201      	movs	r2, #1
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 f9a2 	bl	8002dc0 <HAL_GPIO_WritePin>
}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200004f8 	.word	0x200004f8
 8001a88:	200004fc 	.word	0x200004fc
 8001a8c:	20000500 	.word	0x20000500
 8001a90:	20000504 	.word	0x20000504
 8001a94:	20000494 	.word	0x20000494

08001a98 <LCD_init>:

void LCD_init(SPI_HandleTypeDef *spiLcdHandle,
                    GPIO_TypeDef *csPORT, uint16_t csPIN, 
                    GPIO_TypeDef *dcPORT, uint16_t dcPIN, 
                    GPIO_TypeDef *resetPORT, uint16_t resetPIN){
 8001a98:	b5b0      	push	{r4, r5, r7, lr}
 8001a9a:	b098      	sub	sp, #96	; 0x60
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	80fb      	strh	r3, [r7, #6]
    //Set pins and ports---------------------------------------------
    //Copy SPI settings
    memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8001aa8:	2264      	movs	r2, #100	; 0x64
 8001aaa:	68f9      	ldr	r1, [r7, #12]
 8001aac:	4874      	ldr	r0, [pc, #464]	; (8001c80 <LCD_init+0x1e8>)
 8001aae:	f004 fd23 	bl	80064f8 <memcpy>
    //CS pin
    tftCS_GPIO = csPORT;
 8001ab2:	4a74      	ldr	r2, [pc, #464]	; (8001c84 <LCD_init+0x1ec>)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	6013      	str	r3, [r2, #0]
    tftCS_PIN = csPIN;
 8001ab8:	4a73      	ldr	r2, [pc, #460]	; (8001c88 <LCD_init+0x1f0>)
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	8013      	strh	r3, [r2, #0]
    HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 8001abe:	4b71      	ldr	r3, [pc, #452]	; (8001c84 <LCD_init+0x1ec>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a71      	ldr	r2, [pc, #452]	; (8001c88 <LCD_init+0x1f0>)
 8001ac4:	8811      	ldrh	r1, [r2, #0]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f001 f979 	bl	8002dc0 <HAL_GPIO_WritePin>
    //DC pin
    tftDC_GPIO = dcPORT;
 8001ace:	4a6f      	ldr	r2, [pc, #444]	; (8001c8c <LCD_init+0x1f4>)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	6013      	str	r3, [r2, #0]
    tftDC_PIN = dcPIN;
 8001ad4:	4a6e      	ldr	r2, [pc, #440]	; (8001c90 <LCD_init+0x1f8>)
 8001ad6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001ada:	8013      	strh	r3, [r2, #0]
    HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, 1);
 8001adc:	4b6b      	ldr	r3, [pc, #428]	; (8001c8c <LCD_init+0x1f4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a6b      	ldr	r2, [pc, #428]	; (8001c90 <LCD_init+0x1f8>)
 8001ae2:	8811      	ldrh	r1, [r2, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 f96a 	bl	8002dc0 <HAL_GPIO_WritePin>
    //RESET pin
    tftRESET_GPIO = resetPORT;
 8001aec:	4a69      	ldr	r2, [pc, #420]	; (8001c94 <LCD_init+0x1fc>)
 8001aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001af0:	6013      	str	r3, [r2, #0]
    tftRESET_PIN = resetPIN;
 8001af2:	4a69      	ldr	r2, [pc, #420]	; (8001c98 <LCD_init+0x200>)
 8001af4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001af8:	8013      	strh	r3, [r2, #0]
    HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, 1);
 8001afa:	4b66      	ldr	r3, [pc, #408]	; (8001c94 <LCD_init+0x1fc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a66      	ldr	r2, [pc, #408]	; (8001c98 <LCD_init+0x200>)
 8001b00:	8811      	ldrh	r1, [r2, #0]
 8001b02:	2201      	movs	r2, #1
 8001b04:	4618      	mov	r0, r3
 8001b06:	f001 f95b 	bl	8002dc0 <HAL_GPIO_WritePin>
   


    //init commands---------------------------------------------------
    //Soft Reset
    HAL_Delay(10);
 8001b0a:	200a      	movs	r0, #10
 8001b0c:	f000 fe90 	bl	8002830 <HAL_Delay>
    LCD_sendCommand(HX8357_SWRESET);
 8001b10:	2001      	movs	r0, #1
 8001b12:	f7ff ff1b 	bl	800194c <LCD_sendCommand>
    HAL_Delay(10);
 8001b16:	200a      	movs	r0, #10
 8001b18:	f000 fe8a 	bl	8002830 <HAL_Delay>

    //Misc display values
    uint8_t setC[] = {0xFF, 0x83, 0x57};
 8001b1c:	4a5f      	ldr	r2, [pc, #380]	; (8001c9c <LCD_init+0x204>)
 8001b1e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	4611      	mov	r1, r2
 8001b26:	8019      	strh	r1, [r3, #0]
 8001b28:	3302      	adds	r3, #2
 8001b2a:	0c12      	lsrs	r2, r2, #16
 8001b2c:	701a      	strb	r2, [r3, #0]
    LCD_sendCommandArg(HX8357D_SETC, setC, 3);
 8001b2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b32:	2203      	movs	r2, #3
 8001b34:	4619      	mov	r1, r3
 8001b36:	20b9      	movs	r0, #185	; 0xb9
 8001b38:	f7ff ff5c 	bl	80019f4 <LCD_sendCommandArg>
    HAL_Delay(500);
 8001b3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b40:	f000 fe76 	bl	8002830 <HAL_Delay>
    uint8_t setRGB[] = {0x80, 0x00, 0x06, 0x06};
 8001b44:	4b56      	ldr	r3, [pc, #344]	; (8001ca0 <LCD_init+0x208>)
 8001b46:	65bb      	str	r3, [r7, #88]	; 0x58
    LCD_sendCommandArg(HX8357_SETRGB, setRGB, 4);
 8001b48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	20b3      	movs	r0, #179	; 0xb3
 8001b52:	f7ff ff4f 	bl	80019f4 <LCD_sendCommandArg>
    uint8_t setCOM = 0x25;
 8001b56:	2325      	movs	r3, #37	; 0x25
 8001b58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    LCD_sendCommandArg(HX8357D_SETCOM, &setCOM, 1);
 8001b5c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001b60:	2201      	movs	r2, #1
 8001b62:	4619      	mov	r1, r3
 8001b64:	20b6      	movs	r0, #182	; 0xb6
 8001b66:	f7ff ff45 	bl	80019f4 <LCD_sendCommandArg>
    uint8_t setOSC = 0x68;
 8001b6a:	2368      	movs	r3, #104	; 0x68
 8001b6c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    LCD_sendCommandArg(HX8357_SETOSC, &setOSC, 1);
 8001b70:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8001b74:	2201      	movs	r2, #1
 8001b76:	4619      	mov	r1, r3
 8001b78:	20b0      	movs	r0, #176	; 0xb0
 8001b7a:	f7ff ff3b 	bl	80019f4 <LCD_sendCommandArg>
    uint8_t setPANEL = 0x05;
 8001b7e:	2305      	movs	r3, #5
 8001b80:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    LCD_sendCommandArg(HX8357_SETPANEL, &setPANEL, 1);
 8001b84:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	20cc      	movs	r0, #204	; 0xcc
 8001b8e:	f7ff ff31 	bl	80019f4 <LCD_sendCommandArg>
    uint8_t setPWR1[] = {0x00, 0x15, 0x1C, 0x1C, 0x83, 0xAA};
 8001b92:	4a44      	ldr	r2, [pc, #272]	; (8001ca4 <LCD_init+0x20c>)
 8001b94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b9c:	6018      	str	r0, [r3, #0]
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	8019      	strh	r1, [r3, #0]
    LCD_sendCommandArg(HX8357_SETPWR1, setPWR1, 6);
 8001ba2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ba6:	2206      	movs	r2, #6
 8001ba8:	4619      	mov	r1, r3
 8001baa:	20b1      	movs	r0, #177	; 0xb1
 8001bac:	f7ff ff22 	bl	80019f4 <LCD_sendCommandArg>
    uint8_t setSTBA[] = {0x50, 0x50, 0x01, 0x3C, 0x1E, 0x08};
 8001bb0:	4a3d      	ldr	r2, [pc, #244]	; (8001ca8 <LCD_init+0x210>)
 8001bb2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bba:	6018      	str	r0, [r3, #0]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	8019      	strh	r1, [r3, #0]
    LCD_sendCommandArg(HX8357D_SETSTBA, setSTBA, 6);
 8001bc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bc4:	2206      	movs	r2, #6
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	20c0      	movs	r0, #192	; 0xc0
 8001bca:	f7ff ff13 	bl	80019f4 <LCD_sendCommandArg>
    uint8_t setCYC[] = {0x02, 0x40, 0x00, 0x2A, 0x2A, 0x0D, 0x78};
 8001bce:	4a37      	ldr	r2, [pc, #220]	; (8001cac <LCD_init+0x214>)
 8001bd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bd8:	6018      	str	r0, [r3, #0]
 8001bda:	3304      	adds	r3, #4
 8001bdc:	8019      	strh	r1, [r3, #0]
 8001bde:	3302      	adds	r3, #2
 8001be0:	0c0a      	lsrs	r2, r1, #16
 8001be2:	701a      	strb	r2, [r3, #0]
    LCD_sendCommandArg(HX8357D_SETCYC, setCYC, 7);
 8001be4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001be8:	2207      	movs	r2, #7
 8001bea:	4619      	mov	r1, r3
 8001bec:	20b4      	movs	r0, #180	; 0xb4
 8001bee:	f7ff ff01 	bl	80019f4 <LCD_sendCommandArg>
    uint8_t setGAMMA[] = {0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B,
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <LCD_init+0x218>)
 8001bf4:	f107 0418 	add.w	r4, r7, #24
 8001bf8:	461d      	mov	r5, r3
 8001bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c02:	682b      	ldr	r3, [r5, #0]
 8001c04:	8023      	strh	r3, [r4, #0]
                        0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03,
                        0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B,
                        0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03,
                        0x00, 0x01};
    LCD_sendCommandArg(HX8357D_SETGAMMA, setGAMMA, 34);
 8001c06:	f107 0318 	add.w	r3, r7, #24
 8001c0a:	2222      	movs	r2, #34	; 0x22
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	20e0      	movs	r0, #224	; 0xe0
 8001c10:	f7ff fef0 	bl	80019f4 <LCD_sendCommandArg>
    uint8_t setCOLMOD = 0x55;
 8001c14:	2355      	movs	r3, #85	; 0x55
 8001c16:	75fb      	strb	r3, [r7, #23]
    LCD_sendCommandArg(HX8357_COLMOD, &setCOLMOD, 1);
 8001c18:	f107 0317 	add.w	r3, r7, #23
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	4619      	mov	r1, r3
 8001c20:	203a      	movs	r0, #58	; 0x3a
 8001c22:	f7ff fee7 	bl	80019f4 <LCD_sendCommandArg>
    uint8_t setMADCTL = 0xC0;
 8001c26:	23c0      	movs	r3, #192	; 0xc0
 8001c28:	75bb      	strb	r3, [r7, #22]
    LCD_sendCommandArg(HX8357_MADCTL, &setMADCTL, 1);
 8001c2a:	f107 0316 	add.w	r3, r7, #22
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4619      	mov	r1, r3
 8001c32:	2036      	movs	r0, #54	; 0x36
 8001c34:	f7ff fede 	bl	80019f4 <LCD_sendCommandArg>
    uint8_t setTEON = 0x00;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	757b      	strb	r3, [r7, #21]
    LCD_sendCommandArg(HX8357_TEON, &setTEON, 1);
 8001c3c:	f107 0315 	add.w	r3, r7, #21
 8001c40:	2201      	movs	r2, #1
 8001c42:	4619      	mov	r1, r3
 8001c44:	2035      	movs	r0, #53	; 0x35
 8001c46:	f7ff fed5 	bl	80019f4 <LCD_sendCommandArg>
    uint8_t setTEARLINE[] = {0x00, 0x02};
 8001c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c4e:	823b      	strh	r3, [r7, #16]
    LCD_sendCommandArg(HX8357_TEARLINE, setTEARLINE, 2);
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	2202      	movs	r2, #2
 8001c56:	4619      	mov	r1, r3
 8001c58:	2044      	movs	r0, #68	; 0x44
 8001c5a:	f7ff fecb 	bl	80019f4 <LCD_sendCommandArg>

    //Display on
    LCD_sendCommand(HX8357_SLPOUT);
 8001c5e:	2011      	movs	r0, #17
 8001c60:	f7ff fe74 	bl	800194c <LCD_sendCommand>
    HAL_Delay(150);
 8001c64:	2096      	movs	r0, #150	; 0x96
 8001c66:	f000 fde3 	bl	8002830 <HAL_Delay>
    LCD_sendCommand(HX8357_DISPON);
 8001c6a:	2029      	movs	r0, #41	; 0x29
 8001c6c:	f7ff fe6e 	bl	800194c <LCD_sendCommand>
    HAL_Delay(50);
 8001c70:	2032      	movs	r0, #50	; 0x32
 8001c72:	f000 fddd 	bl	8002830 <HAL_Delay>
}
 8001c76:	bf00      	nop
 8001c78:	3760      	adds	r7, #96	; 0x60
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000494 	.word	0x20000494
 8001c84:	200004f8 	.word	0x200004f8
 8001c88:	200004fc 	.word	0x200004fc
 8001c8c:	20000500 	.word	0x20000500
 8001c90:	20000504 	.word	0x20000504
 8001c94:	20000508 	.word	0x20000508
 8001c98:	2000050c 	.word	0x2000050c
 8001c9c:	08008f80 	.word	0x08008f80
 8001ca0:	06060080 	.word	0x06060080
 8001ca4:	08008f84 	.word	0x08008f84
 8001ca8:	08008f8c 	.word	0x08008f8c
 8001cac:	08008f94 	.word	0x08008f94
 8001cb0:	08008f9c 	.word	0x08008f9c

08001cb4 <LCD_setCursorPosition>:

//Graphics function prototypes
void LCD_setCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4604      	mov	r4, r0
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4623      	mov	r3, r4
 8001cc4:	80fb      	strh	r3, [r7, #6]
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80bb      	strh	r3, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	807b      	strh	r3, [r7, #2]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	803b      	strh	r3, [r7, #0]
  uint8_t setCASET[] = {x1 >> 8, x1 & 0xFF, x2 >> 8, x2 & 0xFF};
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	733b      	strb	r3, [r7, #12]
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	737b      	strb	r3, [r7, #13]
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	73bb      	strb	r3, [r7, #14]
 8001cec:	887b      	ldrh	r3, [r7, #2]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	73fb      	strb	r3, [r7, #15]
  LCD_sendCommandArg(HX8357_CASET, setCASET, 4);
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	202a      	movs	r0, #42	; 0x2a
 8001cfc:	f7ff fe7a 	bl	80019f4 <LCD_sendCommandArg>
  uint8_t setPASET[] = {y1 >> 8, y1 & 0xFF, y2 >> 8, y2 & 0xFF};
 8001d00:	88bb      	ldrh	r3, [r7, #4]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	723b      	strb	r3, [r7, #8]
 8001d0a:	88bb      	ldrh	r3, [r7, #4]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	727b      	strb	r3, [r7, #9]
 8001d10:	883b      	ldrh	r3, [r7, #0]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	72bb      	strb	r3, [r7, #10]
 8001d1a:	883b      	ldrh	r3, [r7, #0]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	72fb      	strb	r3, [r7, #11]
  LCD_sendCommandArg(HX8357_PASET, setPASET, 4);
 8001d20:	f107 0308 	add.w	r3, r7, #8
 8001d24:	2204      	movs	r2, #4
 8001d26:	4619      	mov	r1, r3
 8001d28:	202b      	movs	r0, #43	; 0x2b
 8001d2a:	f7ff fe63 	bl	80019f4 <LCD_sendCommandArg>
  LCD_sendCommand(HX8357_RAMWR);
 8001d2e:	202c      	movs	r0, #44	; 0x2c
 8001d30:	f7ff fe0c 	bl	800194c <LCD_sendCommand>
  //TODO needs write immediately after (RAMWR)
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd90      	pop	{r4, r7, pc}

08001d3c <LCD_rect>:
  LCD_setCursorPosition(x, y, x, y);
  uint8_t setRAMWR[] = {color >> 8, color & 0xFF};
  LCD_sendCommandArg(HX8357_RAMWR, setRAMWR, 2);
}

void LCD_rect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4604      	mov	r4, r0
 8001d44:	4608      	mov	r0, r1
 8001d46:	4611      	mov	r1, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4623      	mov	r3, r4
 8001d4c:	80fb      	strh	r3, [r7, #6]
 8001d4e:	4603      	mov	r3, r0
 8001d50:	80bb      	strh	r3, [r7, #4]
 8001d52:	460b      	mov	r3, r1
 8001d54:	807b      	strh	r3, [r7, #2]
 8001d56:	4613      	mov	r3, r2
 8001d58:	803b      	strh	r3, [r7, #0]
	uint32_t n = (x2 - x1 + 1) * (y2 - y1 + 1);
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	3301      	adds	r3, #1
 8001d62:	8839      	ldrh	r1, [r7, #0]
 8001d64:	88ba      	ldrh	r2, [r7, #4]
 8001d66:	1a8a      	subs	r2, r1, r2
 8001d68:	3201      	adds	r2, #1
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	60fb      	str	r3, [r7, #12]
	LCD_setCursorPosition(x1, y1, x2, y2);
 8001d70:	883b      	ldrh	r3, [r7, #0]
 8001d72:	887a      	ldrh	r2, [r7, #2]
 8001d74:	88b9      	ldrh	r1, [r7, #4]
 8001d76:	88f8      	ldrh	r0, [r7, #6]
 8001d78:	f7ff ff9c 	bl	8001cb4 <LCD_setCursorPosition>

	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <LCD_rect+0x90>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <LCD_rect+0x94>)
 8001d82:	8811      	ldrh	r1, [r2, #0]
 8001d84:	2200      	movs	r2, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f001 f81a 	bl	8002dc0 <HAL_GPIO_WritePin>
	while (n) {
 8001d8c:	e00e      	b.n	8001dac <LCD_rect+0x70>
		n--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
		LCD_sendData_NoCS(color>>8);
 8001d94:	8c3b      	ldrh	r3, [r7, #32]
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fe09 	bl	80019b4 <LCD_sendData_NoCS>
		LCD_sendData_NoCS(color&0xff);
 8001da2:	8c3b      	ldrh	r3, [r7, #32]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fe04 	bl	80019b4 <LCD_sendData_NoCS>
	while (n) {
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1ed      	bne.n	8001d8e <LCD_rect+0x52>
	}
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <LCD_rect+0x90>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <LCD_rect+0x94>)
 8001db8:	8811      	ldrh	r1, [r2, #0]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 ffff 	bl	8002dc0 <HAL_GPIO_WritePin>
}
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd90      	pop	{r4, r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200004f8 	.word	0x200004f8
 8001dd0:	200004fc 	.word	0x200004fc

08001dd4 <LCD_fill>:
void LCD_fill(uint16_t color){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	80fb      	strh	r3, [r7, #6]
	uint32_t n = LCD_PIXEL_COUNT;
 8001dde:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 8001de2:	60fb      	str	r3, [r7, #12]
	LCD_setCursorPosition(0, 0, HX8357_TFTWIDTH-1, HX8357_TFTHEIGHT-1);
 8001de4:	f240 13df 	movw	r3, #479	; 0x1df
 8001de8:	f240 123f 	movw	r2, #319	; 0x13f
 8001dec:	2100      	movs	r1, #0
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff ff60 	bl	8001cb4 <LCD_setCursorPosition>

	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 0);
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <LCD_fill+0x70>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <LCD_fill+0x74>)
 8001dfa:	8811      	ldrh	r1, [r2, #0]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 ffde 	bl	8002dc0 <HAL_GPIO_WritePin>
	while (n) {
 8001e04:	e00e      	b.n	8001e24 <LCD_fill+0x50>
		n--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
		LCD_sendData_NoCS(color>>8);
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fdcd 	bl	80019b4 <LCD_sendData_NoCS>
		LCD_sendData_NoCS(color&0xff);
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fdc8 	bl	80019b4 <LCD_sendData_NoCS>
	while (n) {
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1ed      	bne.n	8001e06 <LCD_fill+0x32>
	}
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, 1);
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <LCD_fill+0x70>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a06      	ldr	r2, [pc, #24]	; (8001e48 <LCD_fill+0x74>)
 8001e30:	8811      	ldrh	r1, [r2, #0]
 8001e32:	2201      	movs	r2, #1
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 ffc3 	bl	8002dc0 <HAL_GPIO_WritePin>
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200004f8 	.word	0x200004f8
 8001e48:	200004fc 	.word	0x200004fc

08001e4c <delay_us>:
//For interrupts
static uint32_t currentRead;
static uint8_t numRead;
static int shouldRead = 0;
void delay_us(uint16_t us) // blocking delay
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(countTim, 0); // set the counter value a 0
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <delay_us+0x34>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(countTim) < us); // wait for the counter to reach the us input in the parameter
 8001e60:	bf00      	nop
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <delay_us+0x34>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d3f8      	bcc.n	8001e62 <delay_us+0x16>
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000510 	.word	0x20000510

08001e84 <writeOne>:

void writeOne()
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
	uint32_t *writeAdd = (uint32_t *)(GPIOC_ADDR + ODR_OFFSET);
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <writeOne+0x38>)
 8001e8c:	607b      	str	r3, [r7, #4]
	*writeAdd &= ~(1 << 6);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	601a      	str	r2, [r3, #0]
	delay_us(5);
 8001e9a:	2005      	movs	r0, #5
 8001e9c:	f7ff ffd6 	bl	8001e4c <delay_us>
	*writeAdd |= (1 << 6);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	601a      	str	r2, [r3, #0]
	delay_us(15);
 8001eac:	200f      	movs	r0, #15
 8001eae:	f7ff ffcd 	bl	8001e4c <delay_us>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	48000814 	.word	0x48000814

08001ec0 <writeZero>:

void writeZero()
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
	uint32_t *writeAdd = (uint32_t *)(GPIOC_ADDR + ODR_OFFSET);
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <writeZero+0x38>)
 8001ec8:	607b      	str	r3, [r7, #4]
	*writeAdd &= ~(1 << 6);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	601a      	str	r2, [r3, #0]
	// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
	delay_us(15); // 3.125
 8001ed6:	200f      	movs	r0, #15
 8001ed8:	f7ff ffb8 	bl	8001e4c <delay_us>
	*writeAdd |= (1 << 6);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	601a      	str	r2, [r3, #0]
	// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
	delay_us(5); // 1.375
 8001ee8:	2005      	movs	r0, #5
 8001eea:	f7ff ffaf 	bl	8001e4c <delay_us>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	48000814 	.word	0x48000814

08001efc <intRead>:
	buttonVals |= (*readAdd >> 6) & 1;
	delay_us(15);
	return buttonVals;
}

uint32_t intRead(){
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
	volatile uint32_t *writeAdd = (uint32_t *)(GPIOC_ADDR + ODR_OFFSET);
 8001f02:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <intRead+0xa8>)
 8001f04:	607b      	str	r3, [r7, #4]
	writeZero();
 8001f06:	f7ff ffdb 	bl	8001ec0 <writeZero>
	writeZero();
 8001f0a:	f7ff ffd9 	bl	8001ec0 <writeZero>
	writeZero();
 8001f0e:	f7ff ffd7 	bl	8001ec0 <writeZero>
	writeZero();
 8001f12:	f7ff ffd5 	bl	8001ec0 <writeZero>
	writeZero();
 8001f16:	f7ff ffd3 	bl	8001ec0 <writeZero>
	writeZero();
 8001f1a:	f7ff ffd1 	bl	8001ec0 <writeZero>
	writeZero();
 8001f1e:	f7ff ffcf 	bl	8001ec0 <writeZero>
	writeOne();
 8001f22:	f7ff ffaf 	bl	8001e84 <writeOne>
	*writeAdd &= ~(1 << 6);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	601a      	str	r2, [r3, #0]
	delay_us(5);
 8001f32:	2005      	movs	r0, #5
 8001f34:	f7ff ff8a 	bl	8001e4c <delay_us>
	*writeAdd |= (1 << 6);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	601a      	str	r2, [r3, #0]
	delay_us(10);
 8001f44:	200a      	movs	r0, #10
 8001f46:	f7ff ff81 	bl	8001e4c <delay_us>
	shouldRead = 1;
 8001f4a:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <intRead+0xac>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(watchdogTim, 0); // 1MHz timer
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <intRead+0xb0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2200      	movs	r2, #0
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24
	while (numRead < 32 && __HAL_TIM_GET_COUNTER(watchdogTim) < 130); //watchDog timeout
 8001f5a:	bf00      	nop
 8001f5c:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <intRead+0xb4>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b1f      	cmp	r3, #31
 8001f62:	d805      	bhi.n	8001f70 <intRead+0x74>
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <intRead+0xb0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	2b81      	cmp	r3, #129	; 0x81
 8001f6e:	d9f5      	bls.n	8001f5c <intRead+0x60>
	if(numRead < 32){
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <intRead+0xb4>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b1f      	cmp	r3, #31
 8001f76:	d809      	bhi.n	8001f8c <intRead+0x90>
		currentRead = currentRead << (32 - numRead); //attempt to fix the transmission
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <intRead+0xb8>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <intRead+0xb4>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	f1c3 0320 	rsb	r3, r3, #32
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <intRead+0xb8>)
 8001f8a:	6013      	str	r3, [r2, #0]
	}
	numRead = 0;
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <intRead+0xb4>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
	shouldRead = 0;
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <intRead+0xac>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
	return currentRead;
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <intRead+0xb8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	48000814 	.word	0x48000814
 8001fa8:	20000538 	.word	0x20000538
 8001fac:	20000514 	.word	0x20000514
 8001fb0:	20000534 	.word	0x20000534
 8001fb4:	20000530 	.word	0x20000530

08001fb8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
	//used by n64 intRead()
	//Falling edge trigger. delay 1.7us then read into static var
	  volatile uint32_t *readAdd = (uint32_t *)(GPIOC_ADDR + IDR_OFFSET);
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_GPIO_EXTI_Callback+0x68>)
 8001fc4:	60fb      	str	r3, [r7, #12]

	if(shouldRead){
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d023      	beq.n	8002016 <HAL_GPIO_EXTI_Callback+0x5e>
	  delay_us(3); //??
 8001fce:	2003      	movs	r0, #3
 8001fd0:	f7ff ff3c 	bl	8001e4c <delay_us>
	  numRead++;
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <HAL_GPIO_EXTI_Callback+0x70>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_GPIO_EXTI_Callback+0x70>)
 8001fde:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(n64_DEBUG_GPIO, n64_DEBUG_PIN, 1);
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_GPIO_EXTI_Callback+0x74>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a12      	ldr	r2, [pc, #72]	; (8002030 <HAL_GPIO_EXTI_Callback+0x78>)
 8001fe6:	8811      	ldrh	r1, [r2, #0]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fee8 	bl	8002dc0 <HAL_GPIO_WritePin>
	  currentRead = (currentRead << 1) | ((*readAdd >> 6) & 1);
 8001ff0:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	005a      	lsls	r2, r3, #1
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	099b      	lsrs	r3, r3, #6
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	4313      	orrs	r3, r2
 8002002:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002004:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(n64_DEBUG_GPIO, n64_DEBUG_PIN, 0);
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_GPIO_EXTI_Callback+0x74>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a09      	ldr	r2, [pc, #36]	; (8002030 <HAL_GPIO_EXTI_Callback+0x78>)
 800200c:	8811      	ldrh	r1, [r2, #0]
 800200e:	2200      	movs	r2, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fed5 	bl	8002dc0 <HAL_GPIO_WritePin>
	}
}
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	48000810 	.word	0x48000810
 8002024:	20000538 	.word	0x20000538
 8002028:	20000534 	.word	0x20000534
 800202c:	20000520 	.word	0x20000520
 8002030:	20000524 	.word	0x20000524
 8002034:	20000530 	.word	0x20000530

08002038 <N64_init>:

void N64_init(TIM_HandleTypeDef *countTimer, TIM_HandleTypeDef *watchdogTimer, GPIO_TypeDef *Data_GPIO, uint16_t Data_PIN, GPIO_TypeDef *Debug_GPIO, uint16_t Debug_PIN, GPIO_TypeDef *Int_GPIO, uint16_t Int_PIN)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	807b      	strh	r3, [r7, #2]
	countTim = countTimer;
 8002046:	4a13      	ldr	r2, [pc, #76]	; (8002094 <N64_init+0x5c>)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6013      	str	r3, [r2, #0]
	watchdogTim = watchdogTimer;
 800204c:	4a12      	ldr	r2, [pc, #72]	; (8002098 <N64_init+0x60>)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	6013      	str	r3, [r2, #0]
	n64_GPIO = Data_GPIO; // due to nature of making C6 inout by registers, this pin assignment does not matter
 8002052:	4a12      	ldr	r2, [pc, #72]	; (800209c <N64_init+0x64>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6013      	str	r3, [r2, #0]
	n64_PIN = Data_PIN;
 8002058:	4a11      	ldr	r2, [pc, #68]	; (80020a0 <N64_init+0x68>)
 800205a:	887b      	ldrh	r3, [r7, #2]
 800205c:	8013      	strh	r3, [r2, #0]
	n64_DEBUG_GPIO = Debug_GPIO;
 800205e:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <N64_init+0x6c>)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	6013      	str	r3, [r2, #0]
	n64_DEBUG_PIN = Debug_PIN;
 8002064:	4a10      	ldr	r2, [pc, #64]	; (80020a8 <N64_init+0x70>)
 8002066:	8bbb      	ldrh	r3, [r7, #28]
 8002068:	8013      	strh	r3, [r2, #0]
	n64_INT_GPIO = Int_GPIO;
 800206a:	4a10      	ldr	r2, [pc, #64]	; (80020ac <N64_init+0x74>)
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	6013      	str	r3, [r2, #0]
	n64_INT_PIN = Int_PIN;
 8002070:	4a0f      	ldr	r2, [pc, #60]	; (80020b0 <N64_init+0x78>)
 8002072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002074:	8013      	strh	r3, [r2, #0]
	HAL_TIM_Base_Start(countTim);
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <N64_init+0x5c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f003 f888 	bl	8005190 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(watchdogTim);
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <N64_init+0x60>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f003 f883 	bl	8005190 <HAL_TIM_Base_Start>
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000510 	.word	0x20000510
 8002098:	20000514 	.word	0x20000514
 800209c:	20000518 	.word	0x20000518
 80020a0:	2000051c 	.word	0x2000051c
 80020a4:	20000520 	.word	0x20000520
 80020a8:	20000524 	.word	0x20000524
 80020ac:	20000528 	.word	0x20000528
 80020b0:	2000052c 	.word	0x2000052c

080020b4 <step_init>:
void step_init(TIM_HandleTypeDef *countTimer, int mode, 
GPIO_TypeDef *A0GPIO, uint16_t A0PIN,GPIO_TypeDef *A1GPIO, uint16_t A1PIN,
GPIO_TypeDef *A2GPIO, uint16_t A2PIN,GPIO_TypeDef *A3GPIO, uint16_t A3PIN,
GPIO_TypeDef *B0GPIO, uint16_t B0PIN,GPIO_TypeDef *B1GPIO, uint16_t B1PIN,
GPIO_TypeDef *B2GPIO, uint16_t B2PIN,GPIO_TypeDef *B3GPIO, uint16_t B3PIN)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	807b      	strh	r3, [r7, #2]
	countTim = countTimer;
 80020c2:	4a1f      	ldr	r2, [pc, #124]	; (8002140 <step_init+0x8c>)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6013      	str	r3, [r2, #0]
	stepMode = mode;
 80020c8:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <step_init+0x90>)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	6013      	str	r3, [r2, #0]
	A0_GPIO = A0GPIO;
 80020ce:	4a1e      	ldr	r2, [pc, #120]	; (8002148 <step_init+0x94>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6013      	str	r3, [r2, #0]
	A0_PIN = A0PIN;
 80020d4:	4a1d      	ldr	r2, [pc, #116]	; (800214c <step_init+0x98>)
 80020d6:	887b      	ldrh	r3, [r7, #2]
 80020d8:	8013      	strh	r3, [r2, #0]
	A1_GPIO = A1GPIO;
 80020da:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <step_init+0x9c>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	6013      	str	r3, [r2, #0]
	A1_PIN = A1PIN;
 80020e0:	4a1c      	ldr	r2, [pc, #112]	; (8002154 <step_init+0xa0>)
 80020e2:	8bbb      	ldrh	r3, [r7, #28]
 80020e4:	8013      	strh	r3, [r2, #0]
	A2_GPIO = A2GPIO;
 80020e6:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <step_init+0xa4>)
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	6013      	str	r3, [r2, #0]
	A2_PIN = A2PIN;
 80020ec:	4a1b      	ldr	r2, [pc, #108]	; (800215c <step_init+0xa8>)
 80020ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020f0:	8013      	strh	r3, [r2, #0]
	A3_GPIO = A3GPIO;
 80020f2:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <step_init+0xac>)
 80020f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f6:	6013      	str	r3, [r2, #0]
	A3_PIN = A3PIN;
 80020f8:	4a1a      	ldr	r2, [pc, #104]	; (8002164 <step_init+0xb0>)
 80020fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80020fc:	8013      	strh	r3, [r2, #0]
	B0_GPIO = B0GPIO;
 80020fe:	4a1a      	ldr	r2, [pc, #104]	; (8002168 <step_init+0xb4>)
 8002100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002102:	6013      	str	r3, [r2, #0]
	B0_PIN = B0PIN;
 8002104:	4a19      	ldr	r2, [pc, #100]	; (800216c <step_init+0xb8>)
 8002106:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002108:	8013      	strh	r3, [r2, #0]
	B1_GPIO = B1GPIO;
 800210a:	4a19      	ldr	r2, [pc, #100]	; (8002170 <step_init+0xbc>)
 800210c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210e:	6013      	str	r3, [r2, #0]
	B1_PIN = B1PIN;
 8002110:	4a18      	ldr	r2, [pc, #96]	; (8002174 <step_init+0xc0>)
 8002112:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002114:	8013      	strh	r3, [r2, #0]
	B2_GPIO = B2GPIO;
 8002116:	4a18      	ldr	r2, [pc, #96]	; (8002178 <step_init+0xc4>)
 8002118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800211a:	6013      	str	r3, [r2, #0]
	B2_PIN = B2PIN;
 800211c:	4a17      	ldr	r2, [pc, #92]	; (800217c <step_init+0xc8>)
 800211e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002122:	8013      	strh	r3, [r2, #0]
	B3_GPIO = B3GPIO;
 8002124:	4a16      	ldr	r2, [pc, #88]	; (8002180 <step_init+0xcc>)
 8002126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002128:	6013      	str	r3, [r2, #0]
	B3_PIN = B3PIN;
 800212a:	4a16      	ldr	r2, [pc, #88]	; (8002184 <step_init+0xd0>)
 800212c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002130:	8013      	strh	r3, [r2, #0]
	
	HAL_TIM_Base_Start(countTimer);
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f003 f82c 	bl	8005190 <HAL_TIM_Base_Start>
}
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	2000053c 	.word	0x2000053c
 8002144:	20000074 	.word	0x20000074
 8002148:	20000544 	.word	0x20000544
 800214c:	20000548 	.word	0x20000548
 8002150:	2000054c 	.word	0x2000054c
 8002154:	20000550 	.word	0x20000550
 8002158:	20000554 	.word	0x20000554
 800215c:	20000558 	.word	0x20000558
 8002160:	2000055c 	.word	0x2000055c
 8002164:	20000560 	.word	0x20000560
 8002168:	20000564 	.word	0x20000564
 800216c:	20000568 	.word	0x20000568
 8002170:	2000056c 	.word	0x2000056c
 8002174:	20000570 	.word	0x20000570
 8002178:	20000574 	.word	0x20000574
 800217c:	20000578 	.word	0x20000578
 8002180:	2000057c 	.word	0x2000057c
 8002184:	20000580 	.word	0x20000580

08002188 <setSpeed>:

void setSpeed(long whatSpeed)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	step_delay = (long)60 * 2 * (long)1000 / number_of_steps / whatSpeed;
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <setSpeed+0x2c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a08      	ldr	r2, [pc, #32]	; (80021b8 <setSpeed+0x30>)
 8002196:	fb92 f2f3 	sdiv	r2, r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	fb92 f3f3 	sdiv	r3, r2, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <setSpeed+0x34>)
 80021a4:	601a      	str	r2, [r3, #0]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000070 	.word	0x20000070
 80021b8:	0001d4c0 	.word	0x0001d4c0
 80021bc:	20000540 	.word	0x20000540

080021c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_MspInit+0x44>)
 80021c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ca:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <HAL_MspInit+0x44>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6613      	str	r3, [r2, #96]	; 0x60
 80021d2:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <HAL_MspInit+0x44>)
 80021d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_MspInit+0x44>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	4a08      	ldr	r2, [pc, #32]	; (8002204 <HAL_MspInit+0x44>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6593      	str	r3, [r2, #88]	; 0x58
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_MspInit+0x44>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000

08002208 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b0ae      	sub	sp, #184	; 0xb8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002220:	f107 0310 	add.w	r3, r7, #16
 8002224:	2294      	movs	r2, #148	; 0x94
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f004 f973 	bl	8006514 <memset>
  if(hi2c->Instance==I2C1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a21      	ldr	r2, [pc, #132]	; (80022b8 <HAL_I2C_MspInit+0xb0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d13b      	bne.n	80022b0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002238:	2340      	movs	r3, #64	; 0x40
 800223a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800223c:	2300      	movs	r3, #0
 800223e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	4618      	mov	r0, r3
 8002246:	f001 febd 	bl	8003fc4 <HAL_RCCEx_PeriphCLKConfig>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002250:	f7fe fd02 	bl	8000c58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <HAL_I2C_MspInit+0xb4>)
 8002256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002258:	4a18      	ldr	r2, [pc, #96]	; (80022bc <HAL_I2C_MspInit+0xb4>)
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002260:	4b16      	ldr	r3, [pc, #88]	; (80022bc <HAL_I2C_MspInit+0xb4>)
 8002262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800226c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002274:	2312      	movs	r3, #18
 8002276:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002280:	2303      	movs	r3, #3
 8002282:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002286:	2304      	movs	r3, #4
 8002288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002290:	4619      	mov	r1, r3
 8002292:	480b      	ldr	r0, [pc, #44]	; (80022c0 <HAL_I2C_MspInit+0xb8>)
 8002294:	f000 fc02 	bl	8002a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HAL_I2C_MspInit+0xb4>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	4a07      	ldr	r2, [pc, #28]	; (80022bc <HAL_I2C_MspInit+0xb4>)
 800229e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022a2:	6593      	str	r3, [r2, #88]	; 0x58
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_I2C_MspInit+0xb4>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022b0:	bf00      	nop
 80022b2:	37b8      	adds	r7, #184	; 0xb8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40005400 	.word	0x40005400
 80022bc:	40021000 	.word	0x40021000
 80022c0:	48000400 	.word	0x48000400

080022c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b0ae      	sub	sp, #184	; 0xb8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022dc:	f107 0310 	add.w	r3, r7, #16
 80022e0:	2294      	movs	r2, #148	; 0x94
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f004 f915 	bl	8006514 <memset>
  if(huart->Instance==LPUART1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a23      	ldr	r2, [pc, #140]	; (800237c <HAL_UART_MspInit+0xb8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d13e      	bne.n	8002372 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80022f4:	2320      	movs	r3, #32
 80022f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 80022f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022fc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022fe:	f107 0310 	add.w	r3, r7, #16
 8002302:	4618      	mov	r0, r3
 8002304:	f001 fe5e 	bl	8003fc4 <HAL_RCCEx_PeriphCLKConfig>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800230e:	f7fe fca3 	bl	8000c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002312:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <HAL_UART_MspInit+0xbc>)
 8002314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002316:	4a1a      	ldr	r2, [pc, #104]	; (8002380 <HAL_UART_MspInit+0xbc>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <HAL_UART_MspInit+0xbc>)
 8002320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <HAL_UART_MspInit+0xbc>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	4a14      	ldr	r2, [pc, #80]	; (8002380 <HAL_UART_MspInit+0xbc>)
 8002330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_UART_MspInit+0xbc>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8002342:	f000 ff57 	bl	80031f4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002346:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800234a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235a:	2303      	movs	r3, #3
 800235c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002360:	2308      	movs	r3, #8
 8002362:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002366:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800236a:	4619      	mov	r1, r3
 800236c:	4805      	ldr	r0, [pc, #20]	; (8002384 <HAL_UART_MspInit+0xc0>)
 800236e:	f000 fb95 	bl	8002a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002372:	bf00      	nop
 8002374:	37b8      	adds	r7, #184	; 0xb8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40008000 	.word	0x40008000
 8002380:	40021000 	.word	0x40021000
 8002384:	48001800 	.word	0x48001800

08002388 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a17      	ldr	r2, [pc, #92]	; (8002404 <HAL_SPI_MspInit+0x7c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d128      	bne.n	80023fc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <HAL_SPI_MspInit+0x80>)
 80023ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ae:	4a16      	ldr	r2, [pc, #88]	; (8002408 <HAL_SPI_MspInit+0x80>)
 80023b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023b4:	6613      	str	r3, [r2, #96]	; 0x60
 80023b6:	4b14      	ldr	r3, [pc, #80]	; (8002408 <HAL_SPI_MspInit+0x80>)
 80023b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_SPI_MspInit+0x80>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	4a10      	ldr	r2, [pc, #64]	; (8002408 <HAL_SPI_MspInit+0x80>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_SPI_MspInit+0x80>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023da:	23f0      	movs	r3, #240	; 0xf0
 80023dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e6:	2303      	movs	r3, #3
 80023e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023ea:	2305      	movs	r3, #5
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4619      	mov	r1, r3
 80023f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f8:	f000 fb50 	bl	8002a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023fc:	bf00      	nop
 80023fe:	3728      	adds	r7, #40	; 0x28
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40013000 	.word	0x40013000
 8002408:	40021000 	.word	0x40021000

0800240c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08c      	sub	sp, #48	; 0x30
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 031c 	add.w	r3, r7, #28
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800242c:	d10c      	bne.n	8002448 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800242e:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <HAL_TIM_Base_MspInit+0xc4>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	4a27      	ldr	r2, [pc, #156]	; (80024d0 <HAL_TIM_Base_MspInit+0xc4>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6593      	str	r3, [r2, #88]	; 0x58
 800243a:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <HAL_TIM_Base_MspInit+0xc4>)
 800243c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002446:	e03e      	b.n	80024c6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM4)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a21      	ldr	r2, [pc, #132]	; (80024d4 <HAL_TIM_Base_MspInit+0xc8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d128      	bne.n	80024a4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002452:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <HAL_TIM_Base_MspInit+0xc4>)
 8002454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002456:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <HAL_TIM_Base_MspInit+0xc4>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	6593      	str	r3, [r2, #88]	; 0x58
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <HAL_TIM_Base_MspInit+0xc4>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800246a:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_TIM_Base_MspInit+0xc4>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	4a18      	ldr	r2, [pc, #96]	; (80024d0 <HAL_TIM_Base_MspInit+0xc4>)
 8002470:	f043 0310 	orr.w	r3, r3, #16
 8002474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <HAL_TIM_Base_MspInit+0xc4>)
 8002478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002482:	2301      	movs	r3, #1
 8002484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002492:	2302      	movs	r3, #2
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002496:	f107 031c 	add.w	r3, r7, #28
 800249a:	4619      	mov	r1, r3
 800249c:	480e      	ldr	r0, [pc, #56]	; (80024d8 <HAL_TIM_Base_MspInit+0xcc>)
 800249e:	f000 fafd 	bl	8002a9c <HAL_GPIO_Init>
}
 80024a2:	e010      	b.n	80024c6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <HAL_TIM_Base_MspInit+0xd0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d10b      	bne.n	80024c6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_TIM_Base_MspInit+0xc4>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b2:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_TIM_Base_MspInit+0xc4>)
 80024b4:	f043 0308 	orr.w	r3, r3, #8
 80024b8:	6593      	str	r3, [r2, #88]	; 0x58
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_TIM_Base_MspInit+0xc4>)
 80024bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
}
 80024c6:	bf00      	nop
 80024c8:	3730      	adds	r7, #48	; 0x30
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40000800 	.word	0x40000800
 80024d8:	48001000 	.word	0x48001000
 80024dc:	40000c00 	.word	0x40000c00

080024e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <NMI_Handler+0x4>

080024e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ea:	e7fe      	b.n	80024ea <HardFault_Handler+0x4>

080024ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <MemManage_Handler+0x4>

080024f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f6:	e7fe      	b.n	80024f6 <BusFault_Handler+0x4>

080024f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <UsageFault_Handler+0x4>

080024fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800252c:	f000 f960 	bl	80027f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}

08002534 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002538:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800253c:	f000 fc58 	bl	8002df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}

08002544 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
	return 1;
 8002548:	2301      	movs	r3, #1
}
 800254a:	4618      	mov	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_kill>:

int _kill(int pid, int sig)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800255e:	f003 ffa1 	bl	80064a4 <__errno>
 8002562:	4603      	mov	r3, r0
 8002564:	2216      	movs	r2, #22
 8002566:	601a      	str	r2, [r3, #0]
	return -1;
 8002568:	f04f 33ff 	mov.w	r3, #4294967295
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <_exit>:

void _exit (int status)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800257c:	f04f 31ff 	mov.w	r1, #4294967295
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ffe7 	bl	8002554 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002586:	e7fe      	b.n	8002586 <_exit+0x12>

08002588 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	e00a      	b.n	80025b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800259a:	f3af 8000 	nop.w
 800259e:	4601      	mov	r1, r0
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	60ba      	str	r2, [r7, #8]
 80025a6:	b2ca      	uxtb	r2, r1
 80025a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	3301      	adds	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	dbf0      	blt.n	800259a <_read+0x12>
	}

return len;
 80025b8:	687b      	ldr	r3, [r7, #4]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b086      	sub	sp, #24
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	e009      	b.n	80025e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	60ba      	str	r2, [r7, #8]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe fb29 	bl	8000c34 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3301      	adds	r3, #1
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	dbf1      	blt.n	80025d4 <_write+0x12>
	}
	return len;
 80025f0:	687b      	ldr	r3, [r7, #4]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <_close>:

int _close(int file)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
	return -1;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002622:	605a      	str	r2, [r3, #4]
	return 0;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <_isatty>:

int _isatty(int file)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
	return 1;
 800263a:	2301      	movs	r3, #1
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
	return 0;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800266c:	4a14      	ldr	r2, [pc, #80]	; (80026c0 <_sbrk+0x5c>)
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <_sbrk+0x60>)
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002678:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <_sbrk+0x64>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <_sbrk+0x64>)
 8002682:	4a12      	ldr	r2, [pc, #72]	; (80026cc <_sbrk+0x68>)
 8002684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <_sbrk+0x64>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	429a      	cmp	r2, r3
 8002692:	d207      	bcs.n	80026a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002694:	f003 ff06 	bl	80064a4 <__errno>
 8002698:	4603      	mov	r3, r0
 800269a:	220c      	movs	r2, #12
 800269c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	e009      	b.n	80026b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <_sbrk+0x64>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <_sbrk+0x64>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <_sbrk+0x64>)
 80026b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026b6:	68fb      	ldr	r3, [r7, #12]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	200a0000 	.word	0x200a0000
 80026c4:	00000400 	.word	0x00000400
 80026c8:	20000584 	.word	0x20000584
 80026cc:	200005a0 	.word	0x200005a0

080026d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <SystemInit+0x20>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	4a05      	ldr	r2, [pc, #20]	; (80026f0 <SystemInit+0x20>)
 80026dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800272c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026f8:	f7ff ffea 	bl	80026d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026fc:	480c      	ldr	r0, [pc, #48]	; (8002730 <LoopForever+0x6>)
  ldr r1, =_edata
 80026fe:	490d      	ldr	r1, [pc, #52]	; (8002734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002700:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <LoopForever+0xe>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002704:	e002      	b.n	800270c <LoopCopyDataInit>

08002706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270a:	3304      	adds	r3, #4

0800270c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800270c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800270e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002710:	d3f9      	bcc.n	8002706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002712:	4a0a      	ldr	r2, [pc, #40]	; (800273c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002714:	4c0a      	ldr	r4, [pc, #40]	; (8002740 <LoopForever+0x16>)
  movs r3, #0
 8002716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002718:	e001      	b.n	800271e <LoopFillZerobss>

0800271a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800271c:	3204      	adds	r2, #4

0800271e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800271e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002720:	d3fb      	bcc.n	800271a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002722:	f003 fec5 	bl	80064b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002726:	f7fd fd6b 	bl	8000200 <main>

0800272a <LoopForever>:

LoopForever:
    b LoopForever
 800272a:	e7fe      	b.n	800272a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800272c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002734:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8002738:	0800944c 	.word	0x0800944c
  ldr r2, =_sbss
 800273c:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8002740:	2000059c 	.word	0x2000059c

08002744 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002744:	e7fe      	b.n	8002744 <ADC1_IRQHandler>

08002746 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002750:	2003      	movs	r0, #3
 8002752:	f000 f961 	bl	8002a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002756:	2000      	movs	r0, #0
 8002758:	f000 f80e 	bl	8002778 <HAL_InitTick>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	71fb      	strb	r3, [r7, #7]
 8002766:	e001      	b.n	800276c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002768:	f7ff fd2a 	bl	80021c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800276c:	79fb      	ldrb	r3, [r7, #7]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002784:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <HAL_InitTick+0x6c>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d023      	beq.n	80027d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800278c:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <HAL_InitTick+0x70>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <HAL_InitTick+0x6c>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	4619      	mov	r1, r3
 8002796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800279a:	fbb3 f3f1 	udiv	r3, r3, r1
 800279e:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f96d 	bl	8002a82 <HAL_SYSTICK_Config>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10f      	bne.n	80027ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b0f      	cmp	r3, #15
 80027b2:	d809      	bhi.n	80027c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027b4:	2200      	movs	r2, #0
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295
 80027bc:	f000 f937 	bl	8002a2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027c0:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <HAL_InitTick+0x74>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	e007      	b.n	80027d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
 80027cc:	e004      	b.n	80027d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	e001      	b.n	80027d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000080 	.word	0x20000080
 80027e8:	20000078 	.word	0x20000078
 80027ec:	2000007c 	.word	0x2000007c

080027f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_IncTick+0x20>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_IncTick+0x24>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	4a04      	ldr	r2, [pc, #16]	; (8002814 <HAL_IncTick+0x24>)
 8002802:	6013      	str	r3, [r2, #0]
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000080 	.word	0x20000080
 8002814:	20000588 	.word	0x20000588

08002818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return uwTick;
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <HAL_GetTick+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000588 	.word	0x20000588

08002830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff ffee 	bl	8002818 <HAL_GetTick>
 800283c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d005      	beq.n	8002856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_Delay+0x44>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4413      	add	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002856:	bf00      	nop
 8002858:	f7ff ffde 	bl	8002818 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	429a      	cmp	r2, r3
 8002866:	d8f7      	bhi.n	8002858 <HAL_Delay+0x28>
  {
  }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000080 	.word	0x20000080

08002878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002894:	4013      	ands	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028aa:	4a04      	ldr	r2, [pc, #16]	; (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	60d3      	str	r3, [r2, #12]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <__NVIC_GetPriorityGrouping+0x18>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	f003 0307 	and.w	r3, r3, #7
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	db0b      	blt.n	8002906 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	f003 021f 	and.w	r2, r3, #31
 80028f4:	4907      	ldr	r1, [pc, #28]	; (8002914 <__NVIC_EnableIRQ+0x38>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2001      	movs	r0, #1
 80028fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000e100 	.word	0xe000e100

08002918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	2b00      	cmp	r3, #0
 800292a:	db0a      	blt.n	8002942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	490c      	ldr	r1, [pc, #48]	; (8002964 <__NVIC_SetPriority+0x4c>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	0112      	lsls	r2, r2, #4
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	440b      	add	r3, r1
 800293c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002940:	e00a      	b.n	8002958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4908      	ldr	r1, [pc, #32]	; (8002968 <__NVIC_SetPriority+0x50>)
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	3b04      	subs	r3, #4
 8002950:	0112      	lsls	r2, r2, #4
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	440b      	add	r3, r1
 8002956:	761a      	strb	r2, [r3, #24]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000e100 	.word	0xe000e100
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296c:	b480      	push	{r7}
 800296e:	b089      	sub	sp, #36	; 0x24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f1c3 0307 	rsb	r3, r3, #7
 8002986:	2b04      	cmp	r3, #4
 8002988:	bf28      	it	cs
 800298a:	2304      	movcs	r3, #4
 800298c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3304      	adds	r3, #4
 8002992:	2b06      	cmp	r3, #6
 8002994:	d902      	bls.n	800299c <NVIC_EncodePriority+0x30>
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3b03      	subs	r3, #3
 800299a:	e000      	b.n	800299e <NVIC_EncodePriority+0x32>
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43da      	mvns	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	401a      	ands	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b4:	f04f 31ff 	mov.w	r1, #4294967295
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	43d9      	mvns	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	4313      	orrs	r3, r2
         );
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3724      	adds	r7, #36	; 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e4:	d301      	bcc.n	80029ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00f      	b.n	8002a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ea:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <SysTick_Config+0x40>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029f2:	210f      	movs	r1, #15
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295
 80029f8:	f7ff ff8e 	bl	8002918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <SysTick_Config+0x40>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a02:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <SysTick_Config+0x40>)
 8002a04:	2207      	movs	r2, #7
 8002a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	e000e010 	.word	0xe000e010

08002a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff29 	bl	8002878 <__NVIC_SetPriorityGrouping>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a40:	f7ff ff3e 	bl	80028c0 <__NVIC_GetPriorityGrouping>
 8002a44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	6978      	ldr	r0, [r7, #20]
 8002a4c:	f7ff ff8e 	bl	800296c <NVIC_EncodePriority>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff5d 	bl	8002918 <__NVIC_SetPriority>
}
 8002a5e:	bf00      	nop
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff ff31 	bl	80028dc <__NVIC_EnableIRQ>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ffa2 	bl	80029d4 <SysTick_Config>
 8002a90:	4603      	mov	r3, r0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aaa:	e166      	b.n	8002d7a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8158 	beq.w	8002d74 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d005      	beq.n	8002adc <HAL_GPIO_Init+0x40>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d130      	bne.n	8002b3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4013      	ands	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b12:	2201      	movs	r2, #1
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	f003 0201 	and.w	r2, r3, #1
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d017      	beq.n	8002b7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d123      	bne.n	8002bce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	08da      	lsrs	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3208      	adds	r2, #8
 8002b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	08da      	lsrs	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3208      	adds	r2, #8
 8002bc8:	6939      	ldr	r1, [r7, #16]
 8002bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	2203      	movs	r2, #3
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4013      	ands	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0203 	and.w	r2, r3, #3
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80b2 	beq.w	8002d74 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c10:	4b61      	ldr	r3, [pc, #388]	; (8002d98 <HAL_GPIO_Init+0x2fc>)
 8002c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c14:	4a60      	ldr	r2, [pc, #384]	; (8002d98 <HAL_GPIO_Init+0x2fc>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6613      	str	r3, [r2, #96]	; 0x60
 8002c1c:	4b5e      	ldr	r3, [pc, #376]	; (8002d98 <HAL_GPIO_Init+0x2fc>)
 8002c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c28:	4a5c      	ldr	r2, [pc, #368]	; (8002d9c <HAL_GPIO_Init+0x300>)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	089b      	lsrs	r3, r3, #2
 8002c2e:	3302      	adds	r3, #2
 8002c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	220f      	movs	r2, #15
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c52:	d02b      	beq.n	8002cac <HAL_GPIO_Init+0x210>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a52      	ldr	r2, [pc, #328]	; (8002da0 <HAL_GPIO_Init+0x304>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d025      	beq.n	8002ca8 <HAL_GPIO_Init+0x20c>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a51      	ldr	r2, [pc, #324]	; (8002da4 <HAL_GPIO_Init+0x308>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d01f      	beq.n	8002ca4 <HAL_GPIO_Init+0x208>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a50      	ldr	r2, [pc, #320]	; (8002da8 <HAL_GPIO_Init+0x30c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d019      	beq.n	8002ca0 <HAL_GPIO_Init+0x204>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a4f      	ldr	r2, [pc, #316]	; (8002dac <HAL_GPIO_Init+0x310>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d013      	beq.n	8002c9c <HAL_GPIO_Init+0x200>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a4e      	ldr	r2, [pc, #312]	; (8002db0 <HAL_GPIO_Init+0x314>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00d      	beq.n	8002c98 <HAL_GPIO_Init+0x1fc>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a4d      	ldr	r2, [pc, #308]	; (8002db4 <HAL_GPIO_Init+0x318>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d007      	beq.n	8002c94 <HAL_GPIO_Init+0x1f8>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a4c      	ldr	r2, [pc, #304]	; (8002db8 <HAL_GPIO_Init+0x31c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d101      	bne.n	8002c90 <HAL_GPIO_Init+0x1f4>
 8002c8c:	2307      	movs	r3, #7
 8002c8e:	e00e      	b.n	8002cae <HAL_GPIO_Init+0x212>
 8002c90:	2308      	movs	r3, #8
 8002c92:	e00c      	b.n	8002cae <HAL_GPIO_Init+0x212>
 8002c94:	2306      	movs	r3, #6
 8002c96:	e00a      	b.n	8002cae <HAL_GPIO_Init+0x212>
 8002c98:	2305      	movs	r3, #5
 8002c9a:	e008      	b.n	8002cae <HAL_GPIO_Init+0x212>
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	e006      	b.n	8002cae <HAL_GPIO_Init+0x212>
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e004      	b.n	8002cae <HAL_GPIO_Init+0x212>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e002      	b.n	8002cae <HAL_GPIO_Init+0x212>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <HAL_GPIO_Init+0x212>
 8002cac:	2300      	movs	r3, #0
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	f002 0203 	and.w	r2, r2, #3
 8002cb4:	0092      	lsls	r2, r2, #2
 8002cb6:	4093      	lsls	r3, r2
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cbe:	4937      	ldr	r1, [pc, #220]	; (8002d9c <HAL_GPIO_Init+0x300>)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	089b      	lsrs	r3, r3, #2
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ccc:	4b3b      	ldr	r3, [pc, #236]	; (8002dbc <HAL_GPIO_Init+0x320>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cf0:	4a32      	ldr	r2, [pc, #200]	; (8002dbc <HAL_GPIO_Init+0x320>)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cf6:	4b31      	ldr	r3, [pc, #196]	; (8002dbc <HAL_GPIO_Init+0x320>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4013      	ands	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d1a:	4a28      	ldr	r2, [pc, #160]	; (8002dbc <HAL_GPIO_Init+0x320>)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d20:	4b26      	ldr	r3, [pc, #152]	; (8002dbc <HAL_GPIO_Init+0x320>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d44:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <HAL_GPIO_Init+0x320>)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d4a:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <HAL_GPIO_Init+0x320>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4013      	ands	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d6e:	4a13      	ldr	r2, [pc, #76]	; (8002dbc <HAL_GPIO_Init+0x320>)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	3301      	adds	r3, #1
 8002d78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f47f ae91 	bne.w	8002aac <HAL_GPIO_Init+0x10>
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	bf00      	nop
 8002d8e:	371c      	adds	r7, #28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	48000400 	.word	0x48000400
 8002da4:	48000800 	.word	0x48000800
 8002da8:	48000c00 	.word	0x48000c00
 8002dac:	48001000 	.word	0x48001000
 8002db0:	48001400 	.word	0x48001400
 8002db4:	48001800 	.word	0x48001800
 8002db8:	48001c00 	.word	0x48001c00
 8002dbc:	40010400 	.word	0x40010400

08002dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd0:	787b      	ldrb	r3, [r7, #1]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ddc:	e002      	b.n	8002de4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d006      	beq.n	8002e14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e06:	4a05      	ldr	r2, [pc, #20]	; (8002e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e0c:	88fb      	ldrh	r3, [r7, #6]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff f8d2 	bl	8001fb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40010400 	.word	0x40010400

08002e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e081      	b.n	8002f36 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff f9de 	bl	8002208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2224      	movs	r2, #36	; 0x24
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d107      	bne.n	8002e9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	e006      	b.n	8002ea8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ea6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d104      	bne.n	8002eba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ecc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002edc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69d9      	ldr	r1, [r3, #28]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b20      	cmp	r3, #32
 8002f52:	d138      	bne.n	8002fc6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e032      	b.n	8002fc8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2224      	movs	r2, #36	; 0x24
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f90:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6819      	ldr	r1, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e000      	b.n	8002fc8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fc6:	2302      	movs	r3, #2
  }
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d139      	bne.n	800305e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e033      	b.n	8003060 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2224      	movs	r2, #36	; 0x24
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003026:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	e000      	b.n	8003060 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800305e:	2302      	movs	r3, #2
  }
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003070:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307c:	d102      	bne.n	8003084 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800307e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003082:	e00b      	b.n	800309c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003084:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800308a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003092:	d102      	bne.n	800309a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003098:	e000      	b.n	800309c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800309a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40007000 	.word	0x40007000

080030ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d141      	bne.n	800313e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030ba:	4b4b      	ldr	r3, [pc, #300]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c6:	d131      	bne.n	800312c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030c8:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ce:	4a46      	ldr	r2, [pc, #280]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030d8:	4b43      	ldr	r3, [pc, #268]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030e0:	4a41      	ldr	r2, [pc, #260]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80030e8:	4b40      	ldr	r3, [pc, #256]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2232      	movs	r2, #50	; 0x32
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	4a3f      	ldr	r2, [pc, #252]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	0c9b      	lsrs	r3, r3, #18
 80030fa:	3301      	adds	r3, #1
 80030fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030fe:	e002      	b.n	8003106 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3b01      	subs	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003106:	4b38      	ldr	r3, [pc, #224]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003112:	d102      	bne.n	800311a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f2      	bne.n	8003100 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800311a:	4b33      	ldr	r3, [pc, #204]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003126:	d158      	bne.n	80031da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e057      	b.n	80031dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800312c:	4b2e      	ldr	r3, [pc, #184]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003132:	4a2d      	ldr	r2, [pc, #180]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003138:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800313c:	e04d      	b.n	80031da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003144:	d141      	bne.n	80031ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003146:	4b28      	ldr	r3, [pc, #160]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800314e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003152:	d131      	bne.n	80031b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003154:	4b24      	ldr	r3, [pc, #144]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800315a:	4a23      	ldr	r2, [pc, #140]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003160:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003164:	4b20      	ldr	r3, [pc, #128]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800316c:	4a1e      	ldr	r2, [pc, #120]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003172:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003174:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2232      	movs	r2, #50	; 0x32
 800317a:	fb02 f303 	mul.w	r3, r2, r3
 800317e:	4a1c      	ldr	r2, [pc, #112]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003180:	fba2 2303 	umull	r2, r3, r2, r3
 8003184:	0c9b      	lsrs	r3, r3, #18
 8003186:	3301      	adds	r3, #1
 8003188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800318a:	e002      	b.n	8003192 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3b01      	subs	r3, #1
 8003190:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319e:	d102      	bne.n	80031a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f2      	bne.n	800318c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b2:	d112      	bne.n	80031da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e011      	b.n	80031dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031be:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031c8:	e007      	b.n	80031da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031ca:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031d2:	4a05      	ldr	r2, [pc, #20]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	40007000 	.word	0x40007000
 80031ec:	20000078 	.word	0x20000078
 80031f0:	431bde83 	.word	0x431bde83

080031f4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_PWREx_EnableVddIO2+0x1c>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4a04      	ldr	r2, [pc, #16]	; (8003210 <HAL_PWREx_EnableVddIO2+0x1c>)
 80031fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003202:	6053      	str	r3, [r2, #4]
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40007000 	.word	0x40007000

08003214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	f000 bc16 	b.w	8003a54 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003228:	4b96      	ldr	r3, [pc, #600]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 030c 	and.w	r3, r3, #12
 8003230:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003232:	4b94      	ldr	r3, [pc, #592]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80e4 	beq.w	8003412 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d007      	beq.n	8003260 <HAL_RCC_OscConfig+0x4c>
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b0c      	cmp	r3, #12
 8003254:	f040 808b 	bne.w	800336e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b01      	cmp	r3, #1
 800325c:	f040 8087 	bne.w	800336e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003260:	4b88      	ldr	r3, [pc, #544]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_OscConfig+0x64>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e3ed      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1a      	ldr	r2, [r3, #32]
 800327c:	4b81      	ldr	r3, [pc, #516]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d004      	beq.n	8003292 <HAL_RCC_OscConfig+0x7e>
 8003288:	4b7e      	ldr	r3, [pc, #504]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003290:	e005      	b.n	800329e <HAL_RCC_OscConfig+0x8a>
 8003292:	4b7c      	ldr	r3, [pc, #496]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 8003294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800329e:	4293      	cmp	r3, r2
 80032a0:	d223      	bcs.n	80032ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fdca 	bl	8003e40 <RCC_SetFlashLatencyFromMSIRange>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e3ce      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032b6:	4b73      	ldr	r3, [pc, #460]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a72      	ldr	r2, [pc, #456]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80032bc:	f043 0308 	orr.w	r3, r3, #8
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	4b70      	ldr	r3, [pc, #448]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	496d      	ldr	r1, [pc, #436]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032d4:	4b6b      	ldr	r3, [pc, #428]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	4968      	ldr	r1, [pc, #416]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	604b      	str	r3, [r1, #4]
 80032e8:	e025      	b.n	8003336 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032ea:	4b66      	ldr	r3, [pc, #408]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a65      	ldr	r2, [pc, #404]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80032f0:	f043 0308 	orr.w	r3, r3, #8
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	4b63      	ldr	r3, [pc, #396]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	4960      	ldr	r1, [pc, #384]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 8003304:	4313      	orrs	r3, r2
 8003306:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003308:	4b5e      	ldr	r3, [pc, #376]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	021b      	lsls	r3, r3, #8
 8003316:	495b      	ldr	r1, [pc, #364]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fd8a 	bl	8003e40 <RCC_SetFlashLatencyFromMSIRange>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e38e      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003336:	f000 fcbf 	bl	8003cb8 <HAL_RCC_GetSysClockFreq>
 800333a:	4602      	mov	r2, r0
 800333c:	4b51      	ldr	r3, [pc, #324]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	4950      	ldr	r1, [pc, #320]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 8003348:	5ccb      	ldrb	r3, [r1, r3]
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	fa22 f303 	lsr.w	r3, r2, r3
 8003352:	4a4e      	ldr	r2, [pc, #312]	; (800348c <HAL_RCC_OscConfig+0x278>)
 8003354:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003356:	4b4e      	ldr	r3, [pc, #312]	; (8003490 <HAL_RCC_OscConfig+0x27c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fa0c 	bl	8002778 <HAL_InitTick>
 8003360:	4603      	mov	r3, r0
 8003362:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d052      	beq.n	8003410 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	e372      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d032      	beq.n	80033dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003376:	4b43      	ldr	r3, [pc, #268]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a42      	ldr	r2, [pc, #264]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003382:	f7ff fa49 	bl	8002818 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800338a:	f7ff fa45 	bl	8002818 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e35b      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800339c:	4b39      	ldr	r3, [pc, #228]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033a8:	4b36      	ldr	r3, [pc, #216]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a35      	ldr	r2, [pc, #212]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80033ae:	f043 0308 	orr.w	r3, r3, #8
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	4b33      	ldr	r3, [pc, #204]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4930      	ldr	r1, [pc, #192]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033c6:	4b2f      	ldr	r3, [pc, #188]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	492b      	ldr	r1, [pc, #172]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	604b      	str	r3, [r1, #4]
 80033da:	e01a      	b.n	8003412 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033dc:	4b29      	ldr	r3, [pc, #164]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a28      	ldr	r2, [pc, #160]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80033e2:	f023 0301 	bic.w	r3, r3, #1
 80033e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033e8:	f7ff fa16 	bl	8002818 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033f0:	f7ff fa12 	bl	8002818 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e328      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003402:	4b20      	ldr	r3, [pc, #128]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x1dc>
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d073      	beq.n	8003506 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	2b08      	cmp	r3, #8
 8003422:	d005      	beq.n	8003430 <HAL_RCC_OscConfig+0x21c>
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2b0c      	cmp	r3, #12
 8003428:	d10e      	bne.n	8003448 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2b03      	cmp	r3, #3
 800342e:	d10b      	bne.n	8003448 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003430:	4b14      	ldr	r3, [pc, #80]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d063      	beq.n	8003504 <HAL_RCC_OscConfig+0x2f0>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d15f      	bne.n	8003504 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e305      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003450:	d106      	bne.n	8003460 <HAL_RCC_OscConfig+0x24c>
 8003452:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 8003458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	e025      	b.n	80034ac <HAL_RCC_OscConfig+0x298>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003468:	d114      	bne.n	8003494 <HAL_RCC_OscConfig+0x280>
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a05      	ldr	r2, [pc, #20]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 8003470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a02      	ldr	r2, [pc, #8]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e013      	b.n	80034ac <HAL_RCC_OscConfig+0x298>
 8003484:	40021000 	.word	0x40021000
 8003488:	08008ff0 	.word	0x08008ff0
 800348c:	20000078 	.word	0x20000078
 8003490:	2000007c 	.word	0x2000007c
 8003494:	4ba0      	ldr	r3, [pc, #640]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a9f      	ldr	r2, [pc, #636]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 800349a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	4b9d      	ldr	r3, [pc, #628]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a9c      	ldr	r2, [pc, #624]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 80034a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d013      	beq.n	80034dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7ff f9b0 	bl	8002818 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034bc:	f7ff f9ac 	bl	8002818 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	; 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e2c2      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ce:	4b92      	ldr	r3, [pc, #584]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x2a8>
 80034da:	e014      	b.n	8003506 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7ff f99c 	bl	8002818 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e4:	f7ff f998 	bl	8002818 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b64      	cmp	r3, #100	; 0x64
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e2ae      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034f6:	4b88      	ldr	r3, [pc, #544]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x2d0>
 8003502:	e000      	b.n	8003506 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d060      	beq.n	80035d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2b04      	cmp	r3, #4
 8003516:	d005      	beq.n	8003524 <HAL_RCC_OscConfig+0x310>
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b0c      	cmp	r3, #12
 800351c:	d119      	bne.n	8003552 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b02      	cmp	r3, #2
 8003522:	d116      	bne.n	8003552 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003524:	4b7c      	ldr	r3, [pc, #496]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_OscConfig+0x328>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e28b      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353c:	4b76      	ldr	r3, [pc, #472]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	061b      	lsls	r3, r3, #24
 800354a:	4973      	ldr	r1, [pc, #460]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003550:	e040      	b.n	80035d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d023      	beq.n	80035a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800355a:	4b6f      	ldr	r3, [pc, #444]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a6e      	ldr	r2, [pc, #440]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 8003560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003566:	f7ff f957 	bl	8002818 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800356e:	f7ff f953 	bl	8002818 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e269      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003580:	4b65      	ldr	r3, [pc, #404]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0f0      	beq.n	800356e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358c:	4b62      	ldr	r3, [pc, #392]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	061b      	lsls	r3, r3, #24
 800359a:	495f      	ldr	r1, [pc, #380]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
 80035a0:	e018      	b.n	80035d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a2:	4b5d      	ldr	r3, [pc, #372]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a5c      	ldr	r2, [pc, #368]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 80035a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ae:	f7ff f933 	bl	8002818 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b6:	f7ff f92f 	bl	8002818 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e245      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035c8:	4b53      	ldr	r3, [pc, #332]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f0      	bne.n	80035b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d03c      	beq.n	800365a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01c      	beq.n	8003622 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e8:	4b4b      	ldr	r3, [pc, #300]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 80035ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ee:	4a4a      	ldr	r2, [pc, #296]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7ff f90e 	bl	8002818 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003600:	f7ff f90a 	bl	8002818 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e220      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003612:	4b41      	ldr	r3, [pc, #260]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 8003614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0ef      	beq.n	8003600 <HAL_RCC_OscConfig+0x3ec>
 8003620:	e01b      	b.n	800365a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003622:	4b3d      	ldr	r3, [pc, #244]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 8003624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003628:	4a3b      	ldr	r2, [pc, #236]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 800362a:	f023 0301 	bic.w	r3, r3, #1
 800362e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003632:	f7ff f8f1 	bl	8002818 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800363a:	f7ff f8ed 	bl	8002818 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e203      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800364c:	4b32      	ldr	r3, [pc, #200]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 800364e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1ef      	bne.n	800363a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80a6 	beq.w	80037b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003668:	2300      	movs	r3, #0
 800366a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800366c:	4b2a      	ldr	r3, [pc, #168]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 800366e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10d      	bne.n	8003694 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003678:	4b27      	ldr	r3, [pc, #156]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	4a26      	ldr	r2, [pc, #152]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 800367e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003682:	6593      	str	r3, [r2, #88]	; 0x58
 8003684:	4b24      	ldr	r3, [pc, #144]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 8003686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003690:	2301      	movs	r3, #1
 8003692:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003694:	4b21      	ldr	r3, [pc, #132]	; (800371c <HAL_RCC_OscConfig+0x508>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d118      	bne.n	80036d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a0:	4b1e      	ldr	r3, [pc, #120]	; (800371c <HAL_RCC_OscConfig+0x508>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1d      	ldr	r2, [pc, #116]	; (800371c <HAL_RCC_OscConfig+0x508>)
 80036a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ac:	f7ff f8b4 	bl	8002818 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b4:	f7ff f8b0 	bl	8002818 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e1c6      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <HAL_RCC_OscConfig+0x508>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d108      	bne.n	80036ec <HAL_RCC_OscConfig+0x4d8>
 80036da:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	4a0d      	ldr	r2, [pc, #52]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ea:	e029      	b.n	8003740 <HAL_RCC_OscConfig+0x52c>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2b05      	cmp	r3, #5
 80036f2:	d115      	bne.n	8003720 <HAL_RCC_OscConfig+0x50c>
 80036f4:	4b08      	ldr	r3, [pc, #32]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fa:	4a07      	ldr	r2, [pc, #28]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 80036fc:	f043 0304 	orr.w	r3, r3, #4
 8003700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003704:	4b04      	ldr	r3, [pc, #16]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370a:	4a03      	ldr	r2, [pc, #12]	; (8003718 <HAL_RCC_OscConfig+0x504>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003714:	e014      	b.n	8003740 <HAL_RCC_OscConfig+0x52c>
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000
 800371c:	40007000 	.word	0x40007000
 8003720:	4b9d      	ldr	r3, [pc, #628]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003726:	4a9c      	ldr	r2, [pc, #624]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003730:	4b99      	ldr	r3, [pc, #612]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	4a98      	ldr	r2, [pc, #608]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 8003738:	f023 0304 	bic.w	r3, r3, #4
 800373c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d016      	beq.n	8003776 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7ff f866 	bl	8002818 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800374e:	e00a      	b.n	8003766 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003750:	f7ff f862 	bl	8002818 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	; 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e176      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003766:	4b8c      	ldr	r3, [pc, #560]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ed      	beq.n	8003750 <HAL_RCC_OscConfig+0x53c>
 8003774:	e015      	b.n	80037a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003776:	f7ff f84f 	bl	8002818 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800377c:	e00a      	b.n	8003794 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377e:	f7ff f84b 	bl	8002818 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	; 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e15f      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003794:	4b80      	ldr	r3, [pc, #512]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1ed      	bne.n	800377e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a2:	7ffb      	ldrb	r3, [r7, #31]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d105      	bne.n	80037b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a8:	4b7b      	ldr	r3, [pc, #492]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	4a7a      	ldr	r2, [pc, #488]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 80037ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d03c      	beq.n	800383a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01c      	beq.n	8003802 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037c8:	4b73      	ldr	r3, [pc, #460]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 80037ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ce:	4a72      	ldr	r2, [pc, #456]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7ff f81e 	bl	8002818 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037e0:	f7ff f81a 	bl	8002818 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e130      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037f2:	4b69      	ldr	r3, [pc, #420]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 80037f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0ef      	beq.n	80037e0 <HAL_RCC_OscConfig+0x5cc>
 8003800:	e01b      	b.n	800383a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003802:	4b65      	ldr	r3, [pc, #404]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 8003804:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003808:	4a63      	ldr	r2, [pc, #396]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003812:	f7ff f801 	bl	8002818 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800381a:	f7fe fffd 	bl	8002818 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e113      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800382c:	4b5a      	ldr	r3, [pc, #360]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 800382e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1ef      	bne.n	800381a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8107 	beq.w	8003a52 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	2b02      	cmp	r3, #2
 800384a:	f040 80cf 	bne.w	80039ec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800384e:	4b52      	ldr	r3, [pc, #328]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f003 0203 	and.w	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	429a      	cmp	r2, r3
 8003860:	d12c      	bne.n	80038bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	3b01      	subs	r3, #1
 800386e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d123      	bne.n	80038bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003880:	429a      	cmp	r2, r3
 8003882:	d11b      	bne.n	80038bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003890:	429a      	cmp	r2, r3
 8003892:	d113      	bne.n	80038bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	3b01      	subs	r3, #1
 80038a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d109      	bne.n	80038bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	085b      	lsrs	r3, r3, #1
 80038b4:	3b01      	subs	r3, #1
 80038b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d071      	beq.n	80039a0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b0c      	cmp	r3, #12
 80038c0:	d068      	beq.n	8003994 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038c2:	4b35      	ldr	r3, [pc, #212]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d105      	bne.n	80038da <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038ce:	4b32      	ldr	r3, [pc, #200]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e0ba      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038de:	4b2e      	ldr	r3, [pc, #184]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a2d      	ldr	r2, [pc, #180]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 80038e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038ea:	f7fe ff95 	bl	8002818 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f2:	f7fe ff91 	bl	8002818 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e0a7      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003904:	4b24      	ldr	r3, [pc, #144]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f0      	bne.n	80038f2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003910:	4b21      	ldr	r3, [pc, #132]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	4b21      	ldr	r3, [pc, #132]	; (800399c <HAL_RCC_OscConfig+0x788>)
 8003916:	4013      	ands	r3, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003920:	3a01      	subs	r2, #1
 8003922:	0112      	lsls	r2, r2, #4
 8003924:	4311      	orrs	r1, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800392a:	0212      	lsls	r2, r2, #8
 800392c:	4311      	orrs	r1, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003932:	0852      	lsrs	r2, r2, #1
 8003934:	3a01      	subs	r2, #1
 8003936:	0552      	lsls	r2, r2, #21
 8003938:	4311      	orrs	r1, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800393e:	0852      	lsrs	r2, r2, #1
 8003940:	3a01      	subs	r2, #1
 8003942:	0652      	lsls	r2, r2, #25
 8003944:	4311      	orrs	r1, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800394a:	06d2      	lsls	r2, r2, #27
 800394c:	430a      	orrs	r2, r1
 800394e:	4912      	ldr	r1, [pc, #72]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 8003950:	4313      	orrs	r3, r2
 8003952:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003954:	4b10      	ldr	r3, [pc, #64]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a0f      	ldr	r2, [pc, #60]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 800395a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800395e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003960:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 8003966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800396a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800396c:	f7fe ff54 	bl	8002818 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003974:	f7fe ff50 	bl	8002818 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e066      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003986:	4b04      	ldr	r3, [pc, #16]	; (8003998 <HAL_RCC_OscConfig+0x784>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003992:	e05e      	b.n	8003a52 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e05d      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
 8003998:	40021000 	.word	0x40021000
 800399c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a0:	4b2e      	ldr	r3, [pc, #184]	; (8003a5c <HAL_RCC_OscConfig+0x848>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d152      	bne.n	8003a52 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039ac:	4b2b      	ldr	r3, [pc, #172]	; (8003a5c <HAL_RCC_OscConfig+0x848>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a2a      	ldr	r2, [pc, #168]	; (8003a5c <HAL_RCC_OscConfig+0x848>)
 80039b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039b8:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <HAL_RCC_OscConfig+0x848>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a27      	ldr	r2, [pc, #156]	; (8003a5c <HAL_RCC_OscConfig+0x848>)
 80039be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039c4:	f7fe ff28 	bl	8002818 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039cc:	f7fe ff24 	bl	8002818 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e03a      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039de:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <HAL_RCC_OscConfig+0x848>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x7b8>
 80039ea:	e032      	b.n	8003a52 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b0c      	cmp	r3, #12
 80039f0:	d02d      	beq.n	8003a4e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f2:	4b1a      	ldr	r3, [pc, #104]	; (8003a5c <HAL_RCC_OscConfig+0x848>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a19      	ldr	r2, [pc, #100]	; (8003a5c <HAL_RCC_OscConfig+0x848>)
 80039f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039fc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80039fe:	4b17      	ldr	r3, [pc, #92]	; (8003a5c <HAL_RCC_OscConfig+0x848>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d105      	bne.n	8003a16 <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a0a:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <HAL_RCC_OscConfig+0x848>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	4a13      	ldr	r2, [pc, #76]	; (8003a5c <HAL_RCC_OscConfig+0x848>)
 8003a10:	f023 0303 	bic.w	r3, r3, #3
 8003a14:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a16:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <HAL_RCC_OscConfig+0x848>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	4a10      	ldr	r2, [pc, #64]	; (8003a5c <HAL_RCC_OscConfig+0x848>)
 8003a1c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a24:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a26:	f7fe fef7 	bl	8002818 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2e:	f7fe fef3 	bl	8002818 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e009      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_RCC_OscConfig+0x848>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f0      	bne.n	8003a2e <HAL_RCC_OscConfig+0x81a>
 8003a4c:	e001      	b.n	8003a52 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3720      	adds	r7, #32
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40021000 	.word	0x40021000

08003a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e10f      	b.n	8003c98 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a78:	4b89      	ldr	r3, [pc, #548]	; (8003ca0 <HAL_RCC_ClockConfig+0x240>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d910      	bls.n	8003aa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b86      	ldr	r3, [pc, #536]	; (8003ca0 <HAL_RCC_ClockConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 020f 	bic.w	r2, r3, #15
 8003a8e:	4984      	ldr	r1, [pc, #528]	; (8003ca0 <HAL_RCC_ClockConfig+0x240>)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b82      	ldr	r3, [pc, #520]	; (8003ca0 <HAL_RCC_ClockConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0f7      	b.n	8003c98 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8089 	beq.w	8003bc8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d133      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003abe:	4b79      	ldr	r3, [pc, #484]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e0e4      	b.n	8003c98 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003ace:	f000 fa11 	bl	8003ef4 <RCC_GetSysClockFreqFromPLLSource>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4a74      	ldr	r2, [pc, #464]	; (8003ca8 <HAL_RCC_ClockConfig+0x248>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d955      	bls.n	8003b86 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ada:	4b72      	ldr	r3, [pc, #456]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ae6:	4b6f      	ldr	r3, [pc, #444]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aee:	4a6d      	ldr	r2, [pc, #436]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e044      	b.n	8003b86 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d03e      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x126>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d13a      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b10:	4b64      	ldr	r3, [pc, #400]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b18:	4a62      	ldr	r2, [pc, #392]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b1e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	e02f      	b.n	8003b86 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b2e:	4b5d      	ldr	r3, [pc, #372]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d115      	bne.n	8003b66 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e0ac      	b.n	8003c98 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d107      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b46:	4b57      	ldr	r3, [pc, #348]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e0a0      	b.n	8003c98 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b56:	4b53      	ldr	r3, [pc, #332]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e098      	b.n	8003c98 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003b66:	f000 f8a7 	bl	8003cb8 <HAL_RCC_GetSysClockFreq>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4a4e      	ldr	r2, [pc, #312]	; (8003ca8 <HAL_RCC_ClockConfig+0x248>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d909      	bls.n	8003b86 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b72:	4b4c      	ldr	r3, [pc, #304]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b7a:	4a4a      	ldr	r2, [pc, #296]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b86:	4b47      	ldr	r3, [pc, #284]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f023 0203 	bic.w	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4944      	ldr	r1, [pc, #272]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b98:	f7fe fe3e 	bl	8002818 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba0:	f7fe fe3a 	bl	8002818 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e070      	b.n	8003c98 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	4b3b      	ldr	r3, [pc, #236]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 020c 	and.w	r2, r3, #12
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d1eb      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d009      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd4:	4b33      	ldr	r3, [pc, #204]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4930      	ldr	r1, [pc, #192]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2b80      	cmp	r3, #128	; 0x80
 8003bec:	d105      	bne.n	8003bfa <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003bee:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	4a2c      	ldr	r2, [pc, #176]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003bf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bf8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bfa:	4b29      	ldr	r3, [pc, #164]	; (8003ca0 <HAL_RCC_ClockConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d210      	bcs.n	8003c2a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <HAL_RCC_ClockConfig+0x240>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f023 020f 	bic.w	r2, r3, #15
 8003c10:	4923      	ldr	r1, [pc, #140]	; (8003ca0 <HAL_RCC_ClockConfig+0x240>)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c18:	4b21      	ldr	r3, [pc, #132]	; (8003ca0 <HAL_RCC_ClockConfig+0x240>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d001      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e036      	b.n	8003c98 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c36:	4b1b      	ldr	r3, [pc, #108]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	4918      	ldr	r1, [pc, #96]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d009      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c54:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4910      	ldr	r1, [pc, #64]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c68:	f000 f826 	bl	8003cb8 <HAL_RCC_GetSysClockFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <HAL_RCC_ClockConfig+0x244>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	091b      	lsrs	r3, r3, #4
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	490c      	ldr	r1, [pc, #48]	; (8003cac <HAL_RCC_ClockConfig+0x24c>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
 8003c84:	4a0a      	ldr	r2, [pc, #40]	; (8003cb0 <HAL_RCC_ClockConfig+0x250>)
 8003c86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c88:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <HAL_RCC_ClockConfig+0x254>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fe fd73 	bl	8002778 <HAL_InitTick>
 8003c92:	4603      	mov	r3, r0
 8003c94:	73fb      	strb	r3, [r7, #15]

  return status;
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40022000 	.word	0x40022000
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	04c4b400 	.word	0x04c4b400
 8003cac:	08008ff0 	.word	0x08008ff0
 8003cb0:	20000078 	.word	0x20000078
 8003cb4:	2000007c 	.word	0x2000007c

08003cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	; 0x24
 8003cbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc6:	4b3e      	ldr	r3, [pc, #248]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd0:	4b3b      	ldr	r3, [pc, #236]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0x34>
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b0c      	cmp	r3, #12
 8003ce4:	d121      	bne.n	8003d2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d11e      	bne.n	8003d2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cec:	4b34      	ldr	r3, [pc, #208]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cf8:	4b31      	ldr	r3, [pc, #196]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	e005      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d08:	4b2d      	ldr	r3, [pc, #180]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	091b      	lsrs	r3, r3, #4
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d14:	4a2b      	ldr	r2, [pc, #172]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10d      	bne.n	8003d40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d28:	e00a      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d102      	bne.n	8003d36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	e004      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d101      	bne.n	8003d40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d3c:	4b23      	ldr	r3, [pc, #140]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x114>)
 8003d3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	2b0c      	cmp	r3, #12
 8003d44:	d134      	bne.n	8003db0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d46:	4b1e      	ldr	r3, [pc, #120]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d003      	beq.n	8003d5e <HAL_RCC_GetSysClockFreq+0xa6>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d003      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0xac>
 8003d5c:	e005      	b.n	8003d6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d5e:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d60:	617b      	str	r3, [r7, #20]
      break;
 8003d62:	e005      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d64:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x114>)
 8003d66:	617b      	str	r3, [r7, #20]
      break;
 8003d68:	e002      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	617b      	str	r3, [r7, #20]
      break;
 8003d6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d70:	4b13      	ldr	r3, [pc, #76]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	0a1b      	lsrs	r3, r3, #8
 8003d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	fb03 f202 	mul.w	r2, r3, r2
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d96:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	0e5b      	lsrs	r3, r3, #25
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	3301      	adds	r3, #1
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003db0:	69bb      	ldr	r3, [r7, #24]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3724      	adds	r7, #36	; 0x24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	08009008 	.word	0x08009008
 8003dc8:	00f42400 	.word	0x00f42400
 8003dcc:	007a1200 	.word	0x007a1200

08003dd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000078 	.word	0x20000078

08003de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dec:	f7ff fff0 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	0a1b      	lsrs	r3, r3, #8
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	4904      	ldr	r1, [pc, #16]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	08009000 	.word	0x08009000

08003e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e18:	f7ff ffda 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	0adb      	lsrs	r3, r3, #11
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4904      	ldr	r1, [pc, #16]	; (8003e3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e2a:	5ccb      	ldrb	r3, [r1, r3]
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	08009000 	.word	0x08009000

08003e40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e48:	2300      	movs	r3, #0
 8003e4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e4c:	4b27      	ldr	r3, [pc, #156]	; (8003eec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e58:	f7ff f908 	bl	800306c <HAL_PWREx_GetVoltageRange>
 8003e5c:	6178      	str	r0, [r7, #20]
 8003e5e:	e014      	b.n	8003e8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e60:	4b22      	ldr	r3, [pc, #136]	; (8003eec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e64:	4a21      	ldr	r2, [pc, #132]	; (8003eec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e6c:	4b1f      	ldr	r3, [pc, #124]	; (8003eec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e78:	f7ff f8f8 	bl	800306c <HAL_PWREx_GetVoltageRange>
 8003e7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e7e:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e90:	d10b      	bne.n	8003eaa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b80      	cmp	r3, #128	; 0x80
 8003e96:	d913      	bls.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2ba0      	cmp	r3, #160	; 0xa0
 8003e9c:	d902      	bls.n	8003ea4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	e00d      	b.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	e00a      	b.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b7f      	cmp	r3, #127	; 0x7f
 8003eae:	d902      	bls.n	8003eb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	e004      	b.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b70      	cmp	r3, #112	; 0x70
 8003eba:	d101      	bne.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f023 020f 	bic.w	r2, r3, #15
 8003ec8:	4909      	ldr	r1, [pc, #36]	; (8003ef0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ed0:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d001      	beq.n	8003ee2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	40022000 	.word	0x40022000

08003ef4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003efe:	4b2d      	ldr	r3, [pc, #180]	; (8003fb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d118      	bne.n	8003f3c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f0a:	4b2a      	ldr	r3, [pc, #168]	; (8003fb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d107      	bne.n	8003f26 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f16:	4b27      	ldr	r3, [pc, #156]	; (8003fb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1c:	0a1b      	lsrs	r3, r3, #8
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e005      	b.n	8003f32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f26:	4b23      	ldr	r3, [pc, #140]	; (8003fb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f32:	4a21      	ldr	r2, [pc, #132]	; (8003fb8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f3c:	4b1d      	ldr	r3, [pc, #116]	; (8003fb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d003      	beq.n	8003f54 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d003      	beq.n	8003f5a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8003f52:	e005      	b.n	8003f60 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003f54:	4b19      	ldr	r3, [pc, #100]	; (8003fbc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003f56:	613b      	str	r3, [r7, #16]
    break;
 8003f58:	e005      	b.n	8003f66 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003f5a:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003f5c:	613b      	str	r3, [r7, #16]
    break;
 8003f5e:	e002      	b.n	8003f66 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	613b      	str	r3, [r7, #16]
    break;
 8003f64:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f66:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	091b      	lsrs	r3, r3, #4
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	3301      	adds	r3, #1
 8003f72:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f74:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	0a1b      	lsrs	r3, r3, #8
 8003f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	fb03 f202 	mul.w	r2, r3, r2
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f8c:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	0e5b      	lsrs	r3, r3, #25
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	3301      	adds	r3, #1
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003fa6:	683b      	ldr	r3, [r7, #0]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	08009008 	.word	0x08009008
 8003fbc:	00f42400 	.word	0x00f42400
 8003fc0:	007a1200 	.word	0x007a1200

08003fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fcc:	2300      	movs	r3, #0
 8003fce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d040      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe4:	2b80      	cmp	r3, #128	; 0x80
 8003fe6:	d02a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003fe8:	2b80      	cmp	r3, #128	; 0x80
 8003fea:	d825      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003fec:	2b60      	cmp	r3, #96	; 0x60
 8003fee:	d026      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ff0:	2b60      	cmp	r3, #96	; 0x60
 8003ff2:	d821      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ff4:	2b40      	cmp	r3, #64	; 0x40
 8003ff6:	d006      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003ff8:	2b40      	cmp	r3, #64	; 0x40
 8003ffa:	d81d      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d009      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004000:	2b20      	cmp	r3, #32
 8004002:	d010      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004004:	e018      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004006:	4b89      	ldr	r3, [pc, #548]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	4a88      	ldr	r2, [pc, #544]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800400c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004010:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004012:	e015      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	2100      	movs	r1, #0
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fb02 	bl	8004624 <RCCEx_PLLSAI1_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004024:	e00c      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3320      	adds	r3, #32
 800402a:	2100      	movs	r1, #0
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fbed 	bl	800480c <RCCEx_PLLSAI2_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004036:	e003      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	74fb      	strb	r3, [r7, #19]
      break;
 800403c:	e000      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800403e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10b      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004046:	4b79      	ldr	r3, [pc, #484]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004048:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800404c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004054:	4975      	ldr	r1, [pc, #468]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800405c:	e001      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405e:	7cfb      	ldrb	r3, [r7, #19]
 8004060:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d047      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004076:	d030      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407c:	d82a      	bhi.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800407e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004082:	d02a      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004084:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004088:	d824      	bhi.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800408a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800408e:	d008      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004094:	d81e      	bhi.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800409a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409e:	d010      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80040a0:	e018      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040a2:	4b62      	ldr	r3, [pc, #392]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	4a61      	ldr	r2, [pc, #388]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ac:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040ae:	e015      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3304      	adds	r3, #4
 80040b4:	2100      	movs	r1, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fab4 	bl	8004624 <RCCEx_PLLSAI1_Config>
 80040bc:	4603      	mov	r3, r0
 80040be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040c0:	e00c      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3320      	adds	r3, #32
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fb9f 	bl	800480c <RCCEx_PLLSAI2_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040d2:	e003      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	74fb      	strb	r3, [r7, #19]
      break;
 80040d8:	e000      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80040da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040dc:	7cfb      	ldrb	r3, [r7, #19]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10b      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040e2:	4b52      	ldr	r3, [pc, #328]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	494e      	ldr	r1, [pc, #312]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80040f8:	e001      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fa:	7cfb      	ldrb	r3, [r7, #19]
 80040fc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 809f 	beq.w	800424a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800410c:	2300      	movs	r3, #0
 800410e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004110:	4b46      	ldr	r3, [pc, #280]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004120:	2300      	movs	r3, #0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00d      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004126:	4b41      	ldr	r3, [pc, #260]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412a:	4a40      	ldr	r2, [pc, #256]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800412c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004130:	6593      	str	r3, [r2, #88]	; 0x58
 8004132:	4b3e      	ldr	r3, [pc, #248]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800413e:	2301      	movs	r3, #1
 8004140:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004142:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a3a      	ldr	r2, [pc, #232]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800414e:	f7fe fb63 	bl	8002818 <HAL_GetTick>
 8004152:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004154:	e009      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004156:	f7fe fb5f 	bl	8002818 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d902      	bls.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	74fb      	strb	r3, [r7, #19]
        break;
 8004168:	e005      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800416a:	4b31      	ldr	r3, [pc, #196]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0ef      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004176:	7cfb      	ldrb	r3, [r7, #19]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d15b      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800417c:	4b2b      	ldr	r3, [pc, #172]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004186:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01f      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	429a      	cmp	r2, r3
 8004198:	d019      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800419a:	4b24      	ldr	r3, [pc, #144]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800419c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041a6:	4b21      	ldr	r3, [pc, #132]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	4a1f      	ldr	r2, [pc, #124]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041b6:	4b1d      	ldr	r3, [pc, #116]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	4a1b      	ldr	r2, [pc, #108]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041c6:	4a19      	ldr	r2, [pc, #100]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d016      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fe fb1e 	bl	8002818 <HAL_GetTick>
 80041dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041de:	e00b      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e0:	f7fe fb1a 	bl	8002818 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d902      	bls.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	74fb      	strb	r3, [r7, #19]
            break;
 80041f6:	e006      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041f8:	4b0c      	ldr	r3, [pc, #48]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0ec      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004206:	7cfb      	ldrb	r3, [r7, #19]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10c      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800420c:	4b07      	ldr	r3, [pc, #28]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421c:	4903      	ldr	r1, [pc, #12]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004224:	e008      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004226:	7cfb      	ldrb	r3, [r7, #19]
 8004228:	74bb      	strb	r3, [r7, #18]
 800422a:	e005      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800422c:	40021000 	.word	0x40021000
 8004230:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	7cfb      	ldrb	r3, [r7, #19]
 8004236:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004238:	7c7b      	ldrb	r3, [r7, #17]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d105      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800423e:	4ba0      	ldr	r3, [pc, #640]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	4a9f      	ldr	r2, [pc, #636]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004248:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004256:	4b9a      	ldr	r3, [pc, #616]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425c:	f023 0203 	bic.w	r2, r3, #3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004264:	4996      	ldr	r1, [pc, #600]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004278:	4b91      	ldr	r3, [pc, #580]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427e:	f023 020c 	bic.w	r2, r3, #12
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	498e      	ldr	r1, [pc, #568]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800429a:	4b89      	ldr	r3, [pc, #548]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a8:	4985      	ldr	r1, [pc, #532]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00a      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042bc:	4b80      	ldr	r3, [pc, #512]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ca:	497d      	ldr	r1, [pc, #500]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042de:	4b78      	ldr	r3, [pc, #480]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ec:	4974      	ldr	r1, [pc, #464]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004300:	4b6f      	ldr	r3, [pc, #444]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430e:	496c      	ldr	r1, [pc, #432]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004322:	4b67      	ldr	r3, [pc, #412]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004328:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004330:	4963      	ldr	r1, [pc, #396]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004344:	4b5e      	ldr	r3, [pc, #376]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004352:	495b      	ldr	r1, [pc, #364]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004366:	4b56      	ldr	r3, [pc, #344]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004374:	4952      	ldr	r1, [pc, #328]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004388:	4b4d      	ldr	r3, [pc, #308]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	494a      	ldr	r1, [pc, #296]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043aa:	4b45      	ldr	r3, [pc, #276]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b8:	4941      	ldr	r1, [pc, #260]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043cc:	4b3c      	ldr	r3, [pc, #240]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043d2:	f023 0203 	bic.w	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043da:	4939      	ldr	r1, [pc, #228]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d028      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043ee:	4b34      	ldr	r3, [pc, #208]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fc:	4930      	ldr	r1, [pc, #192]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004408:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800440c:	d106      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800440e:	4b2c      	ldr	r3, [pc, #176]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	4a2b      	ldr	r2, [pc, #172]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004418:	60d3      	str	r3, [r2, #12]
 800441a:	e011      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004420:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004424:	d10c      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3304      	adds	r3, #4
 800442a:	2101      	movs	r1, #1
 800442c:	4618      	mov	r0, r3
 800442e:	f000 f8f9 	bl	8004624 <RCCEx_PLLSAI1_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004436:	7cfb      	ldrb	r3, [r7, #19]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800443c:	7cfb      	ldrb	r3, [r7, #19]
 800443e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d04d      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004454:	d108      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004456:	4b1a      	ldr	r3, [pc, #104]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004458:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800445c:	4a18      	ldr	r2, [pc, #96]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800445e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004462:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004466:	e012      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004468:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800446a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800446e:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004474:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004478:	4b11      	ldr	r3, [pc, #68]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004486:	490e      	ldr	r1, [pc, #56]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004496:	d106      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004498:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4a08      	ldr	r2, [pc, #32]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800449e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044a2:	60d3      	str	r3, [r2, #12]
 80044a4:	e020      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044ae:	d109      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044b0:	4b03      	ldr	r3, [pc, #12]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	4a02      	ldr	r2, [pc, #8]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ba:	60d3      	str	r3, [r2, #12]
 80044bc:	e014      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80044be:	bf00      	nop
 80044c0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044cc:	d10c      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3304      	adds	r3, #4
 80044d2:	2101      	movs	r1, #1
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 f8a5 	bl	8004624 <RCCEx_PLLSAI1_Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044de:	7cfb      	ldrb	r3, [r7, #19]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80044e4:	7cfb      	ldrb	r3, [r7, #19]
 80044e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d028      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044f4:	4b4a      	ldr	r3, [pc, #296]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004502:	4947      	ldr	r1, [pc, #284]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800450e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004512:	d106      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004514:	4b42      	ldr	r3, [pc, #264]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4a41      	ldr	r2, [pc, #260]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800451a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800451e:	60d3      	str	r3, [r2, #12]
 8004520:	e011      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004526:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800452a:	d10c      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3304      	adds	r3, #4
 8004530:	2101      	movs	r1, #1
 8004532:	4618      	mov	r0, r3
 8004534:	f000 f876 	bl	8004624 <RCCEx_PLLSAI1_Config>
 8004538:	4603      	mov	r3, r0
 800453a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800453c:	7cfb      	ldrb	r3, [r7, #19]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004542:	7cfb      	ldrb	r3, [r7, #19]
 8004544:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d01e      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004552:	4b33      	ldr	r3, [pc, #204]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004558:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004562:	492f      	ldr	r1, [pc, #188]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004570:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004574:	d10c      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3304      	adds	r3, #4
 800457a:	2102      	movs	r1, #2
 800457c:	4618      	mov	r0, r3
 800457e:	f000 f851 	bl	8004624 <RCCEx_PLLSAI1_Config>
 8004582:	4603      	mov	r3, r0
 8004584:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004586:	7cfb      	ldrb	r3, [r7, #19]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800458c:	7cfb      	ldrb	r3, [r7, #19]
 800458e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00b      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800459c:	4b20      	ldr	r3, [pc, #128]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800459e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045a2:	f023 0204 	bic.w	r2, r3, #4
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ac:	491c      	ldr	r1, [pc, #112]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00b      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80045c0:	4b17      	ldr	r3, [pc, #92]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045c6:	f023 0218 	bic.w	r2, r3, #24
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d0:	4913      	ldr	r1, [pc, #76]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d017      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80045e4:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f4:	490a      	ldr	r1, [pc, #40]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004606:	d105      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4a04      	ldr	r2, [pc, #16]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800460e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004612:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004614:	7cbb      	ldrb	r3, [r7, #18]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40021000 	.word	0x40021000

08004624 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004632:	4b72      	ldr	r3, [pc, #456]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00e      	beq.n	800465c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800463e:	4b6f      	ldr	r3, [pc, #444]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0203 	and.w	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d103      	bne.n	8004656 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
       ||
 8004652:	2b00      	cmp	r3, #0
 8004654:	d142      	bne.n	80046dc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
 800465a:	e03f      	b.n	80046dc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b03      	cmp	r3, #3
 8004662:	d018      	beq.n	8004696 <RCCEx_PLLSAI1_Config+0x72>
 8004664:	2b03      	cmp	r3, #3
 8004666:	d825      	bhi.n	80046b4 <RCCEx_PLLSAI1_Config+0x90>
 8004668:	2b01      	cmp	r3, #1
 800466a:	d002      	beq.n	8004672 <RCCEx_PLLSAI1_Config+0x4e>
 800466c:	2b02      	cmp	r3, #2
 800466e:	d009      	beq.n	8004684 <RCCEx_PLLSAI1_Config+0x60>
 8004670:	e020      	b.n	80046b4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004672:	4b62      	ldr	r3, [pc, #392]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d11d      	bne.n	80046ba <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004682:	e01a      	b.n	80046ba <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004684:	4b5d      	ldr	r3, [pc, #372]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800468c:	2b00      	cmp	r3, #0
 800468e:	d116      	bne.n	80046be <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004694:	e013      	b.n	80046be <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004696:	4b59      	ldr	r3, [pc, #356]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10f      	bne.n	80046c2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046a2:	4b56      	ldr	r3, [pc, #344]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046b2:	e006      	b.n	80046c2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
      break;
 80046b8:	e004      	b.n	80046c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80046ba:	bf00      	nop
 80046bc:	e002      	b.n	80046c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80046be:	bf00      	nop
 80046c0:	e000      	b.n	80046c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80046c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d108      	bne.n	80046dc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80046ca:	4b4c      	ldr	r3, [pc, #304]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f023 0203 	bic.w	r2, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4949      	ldr	r1, [pc, #292]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f040 8086 	bne.w	80047f0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046e4:	4b45      	ldr	r3, [pc, #276]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a44      	ldr	r2, [pc, #272]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f0:	f7fe f892 	bl	8002818 <HAL_GetTick>
 80046f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046f6:	e009      	b.n	800470c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046f8:	f7fe f88e 	bl	8002818 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d902      	bls.n	800470c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	73fb      	strb	r3, [r7, #15]
        break;
 800470a:	e005      	b.n	8004718 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800470c:	4b3b      	ldr	r3, [pc, #236]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1ef      	bne.n	80046f8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d168      	bne.n	80047f0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d113      	bne.n	800474c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004724:	4b35      	ldr	r3, [pc, #212]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	4b35      	ldr	r3, [pc, #212]	; (8004800 <RCCEx_PLLSAI1_Config+0x1dc>)
 800472a:	4013      	ands	r3, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6892      	ldr	r2, [r2, #8]
 8004730:	0211      	lsls	r1, r2, #8
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	68d2      	ldr	r2, [r2, #12]
 8004736:	06d2      	lsls	r2, r2, #27
 8004738:	4311      	orrs	r1, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6852      	ldr	r2, [r2, #4]
 800473e:	3a01      	subs	r2, #1
 8004740:	0112      	lsls	r2, r2, #4
 8004742:	430a      	orrs	r2, r1
 8004744:	492d      	ldr	r1, [pc, #180]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004746:	4313      	orrs	r3, r2
 8004748:	610b      	str	r3, [r1, #16]
 800474a:	e02d      	b.n	80047a8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d115      	bne.n	800477e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004752:	4b2a      	ldr	r3, [pc, #168]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	4b2b      	ldr	r3, [pc, #172]	; (8004804 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004758:	4013      	ands	r3, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6892      	ldr	r2, [r2, #8]
 800475e:	0211      	lsls	r1, r2, #8
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6912      	ldr	r2, [r2, #16]
 8004764:	0852      	lsrs	r2, r2, #1
 8004766:	3a01      	subs	r2, #1
 8004768:	0552      	lsls	r2, r2, #21
 800476a:	4311      	orrs	r1, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6852      	ldr	r2, [r2, #4]
 8004770:	3a01      	subs	r2, #1
 8004772:	0112      	lsls	r2, r2, #4
 8004774:	430a      	orrs	r2, r1
 8004776:	4921      	ldr	r1, [pc, #132]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004778:	4313      	orrs	r3, r2
 800477a:	610b      	str	r3, [r1, #16]
 800477c:	e014      	b.n	80047a8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800477e:	4b1f      	ldr	r3, [pc, #124]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	4b21      	ldr	r3, [pc, #132]	; (8004808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004784:	4013      	ands	r3, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6892      	ldr	r2, [r2, #8]
 800478a:	0211      	lsls	r1, r2, #8
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6952      	ldr	r2, [r2, #20]
 8004790:	0852      	lsrs	r2, r2, #1
 8004792:	3a01      	subs	r2, #1
 8004794:	0652      	lsls	r2, r2, #25
 8004796:	4311      	orrs	r1, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6852      	ldr	r2, [r2, #4]
 800479c:	3a01      	subs	r2, #1
 800479e:	0112      	lsls	r2, r2, #4
 80047a0:	430a      	orrs	r2, r1
 80047a2:	4916      	ldr	r1, [pc, #88]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047a8:	4b14      	ldr	r3, [pc, #80]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a13      	ldr	r2, [pc, #76]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b4:	f7fe f830 	bl	8002818 <HAL_GetTick>
 80047b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047ba:	e009      	b.n	80047d0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047bc:	f7fe f82c 	bl	8002818 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d902      	bls.n	80047d0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	73fb      	strb	r3, [r7, #15]
          break;
 80047ce:	e005      	b.n	80047dc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047d0:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0ef      	beq.n	80047bc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047e2:	4b06      	ldr	r3, [pc, #24]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047e4:	691a      	ldr	r2, [r3, #16]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	4904      	ldr	r1, [pc, #16]	; (80047fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40021000 	.word	0x40021000
 8004800:	07ff800f 	.word	0x07ff800f
 8004804:	ff9f800f 	.word	0xff9f800f
 8004808:	f9ff800f 	.word	0xf9ff800f

0800480c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800481a:	4b72      	ldr	r3, [pc, #456]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00e      	beq.n	8004844 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004826:	4b6f      	ldr	r3, [pc, #444]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f003 0203 	and.w	r2, r3, #3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d103      	bne.n	800483e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
       ||
 800483a:	2b00      	cmp	r3, #0
 800483c:	d142      	bne.n	80048c4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	73fb      	strb	r3, [r7, #15]
 8004842:	e03f      	b.n	80048c4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b03      	cmp	r3, #3
 800484a:	d018      	beq.n	800487e <RCCEx_PLLSAI2_Config+0x72>
 800484c:	2b03      	cmp	r3, #3
 800484e:	d825      	bhi.n	800489c <RCCEx_PLLSAI2_Config+0x90>
 8004850:	2b01      	cmp	r3, #1
 8004852:	d002      	beq.n	800485a <RCCEx_PLLSAI2_Config+0x4e>
 8004854:	2b02      	cmp	r3, #2
 8004856:	d009      	beq.n	800486c <RCCEx_PLLSAI2_Config+0x60>
 8004858:	e020      	b.n	800489c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800485a:	4b62      	ldr	r3, [pc, #392]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d11d      	bne.n	80048a2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800486a:	e01a      	b.n	80048a2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800486c:	4b5d      	ldr	r3, [pc, #372]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004874:	2b00      	cmp	r3, #0
 8004876:	d116      	bne.n	80048a6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800487c:	e013      	b.n	80048a6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800487e:	4b59      	ldr	r3, [pc, #356]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10f      	bne.n	80048aa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800488a:	4b56      	ldr	r3, [pc, #344]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d109      	bne.n	80048aa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800489a:	e006      	b.n	80048aa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      break;
 80048a0:	e004      	b.n	80048ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80048a2:	bf00      	nop
 80048a4:	e002      	b.n	80048ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80048a6:	bf00      	nop
 80048a8:	e000      	b.n	80048ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80048aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d108      	bne.n	80048c4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80048b2:	4b4c      	ldr	r3, [pc, #304]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f023 0203 	bic.w	r2, r3, #3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4949      	ldr	r1, [pc, #292]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 8086 	bne.w	80049d8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048cc:	4b45      	ldr	r3, [pc, #276]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a44      	ldr	r2, [pc, #272]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d8:	f7fd ff9e 	bl	8002818 <HAL_GetTick>
 80048dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048de:	e009      	b.n	80048f4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048e0:	f7fd ff9a 	bl	8002818 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d902      	bls.n	80048f4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	73fb      	strb	r3, [r7, #15]
        break;
 80048f2:	e005      	b.n	8004900 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048f4:	4b3b      	ldr	r3, [pc, #236]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1ef      	bne.n	80048e0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d168      	bne.n	80049d8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d113      	bne.n	8004934 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800490c:	4b35      	ldr	r3, [pc, #212]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	4b35      	ldr	r3, [pc, #212]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004912:	4013      	ands	r3, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6892      	ldr	r2, [r2, #8]
 8004918:	0211      	lsls	r1, r2, #8
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	68d2      	ldr	r2, [r2, #12]
 800491e:	06d2      	lsls	r2, r2, #27
 8004920:	4311      	orrs	r1, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6852      	ldr	r2, [r2, #4]
 8004926:	3a01      	subs	r2, #1
 8004928:	0112      	lsls	r2, r2, #4
 800492a:	430a      	orrs	r2, r1
 800492c:	492d      	ldr	r1, [pc, #180]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800492e:	4313      	orrs	r3, r2
 8004930:	614b      	str	r3, [r1, #20]
 8004932:	e02d      	b.n	8004990 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d115      	bne.n	8004966 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800493a:	4b2a      	ldr	r3, [pc, #168]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	4b2b      	ldr	r3, [pc, #172]	; (80049ec <RCCEx_PLLSAI2_Config+0x1e0>)
 8004940:	4013      	ands	r3, r2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6892      	ldr	r2, [r2, #8]
 8004946:	0211      	lsls	r1, r2, #8
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6912      	ldr	r2, [r2, #16]
 800494c:	0852      	lsrs	r2, r2, #1
 800494e:	3a01      	subs	r2, #1
 8004950:	0552      	lsls	r2, r2, #21
 8004952:	4311      	orrs	r1, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6852      	ldr	r2, [r2, #4]
 8004958:	3a01      	subs	r2, #1
 800495a:	0112      	lsls	r2, r2, #4
 800495c:	430a      	orrs	r2, r1
 800495e:	4921      	ldr	r1, [pc, #132]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004960:	4313      	orrs	r3, r2
 8004962:	614b      	str	r3, [r1, #20]
 8004964:	e014      	b.n	8004990 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004966:	4b1f      	ldr	r3, [pc, #124]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004968:	695a      	ldr	r2, [r3, #20]
 800496a:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800496c:	4013      	ands	r3, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6892      	ldr	r2, [r2, #8]
 8004972:	0211      	lsls	r1, r2, #8
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6952      	ldr	r2, [r2, #20]
 8004978:	0852      	lsrs	r2, r2, #1
 800497a:	3a01      	subs	r2, #1
 800497c:	0652      	lsls	r2, r2, #25
 800497e:	4311      	orrs	r1, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6852      	ldr	r2, [r2, #4]
 8004984:	3a01      	subs	r2, #1
 8004986:	0112      	lsls	r2, r2, #4
 8004988:	430a      	orrs	r2, r1
 800498a:	4916      	ldr	r1, [pc, #88]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800498c:	4313      	orrs	r3, r2
 800498e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004990:	4b14      	ldr	r3, [pc, #80]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a13      	ldr	r2, [pc, #76]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499c:	f7fd ff3c 	bl	8002818 <HAL_GetTick>
 80049a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049a2:	e009      	b.n	80049b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049a4:	f7fd ff38 	bl	8002818 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d902      	bls.n	80049b8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	73fb      	strb	r3, [r7, #15]
          break;
 80049b6:	e005      	b.n	80049c4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049b8:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0ef      	beq.n	80049a4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049ca:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049cc:	695a      	ldr	r2, [r3, #20]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	4904      	ldr	r1, [pc, #16]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000
 80049e8:	07ff800f 	.word	0x07ff800f
 80049ec:	ff9f800f 	.word	0xff9f800f
 80049f0:	f9ff800f 	.word	0xf9ff800f

080049f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e095      	b.n	8004b32 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d108      	bne.n	8004a20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a16:	d009      	beq.n	8004a2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	61da      	str	r2, [r3, #28]
 8004a1e:	e005      	b.n	8004a2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fd fc9e 	bl	8002388 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a6c:	d902      	bls.n	8004a74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	e002      	b.n	8004a7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a82:	d007      	beq.n	8004a94 <HAL_SPI_Init+0xa0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a8c:	d002      	beq.n	8004a94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad6:	ea42 0103 	orr.w	r1, r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	0c1b      	lsrs	r3, r3, #16
 8004af0:	f003 0204 	and.w	r2, r3, #4
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b10:	ea42 0103 	orr.w	r1, r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b088      	sub	sp, #32
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	4613      	mov	r3, r2
 8004b48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_SPI_Transmit+0x22>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e158      	b.n	8004e0e <HAL_SPI_Transmit+0x2d4>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b64:	f7fd fe58 	bl	8002818 <HAL_GetTick>
 8004b68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d002      	beq.n	8004b80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b7e:	e13d      	b.n	8004dfc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_SPI_Transmit+0x52>
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b90:	e134      	b.n	8004dfc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2203      	movs	r2, #3
 8004b96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	88fa      	ldrh	r2, [r7, #6]
 8004baa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bdc:	d10f      	bne.n	8004bfe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c08:	2b40      	cmp	r3, #64	; 0x40
 8004c0a:	d007      	beq.n	8004c1c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c24:	d94b      	bls.n	8004cbe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_SPI_Transmit+0xfa>
 8004c2e:	8afb      	ldrh	r3, [r7, #22]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d13e      	bne.n	8004cb2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	881a      	ldrh	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	1c9a      	adds	r2, r3, #2
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c58:	e02b      	b.n	8004cb2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d112      	bne.n	8004c8e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	881a      	ldrh	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	1c9a      	adds	r2, r3, #2
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c8c:	e011      	b.n	8004cb2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c8e:	f7fd fdc3 	bl	8002818 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d803      	bhi.n	8004ca6 <HAL_SPI_Transmit+0x16c>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca4:	d102      	bne.n	8004cac <HAL_SPI_Transmit+0x172>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d102      	bne.n	8004cb2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cb0:	e0a4      	b.n	8004dfc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1ce      	bne.n	8004c5a <HAL_SPI_Transmit+0x120>
 8004cbc:	e07c      	b.n	8004db8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_SPI_Transmit+0x192>
 8004cc6:	8afb      	ldrh	r3, [r7, #22]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d170      	bne.n	8004dae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d912      	bls.n	8004cfc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	881a      	ldrh	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	1c9a      	adds	r2, r3, #2
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b02      	subs	r3, #2
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cfa:	e058      	b.n	8004dae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	7812      	ldrb	r2, [r2, #0]
 8004d08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d22:	e044      	b.n	8004dae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d12b      	bne.n	8004d8a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d912      	bls.n	8004d62 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	881a      	ldrh	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	1c9a      	adds	r2, r3, #2
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b02      	subs	r3, #2
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d60:	e025      	b.n	8004dae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	7812      	ldrb	r2, [r2, #0]
 8004d6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d88:	e011      	b.n	8004dae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d8a:	f7fd fd45 	bl	8002818 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d803      	bhi.n	8004da2 <HAL_SPI_Transmit+0x268>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da0:	d102      	bne.n	8004da8 <HAL_SPI_Transmit+0x26e>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dac:	e026      	b.n	8004dfc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1b5      	bne.n	8004d24 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	6839      	ldr	r1, [r7, #0]
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 f949 	bl	8005054 <SPI_EndRxTxTransaction>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10a      	bne.n	8004dec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e000      	b.n	8004dfc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004dfa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3720      	adds	r7, #32
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	4613      	mov	r3, r2
 8004e26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e28:	f7fd fcf6 	bl	8002818 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	1a9b      	subs	r3, r3, r2
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	4413      	add	r3, r2
 8004e36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e38:	f7fd fcee 	bl	8002818 <HAL_GetTick>
 8004e3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e3e:	4b39      	ldr	r3, [pc, #228]	; (8004f24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	015b      	lsls	r3, r3, #5
 8004e44:	0d1b      	lsrs	r3, r3, #20
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	fb02 f303 	mul.w	r3, r2, r3
 8004e4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e4e:	e054      	b.n	8004efa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e56:	d050      	beq.n	8004efa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e58:	f7fd fcde 	bl	8002818 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d902      	bls.n	8004e6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d13d      	bne.n	8004eea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e86:	d111      	bne.n	8004eac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e90:	d004      	beq.n	8004e9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9a:	d107      	bne.n	8004eac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eaa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb4:	d10f      	bne.n	8004ed6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ed4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e017      	b.n	8004f1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4013      	ands	r3, r2
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	bf0c      	ite	eq
 8004f0a:	2301      	moveq	r3, #1
 8004f0c:	2300      	movne	r3, #0
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d19b      	bne.n	8004e50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3720      	adds	r7, #32
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000078 	.word	0x20000078

08004f28 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08a      	sub	sp, #40	; 0x28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f3a:	f7fd fc6d 	bl	8002818 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	4413      	add	r3, r2
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004f4a:	f7fd fc65 	bl	8002818 <HAL_GetTick>
 8004f4e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	330c      	adds	r3, #12
 8004f56:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f58:	4b3d      	ldr	r3, [pc, #244]	; (8005050 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	00da      	lsls	r2, r3, #3
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	0d1b      	lsrs	r3, r3, #20
 8004f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f70:	e060      	b.n	8005034 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f78:	d107      	bne.n	8004f8a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d104      	bne.n	8004f8a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d050      	beq.n	8005034 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f92:	f7fd fc41 	bl	8002818 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d902      	bls.n	8004fa8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d13d      	bne.n	8005024 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fb6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc0:	d111      	bne.n	8004fe6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fca:	d004      	beq.n	8004fd6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd4:	d107      	bne.n	8004fe6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fee:	d10f      	bne.n	8005010 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800500e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e010      	b.n	8005046 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	3b01      	subs	r3, #1
 8005032:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	429a      	cmp	r2, r3
 8005042:	d196      	bne.n	8004f72 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3728      	adds	r7, #40	; 0x28
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20000078 	.word	0x20000078

08005054 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2200      	movs	r2, #0
 8005068:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7ff ff5b 	bl	8004f28 <SPI_WaitFifoStateUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d007      	beq.n	8005088 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800507c:	f043 0220 	orr.w	r2, r3, #32
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e027      	b.n	80050d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2200      	movs	r2, #0
 8005090:	2180      	movs	r1, #128	; 0x80
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f7ff fec0 	bl	8004e18 <SPI_WaitFlagStateUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d007      	beq.n	80050ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a2:	f043 0220 	orr.w	r2, r3, #32
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e014      	b.n	80050d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f7ff ff34 	bl	8004f28 <SPI_WaitFifoStateUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ca:	f043 0220 	orr.w	r2, r3, #32
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e000      	b.n	80050d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e049      	b.n	8005186 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fd f980 	bl	800240c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f000 f968 	bl	80053f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d001      	beq.n	80051a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e047      	b.n	8005238 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a23      	ldr	r2, [pc, #140]	; (8005244 <HAL_TIM_Base_Start+0xb4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d01d      	beq.n	80051f6 <HAL_TIM_Base_Start+0x66>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c2:	d018      	beq.n	80051f6 <HAL_TIM_Base_Start+0x66>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1f      	ldr	r2, [pc, #124]	; (8005248 <HAL_TIM_Base_Start+0xb8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d013      	beq.n	80051f6 <HAL_TIM_Base_Start+0x66>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a1e      	ldr	r2, [pc, #120]	; (800524c <HAL_TIM_Base_Start+0xbc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00e      	beq.n	80051f6 <HAL_TIM_Base_Start+0x66>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1c      	ldr	r2, [pc, #112]	; (8005250 <HAL_TIM_Base_Start+0xc0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d009      	beq.n	80051f6 <HAL_TIM_Base_Start+0x66>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a1b      	ldr	r2, [pc, #108]	; (8005254 <HAL_TIM_Base_Start+0xc4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d004      	beq.n	80051f6 <HAL_TIM_Base_Start+0x66>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a19      	ldr	r2, [pc, #100]	; (8005258 <HAL_TIM_Base_Start+0xc8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d115      	bne.n	8005222 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	4b17      	ldr	r3, [pc, #92]	; (800525c <HAL_TIM_Base_Start+0xcc>)
 80051fe:	4013      	ands	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b06      	cmp	r3, #6
 8005206:	d015      	beq.n	8005234 <HAL_TIM_Base_Start+0xa4>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520e:	d011      	beq.n	8005234 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005220:	e008      	b.n	8005234 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0201 	orr.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e000      	b.n	8005236 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005234:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	40012c00 	.word	0x40012c00
 8005248:	40000400 	.word	0x40000400
 800524c:	40000800 	.word	0x40000800
 8005250:	40000c00 	.word	0x40000c00
 8005254:	40013400 	.word	0x40013400
 8005258:	40014000 	.word	0x40014000
 800525c:	00010007 	.word	0x00010007

08005260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_TIM_ConfigClockSource+0x1c>
 8005278:	2302      	movs	r3, #2
 800527a:	e0b6      	b.n	80053ea <HAL_TIM_ConfigClockSource+0x18a>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800529e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b8:	d03e      	beq.n	8005338 <HAL_TIM_ConfigClockSource+0xd8>
 80052ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052be:	f200 8087 	bhi.w	80053d0 <HAL_TIM_ConfigClockSource+0x170>
 80052c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c6:	f000 8086 	beq.w	80053d6 <HAL_TIM_ConfigClockSource+0x176>
 80052ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ce:	d87f      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x170>
 80052d0:	2b70      	cmp	r3, #112	; 0x70
 80052d2:	d01a      	beq.n	800530a <HAL_TIM_ConfigClockSource+0xaa>
 80052d4:	2b70      	cmp	r3, #112	; 0x70
 80052d6:	d87b      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x170>
 80052d8:	2b60      	cmp	r3, #96	; 0x60
 80052da:	d050      	beq.n	800537e <HAL_TIM_ConfigClockSource+0x11e>
 80052dc:	2b60      	cmp	r3, #96	; 0x60
 80052de:	d877      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x170>
 80052e0:	2b50      	cmp	r3, #80	; 0x50
 80052e2:	d03c      	beq.n	800535e <HAL_TIM_ConfigClockSource+0xfe>
 80052e4:	2b50      	cmp	r3, #80	; 0x50
 80052e6:	d873      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x170>
 80052e8:	2b40      	cmp	r3, #64	; 0x40
 80052ea:	d058      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x13e>
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	d86f      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x170>
 80052f0:	2b30      	cmp	r3, #48	; 0x30
 80052f2:	d064      	beq.n	80053be <HAL_TIM_ConfigClockSource+0x15e>
 80052f4:	2b30      	cmp	r3, #48	; 0x30
 80052f6:	d86b      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x170>
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	d060      	beq.n	80053be <HAL_TIM_ConfigClockSource+0x15e>
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d867      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x170>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d05c      	beq.n	80053be <HAL_TIM_ConfigClockSource+0x15e>
 8005304:	2b10      	cmp	r3, #16
 8005306:	d05a      	beq.n	80053be <HAL_TIM_ConfigClockSource+0x15e>
 8005308:	e062      	b.n	80053d0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6818      	ldr	r0, [r3, #0]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	6899      	ldr	r1, [r3, #8]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f000 f97f 	bl	800561c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800532c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	609a      	str	r2, [r3, #8]
      break;
 8005336:	e04f      	b.n	80053d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	6899      	ldr	r1, [r3, #8]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f000 f968 	bl	800561c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800535a:	609a      	str	r2, [r3, #8]
      break;
 800535c:	e03c      	b.n	80053d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	6859      	ldr	r1, [r3, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	461a      	mov	r2, r3
 800536c:	f000 f8dc 	bl	8005528 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2150      	movs	r1, #80	; 0x50
 8005376:	4618      	mov	r0, r3
 8005378:	f000 f935 	bl	80055e6 <TIM_ITRx_SetConfig>
      break;
 800537c:	e02c      	b.n	80053d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	6859      	ldr	r1, [r3, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	461a      	mov	r2, r3
 800538c:	f000 f8fb 	bl	8005586 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2160      	movs	r1, #96	; 0x60
 8005396:	4618      	mov	r0, r3
 8005398:	f000 f925 	bl	80055e6 <TIM_ITRx_SetConfig>
      break;
 800539c:	e01c      	b.n	80053d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6818      	ldr	r0, [r3, #0]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	6859      	ldr	r1, [r3, #4]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	461a      	mov	r2, r3
 80053ac:	f000 f8bc 	bl	8005528 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2140      	movs	r1, #64	; 0x40
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 f915 	bl	80055e6 <TIM_ITRx_SetConfig>
      break;
 80053bc:	e00c      	b.n	80053d8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4619      	mov	r1, r3
 80053c8:	4610      	mov	r0, r2
 80053ca:	f000 f90c 	bl	80055e6 <TIM_ITRx_SetConfig>
      break;
 80053ce:	e003      	b.n	80053d8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
      break;
 80053d4:	e000      	b.n	80053d8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80053d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a40      	ldr	r2, [pc, #256]	; (8005508 <TIM_Base_SetConfig+0x114>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d013      	beq.n	8005434 <TIM_Base_SetConfig+0x40>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005412:	d00f      	beq.n	8005434 <TIM_Base_SetConfig+0x40>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a3d      	ldr	r2, [pc, #244]	; (800550c <TIM_Base_SetConfig+0x118>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00b      	beq.n	8005434 <TIM_Base_SetConfig+0x40>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a3c      	ldr	r2, [pc, #240]	; (8005510 <TIM_Base_SetConfig+0x11c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d007      	beq.n	8005434 <TIM_Base_SetConfig+0x40>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a3b      	ldr	r2, [pc, #236]	; (8005514 <TIM_Base_SetConfig+0x120>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <TIM_Base_SetConfig+0x40>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a3a      	ldr	r2, [pc, #232]	; (8005518 <TIM_Base_SetConfig+0x124>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d108      	bne.n	8005446 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a2f      	ldr	r2, [pc, #188]	; (8005508 <TIM_Base_SetConfig+0x114>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d01f      	beq.n	800548e <TIM_Base_SetConfig+0x9a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005454:	d01b      	beq.n	800548e <TIM_Base_SetConfig+0x9a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a2c      	ldr	r2, [pc, #176]	; (800550c <TIM_Base_SetConfig+0x118>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d017      	beq.n	800548e <TIM_Base_SetConfig+0x9a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a2b      	ldr	r2, [pc, #172]	; (8005510 <TIM_Base_SetConfig+0x11c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d013      	beq.n	800548e <TIM_Base_SetConfig+0x9a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a2a      	ldr	r2, [pc, #168]	; (8005514 <TIM_Base_SetConfig+0x120>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00f      	beq.n	800548e <TIM_Base_SetConfig+0x9a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a29      	ldr	r2, [pc, #164]	; (8005518 <TIM_Base_SetConfig+0x124>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00b      	beq.n	800548e <TIM_Base_SetConfig+0x9a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a28      	ldr	r2, [pc, #160]	; (800551c <TIM_Base_SetConfig+0x128>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d007      	beq.n	800548e <TIM_Base_SetConfig+0x9a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a27      	ldr	r2, [pc, #156]	; (8005520 <TIM_Base_SetConfig+0x12c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d003      	beq.n	800548e <TIM_Base_SetConfig+0x9a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a26      	ldr	r2, [pc, #152]	; (8005524 <TIM_Base_SetConfig+0x130>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d108      	bne.n	80054a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a10      	ldr	r2, [pc, #64]	; (8005508 <TIM_Base_SetConfig+0x114>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00f      	beq.n	80054ec <TIM_Base_SetConfig+0xf8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a12      	ldr	r2, [pc, #72]	; (8005518 <TIM_Base_SetConfig+0x124>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00b      	beq.n	80054ec <TIM_Base_SetConfig+0xf8>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a11      	ldr	r2, [pc, #68]	; (800551c <TIM_Base_SetConfig+0x128>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d007      	beq.n	80054ec <TIM_Base_SetConfig+0xf8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a10      	ldr	r2, [pc, #64]	; (8005520 <TIM_Base_SetConfig+0x12c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d003      	beq.n	80054ec <TIM_Base_SetConfig+0xf8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a0f      	ldr	r2, [pc, #60]	; (8005524 <TIM_Base_SetConfig+0x130>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d103      	bne.n	80054f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	615a      	str	r2, [r3, #20]
}
 80054fa:	bf00      	nop
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40000400 	.word	0x40000400
 8005510:	40000800 	.word	0x40000800
 8005514:	40000c00 	.word	0x40000c00
 8005518:	40013400 	.word	0x40013400
 800551c:	40014000 	.word	0x40014000
 8005520:	40014400 	.word	0x40014400
 8005524:	40014800 	.word	0x40014800

08005528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f023 0201 	bic.w	r2, r3, #1
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f023 030a 	bic.w	r3, r3, #10
 8005564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005586:	b480      	push	{r7}
 8005588:	b087      	sub	sp, #28
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	f023 0210 	bic.w	r2, r3, #16
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	031b      	lsls	r3, r3, #12
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	621a      	str	r2, [r3, #32]
}
 80055da:	bf00      	nop
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b085      	sub	sp, #20
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	f043 0307 	orr.w	r3, r3, #7
 8005608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	609a      	str	r2, [r3, #8]
}
 8005610:	bf00      	nop
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	021a      	lsls	r2, r3, #8
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	431a      	orrs	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4313      	orrs	r3, r2
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	609a      	str	r2, [r3, #8]
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005670:	2302      	movs	r3, #2
 8005672:	e068      	b.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a2e      	ldr	r2, [pc, #184]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d004      	beq.n	80056a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a2d      	ldr	r2, [pc, #180]	; (8005758 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d108      	bne.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1e      	ldr	r2, [pc, #120]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d01d      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e6:	d018      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1b      	ldr	r2, [pc, #108]	; (800575c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d013      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a1a      	ldr	r2, [pc, #104]	; (8005760 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00e      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a18      	ldr	r2, [pc, #96]	; (8005764 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d009      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a13      	ldr	r2, [pc, #76]	; (8005758 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d004      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a14      	ldr	r2, [pc, #80]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d10c      	bne.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005720:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	4313      	orrs	r3, r2
 800572a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40012c00 	.word	0x40012c00
 8005758:	40013400 	.word	0x40013400
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40014000 	.word	0x40014000

0800576c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e042      	b.n	8005804 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005784:	2b00      	cmp	r3, #0
 8005786:	d106      	bne.n	8005796 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7fc fd97 	bl	80022c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2224      	movs	r2, #36	; 0x24
 800579a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0201 	bic.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f8c4 	bl	800593c <UART_SetConfig>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e022      	b.n	8005804 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fbb4 	bl	8005f34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fc3b 	bl	8006078 <UART_CheckIdleState>
 8005802:	4603      	mov	r3, r0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	; 0x28
 8005810:	af02      	add	r7, sp, #8
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	4613      	mov	r3, r2
 800581a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005822:	2b20      	cmp	r3, #32
 8005824:	f040 8084 	bne.w	8005930 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <HAL_UART_Transmit+0x28>
 800582e:	88fb      	ldrh	r3, [r7, #6]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e07c      	b.n	8005932 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800583e:	2b01      	cmp	r3, #1
 8005840:	d101      	bne.n	8005846 <HAL_UART_Transmit+0x3a>
 8005842:	2302      	movs	r3, #2
 8005844:	e075      	b.n	8005932 <HAL_UART_Transmit+0x126>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2221      	movs	r2, #33	; 0x21
 800585a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800585e:	f7fc ffdb 	bl	8002818 <HAL_GetTick>
 8005862:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	88fa      	ldrh	r2, [r7, #6]
 8005868:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	88fa      	ldrh	r2, [r7, #6]
 8005870:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587c:	d108      	bne.n	8005890 <HAL_UART_Transmit+0x84>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d104      	bne.n	8005890 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005886:	2300      	movs	r3, #0
 8005888:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	e003      	b.n	8005898 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005894:	2300      	movs	r3, #0
 8005896:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80058a0:	e02d      	b.n	80058fe <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2200      	movs	r2, #0
 80058aa:	2180      	movs	r1, #128	; 0x80
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 fc2e 	bl	800610e <UART_WaitOnFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e03a      	b.n	8005932 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10b      	bne.n	80058da <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	881a      	ldrh	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058ce:	b292      	uxth	r2, r2
 80058d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	3302      	adds	r3, #2
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	e008      	b.n	80058ec <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	781a      	ldrb	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	b292      	uxth	r2, r2
 80058e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	3301      	adds	r3, #1
 80058ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1cb      	bne.n	80058a2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2200      	movs	r2, #0
 8005912:	2140      	movs	r1, #64	; 0x40
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 fbfa 	bl	800610e <UART_WaitOnFlagUntilTimeout>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e006      	b.n	8005932 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	e000      	b.n	8005932 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005930:	2302      	movs	r3, #2
  }
}
 8005932:	4618      	mov	r0, r3
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800593c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005940:	b08c      	sub	sp, #48	; 0x30
 8005942:	af00      	add	r7, sp, #0
 8005944:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	431a      	orrs	r2, r3
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	431a      	orrs	r2, r3
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	4313      	orrs	r3, r2
 8005962:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4baa      	ldr	r3, [pc, #680]	; (8005c14 <UART_SetConfig+0x2d8>)
 800596c:	4013      	ands	r3, r2
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	6812      	ldr	r2, [r2, #0]
 8005972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005974:	430b      	orrs	r3, r1
 8005976:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a9f      	ldr	r2, [pc, #636]	; (8005c18 <UART_SetConfig+0x2dc>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d004      	beq.n	80059a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a4:	4313      	orrs	r3, r2
 80059a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80059b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	6812      	ldr	r2, [r2, #0]
 80059ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059bc:	430b      	orrs	r3, r1
 80059be:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c6:	f023 010f 	bic.w	r1, r3, #15
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a90      	ldr	r2, [pc, #576]	; (8005c1c <UART_SetConfig+0x2e0>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d125      	bne.n	8005a2c <UART_SetConfig+0xf0>
 80059e0:	4b8f      	ldr	r3, [pc, #572]	; (8005c20 <UART_SetConfig+0x2e4>)
 80059e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d81a      	bhi.n	8005a24 <UART_SetConfig+0xe8>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <UART_SetConfig+0xb8>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a05 	.word	0x08005a05
 80059f8:	08005a15 	.word	0x08005a15
 80059fc:	08005a0d 	.word	0x08005a0d
 8005a00:	08005a1d 	.word	0x08005a1d
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a0a:	e116      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a12:	e112      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005a14:	2304      	movs	r3, #4
 8005a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a1a:	e10e      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a22:	e10a      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005a24:	2310      	movs	r3, #16
 8005a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a2a:	e106      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a7c      	ldr	r2, [pc, #496]	; (8005c24 <UART_SetConfig+0x2e8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d138      	bne.n	8005aa8 <UART_SetConfig+0x16c>
 8005a36:	4b7a      	ldr	r3, [pc, #488]	; (8005c20 <UART_SetConfig+0x2e4>)
 8005a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3c:	f003 030c 	and.w	r3, r3, #12
 8005a40:	2b0c      	cmp	r3, #12
 8005a42:	d82d      	bhi.n	8005aa0 <UART_SetConfig+0x164>
 8005a44:	a201      	add	r2, pc, #4	; (adr r2, 8005a4c <UART_SetConfig+0x110>)
 8005a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4a:	bf00      	nop
 8005a4c:	08005a81 	.word	0x08005a81
 8005a50:	08005aa1 	.word	0x08005aa1
 8005a54:	08005aa1 	.word	0x08005aa1
 8005a58:	08005aa1 	.word	0x08005aa1
 8005a5c:	08005a91 	.word	0x08005a91
 8005a60:	08005aa1 	.word	0x08005aa1
 8005a64:	08005aa1 	.word	0x08005aa1
 8005a68:	08005aa1 	.word	0x08005aa1
 8005a6c:	08005a89 	.word	0x08005a89
 8005a70:	08005aa1 	.word	0x08005aa1
 8005a74:	08005aa1 	.word	0x08005aa1
 8005a78:	08005aa1 	.word	0x08005aa1
 8005a7c:	08005a99 	.word	0x08005a99
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a86:	e0d8      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a8e:	e0d4      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005a90:	2304      	movs	r3, #4
 8005a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a96:	e0d0      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005a98:	2308      	movs	r3, #8
 8005a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a9e:	e0cc      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aa6:	e0c8      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a5e      	ldr	r2, [pc, #376]	; (8005c28 <UART_SetConfig+0x2ec>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d125      	bne.n	8005afe <UART_SetConfig+0x1c2>
 8005ab2:	4b5b      	ldr	r3, [pc, #364]	; (8005c20 <UART_SetConfig+0x2e4>)
 8005ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005abc:	2b30      	cmp	r3, #48	; 0x30
 8005abe:	d016      	beq.n	8005aee <UART_SetConfig+0x1b2>
 8005ac0:	2b30      	cmp	r3, #48	; 0x30
 8005ac2:	d818      	bhi.n	8005af6 <UART_SetConfig+0x1ba>
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d00a      	beq.n	8005ade <UART_SetConfig+0x1a2>
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d814      	bhi.n	8005af6 <UART_SetConfig+0x1ba>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <UART_SetConfig+0x19a>
 8005ad0:	2b10      	cmp	r3, #16
 8005ad2:	d008      	beq.n	8005ae6 <UART_SetConfig+0x1aa>
 8005ad4:	e00f      	b.n	8005af6 <UART_SetConfig+0x1ba>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005adc:	e0ad      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ae4:	e0a9      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005ae6:	2304      	movs	r3, #4
 8005ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aec:	e0a5      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005aee:	2308      	movs	r3, #8
 8005af0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005af4:	e0a1      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005af6:	2310      	movs	r3, #16
 8005af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005afc:	e09d      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a4a      	ldr	r2, [pc, #296]	; (8005c2c <UART_SetConfig+0x2f0>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d125      	bne.n	8005b54 <UART_SetConfig+0x218>
 8005b08:	4b45      	ldr	r3, [pc, #276]	; (8005c20 <UART_SetConfig+0x2e4>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b12:	2bc0      	cmp	r3, #192	; 0xc0
 8005b14:	d016      	beq.n	8005b44 <UART_SetConfig+0x208>
 8005b16:	2bc0      	cmp	r3, #192	; 0xc0
 8005b18:	d818      	bhi.n	8005b4c <UART_SetConfig+0x210>
 8005b1a:	2b80      	cmp	r3, #128	; 0x80
 8005b1c:	d00a      	beq.n	8005b34 <UART_SetConfig+0x1f8>
 8005b1e:	2b80      	cmp	r3, #128	; 0x80
 8005b20:	d814      	bhi.n	8005b4c <UART_SetConfig+0x210>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <UART_SetConfig+0x1f0>
 8005b26:	2b40      	cmp	r3, #64	; 0x40
 8005b28:	d008      	beq.n	8005b3c <UART_SetConfig+0x200>
 8005b2a:	e00f      	b.n	8005b4c <UART_SetConfig+0x210>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b32:	e082      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005b34:	2302      	movs	r3, #2
 8005b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b3a:	e07e      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b42:	e07a      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005b44:	2308      	movs	r3, #8
 8005b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b4a:	e076      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b52:	e072      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a35      	ldr	r2, [pc, #212]	; (8005c30 <UART_SetConfig+0x2f4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d12a      	bne.n	8005bb4 <UART_SetConfig+0x278>
 8005b5e:	4b30      	ldr	r3, [pc, #192]	; (8005c20 <UART_SetConfig+0x2e4>)
 8005b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b6c:	d01a      	beq.n	8005ba4 <UART_SetConfig+0x268>
 8005b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b72:	d81b      	bhi.n	8005bac <UART_SetConfig+0x270>
 8005b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b78:	d00c      	beq.n	8005b94 <UART_SetConfig+0x258>
 8005b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b7e:	d815      	bhi.n	8005bac <UART_SetConfig+0x270>
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <UART_SetConfig+0x250>
 8005b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b88:	d008      	beq.n	8005b9c <UART_SetConfig+0x260>
 8005b8a:	e00f      	b.n	8005bac <UART_SetConfig+0x270>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b92:	e052      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005b94:	2302      	movs	r3, #2
 8005b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b9a:	e04e      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005b9c:	2304      	movs	r3, #4
 8005b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ba2:	e04a      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005ba4:	2308      	movs	r3, #8
 8005ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005baa:	e046      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005bac:	2310      	movs	r3, #16
 8005bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bb2:	e042      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <UART_SetConfig+0x2dc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d13a      	bne.n	8005c34 <UART_SetConfig+0x2f8>
 8005bbe:	4b18      	ldr	r3, [pc, #96]	; (8005c20 <UART_SetConfig+0x2e4>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bcc:	d01a      	beq.n	8005c04 <UART_SetConfig+0x2c8>
 8005bce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bd2:	d81b      	bhi.n	8005c0c <UART_SetConfig+0x2d0>
 8005bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd8:	d00c      	beq.n	8005bf4 <UART_SetConfig+0x2b8>
 8005bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bde:	d815      	bhi.n	8005c0c <UART_SetConfig+0x2d0>
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <UART_SetConfig+0x2b0>
 8005be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be8:	d008      	beq.n	8005bfc <UART_SetConfig+0x2c0>
 8005bea:	e00f      	b.n	8005c0c <UART_SetConfig+0x2d0>
 8005bec:	2300      	movs	r3, #0
 8005bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bf2:	e022      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bfa:	e01e      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005bfc:	2304      	movs	r3, #4
 8005bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c02:	e01a      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005c04:	2308      	movs	r3, #8
 8005c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c0a:	e016      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c12:	e012      	b.n	8005c3a <UART_SetConfig+0x2fe>
 8005c14:	cfff69f3 	.word	0xcfff69f3
 8005c18:	40008000 	.word	0x40008000
 8005c1c:	40013800 	.word	0x40013800
 8005c20:	40021000 	.word	0x40021000
 8005c24:	40004400 	.word	0x40004400
 8005c28:	40004800 	.word	0x40004800
 8005c2c:	40004c00 	.word	0x40004c00
 8005c30:	40005000 	.word	0x40005000
 8005c34:	2310      	movs	r3, #16
 8005c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4aae      	ldr	r2, [pc, #696]	; (8005ef8 <UART_SetConfig+0x5bc>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	f040 8097 	bne.w	8005d74 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c4a:	2b08      	cmp	r3, #8
 8005c4c:	d823      	bhi.n	8005c96 <UART_SetConfig+0x35a>
 8005c4e:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <UART_SetConfig+0x318>)
 8005c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c54:	08005c79 	.word	0x08005c79
 8005c58:	08005c97 	.word	0x08005c97
 8005c5c:	08005c81 	.word	0x08005c81
 8005c60:	08005c97 	.word	0x08005c97
 8005c64:	08005c87 	.word	0x08005c87
 8005c68:	08005c97 	.word	0x08005c97
 8005c6c:	08005c97 	.word	0x08005c97
 8005c70:	08005c97 	.word	0x08005c97
 8005c74:	08005c8f 	.word	0x08005c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c78:	f7fe f8b6 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8005c7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c7e:	e010      	b.n	8005ca2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c80:	4b9e      	ldr	r3, [pc, #632]	; (8005efc <UART_SetConfig+0x5c0>)
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c84:	e00d      	b.n	8005ca2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c86:	f7fe f817 	bl	8003cb8 <HAL_RCC_GetSysClockFreq>
 8005c8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c8c:	e009      	b.n	8005ca2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c94:	e005      	b.n	8005ca2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ca0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 8130 	beq.w	8005f0a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	4a94      	ldr	r2, [pc, #592]	; (8005f00 <UART_SetConfig+0x5c4>)
 8005cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	4413      	add	r3, r2
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d305      	bcc.n	8005cda <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d903      	bls.n	8005ce2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ce0:	e113      	b.n	8005f0a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	60bb      	str	r3, [r7, #8]
 8005ce8:	60fa      	str	r2, [r7, #12]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	4a84      	ldr	r2, [pc, #528]	; (8005f00 <UART_SetConfig+0x5c4>)
 8005cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	603b      	str	r3, [r7, #0]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d04:	f7fb fca0 	bl	8001648 <__aeabi_uldivmod>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	4619      	mov	r1, r3
 8005d10:	f04f 0200 	mov.w	r2, #0
 8005d14:	f04f 0300 	mov.w	r3, #0
 8005d18:	020b      	lsls	r3, r1, #8
 8005d1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d1e:	0202      	lsls	r2, r0, #8
 8005d20:	6979      	ldr	r1, [r7, #20]
 8005d22:	6849      	ldr	r1, [r1, #4]
 8005d24:	0849      	lsrs	r1, r1, #1
 8005d26:	2000      	movs	r0, #0
 8005d28:	460c      	mov	r4, r1
 8005d2a:	4605      	mov	r5, r0
 8005d2c:	eb12 0804 	adds.w	r8, r2, r4
 8005d30:	eb43 0905 	adc.w	r9, r3, r5
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	469a      	mov	sl, r3
 8005d3c:	4693      	mov	fp, r2
 8005d3e:	4652      	mov	r2, sl
 8005d40:	465b      	mov	r3, fp
 8005d42:	4640      	mov	r0, r8
 8005d44:	4649      	mov	r1, r9
 8005d46:	f7fb fc7f 	bl	8001648 <__aeabi_uldivmod>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	4613      	mov	r3, r2
 8005d50:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d58:	d308      	bcc.n	8005d6c <UART_SetConfig+0x430>
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d60:	d204      	bcs.n	8005d6c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6a3a      	ldr	r2, [r7, #32]
 8005d68:	60da      	str	r2, [r3, #12]
 8005d6a:	e0ce      	b.n	8005f0a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d72:	e0ca      	b.n	8005f0a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d7c:	d166      	bne.n	8005e4c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005d7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d82:	2b08      	cmp	r3, #8
 8005d84:	d827      	bhi.n	8005dd6 <UART_SetConfig+0x49a>
 8005d86:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <UART_SetConfig+0x450>)
 8005d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8c:	08005db1 	.word	0x08005db1
 8005d90:	08005db9 	.word	0x08005db9
 8005d94:	08005dc1 	.word	0x08005dc1
 8005d98:	08005dd7 	.word	0x08005dd7
 8005d9c:	08005dc7 	.word	0x08005dc7
 8005da0:	08005dd7 	.word	0x08005dd7
 8005da4:	08005dd7 	.word	0x08005dd7
 8005da8:	08005dd7 	.word	0x08005dd7
 8005dac:	08005dcf 	.word	0x08005dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005db0:	f7fe f81a 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8005db4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005db6:	e014      	b.n	8005de2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005db8:	f7fe f82c 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8005dbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005dbe:	e010      	b.n	8005de2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dc0:	4b4e      	ldr	r3, [pc, #312]	; (8005efc <UART_SetConfig+0x5c0>)
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005dc4:	e00d      	b.n	8005de2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dc6:	f7fd ff77 	bl	8003cb8 <HAL_RCC_GetSysClockFreq>
 8005dca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005dcc:	e009      	b.n	8005de2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005dd4:	e005      	b.n	8005de2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005de0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 8090 	beq.w	8005f0a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	4a44      	ldr	r2, [pc, #272]	; (8005f00 <UART_SetConfig+0x5c4>)
 8005df0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005df4:	461a      	mov	r2, r3
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dfc:	005a      	lsls	r2, r3, #1
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	085b      	lsrs	r3, r3, #1
 8005e04:	441a      	add	r2, r3
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	2b0f      	cmp	r3, #15
 8005e14:	d916      	bls.n	8005e44 <UART_SetConfig+0x508>
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1c:	d212      	bcs.n	8005e44 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	f023 030f 	bic.w	r3, r3, #15
 8005e26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	085b      	lsrs	r3, r3, #1
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	8bfb      	ldrh	r3, [r7, #30]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	8bfa      	ldrh	r2, [r7, #30]
 8005e40:	60da      	str	r2, [r3, #12]
 8005e42:	e062      	b.n	8005f0a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e4a:	e05e      	b.n	8005f0a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d828      	bhi.n	8005ea6 <UART_SetConfig+0x56a>
 8005e54:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <UART_SetConfig+0x520>)
 8005e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5a:	bf00      	nop
 8005e5c:	08005e81 	.word	0x08005e81
 8005e60:	08005e89 	.word	0x08005e89
 8005e64:	08005e91 	.word	0x08005e91
 8005e68:	08005ea7 	.word	0x08005ea7
 8005e6c:	08005e97 	.word	0x08005e97
 8005e70:	08005ea7 	.word	0x08005ea7
 8005e74:	08005ea7 	.word	0x08005ea7
 8005e78:	08005ea7 	.word	0x08005ea7
 8005e7c:	08005e9f 	.word	0x08005e9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e80:	f7fd ffb2 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8005e84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e86:	e014      	b.n	8005eb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e88:	f7fd ffc4 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8005e8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e8e:	e010      	b.n	8005eb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e90:	4b1a      	ldr	r3, [pc, #104]	; (8005efc <UART_SetConfig+0x5c0>)
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e94:	e00d      	b.n	8005eb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e96:	f7fd ff0f 	bl	8003cb8 <HAL_RCC_GetSysClockFreq>
 8005e9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e9c:	e009      	b.n	8005eb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ea4:	e005      	b.n	8005eb2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005eb0:	bf00      	nop
    }

    if (pclk != 0U)
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d028      	beq.n	8005f0a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	4a10      	ldr	r2, [pc, #64]	; (8005f00 <UART_SetConfig+0x5c4>)
 8005ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	085b      	lsrs	r3, r3, #1
 8005ed0:	441a      	add	r2, r3
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eda:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	2b0f      	cmp	r3, #15
 8005ee0:	d910      	bls.n	8005f04 <UART_SetConfig+0x5c8>
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee8:	d20c      	bcs.n	8005f04 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	60da      	str	r2, [r3, #12]
 8005ef4:	e009      	b.n	8005f0a <UART_SetConfig+0x5ce>
 8005ef6:	bf00      	nop
 8005ef8:	40008000 	.word	0x40008000
 8005efc:	00f42400 	.word	0x00f42400
 8005f00:	08009038 	.word	0x08009038
      }
      else
      {
        ret = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2200      	movs	r2, #0
 8005f24:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005f26:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3730      	adds	r7, #48	; 0x30
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005f34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00a      	beq.n	8005fa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	f003 0308 	and.w	r3, r3, #8
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc8:	f003 0310 	and.w	r3, r3, #16
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00a      	beq.n	8005fe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fea:	f003 0320 	and.w	r3, r3, #32
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00a      	beq.n	8006008 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	430a      	orrs	r2, r1
 8006006:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006010:	2b00      	cmp	r3, #0
 8006012:	d01a      	beq.n	800604a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006032:	d10a      	bne.n	800604a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	605a      	str	r2, [r3, #4]
  }
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af02      	add	r7, sp, #8
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006088:	f7fc fbc6 	bl	8002818 <HAL_GetTick>
 800608c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b08      	cmp	r3, #8
 800609a:	d10e      	bne.n	80060ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800609c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f82f 	bl	800610e <UART_WaitOnFlagUntilTimeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e025      	b.n	8006106 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d10e      	bne.n	80060e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f819 	bl	800610e <UART_WaitOnFlagUntilTimeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e00f      	b.n	8006106 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2220      	movs	r2, #32
 80060ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b09c      	sub	sp, #112	; 0x70
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	603b      	str	r3, [r7, #0]
 800611a:	4613      	mov	r3, r2
 800611c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800611e:	e0a9      	b.n	8006274 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006126:	f000 80a5 	beq.w	8006274 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612a:	f7fc fb75 	bl	8002818 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006136:	429a      	cmp	r2, r3
 8006138:	d302      	bcc.n	8006140 <UART_WaitOnFlagUntilTimeout+0x32>
 800613a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800613c:	2b00      	cmp	r3, #0
 800613e:	d140      	bne.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800614e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006150:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006154:	667b      	str	r3, [r7, #100]	; 0x64
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800615e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006160:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006162:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006164:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006166:	e841 2300 	strex	r3, r2, [r1]
 800616a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800616c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1e6      	bne.n	8006140 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3308      	adds	r3, #8
 8006178:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006184:	f023 0301 	bic.w	r3, r3, #1
 8006188:	663b      	str	r3, [r7, #96]	; 0x60
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3308      	adds	r3, #8
 8006190:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006192:	64ba      	str	r2, [r7, #72]	; 0x48
 8006194:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e5      	bne.n	8006172 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e069      	b.n	8006296 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d051      	beq.n	8006274 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061de:	d149      	bne.n	8006274 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006208:	637b      	str	r3, [r7, #52]	; 0x34
 800620a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800620e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006210:	e841 2300 	strex	r3, r2, [r1]
 8006214:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e6      	bne.n	80061ea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3308      	adds	r3, #8
 8006222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	613b      	str	r3, [r7, #16]
   return(result);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f023 0301 	bic.w	r3, r3, #1
 8006232:	66bb      	str	r3, [r7, #104]	; 0x68
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3308      	adds	r3, #8
 800623a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800623c:	623a      	str	r2, [r7, #32]
 800623e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	69f9      	ldr	r1, [r7, #28]
 8006242:	6a3a      	ldr	r2, [r7, #32]
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	61bb      	str	r3, [r7, #24]
   return(result);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e5      	bne.n	800621c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e010      	b.n	8006296 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69da      	ldr	r2, [r3, #28]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	4013      	ands	r3, r2
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	429a      	cmp	r2, r3
 8006282:	bf0c      	ite	eq
 8006284:	2301      	moveq	r3, #1
 8006286:	2300      	movne	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	461a      	mov	r2, r3
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	429a      	cmp	r2, r3
 8006290:	f43f af46 	beq.w	8006120 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3770      	adds	r7, #112	; 0x70
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800629e:	b480      	push	{r7}
 80062a0:	b085      	sub	sp, #20
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e027      	b.n	8006304 <HAL_UARTEx_DisableFifoMode+0x66>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2224      	movs	r2, #36	; 0x24
 80062c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0201 	bic.w	r2, r2, #1
 80062da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006324:	2302      	movs	r3, #2
 8006326:	e02d      	b.n	8006384 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2224      	movs	r2, #36	; 0x24
 8006334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0201 	bic.w	r2, r2, #1
 800634e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f84f 	bl	8006408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2220      	movs	r2, #32
 8006376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800639c:	2b01      	cmp	r3, #1
 800639e:	d101      	bne.n	80063a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063a0:	2302      	movs	r3, #2
 80063a2:	e02d      	b.n	8006400 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2224      	movs	r2, #36	; 0x24
 80063b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0201 	bic.w	r2, r2, #1
 80063ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f811 	bl	8006408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006414:	2b00      	cmp	r3, #0
 8006416:	d108      	bne.n	800642a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006428:	e031      	b.n	800648e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800642a:	2308      	movs	r3, #8
 800642c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800642e:	2308      	movs	r3, #8
 8006430:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	0e5b      	lsrs	r3, r3, #25
 800643a:	b2db      	uxtb	r3, r3
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	0f5b      	lsrs	r3, r3, #29
 800644a:	b2db      	uxtb	r3, r3
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	7b3a      	ldrb	r2, [r7, #12]
 8006456:	4911      	ldr	r1, [pc, #68]	; (800649c <UARTEx_SetNbDataToProcess+0x94>)
 8006458:	5c8a      	ldrb	r2, [r1, r2]
 800645a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800645e:	7b3a      	ldrb	r2, [r7, #12]
 8006460:	490f      	ldr	r1, [pc, #60]	; (80064a0 <UARTEx_SetNbDataToProcess+0x98>)
 8006462:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006464:	fb93 f3f2 	sdiv	r3, r3, r2
 8006468:	b29a      	uxth	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	7b7a      	ldrb	r2, [r7, #13]
 8006474:	4909      	ldr	r1, [pc, #36]	; (800649c <UARTEx_SetNbDataToProcess+0x94>)
 8006476:	5c8a      	ldrb	r2, [r1, r2]
 8006478:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800647c:	7b7a      	ldrb	r2, [r7, #13]
 800647e:	4908      	ldr	r1, [pc, #32]	; (80064a0 <UARTEx_SetNbDataToProcess+0x98>)
 8006480:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006482:	fb93 f3f2 	sdiv	r3, r3, r2
 8006486:	b29a      	uxth	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800648e:	bf00      	nop
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	08009050 	.word	0x08009050
 80064a0:	08009058 	.word	0x08009058

080064a4 <__errno>:
 80064a4:	4b01      	ldr	r3, [pc, #4]	; (80064ac <__errno+0x8>)
 80064a6:	6818      	ldr	r0, [r3, #0]
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	20000084 	.word	0x20000084

080064b0 <__libc_init_array>:
 80064b0:	b570      	push	{r4, r5, r6, lr}
 80064b2:	4d0d      	ldr	r5, [pc, #52]	; (80064e8 <__libc_init_array+0x38>)
 80064b4:	4c0d      	ldr	r4, [pc, #52]	; (80064ec <__libc_init_array+0x3c>)
 80064b6:	1b64      	subs	r4, r4, r5
 80064b8:	10a4      	asrs	r4, r4, #2
 80064ba:	2600      	movs	r6, #0
 80064bc:	42a6      	cmp	r6, r4
 80064be:	d109      	bne.n	80064d4 <__libc_init_array+0x24>
 80064c0:	4d0b      	ldr	r5, [pc, #44]	; (80064f0 <__libc_init_array+0x40>)
 80064c2:	4c0c      	ldr	r4, [pc, #48]	; (80064f4 <__libc_init_array+0x44>)
 80064c4:	f002 fd4e 	bl	8008f64 <_init>
 80064c8:	1b64      	subs	r4, r4, r5
 80064ca:	10a4      	asrs	r4, r4, #2
 80064cc:	2600      	movs	r6, #0
 80064ce:	42a6      	cmp	r6, r4
 80064d0:	d105      	bne.n	80064de <__libc_init_array+0x2e>
 80064d2:	bd70      	pop	{r4, r5, r6, pc}
 80064d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d8:	4798      	blx	r3
 80064da:	3601      	adds	r6, #1
 80064dc:	e7ee      	b.n	80064bc <__libc_init_array+0xc>
 80064de:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e2:	4798      	blx	r3
 80064e4:	3601      	adds	r6, #1
 80064e6:	e7f2      	b.n	80064ce <__libc_init_array+0x1e>
 80064e8:	08009444 	.word	0x08009444
 80064ec:	08009444 	.word	0x08009444
 80064f0:	08009444 	.word	0x08009444
 80064f4:	08009448 	.word	0x08009448

080064f8 <memcpy>:
 80064f8:	440a      	add	r2, r1
 80064fa:	4291      	cmp	r1, r2
 80064fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006500:	d100      	bne.n	8006504 <memcpy+0xc>
 8006502:	4770      	bx	lr
 8006504:	b510      	push	{r4, lr}
 8006506:	f811 4b01 	ldrb.w	r4, [r1], #1
 800650a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800650e:	4291      	cmp	r1, r2
 8006510:	d1f9      	bne.n	8006506 <memcpy+0xe>
 8006512:	bd10      	pop	{r4, pc}

08006514 <memset>:
 8006514:	4402      	add	r2, r0
 8006516:	4603      	mov	r3, r0
 8006518:	4293      	cmp	r3, r2
 800651a:	d100      	bne.n	800651e <memset+0xa>
 800651c:	4770      	bx	lr
 800651e:	f803 1b01 	strb.w	r1, [r3], #1
 8006522:	e7f9      	b.n	8006518 <memset+0x4>

08006524 <__cvt>:
 8006524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006528:	ec55 4b10 	vmov	r4, r5, d0
 800652c:	2d00      	cmp	r5, #0
 800652e:	460e      	mov	r6, r1
 8006530:	4619      	mov	r1, r3
 8006532:	462b      	mov	r3, r5
 8006534:	bfbb      	ittet	lt
 8006536:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800653a:	461d      	movlt	r5, r3
 800653c:	2300      	movge	r3, #0
 800653e:	232d      	movlt	r3, #45	; 0x2d
 8006540:	700b      	strb	r3, [r1, #0]
 8006542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006544:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006548:	4691      	mov	r9, r2
 800654a:	f023 0820 	bic.w	r8, r3, #32
 800654e:	bfbc      	itt	lt
 8006550:	4622      	movlt	r2, r4
 8006552:	4614      	movlt	r4, r2
 8006554:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006558:	d005      	beq.n	8006566 <__cvt+0x42>
 800655a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800655e:	d100      	bne.n	8006562 <__cvt+0x3e>
 8006560:	3601      	adds	r6, #1
 8006562:	2102      	movs	r1, #2
 8006564:	e000      	b.n	8006568 <__cvt+0x44>
 8006566:	2103      	movs	r1, #3
 8006568:	ab03      	add	r3, sp, #12
 800656a:	9301      	str	r3, [sp, #4]
 800656c:	ab02      	add	r3, sp, #8
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	ec45 4b10 	vmov	d0, r4, r5
 8006574:	4653      	mov	r3, sl
 8006576:	4632      	mov	r2, r6
 8006578:	f000 fce2 	bl	8006f40 <_dtoa_r>
 800657c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006580:	4607      	mov	r7, r0
 8006582:	d102      	bne.n	800658a <__cvt+0x66>
 8006584:	f019 0f01 	tst.w	r9, #1
 8006588:	d022      	beq.n	80065d0 <__cvt+0xac>
 800658a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800658e:	eb07 0906 	add.w	r9, r7, r6
 8006592:	d110      	bne.n	80065b6 <__cvt+0x92>
 8006594:	783b      	ldrb	r3, [r7, #0]
 8006596:	2b30      	cmp	r3, #48	; 0x30
 8006598:	d10a      	bne.n	80065b0 <__cvt+0x8c>
 800659a:	2200      	movs	r2, #0
 800659c:	2300      	movs	r3, #0
 800659e:	4620      	mov	r0, r4
 80065a0:	4629      	mov	r1, r5
 80065a2:	f7fa ffe1 	bl	8001568 <__aeabi_dcmpeq>
 80065a6:	b918      	cbnz	r0, 80065b0 <__cvt+0x8c>
 80065a8:	f1c6 0601 	rsb	r6, r6, #1
 80065ac:	f8ca 6000 	str.w	r6, [sl]
 80065b0:	f8da 3000 	ldr.w	r3, [sl]
 80065b4:	4499      	add	r9, r3
 80065b6:	2200      	movs	r2, #0
 80065b8:	2300      	movs	r3, #0
 80065ba:	4620      	mov	r0, r4
 80065bc:	4629      	mov	r1, r5
 80065be:	f7fa ffd3 	bl	8001568 <__aeabi_dcmpeq>
 80065c2:	b108      	cbz	r0, 80065c8 <__cvt+0xa4>
 80065c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80065c8:	2230      	movs	r2, #48	; 0x30
 80065ca:	9b03      	ldr	r3, [sp, #12]
 80065cc:	454b      	cmp	r3, r9
 80065ce:	d307      	bcc.n	80065e0 <__cvt+0xbc>
 80065d0:	9b03      	ldr	r3, [sp, #12]
 80065d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065d4:	1bdb      	subs	r3, r3, r7
 80065d6:	4638      	mov	r0, r7
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	b004      	add	sp, #16
 80065dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e0:	1c59      	adds	r1, r3, #1
 80065e2:	9103      	str	r1, [sp, #12]
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	e7f0      	b.n	80065ca <__cvt+0xa6>

080065e8 <__exponent>:
 80065e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ea:	4603      	mov	r3, r0
 80065ec:	2900      	cmp	r1, #0
 80065ee:	bfb8      	it	lt
 80065f0:	4249      	neglt	r1, r1
 80065f2:	f803 2b02 	strb.w	r2, [r3], #2
 80065f6:	bfb4      	ite	lt
 80065f8:	222d      	movlt	r2, #45	; 0x2d
 80065fa:	222b      	movge	r2, #43	; 0x2b
 80065fc:	2909      	cmp	r1, #9
 80065fe:	7042      	strb	r2, [r0, #1]
 8006600:	dd2a      	ble.n	8006658 <__exponent+0x70>
 8006602:	f10d 0407 	add.w	r4, sp, #7
 8006606:	46a4      	mov	ip, r4
 8006608:	270a      	movs	r7, #10
 800660a:	46a6      	mov	lr, r4
 800660c:	460a      	mov	r2, r1
 800660e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006612:	fb07 1516 	mls	r5, r7, r6, r1
 8006616:	3530      	adds	r5, #48	; 0x30
 8006618:	2a63      	cmp	r2, #99	; 0x63
 800661a:	f104 34ff 	add.w	r4, r4, #4294967295
 800661e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006622:	4631      	mov	r1, r6
 8006624:	dcf1      	bgt.n	800660a <__exponent+0x22>
 8006626:	3130      	adds	r1, #48	; 0x30
 8006628:	f1ae 0502 	sub.w	r5, lr, #2
 800662c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006630:	1c44      	adds	r4, r0, #1
 8006632:	4629      	mov	r1, r5
 8006634:	4561      	cmp	r1, ip
 8006636:	d30a      	bcc.n	800664e <__exponent+0x66>
 8006638:	f10d 0209 	add.w	r2, sp, #9
 800663c:	eba2 020e 	sub.w	r2, r2, lr
 8006640:	4565      	cmp	r5, ip
 8006642:	bf88      	it	hi
 8006644:	2200      	movhi	r2, #0
 8006646:	4413      	add	r3, r2
 8006648:	1a18      	subs	r0, r3, r0
 800664a:	b003      	add	sp, #12
 800664c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800664e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006652:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006656:	e7ed      	b.n	8006634 <__exponent+0x4c>
 8006658:	2330      	movs	r3, #48	; 0x30
 800665a:	3130      	adds	r1, #48	; 0x30
 800665c:	7083      	strb	r3, [r0, #2]
 800665e:	70c1      	strb	r1, [r0, #3]
 8006660:	1d03      	adds	r3, r0, #4
 8006662:	e7f1      	b.n	8006648 <__exponent+0x60>

08006664 <_printf_float>:
 8006664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006668:	ed2d 8b02 	vpush	{d8}
 800666c:	b08d      	sub	sp, #52	; 0x34
 800666e:	460c      	mov	r4, r1
 8006670:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006674:	4616      	mov	r6, r2
 8006676:	461f      	mov	r7, r3
 8006678:	4605      	mov	r5, r0
 800667a:	f001 fb45 	bl	8007d08 <_localeconv_r>
 800667e:	f8d0 a000 	ldr.w	sl, [r0]
 8006682:	4650      	mov	r0, sl
 8006684:	f7fa faee 	bl	8000c64 <strlen>
 8006688:	2300      	movs	r3, #0
 800668a:	930a      	str	r3, [sp, #40]	; 0x28
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	9305      	str	r3, [sp, #20]
 8006690:	f8d8 3000 	ldr.w	r3, [r8]
 8006694:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006698:	3307      	adds	r3, #7
 800669a:	f023 0307 	bic.w	r3, r3, #7
 800669e:	f103 0208 	add.w	r2, r3, #8
 80066a2:	f8c8 2000 	str.w	r2, [r8]
 80066a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066b6:	9307      	str	r3, [sp, #28]
 80066b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80066bc:	ee08 0a10 	vmov	s16, r0
 80066c0:	4b9f      	ldr	r3, [pc, #636]	; (8006940 <_printf_float+0x2dc>)
 80066c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066c6:	f04f 32ff 	mov.w	r2, #4294967295
 80066ca:	f7fa ff7f 	bl	80015cc <__aeabi_dcmpun>
 80066ce:	bb88      	cbnz	r0, 8006734 <_printf_float+0xd0>
 80066d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066d4:	4b9a      	ldr	r3, [pc, #616]	; (8006940 <_printf_float+0x2dc>)
 80066d6:	f04f 32ff 	mov.w	r2, #4294967295
 80066da:	f7fa ff59 	bl	8001590 <__aeabi_dcmple>
 80066de:	bb48      	cbnz	r0, 8006734 <_printf_float+0xd0>
 80066e0:	2200      	movs	r2, #0
 80066e2:	2300      	movs	r3, #0
 80066e4:	4640      	mov	r0, r8
 80066e6:	4649      	mov	r1, r9
 80066e8:	f7fa ff48 	bl	800157c <__aeabi_dcmplt>
 80066ec:	b110      	cbz	r0, 80066f4 <_printf_float+0x90>
 80066ee:	232d      	movs	r3, #45	; 0x2d
 80066f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066f4:	4b93      	ldr	r3, [pc, #588]	; (8006944 <_printf_float+0x2e0>)
 80066f6:	4894      	ldr	r0, [pc, #592]	; (8006948 <_printf_float+0x2e4>)
 80066f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80066fc:	bf94      	ite	ls
 80066fe:	4698      	movls	r8, r3
 8006700:	4680      	movhi	r8, r0
 8006702:	2303      	movs	r3, #3
 8006704:	6123      	str	r3, [r4, #16]
 8006706:	9b05      	ldr	r3, [sp, #20]
 8006708:	f023 0204 	bic.w	r2, r3, #4
 800670c:	6022      	str	r2, [r4, #0]
 800670e:	f04f 0900 	mov.w	r9, #0
 8006712:	9700      	str	r7, [sp, #0]
 8006714:	4633      	mov	r3, r6
 8006716:	aa0b      	add	r2, sp, #44	; 0x2c
 8006718:	4621      	mov	r1, r4
 800671a:	4628      	mov	r0, r5
 800671c:	f000 f9d8 	bl	8006ad0 <_printf_common>
 8006720:	3001      	adds	r0, #1
 8006722:	f040 8090 	bne.w	8006846 <_printf_float+0x1e2>
 8006726:	f04f 30ff 	mov.w	r0, #4294967295
 800672a:	b00d      	add	sp, #52	; 0x34
 800672c:	ecbd 8b02 	vpop	{d8}
 8006730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006734:	4642      	mov	r2, r8
 8006736:	464b      	mov	r3, r9
 8006738:	4640      	mov	r0, r8
 800673a:	4649      	mov	r1, r9
 800673c:	f7fa ff46 	bl	80015cc <__aeabi_dcmpun>
 8006740:	b140      	cbz	r0, 8006754 <_printf_float+0xf0>
 8006742:	464b      	mov	r3, r9
 8006744:	2b00      	cmp	r3, #0
 8006746:	bfbc      	itt	lt
 8006748:	232d      	movlt	r3, #45	; 0x2d
 800674a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800674e:	487f      	ldr	r0, [pc, #508]	; (800694c <_printf_float+0x2e8>)
 8006750:	4b7f      	ldr	r3, [pc, #508]	; (8006950 <_printf_float+0x2ec>)
 8006752:	e7d1      	b.n	80066f8 <_printf_float+0x94>
 8006754:	6863      	ldr	r3, [r4, #4]
 8006756:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800675a:	9206      	str	r2, [sp, #24]
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	d13f      	bne.n	80067e0 <_printf_float+0x17c>
 8006760:	2306      	movs	r3, #6
 8006762:	6063      	str	r3, [r4, #4]
 8006764:	9b05      	ldr	r3, [sp, #20]
 8006766:	6861      	ldr	r1, [r4, #4]
 8006768:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800676c:	2300      	movs	r3, #0
 800676e:	9303      	str	r3, [sp, #12]
 8006770:	ab0a      	add	r3, sp, #40	; 0x28
 8006772:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006776:	ab09      	add	r3, sp, #36	; 0x24
 8006778:	ec49 8b10 	vmov	d0, r8, r9
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	6022      	str	r2, [r4, #0]
 8006780:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006784:	4628      	mov	r0, r5
 8006786:	f7ff fecd 	bl	8006524 <__cvt>
 800678a:	9b06      	ldr	r3, [sp, #24]
 800678c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800678e:	2b47      	cmp	r3, #71	; 0x47
 8006790:	4680      	mov	r8, r0
 8006792:	d108      	bne.n	80067a6 <_printf_float+0x142>
 8006794:	1cc8      	adds	r0, r1, #3
 8006796:	db02      	blt.n	800679e <_printf_float+0x13a>
 8006798:	6863      	ldr	r3, [r4, #4]
 800679a:	4299      	cmp	r1, r3
 800679c:	dd41      	ble.n	8006822 <_printf_float+0x1be>
 800679e:	f1ab 0b02 	sub.w	fp, fp, #2
 80067a2:	fa5f fb8b 	uxtb.w	fp, fp
 80067a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067aa:	d820      	bhi.n	80067ee <_printf_float+0x18a>
 80067ac:	3901      	subs	r1, #1
 80067ae:	465a      	mov	r2, fp
 80067b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067b4:	9109      	str	r1, [sp, #36]	; 0x24
 80067b6:	f7ff ff17 	bl	80065e8 <__exponent>
 80067ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067bc:	1813      	adds	r3, r2, r0
 80067be:	2a01      	cmp	r2, #1
 80067c0:	4681      	mov	r9, r0
 80067c2:	6123      	str	r3, [r4, #16]
 80067c4:	dc02      	bgt.n	80067cc <_printf_float+0x168>
 80067c6:	6822      	ldr	r2, [r4, #0]
 80067c8:	07d2      	lsls	r2, r2, #31
 80067ca:	d501      	bpl.n	80067d0 <_printf_float+0x16c>
 80067cc:	3301      	adds	r3, #1
 80067ce:	6123      	str	r3, [r4, #16]
 80067d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d09c      	beq.n	8006712 <_printf_float+0xae>
 80067d8:	232d      	movs	r3, #45	; 0x2d
 80067da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067de:	e798      	b.n	8006712 <_printf_float+0xae>
 80067e0:	9a06      	ldr	r2, [sp, #24]
 80067e2:	2a47      	cmp	r2, #71	; 0x47
 80067e4:	d1be      	bne.n	8006764 <_printf_float+0x100>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1bc      	bne.n	8006764 <_printf_float+0x100>
 80067ea:	2301      	movs	r3, #1
 80067ec:	e7b9      	b.n	8006762 <_printf_float+0xfe>
 80067ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067f2:	d118      	bne.n	8006826 <_printf_float+0x1c2>
 80067f4:	2900      	cmp	r1, #0
 80067f6:	6863      	ldr	r3, [r4, #4]
 80067f8:	dd0b      	ble.n	8006812 <_printf_float+0x1ae>
 80067fa:	6121      	str	r1, [r4, #16]
 80067fc:	b913      	cbnz	r3, 8006804 <_printf_float+0x1a0>
 80067fe:	6822      	ldr	r2, [r4, #0]
 8006800:	07d0      	lsls	r0, r2, #31
 8006802:	d502      	bpl.n	800680a <_printf_float+0x1a6>
 8006804:	3301      	adds	r3, #1
 8006806:	440b      	add	r3, r1
 8006808:	6123      	str	r3, [r4, #16]
 800680a:	65a1      	str	r1, [r4, #88]	; 0x58
 800680c:	f04f 0900 	mov.w	r9, #0
 8006810:	e7de      	b.n	80067d0 <_printf_float+0x16c>
 8006812:	b913      	cbnz	r3, 800681a <_printf_float+0x1b6>
 8006814:	6822      	ldr	r2, [r4, #0]
 8006816:	07d2      	lsls	r2, r2, #31
 8006818:	d501      	bpl.n	800681e <_printf_float+0x1ba>
 800681a:	3302      	adds	r3, #2
 800681c:	e7f4      	b.n	8006808 <_printf_float+0x1a4>
 800681e:	2301      	movs	r3, #1
 8006820:	e7f2      	b.n	8006808 <_printf_float+0x1a4>
 8006822:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006828:	4299      	cmp	r1, r3
 800682a:	db05      	blt.n	8006838 <_printf_float+0x1d4>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	6121      	str	r1, [r4, #16]
 8006830:	07d8      	lsls	r0, r3, #31
 8006832:	d5ea      	bpl.n	800680a <_printf_float+0x1a6>
 8006834:	1c4b      	adds	r3, r1, #1
 8006836:	e7e7      	b.n	8006808 <_printf_float+0x1a4>
 8006838:	2900      	cmp	r1, #0
 800683a:	bfd4      	ite	le
 800683c:	f1c1 0202 	rsble	r2, r1, #2
 8006840:	2201      	movgt	r2, #1
 8006842:	4413      	add	r3, r2
 8006844:	e7e0      	b.n	8006808 <_printf_float+0x1a4>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	055a      	lsls	r2, r3, #21
 800684a:	d407      	bmi.n	800685c <_printf_float+0x1f8>
 800684c:	6923      	ldr	r3, [r4, #16]
 800684e:	4642      	mov	r2, r8
 8006850:	4631      	mov	r1, r6
 8006852:	4628      	mov	r0, r5
 8006854:	47b8      	blx	r7
 8006856:	3001      	adds	r0, #1
 8006858:	d12c      	bne.n	80068b4 <_printf_float+0x250>
 800685a:	e764      	b.n	8006726 <_printf_float+0xc2>
 800685c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006860:	f240 80e0 	bls.w	8006a24 <_printf_float+0x3c0>
 8006864:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006868:	2200      	movs	r2, #0
 800686a:	2300      	movs	r3, #0
 800686c:	f7fa fe7c 	bl	8001568 <__aeabi_dcmpeq>
 8006870:	2800      	cmp	r0, #0
 8006872:	d034      	beq.n	80068de <_printf_float+0x27a>
 8006874:	4a37      	ldr	r2, [pc, #220]	; (8006954 <_printf_float+0x2f0>)
 8006876:	2301      	movs	r3, #1
 8006878:	4631      	mov	r1, r6
 800687a:	4628      	mov	r0, r5
 800687c:	47b8      	blx	r7
 800687e:	3001      	adds	r0, #1
 8006880:	f43f af51 	beq.w	8006726 <_printf_float+0xc2>
 8006884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006888:	429a      	cmp	r2, r3
 800688a:	db02      	blt.n	8006892 <_printf_float+0x22e>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	07d8      	lsls	r0, r3, #31
 8006890:	d510      	bpl.n	80068b4 <_printf_float+0x250>
 8006892:	ee18 3a10 	vmov	r3, s16
 8006896:	4652      	mov	r2, sl
 8006898:	4631      	mov	r1, r6
 800689a:	4628      	mov	r0, r5
 800689c:	47b8      	blx	r7
 800689e:	3001      	adds	r0, #1
 80068a0:	f43f af41 	beq.w	8006726 <_printf_float+0xc2>
 80068a4:	f04f 0800 	mov.w	r8, #0
 80068a8:	f104 091a 	add.w	r9, r4, #26
 80068ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ae:	3b01      	subs	r3, #1
 80068b0:	4543      	cmp	r3, r8
 80068b2:	dc09      	bgt.n	80068c8 <_printf_float+0x264>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	079b      	lsls	r3, r3, #30
 80068b8:	f100 8105 	bmi.w	8006ac6 <_printf_float+0x462>
 80068bc:	68e0      	ldr	r0, [r4, #12]
 80068be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068c0:	4298      	cmp	r0, r3
 80068c2:	bfb8      	it	lt
 80068c4:	4618      	movlt	r0, r3
 80068c6:	e730      	b.n	800672a <_printf_float+0xc6>
 80068c8:	2301      	movs	r3, #1
 80068ca:	464a      	mov	r2, r9
 80068cc:	4631      	mov	r1, r6
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	f43f af27 	beq.w	8006726 <_printf_float+0xc2>
 80068d8:	f108 0801 	add.w	r8, r8, #1
 80068dc:	e7e6      	b.n	80068ac <_printf_float+0x248>
 80068de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	dc39      	bgt.n	8006958 <_printf_float+0x2f4>
 80068e4:	4a1b      	ldr	r2, [pc, #108]	; (8006954 <_printf_float+0x2f0>)
 80068e6:	2301      	movs	r3, #1
 80068e8:	4631      	mov	r1, r6
 80068ea:	4628      	mov	r0, r5
 80068ec:	47b8      	blx	r7
 80068ee:	3001      	adds	r0, #1
 80068f0:	f43f af19 	beq.w	8006726 <_printf_float+0xc2>
 80068f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068f8:	4313      	orrs	r3, r2
 80068fa:	d102      	bne.n	8006902 <_printf_float+0x29e>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	07d9      	lsls	r1, r3, #31
 8006900:	d5d8      	bpl.n	80068b4 <_printf_float+0x250>
 8006902:	ee18 3a10 	vmov	r3, s16
 8006906:	4652      	mov	r2, sl
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	f43f af09 	beq.w	8006726 <_printf_float+0xc2>
 8006914:	f04f 0900 	mov.w	r9, #0
 8006918:	f104 0a1a 	add.w	sl, r4, #26
 800691c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691e:	425b      	negs	r3, r3
 8006920:	454b      	cmp	r3, r9
 8006922:	dc01      	bgt.n	8006928 <_printf_float+0x2c4>
 8006924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006926:	e792      	b.n	800684e <_printf_float+0x1ea>
 8006928:	2301      	movs	r3, #1
 800692a:	4652      	mov	r2, sl
 800692c:	4631      	mov	r1, r6
 800692e:	4628      	mov	r0, r5
 8006930:	47b8      	blx	r7
 8006932:	3001      	adds	r0, #1
 8006934:	f43f aef7 	beq.w	8006726 <_printf_float+0xc2>
 8006938:	f109 0901 	add.w	r9, r9, #1
 800693c:	e7ee      	b.n	800691c <_printf_float+0x2b8>
 800693e:	bf00      	nop
 8006940:	7fefffff 	.word	0x7fefffff
 8006944:	08009064 	.word	0x08009064
 8006948:	08009068 	.word	0x08009068
 800694c:	08009070 	.word	0x08009070
 8006950:	0800906c 	.word	0x0800906c
 8006954:	08009074 	.word	0x08009074
 8006958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800695a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800695c:	429a      	cmp	r2, r3
 800695e:	bfa8      	it	ge
 8006960:	461a      	movge	r2, r3
 8006962:	2a00      	cmp	r2, #0
 8006964:	4691      	mov	r9, r2
 8006966:	dc37      	bgt.n	80069d8 <_printf_float+0x374>
 8006968:	f04f 0b00 	mov.w	fp, #0
 800696c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006970:	f104 021a 	add.w	r2, r4, #26
 8006974:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006976:	9305      	str	r3, [sp, #20]
 8006978:	eba3 0309 	sub.w	r3, r3, r9
 800697c:	455b      	cmp	r3, fp
 800697e:	dc33      	bgt.n	80069e8 <_printf_float+0x384>
 8006980:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006984:	429a      	cmp	r2, r3
 8006986:	db3b      	blt.n	8006a00 <_printf_float+0x39c>
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	07da      	lsls	r2, r3, #31
 800698c:	d438      	bmi.n	8006a00 <_printf_float+0x39c>
 800698e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006990:	9a05      	ldr	r2, [sp, #20]
 8006992:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006994:	1a9a      	subs	r2, r3, r2
 8006996:	eba3 0901 	sub.w	r9, r3, r1
 800699a:	4591      	cmp	r9, r2
 800699c:	bfa8      	it	ge
 800699e:	4691      	movge	r9, r2
 80069a0:	f1b9 0f00 	cmp.w	r9, #0
 80069a4:	dc35      	bgt.n	8006a12 <_printf_float+0x3ae>
 80069a6:	f04f 0800 	mov.w	r8, #0
 80069aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ae:	f104 0a1a 	add.w	sl, r4, #26
 80069b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069b6:	1a9b      	subs	r3, r3, r2
 80069b8:	eba3 0309 	sub.w	r3, r3, r9
 80069bc:	4543      	cmp	r3, r8
 80069be:	f77f af79 	ble.w	80068b4 <_printf_float+0x250>
 80069c2:	2301      	movs	r3, #1
 80069c4:	4652      	mov	r2, sl
 80069c6:	4631      	mov	r1, r6
 80069c8:	4628      	mov	r0, r5
 80069ca:	47b8      	blx	r7
 80069cc:	3001      	adds	r0, #1
 80069ce:	f43f aeaa 	beq.w	8006726 <_printf_float+0xc2>
 80069d2:	f108 0801 	add.w	r8, r8, #1
 80069d6:	e7ec      	b.n	80069b2 <_printf_float+0x34e>
 80069d8:	4613      	mov	r3, r2
 80069da:	4631      	mov	r1, r6
 80069dc:	4642      	mov	r2, r8
 80069de:	4628      	mov	r0, r5
 80069e0:	47b8      	blx	r7
 80069e2:	3001      	adds	r0, #1
 80069e4:	d1c0      	bne.n	8006968 <_printf_float+0x304>
 80069e6:	e69e      	b.n	8006726 <_printf_float+0xc2>
 80069e8:	2301      	movs	r3, #1
 80069ea:	4631      	mov	r1, r6
 80069ec:	4628      	mov	r0, r5
 80069ee:	9205      	str	r2, [sp, #20]
 80069f0:	47b8      	blx	r7
 80069f2:	3001      	adds	r0, #1
 80069f4:	f43f ae97 	beq.w	8006726 <_printf_float+0xc2>
 80069f8:	9a05      	ldr	r2, [sp, #20]
 80069fa:	f10b 0b01 	add.w	fp, fp, #1
 80069fe:	e7b9      	b.n	8006974 <_printf_float+0x310>
 8006a00:	ee18 3a10 	vmov	r3, s16
 8006a04:	4652      	mov	r2, sl
 8006a06:	4631      	mov	r1, r6
 8006a08:	4628      	mov	r0, r5
 8006a0a:	47b8      	blx	r7
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	d1be      	bne.n	800698e <_printf_float+0x32a>
 8006a10:	e689      	b.n	8006726 <_printf_float+0xc2>
 8006a12:	9a05      	ldr	r2, [sp, #20]
 8006a14:	464b      	mov	r3, r9
 8006a16:	4442      	add	r2, r8
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	47b8      	blx	r7
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d1c1      	bne.n	80069a6 <_printf_float+0x342>
 8006a22:	e680      	b.n	8006726 <_printf_float+0xc2>
 8006a24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a26:	2a01      	cmp	r2, #1
 8006a28:	dc01      	bgt.n	8006a2e <_printf_float+0x3ca>
 8006a2a:	07db      	lsls	r3, r3, #31
 8006a2c:	d538      	bpl.n	8006aa0 <_printf_float+0x43c>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4642      	mov	r2, r8
 8006a32:	4631      	mov	r1, r6
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b8      	blx	r7
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f43f ae74 	beq.w	8006726 <_printf_float+0xc2>
 8006a3e:	ee18 3a10 	vmov	r3, s16
 8006a42:	4652      	mov	r2, sl
 8006a44:	4631      	mov	r1, r6
 8006a46:	4628      	mov	r0, r5
 8006a48:	47b8      	blx	r7
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	f43f ae6b 	beq.w	8006726 <_printf_float+0xc2>
 8006a50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a54:	2200      	movs	r2, #0
 8006a56:	2300      	movs	r3, #0
 8006a58:	f7fa fd86 	bl	8001568 <__aeabi_dcmpeq>
 8006a5c:	b9d8      	cbnz	r0, 8006a96 <_printf_float+0x432>
 8006a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a60:	f108 0201 	add.w	r2, r8, #1
 8006a64:	3b01      	subs	r3, #1
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d10e      	bne.n	8006a8e <_printf_float+0x42a>
 8006a70:	e659      	b.n	8006726 <_printf_float+0xc2>
 8006a72:	2301      	movs	r3, #1
 8006a74:	4652      	mov	r2, sl
 8006a76:	4631      	mov	r1, r6
 8006a78:	4628      	mov	r0, r5
 8006a7a:	47b8      	blx	r7
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	f43f ae52 	beq.w	8006726 <_printf_float+0xc2>
 8006a82:	f108 0801 	add.w	r8, r8, #1
 8006a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	4543      	cmp	r3, r8
 8006a8c:	dcf1      	bgt.n	8006a72 <_printf_float+0x40e>
 8006a8e:	464b      	mov	r3, r9
 8006a90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a94:	e6dc      	b.n	8006850 <_printf_float+0x1ec>
 8006a96:	f04f 0800 	mov.w	r8, #0
 8006a9a:	f104 0a1a 	add.w	sl, r4, #26
 8006a9e:	e7f2      	b.n	8006a86 <_printf_float+0x422>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	4642      	mov	r2, r8
 8006aa4:	e7df      	b.n	8006a66 <_printf_float+0x402>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	464a      	mov	r2, r9
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4628      	mov	r0, r5
 8006aae:	47b8      	blx	r7
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	f43f ae38 	beq.w	8006726 <_printf_float+0xc2>
 8006ab6:	f108 0801 	add.w	r8, r8, #1
 8006aba:	68e3      	ldr	r3, [r4, #12]
 8006abc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006abe:	1a5b      	subs	r3, r3, r1
 8006ac0:	4543      	cmp	r3, r8
 8006ac2:	dcf0      	bgt.n	8006aa6 <_printf_float+0x442>
 8006ac4:	e6fa      	b.n	80068bc <_printf_float+0x258>
 8006ac6:	f04f 0800 	mov.w	r8, #0
 8006aca:	f104 0919 	add.w	r9, r4, #25
 8006ace:	e7f4      	b.n	8006aba <_printf_float+0x456>

08006ad0 <_printf_common>:
 8006ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad4:	4616      	mov	r6, r2
 8006ad6:	4699      	mov	r9, r3
 8006ad8:	688a      	ldr	r2, [r1, #8]
 8006ada:	690b      	ldr	r3, [r1, #16]
 8006adc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	bfb8      	it	lt
 8006ae4:	4613      	movlt	r3, r2
 8006ae6:	6033      	str	r3, [r6, #0]
 8006ae8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006aec:	4607      	mov	r7, r0
 8006aee:	460c      	mov	r4, r1
 8006af0:	b10a      	cbz	r2, 8006af6 <_printf_common+0x26>
 8006af2:	3301      	adds	r3, #1
 8006af4:	6033      	str	r3, [r6, #0]
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	0699      	lsls	r1, r3, #26
 8006afa:	bf42      	ittt	mi
 8006afc:	6833      	ldrmi	r3, [r6, #0]
 8006afe:	3302      	addmi	r3, #2
 8006b00:	6033      	strmi	r3, [r6, #0]
 8006b02:	6825      	ldr	r5, [r4, #0]
 8006b04:	f015 0506 	ands.w	r5, r5, #6
 8006b08:	d106      	bne.n	8006b18 <_printf_common+0x48>
 8006b0a:	f104 0a19 	add.w	sl, r4, #25
 8006b0e:	68e3      	ldr	r3, [r4, #12]
 8006b10:	6832      	ldr	r2, [r6, #0]
 8006b12:	1a9b      	subs	r3, r3, r2
 8006b14:	42ab      	cmp	r3, r5
 8006b16:	dc26      	bgt.n	8006b66 <_printf_common+0x96>
 8006b18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b1c:	1e13      	subs	r3, r2, #0
 8006b1e:	6822      	ldr	r2, [r4, #0]
 8006b20:	bf18      	it	ne
 8006b22:	2301      	movne	r3, #1
 8006b24:	0692      	lsls	r2, r2, #26
 8006b26:	d42b      	bmi.n	8006b80 <_printf_common+0xb0>
 8006b28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	4638      	mov	r0, r7
 8006b30:	47c0      	blx	r8
 8006b32:	3001      	adds	r0, #1
 8006b34:	d01e      	beq.n	8006b74 <_printf_common+0xa4>
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	68e5      	ldr	r5, [r4, #12]
 8006b3a:	6832      	ldr	r2, [r6, #0]
 8006b3c:	f003 0306 	and.w	r3, r3, #6
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	bf08      	it	eq
 8006b44:	1aad      	subeq	r5, r5, r2
 8006b46:	68a3      	ldr	r3, [r4, #8]
 8006b48:	6922      	ldr	r2, [r4, #16]
 8006b4a:	bf0c      	ite	eq
 8006b4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b50:	2500      	movne	r5, #0
 8006b52:	4293      	cmp	r3, r2
 8006b54:	bfc4      	itt	gt
 8006b56:	1a9b      	subgt	r3, r3, r2
 8006b58:	18ed      	addgt	r5, r5, r3
 8006b5a:	2600      	movs	r6, #0
 8006b5c:	341a      	adds	r4, #26
 8006b5e:	42b5      	cmp	r5, r6
 8006b60:	d11a      	bne.n	8006b98 <_printf_common+0xc8>
 8006b62:	2000      	movs	r0, #0
 8006b64:	e008      	b.n	8006b78 <_printf_common+0xa8>
 8006b66:	2301      	movs	r3, #1
 8006b68:	4652      	mov	r2, sl
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	47c0      	blx	r8
 8006b70:	3001      	adds	r0, #1
 8006b72:	d103      	bne.n	8006b7c <_printf_common+0xac>
 8006b74:	f04f 30ff 	mov.w	r0, #4294967295
 8006b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7c:	3501      	adds	r5, #1
 8006b7e:	e7c6      	b.n	8006b0e <_printf_common+0x3e>
 8006b80:	18e1      	adds	r1, r4, r3
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	2030      	movs	r0, #48	; 0x30
 8006b86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b8a:	4422      	add	r2, r4
 8006b8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b94:	3302      	adds	r3, #2
 8006b96:	e7c7      	b.n	8006b28 <_printf_common+0x58>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	4649      	mov	r1, r9
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	47c0      	blx	r8
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	d0e6      	beq.n	8006b74 <_printf_common+0xa4>
 8006ba6:	3601      	adds	r6, #1
 8006ba8:	e7d9      	b.n	8006b5e <_printf_common+0x8e>
	...

08006bac <_printf_i>:
 8006bac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb0:	7e0f      	ldrb	r7, [r1, #24]
 8006bb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bb4:	2f78      	cmp	r7, #120	; 0x78
 8006bb6:	4691      	mov	r9, r2
 8006bb8:	4680      	mov	r8, r0
 8006bba:	460c      	mov	r4, r1
 8006bbc:	469a      	mov	sl, r3
 8006bbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bc2:	d807      	bhi.n	8006bd4 <_printf_i+0x28>
 8006bc4:	2f62      	cmp	r7, #98	; 0x62
 8006bc6:	d80a      	bhi.n	8006bde <_printf_i+0x32>
 8006bc8:	2f00      	cmp	r7, #0
 8006bca:	f000 80d8 	beq.w	8006d7e <_printf_i+0x1d2>
 8006bce:	2f58      	cmp	r7, #88	; 0x58
 8006bd0:	f000 80a3 	beq.w	8006d1a <_printf_i+0x16e>
 8006bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bdc:	e03a      	b.n	8006c54 <_printf_i+0xa8>
 8006bde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006be2:	2b15      	cmp	r3, #21
 8006be4:	d8f6      	bhi.n	8006bd4 <_printf_i+0x28>
 8006be6:	a101      	add	r1, pc, #4	; (adr r1, 8006bec <_printf_i+0x40>)
 8006be8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bec:	08006c45 	.word	0x08006c45
 8006bf0:	08006c59 	.word	0x08006c59
 8006bf4:	08006bd5 	.word	0x08006bd5
 8006bf8:	08006bd5 	.word	0x08006bd5
 8006bfc:	08006bd5 	.word	0x08006bd5
 8006c00:	08006bd5 	.word	0x08006bd5
 8006c04:	08006c59 	.word	0x08006c59
 8006c08:	08006bd5 	.word	0x08006bd5
 8006c0c:	08006bd5 	.word	0x08006bd5
 8006c10:	08006bd5 	.word	0x08006bd5
 8006c14:	08006bd5 	.word	0x08006bd5
 8006c18:	08006d65 	.word	0x08006d65
 8006c1c:	08006c89 	.word	0x08006c89
 8006c20:	08006d47 	.word	0x08006d47
 8006c24:	08006bd5 	.word	0x08006bd5
 8006c28:	08006bd5 	.word	0x08006bd5
 8006c2c:	08006d87 	.word	0x08006d87
 8006c30:	08006bd5 	.word	0x08006bd5
 8006c34:	08006c89 	.word	0x08006c89
 8006c38:	08006bd5 	.word	0x08006bd5
 8006c3c:	08006bd5 	.word	0x08006bd5
 8006c40:	08006d4f 	.word	0x08006d4f
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	1d1a      	adds	r2, r3, #4
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	602a      	str	r2, [r5, #0]
 8006c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c54:	2301      	movs	r3, #1
 8006c56:	e0a3      	b.n	8006da0 <_printf_i+0x1f4>
 8006c58:	6820      	ldr	r0, [r4, #0]
 8006c5a:	6829      	ldr	r1, [r5, #0]
 8006c5c:	0606      	lsls	r6, r0, #24
 8006c5e:	f101 0304 	add.w	r3, r1, #4
 8006c62:	d50a      	bpl.n	8006c7a <_printf_i+0xce>
 8006c64:	680e      	ldr	r6, [r1, #0]
 8006c66:	602b      	str	r3, [r5, #0]
 8006c68:	2e00      	cmp	r6, #0
 8006c6a:	da03      	bge.n	8006c74 <_printf_i+0xc8>
 8006c6c:	232d      	movs	r3, #45	; 0x2d
 8006c6e:	4276      	negs	r6, r6
 8006c70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c74:	485e      	ldr	r0, [pc, #376]	; (8006df0 <_printf_i+0x244>)
 8006c76:	230a      	movs	r3, #10
 8006c78:	e019      	b.n	8006cae <_printf_i+0x102>
 8006c7a:	680e      	ldr	r6, [r1, #0]
 8006c7c:	602b      	str	r3, [r5, #0]
 8006c7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c82:	bf18      	it	ne
 8006c84:	b236      	sxthne	r6, r6
 8006c86:	e7ef      	b.n	8006c68 <_printf_i+0xbc>
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	6820      	ldr	r0, [r4, #0]
 8006c8c:	1d19      	adds	r1, r3, #4
 8006c8e:	6029      	str	r1, [r5, #0]
 8006c90:	0601      	lsls	r1, r0, #24
 8006c92:	d501      	bpl.n	8006c98 <_printf_i+0xec>
 8006c94:	681e      	ldr	r6, [r3, #0]
 8006c96:	e002      	b.n	8006c9e <_printf_i+0xf2>
 8006c98:	0646      	lsls	r6, r0, #25
 8006c9a:	d5fb      	bpl.n	8006c94 <_printf_i+0xe8>
 8006c9c:	881e      	ldrh	r6, [r3, #0]
 8006c9e:	4854      	ldr	r0, [pc, #336]	; (8006df0 <_printf_i+0x244>)
 8006ca0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ca2:	bf0c      	ite	eq
 8006ca4:	2308      	moveq	r3, #8
 8006ca6:	230a      	movne	r3, #10
 8006ca8:	2100      	movs	r1, #0
 8006caa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cae:	6865      	ldr	r5, [r4, #4]
 8006cb0:	60a5      	str	r5, [r4, #8]
 8006cb2:	2d00      	cmp	r5, #0
 8006cb4:	bfa2      	ittt	ge
 8006cb6:	6821      	ldrge	r1, [r4, #0]
 8006cb8:	f021 0104 	bicge.w	r1, r1, #4
 8006cbc:	6021      	strge	r1, [r4, #0]
 8006cbe:	b90e      	cbnz	r6, 8006cc4 <_printf_i+0x118>
 8006cc0:	2d00      	cmp	r5, #0
 8006cc2:	d04d      	beq.n	8006d60 <_printf_i+0x1b4>
 8006cc4:	4615      	mov	r5, r2
 8006cc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cca:	fb03 6711 	mls	r7, r3, r1, r6
 8006cce:	5dc7      	ldrb	r7, [r0, r7]
 8006cd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cd4:	4637      	mov	r7, r6
 8006cd6:	42bb      	cmp	r3, r7
 8006cd8:	460e      	mov	r6, r1
 8006cda:	d9f4      	bls.n	8006cc6 <_printf_i+0x11a>
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d10b      	bne.n	8006cf8 <_printf_i+0x14c>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	07de      	lsls	r6, r3, #31
 8006ce4:	d508      	bpl.n	8006cf8 <_printf_i+0x14c>
 8006ce6:	6923      	ldr	r3, [r4, #16]
 8006ce8:	6861      	ldr	r1, [r4, #4]
 8006cea:	4299      	cmp	r1, r3
 8006cec:	bfde      	ittt	le
 8006cee:	2330      	movle	r3, #48	; 0x30
 8006cf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cf8:	1b52      	subs	r2, r2, r5
 8006cfa:	6122      	str	r2, [r4, #16]
 8006cfc:	f8cd a000 	str.w	sl, [sp]
 8006d00:	464b      	mov	r3, r9
 8006d02:	aa03      	add	r2, sp, #12
 8006d04:	4621      	mov	r1, r4
 8006d06:	4640      	mov	r0, r8
 8006d08:	f7ff fee2 	bl	8006ad0 <_printf_common>
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	d14c      	bne.n	8006daa <_printf_i+0x1fe>
 8006d10:	f04f 30ff 	mov.w	r0, #4294967295
 8006d14:	b004      	add	sp, #16
 8006d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d1a:	4835      	ldr	r0, [pc, #212]	; (8006df0 <_printf_i+0x244>)
 8006d1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d20:	6829      	ldr	r1, [r5, #0]
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d28:	6029      	str	r1, [r5, #0]
 8006d2a:	061d      	lsls	r5, r3, #24
 8006d2c:	d514      	bpl.n	8006d58 <_printf_i+0x1ac>
 8006d2e:	07df      	lsls	r7, r3, #31
 8006d30:	bf44      	itt	mi
 8006d32:	f043 0320 	orrmi.w	r3, r3, #32
 8006d36:	6023      	strmi	r3, [r4, #0]
 8006d38:	b91e      	cbnz	r6, 8006d42 <_printf_i+0x196>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	f023 0320 	bic.w	r3, r3, #32
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	2310      	movs	r3, #16
 8006d44:	e7b0      	b.n	8006ca8 <_printf_i+0xfc>
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	f043 0320 	orr.w	r3, r3, #32
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	2378      	movs	r3, #120	; 0x78
 8006d50:	4828      	ldr	r0, [pc, #160]	; (8006df4 <_printf_i+0x248>)
 8006d52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d56:	e7e3      	b.n	8006d20 <_printf_i+0x174>
 8006d58:	0659      	lsls	r1, r3, #25
 8006d5a:	bf48      	it	mi
 8006d5c:	b2b6      	uxthmi	r6, r6
 8006d5e:	e7e6      	b.n	8006d2e <_printf_i+0x182>
 8006d60:	4615      	mov	r5, r2
 8006d62:	e7bb      	b.n	8006cdc <_printf_i+0x130>
 8006d64:	682b      	ldr	r3, [r5, #0]
 8006d66:	6826      	ldr	r6, [r4, #0]
 8006d68:	6961      	ldr	r1, [r4, #20]
 8006d6a:	1d18      	adds	r0, r3, #4
 8006d6c:	6028      	str	r0, [r5, #0]
 8006d6e:	0635      	lsls	r5, r6, #24
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	d501      	bpl.n	8006d78 <_printf_i+0x1cc>
 8006d74:	6019      	str	r1, [r3, #0]
 8006d76:	e002      	b.n	8006d7e <_printf_i+0x1d2>
 8006d78:	0670      	lsls	r0, r6, #25
 8006d7a:	d5fb      	bpl.n	8006d74 <_printf_i+0x1c8>
 8006d7c:	8019      	strh	r1, [r3, #0]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	6123      	str	r3, [r4, #16]
 8006d82:	4615      	mov	r5, r2
 8006d84:	e7ba      	b.n	8006cfc <_printf_i+0x150>
 8006d86:	682b      	ldr	r3, [r5, #0]
 8006d88:	1d1a      	adds	r2, r3, #4
 8006d8a:	602a      	str	r2, [r5, #0]
 8006d8c:	681d      	ldr	r5, [r3, #0]
 8006d8e:	6862      	ldr	r2, [r4, #4]
 8006d90:	2100      	movs	r1, #0
 8006d92:	4628      	mov	r0, r5
 8006d94:	f7f9 ff74 	bl	8000c80 <memchr>
 8006d98:	b108      	cbz	r0, 8006d9e <_printf_i+0x1f2>
 8006d9a:	1b40      	subs	r0, r0, r5
 8006d9c:	6060      	str	r0, [r4, #4]
 8006d9e:	6863      	ldr	r3, [r4, #4]
 8006da0:	6123      	str	r3, [r4, #16]
 8006da2:	2300      	movs	r3, #0
 8006da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006da8:	e7a8      	b.n	8006cfc <_printf_i+0x150>
 8006daa:	6923      	ldr	r3, [r4, #16]
 8006dac:	462a      	mov	r2, r5
 8006dae:	4649      	mov	r1, r9
 8006db0:	4640      	mov	r0, r8
 8006db2:	47d0      	blx	sl
 8006db4:	3001      	adds	r0, #1
 8006db6:	d0ab      	beq.n	8006d10 <_printf_i+0x164>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	079b      	lsls	r3, r3, #30
 8006dbc:	d413      	bmi.n	8006de6 <_printf_i+0x23a>
 8006dbe:	68e0      	ldr	r0, [r4, #12]
 8006dc0:	9b03      	ldr	r3, [sp, #12]
 8006dc2:	4298      	cmp	r0, r3
 8006dc4:	bfb8      	it	lt
 8006dc6:	4618      	movlt	r0, r3
 8006dc8:	e7a4      	b.n	8006d14 <_printf_i+0x168>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	4632      	mov	r2, r6
 8006dce:	4649      	mov	r1, r9
 8006dd0:	4640      	mov	r0, r8
 8006dd2:	47d0      	blx	sl
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	d09b      	beq.n	8006d10 <_printf_i+0x164>
 8006dd8:	3501      	adds	r5, #1
 8006dda:	68e3      	ldr	r3, [r4, #12]
 8006ddc:	9903      	ldr	r1, [sp, #12]
 8006dde:	1a5b      	subs	r3, r3, r1
 8006de0:	42ab      	cmp	r3, r5
 8006de2:	dcf2      	bgt.n	8006dca <_printf_i+0x21e>
 8006de4:	e7eb      	b.n	8006dbe <_printf_i+0x212>
 8006de6:	2500      	movs	r5, #0
 8006de8:	f104 0619 	add.w	r6, r4, #25
 8006dec:	e7f5      	b.n	8006dda <_printf_i+0x22e>
 8006dee:	bf00      	nop
 8006df0:	08009076 	.word	0x08009076
 8006df4:	08009087 	.word	0x08009087

08006df8 <iprintf>:
 8006df8:	b40f      	push	{r0, r1, r2, r3}
 8006dfa:	4b0a      	ldr	r3, [pc, #40]	; (8006e24 <iprintf+0x2c>)
 8006dfc:	b513      	push	{r0, r1, r4, lr}
 8006dfe:	681c      	ldr	r4, [r3, #0]
 8006e00:	b124      	cbz	r4, 8006e0c <iprintf+0x14>
 8006e02:	69a3      	ldr	r3, [r4, #24]
 8006e04:	b913      	cbnz	r3, 8006e0c <iprintf+0x14>
 8006e06:	4620      	mov	r0, r4
 8006e08:	f000 fee0 	bl	8007bcc <__sinit>
 8006e0c:	ab05      	add	r3, sp, #20
 8006e0e:	9a04      	ldr	r2, [sp, #16]
 8006e10:	68a1      	ldr	r1, [r4, #8]
 8006e12:	9301      	str	r3, [sp, #4]
 8006e14:	4620      	mov	r0, r4
 8006e16:	f001 fc2b 	bl	8008670 <_vfiprintf_r>
 8006e1a:	b002      	add	sp, #8
 8006e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e20:	b004      	add	sp, #16
 8006e22:	4770      	bx	lr
 8006e24:	20000084 	.word	0x20000084

08006e28 <quorem>:
 8006e28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	6903      	ldr	r3, [r0, #16]
 8006e2e:	690c      	ldr	r4, [r1, #16]
 8006e30:	42a3      	cmp	r3, r4
 8006e32:	4607      	mov	r7, r0
 8006e34:	f2c0 8081 	blt.w	8006f3a <quorem+0x112>
 8006e38:	3c01      	subs	r4, #1
 8006e3a:	f101 0814 	add.w	r8, r1, #20
 8006e3e:	f100 0514 	add.w	r5, r0, #20
 8006e42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e46:	9301      	str	r3, [sp, #4]
 8006e48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e50:	3301      	adds	r3, #1
 8006e52:	429a      	cmp	r2, r3
 8006e54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006e58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e60:	d331      	bcc.n	8006ec6 <quorem+0x9e>
 8006e62:	f04f 0e00 	mov.w	lr, #0
 8006e66:	4640      	mov	r0, r8
 8006e68:	46ac      	mov	ip, r5
 8006e6a:	46f2      	mov	sl, lr
 8006e6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e70:	b293      	uxth	r3, r2
 8006e72:	fb06 e303 	mla	r3, r6, r3, lr
 8006e76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	ebaa 0303 	sub.w	r3, sl, r3
 8006e80:	f8dc a000 	ldr.w	sl, [ip]
 8006e84:	0c12      	lsrs	r2, r2, #16
 8006e86:	fa13 f38a 	uxtah	r3, r3, sl
 8006e8a:	fb06 e202 	mla	r2, r6, r2, lr
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	9b00      	ldr	r3, [sp, #0]
 8006e92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006e96:	b292      	uxth	r2, r2
 8006e98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006e9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ea0:	f8bd 3000 	ldrh.w	r3, [sp]
 8006ea4:	4581      	cmp	r9, r0
 8006ea6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006eaa:	f84c 3b04 	str.w	r3, [ip], #4
 8006eae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006eb2:	d2db      	bcs.n	8006e6c <quorem+0x44>
 8006eb4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006eb8:	b92b      	cbnz	r3, 8006ec6 <quorem+0x9e>
 8006eba:	9b01      	ldr	r3, [sp, #4]
 8006ebc:	3b04      	subs	r3, #4
 8006ebe:	429d      	cmp	r5, r3
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	d32e      	bcc.n	8006f22 <quorem+0xfa>
 8006ec4:	613c      	str	r4, [r7, #16]
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	f001 f9b0 	bl	800822c <__mcmp>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	db24      	blt.n	8006f1a <quorem+0xf2>
 8006ed0:	3601      	adds	r6, #1
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f04f 0c00 	mov.w	ip, #0
 8006ed8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006edc:	f8d0 e000 	ldr.w	lr, [r0]
 8006ee0:	b293      	uxth	r3, r2
 8006ee2:	ebac 0303 	sub.w	r3, ip, r3
 8006ee6:	0c12      	lsrs	r2, r2, #16
 8006ee8:	fa13 f38e 	uxtah	r3, r3, lr
 8006eec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ef0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006efa:	45c1      	cmp	r9, r8
 8006efc:	f840 3b04 	str.w	r3, [r0], #4
 8006f00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f04:	d2e8      	bcs.n	8006ed8 <quorem+0xb0>
 8006f06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f0e:	b922      	cbnz	r2, 8006f1a <quorem+0xf2>
 8006f10:	3b04      	subs	r3, #4
 8006f12:	429d      	cmp	r5, r3
 8006f14:	461a      	mov	r2, r3
 8006f16:	d30a      	bcc.n	8006f2e <quorem+0x106>
 8006f18:	613c      	str	r4, [r7, #16]
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	b003      	add	sp, #12
 8006f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f22:	6812      	ldr	r2, [r2, #0]
 8006f24:	3b04      	subs	r3, #4
 8006f26:	2a00      	cmp	r2, #0
 8006f28:	d1cc      	bne.n	8006ec4 <quorem+0x9c>
 8006f2a:	3c01      	subs	r4, #1
 8006f2c:	e7c7      	b.n	8006ebe <quorem+0x96>
 8006f2e:	6812      	ldr	r2, [r2, #0]
 8006f30:	3b04      	subs	r3, #4
 8006f32:	2a00      	cmp	r2, #0
 8006f34:	d1f0      	bne.n	8006f18 <quorem+0xf0>
 8006f36:	3c01      	subs	r4, #1
 8006f38:	e7eb      	b.n	8006f12 <quorem+0xea>
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	e7ee      	b.n	8006f1c <quorem+0xf4>
	...

08006f40 <_dtoa_r>:
 8006f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f44:	ed2d 8b04 	vpush	{d8-d9}
 8006f48:	ec57 6b10 	vmov	r6, r7, d0
 8006f4c:	b093      	sub	sp, #76	; 0x4c
 8006f4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006f54:	9106      	str	r1, [sp, #24]
 8006f56:	ee10 aa10 	vmov	sl, s0
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f5e:	930c      	str	r3, [sp, #48]	; 0x30
 8006f60:	46bb      	mov	fp, r7
 8006f62:	b975      	cbnz	r5, 8006f82 <_dtoa_r+0x42>
 8006f64:	2010      	movs	r0, #16
 8006f66:	f000 fed7 	bl	8007d18 <malloc>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	6260      	str	r0, [r4, #36]	; 0x24
 8006f6e:	b920      	cbnz	r0, 8006f7a <_dtoa_r+0x3a>
 8006f70:	4ba7      	ldr	r3, [pc, #668]	; (8007210 <_dtoa_r+0x2d0>)
 8006f72:	21ea      	movs	r1, #234	; 0xea
 8006f74:	48a7      	ldr	r0, [pc, #668]	; (8007214 <_dtoa_r+0x2d4>)
 8006f76:	f001 fdd1 	bl	8008b1c <__assert_func>
 8006f7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f7e:	6005      	str	r5, [r0, #0]
 8006f80:	60c5      	str	r5, [r0, #12]
 8006f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f84:	6819      	ldr	r1, [r3, #0]
 8006f86:	b151      	cbz	r1, 8006f9e <_dtoa_r+0x5e>
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	604a      	str	r2, [r1, #4]
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	4093      	lsls	r3, r2
 8006f90:	608b      	str	r3, [r1, #8]
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 ff08 	bl	8007da8 <_Bfree>
 8006f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	1e3b      	subs	r3, r7, #0
 8006fa0:	bfaa      	itet	ge
 8006fa2:	2300      	movge	r3, #0
 8006fa4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006fa8:	f8c8 3000 	strge.w	r3, [r8]
 8006fac:	4b9a      	ldr	r3, [pc, #616]	; (8007218 <_dtoa_r+0x2d8>)
 8006fae:	bfbc      	itt	lt
 8006fb0:	2201      	movlt	r2, #1
 8006fb2:	f8c8 2000 	strlt.w	r2, [r8]
 8006fb6:	ea33 030b 	bics.w	r3, r3, fp
 8006fba:	d11b      	bne.n	8006ff4 <_dtoa_r+0xb4>
 8006fbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fbe:	f242 730f 	movw	r3, #9999	; 0x270f
 8006fc2:	6013      	str	r3, [r2, #0]
 8006fc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fc8:	4333      	orrs	r3, r6
 8006fca:	f000 8592 	beq.w	8007af2 <_dtoa_r+0xbb2>
 8006fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fd0:	b963      	cbnz	r3, 8006fec <_dtoa_r+0xac>
 8006fd2:	4b92      	ldr	r3, [pc, #584]	; (800721c <_dtoa_r+0x2dc>)
 8006fd4:	e022      	b.n	800701c <_dtoa_r+0xdc>
 8006fd6:	4b92      	ldr	r3, [pc, #584]	; (8007220 <_dtoa_r+0x2e0>)
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	3308      	adds	r3, #8
 8006fdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006fde:	6013      	str	r3, [r2, #0]
 8006fe0:	9801      	ldr	r0, [sp, #4]
 8006fe2:	b013      	add	sp, #76	; 0x4c
 8006fe4:	ecbd 8b04 	vpop	{d8-d9}
 8006fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fec:	4b8b      	ldr	r3, [pc, #556]	; (800721c <_dtoa_r+0x2dc>)
 8006fee:	9301      	str	r3, [sp, #4]
 8006ff0:	3303      	adds	r3, #3
 8006ff2:	e7f3      	b.n	8006fdc <_dtoa_r+0x9c>
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	4650      	mov	r0, sl
 8006ffa:	4659      	mov	r1, fp
 8006ffc:	f7fa fab4 	bl	8001568 <__aeabi_dcmpeq>
 8007000:	ec4b ab19 	vmov	d9, sl, fp
 8007004:	4680      	mov	r8, r0
 8007006:	b158      	cbz	r0, 8007020 <_dtoa_r+0xe0>
 8007008:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800700a:	2301      	movs	r3, #1
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 856b 	beq.w	8007aec <_dtoa_r+0xbac>
 8007016:	4883      	ldr	r0, [pc, #524]	; (8007224 <_dtoa_r+0x2e4>)
 8007018:	6018      	str	r0, [r3, #0]
 800701a:	1e43      	subs	r3, r0, #1
 800701c:	9301      	str	r3, [sp, #4]
 800701e:	e7df      	b.n	8006fe0 <_dtoa_r+0xa0>
 8007020:	ec4b ab10 	vmov	d0, sl, fp
 8007024:	aa10      	add	r2, sp, #64	; 0x40
 8007026:	a911      	add	r1, sp, #68	; 0x44
 8007028:	4620      	mov	r0, r4
 800702a:	f001 f9a5 	bl	8008378 <__d2b>
 800702e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007032:	ee08 0a10 	vmov	s16, r0
 8007036:	2d00      	cmp	r5, #0
 8007038:	f000 8084 	beq.w	8007144 <_dtoa_r+0x204>
 800703c:	ee19 3a90 	vmov	r3, s19
 8007040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007044:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007048:	4656      	mov	r6, sl
 800704a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800704e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007052:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007056:	4b74      	ldr	r3, [pc, #464]	; (8007228 <_dtoa_r+0x2e8>)
 8007058:	2200      	movs	r2, #0
 800705a:	4630      	mov	r0, r6
 800705c:	4639      	mov	r1, r7
 800705e:	f7f9 fe63 	bl	8000d28 <__aeabi_dsub>
 8007062:	a365      	add	r3, pc, #404	; (adr r3, 80071f8 <_dtoa_r+0x2b8>)
 8007064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007068:	f7fa f816 	bl	8001098 <__aeabi_dmul>
 800706c:	a364      	add	r3, pc, #400	; (adr r3, 8007200 <_dtoa_r+0x2c0>)
 800706e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007072:	f7f9 fe5b 	bl	8000d2c <__adddf3>
 8007076:	4606      	mov	r6, r0
 8007078:	4628      	mov	r0, r5
 800707a:	460f      	mov	r7, r1
 800707c:	f7f9 ffa2 	bl	8000fc4 <__aeabi_i2d>
 8007080:	a361      	add	r3, pc, #388	; (adr r3, 8007208 <_dtoa_r+0x2c8>)
 8007082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007086:	f7fa f807 	bl	8001098 <__aeabi_dmul>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	4630      	mov	r0, r6
 8007090:	4639      	mov	r1, r7
 8007092:	f7f9 fe4b 	bl	8000d2c <__adddf3>
 8007096:	4606      	mov	r6, r0
 8007098:	460f      	mov	r7, r1
 800709a:	f7fa faad 	bl	80015f8 <__aeabi_d2iz>
 800709e:	2200      	movs	r2, #0
 80070a0:	9000      	str	r0, [sp, #0]
 80070a2:	2300      	movs	r3, #0
 80070a4:	4630      	mov	r0, r6
 80070a6:	4639      	mov	r1, r7
 80070a8:	f7fa fa68 	bl	800157c <__aeabi_dcmplt>
 80070ac:	b150      	cbz	r0, 80070c4 <_dtoa_r+0x184>
 80070ae:	9800      	ldr	r0, [sp, #0]
 80070b0:	f7f9 ff88 	bl	8000fc4 <__aeabi_i2d>
 80070b4:	4632      	mov	r2, r6
 80070b6:	463b      	mov	r3, r7
 80070b8:	f7fa fa56 	bl	8001568 <__aeabi_dcmpeq>
 80070bc:	b910      	cbnz	r0, 80070c4 <_dtoa_r+0x184>
 80070be:	9b00      	ldr	r3, [sp, #0]
 80070c0:	3b01      	subs	r3, #1
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	9b00      	ldr	r3, [sp, #0]
 80070c6:	2b16      	cmp	r3, #22
 80070c8:	d85a      	bhi.n	8007180 <_dtoa_r+0x240>
 80070ca:	9a00      	ldr	r2, [sp, #0]
 80070cc:	4b57      	ldr	r3, [pc, #348]	; (800722c <_dtoa_r+0x2ec>)
 80070ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d6:	ec51 0b19 	vmov	r0, r1, d9
 80070da:	f7fa fa4f 	bl	800157c <__aeabi_dcmplt>
 80070de:	2800      	cmp	r0, #0
 80070e0:	d050      	beq.n	8007184 <_dtoa_r+0x244>
 80070e2:	9b00      	ldr	r3, [sp, #0]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	2300      	movs	r3, #0
 80070ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80070ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070ee:	1b5d      	subs	r5, r3, r5
 80070f0:	1e6b      	subs	r3, r5, #1
 80070f2:	9305      	str	r3, [sp, #20]
 80070f4:	bf45      	ittet	mi
 80070f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80070fa:	9304      	strmi	r3, [sp, #16]
 80070fc:	2300      	movpl	r3, #0
 80070fe:	2300      	movmi	r3, #0
 8007100:	bf4c      	ite	mi
 8007102:	9305      	strmi	r3, [sp, #20]
 8007104:	9304      	strpl	r3, [sp, #16]
 8007106:	9b00      	ldr	r3, [sp, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	db3d      	blt.n	8007188 <_dtoa_r+0x248>
 800710c:	9b05      	ldr	r3, [sp, #20]
 800710e:	9a00      	ldr	r2, [sp, #0]
 8007110:	920a      	str	r2, [sp, #40]	; 0x28
 8007112:	4413      	add	r3, r2
 8007114:	9305      	str	r3, [sp, #20]
 8007116:	2300      	movs	r3, #0
 8007118:	9307      	str	r3, [sp, #28]
 800711a:	9b06      	ldr	r3, [sp, #24]
 800711c:	2b09      	cmp	r3, #9
 800711e:	f200 8089 	bhi.w	8007234 <_dtoa_r+0x2f4>
 8007122:	2b05      	cmp	r3, #5
 8007124:	bfc4      	itt	gt
 8007126:	3b04      	subgt	r3, #4
 8007128:	9306      	strgt	r3, [sp, #24]
 800712a:	9b06      	ldr	r3, [sp, #24]
 800712c:	f1a3 0302 	sub.w	r3, r3, #2
 8007130:	bfcc      	ite	gt
 8007132:	2500      	movgt	r5, #0
 8007134:	2501      	movle	r5, #1
 8007136:	2b03      	cmp	r3, #3
 8007138:	f200 8087 	bhi.w	800724a <_dtoa_r+0x30a>
 800713c:	e8df f003 	tbb	[pc, r3]
 8007140:	59383a2d 	.word	0x59383a2d
 8007144:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007148:	441d      	add	r5, r3
 800714a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800714e:	2b20      	cmp	r3, #32
 8007150:	bfc1      	itttt	gt
 8007152:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007156:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800715a:	fa0b f303 	lslgt.w	r3, fp, r3
 800715e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007162:	bfda      	itte	le
 8007164:	f1c3 0320 	rsble	r3, r3, #32
 8007168:	fa06 f003 	lslle.w	r0, r6, r3
 800716c:	4318      	orrgt	r0, r3
 800716e:	f7f9 ff19 	bl	8000fa4 <__aeabi_ui2d>
 8007172:	2301      	movs	r3, #1
 8007174:	4606      	mov	r6, r0
 8007176:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800717a:	3d01      	subs	r5, #1
 800717c:	930e      	str	r3, [sp, #56]	; 0x38
 800717e:	e76a      	b.n	8007056 <_dtoa_r+0x116>
 8007180:	2301      	movs	r3, #1
 8007182:	e7b2      	b.n	80070ea <_dtoa_r+0x1aa>
 8007184:	900b      	str	r0, [sp, #44]	; 0x2c
 8007186:	e7b1      	b.n	80070ec <_dtoa_r+0x1ac>
 8007188:	9b04      	ldr	r3, [sp, #16]
 800718a:	9a00      	ldr	r2, [sp, #0]
 800718c:	1a9b      	subs	r3, r3, r2
 800718e:	9304      	str	r3, [sp, #16]
 8007190:	4253      	negs	r3, r2
 8007192:	9307      	str	r3, [sp, #28]
 8007194:	2300      	movs	r3, #0
 8007196:	930a      	str	r3, [sp, #40]	; 0x28
 8007198:	e7bf      	b.n	800711a <_dtoa_r+0x1da>
 800719a:	2300      	movs	r3, #0
 800719c:	9308      	str	r3, [sp, #32]
 800719e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	dc55      	bgt.n	8007250 <_dtoa_r+0x310>
 80071a4:	2301      	movs	r3, #1
 80071a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80071aa:	461a      	mov	r2, r3
 80071ac:	9209      	str	r2, [sp, #36]	; 0x24
 80071ae:	e00c      	b.n	80071ca <_dtoa_r+0x28a>
 80071b0:	2301      	movs	r3, #1
 80071b2:	e7f3      	b.n	800719c <_dtoa_r+0x25c>
 80071b4:	2300      	movs	r3, #0
 80071b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071b8:	9308      	str	r3, [sp, #32]
 80071ba:	9b00      	ldr	r3, [sp, #0]
 80071bc:	4413      	add	r3, r2
 80071be:	9302      	str	r3, [sp, #8]
 80071c0:	3301      	adds	r3, #1
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	9303      	str	r3, [sp, #12]
 80071c6:	bfb8      	it	lt
 80071c8:	2301      	movlt	r3, #1
 80071ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80071cc:	2200      	movs	r2, #0
 80071ce:	6042      	str	r2, [r0, #4]
 80071d0:	2204      	movs	r2, #4
 80071d2:	f102 0614 	add.w	r6, r2, #20
 80071d6:	429e      	cmp	r6, r3
 80071d8:	6841      	ldr	r1, [r0, #4]
 80071da:	d93d      	bls.n	8007258 <_dtoa_r+0x318>
 80071dc:	4620      	mov	r0, r4
 80071de:	f000 fda3 	bl	8007d28 <_Balloc>
 80071e2:	9001      	str	r0, [sp, #4]
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d13b      	bne.n	8007260 <_dtoa_r+0x320>
 80071e8:	4b11      	ldr	r3, [pc, #68]	; (8007230 <_dtoa_r+0x2f0>)
 80071ea:	4602      	mov	r2, r0
 80071ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80071f0:	e6c0      	b.n	8006f74 <_dtoa_r+0x34>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e7df      	b.n	80071b6 <_dtoa_r+0x276>
 80071f6:	bf00      	nop
 80071f8:	636f4361 	.word	0x636f4361
 80071fc:	3fd287a7 	.word	0x3fd287a7
 8007200:	8b60c8b3 	.word	0x8b60c8b3
 8007204:	3fc68a28 	.word	0x3fc68a28
 8007208:	509f79fb 	.word	0x509f79fb
 800720c:	3fd34413 	.word	0x3fd34413
 8007210:	080090a5 	.word	0x080090a5
 8007214:	080090bc 	.word	0x080090bc
 8007218:	7ff00000 	.word	0x7ff00000
 800721c:	080090a1 	.word	0x080090a1
 8007220:	08009098 	.word	0x08009098
 8007224:	08009075 	.word	0x08009075
 8007228:	3ff80000 	.word	0x3ff80000
 800722c:	08009210 	.word	0x08009210
 8007230:	08009117 	.word	0x08009117
 8007234:	2501      	movs	r5, #1
 8007236:	2300      	movs	r3, #0
 8007238:	9306      	str	r3, [sp, #24]
 800723a:	9508      	str	r5, [sp, #32]
 800723c:	f04f 33ff 	mov.w	r3, #4294967295
 8007240:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007244:	2200      	movs	r2, #0
 8007246:	2312      	movs	r3, #18
 8007248:	e7b0      	b.n	80071ac <_dtoa_r+0x26c>
 800724a:	2301      	movs	r3, #1
 800724c:	9308      	str	r3, [sp, #32]
 800724e:	e7f5      	b.n	800723c <_dtoa_r+0x2fc>
 8007250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007252:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007256:	e7b8      	b.n	80071ca <_dtoa_r+0x28a>
 8007258:	3101      	adds	r1, #1
 800725a:	6041      	str	r1, [r0, #4]
 800725c:	0052      	lsls	r2, r2, #1
 800725e:	e7b8      	b.n	80071d2 <_dtoa_r+0x292>
 8007260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007262:	9a01      	ldr	r2, [sp, #4]
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	2b0e      	cmp	r3, #14
 800726a:	f200 809d 	bhi.w	80073a8 <_dtoa_r+0x468>
 800726e:	2d00      	cmp	r5, #0
 8007270:	f000 809a 	beq.w	80073a8 <_dtoa_r+0x468>
 8007274:	9b00      	ldr	r3, [sp, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	dd32      	ble.n	80072e0 <_dtoa_r+0x3a0>
 800727a:	4ab7      	ldr	r2, [pc, #732]	; (8007558 <_dtoa_r+0x618>)
 800727c:	f003 030f 	and.w	r3, r3, #15
 8007280:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007284:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007288:	9b00      	ldr	r3, [sp, #0]
 800728a:	05d8      	lsls	r0, r3, #23
 800728c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007290:	d516      	bpl.n	80072c0 <_dtoa_r+0x380>
 8007292:	4bb2      	ldr	r3, [pc, #712]	; (800755c <_dtoa_r+0x61c>)
 8007294:	ec51 0b19 	vmov	r0, r1, d9
 8007298:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800729c:	f7fa f826 	bl	80012ec <__aeabi_ddiv>
 80072a0:	f007 070f 	and.w	r7, r7, #15
 80072a4:	4682      	mov	sl, r0
 80072a6:	468b      	mov	fp, r1
 80072a8:	2503      	movs	r5, #3
 80072aa:	4eac      	ldr	r6, [pc, #688]	; (800755c <_dtoa_r+0x61c>)
 80072ac:	b957      	cbnz	r7, 80072c4 <_dtoa_r+0x384>
 80072ae:	4642      	mov	r2, r8
 80072b0:	464b      	mov	r3, r9
 80072b2:	4650      	mov	r0, sl
 80072b4:	4659      	mov	r1, fp
 80072b6:	f7fa f819 	bl	80012ec <__aeabi_ddiv>
 80072ba:	4682      	mov	sl, r0
 80072bc:	468b      	mov	fp, r1
 80072be:	e028      	b.n	8007312 <_dtoa_r+0x3d2>
 80072c0:	2502      	movs	r5, #2
 80072c2:	e7f2      	b.n	80072aa <_dtoa_r+0x36a>
 80072c4:	07f9      	lsls	r1, r7, #31
 80072c6:	d508      	bpl.n	80072da <_dtoa_r+0x39a>
 80072c8:	4640      	mov	r0, r8
 80072ca:	4649      	mov	r1, r9
 80072cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072d0:	f7f9 fee2 	bl	8001098 <__aeabi_dmul>
 80072d4:	3501      	adds	r5, #1
 80072d6:	4680      	mov	r8, r0
 80072d8:	4689      	mov	r9, r1
 80072da:	107f      	asrs	r7, r7, #1
 80072dc:	3608      	adds	r6, #8
 80072de:	e7e5      	b.n	80072ac <_dtoa_r+0x36c>
 80072e0:	f000 809b 	beq.w	800741a <_dtoa_r+0x4da>
 80072e4:	9b00      	ldr	r3, [sp, #0]
 80072e6:	4f9d      	ldr	r7, [pc, #628]	; (800755c <_dtoa_r+0x61c>)
 80072e8:	425e      	negs	r6, r3
 80072ea:	4b9b      	ldr	r3, [pc, #620]	; (8007558 <_dtoa_r+0x618>)
 80072ec:	f006 020f 	and.w	r2, r6, #15
 80072f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	ec51 0b19 	vmov	r0, r1, d9
 80072fc:	f7f9 fecc 	bl	8001098 <__aeabi_dmul>
 8007300:	1136      	asrs	r6, r6, #4
 8007302:	4682      	mov	sl, r0
 8007304:	468b      	mov	fp, r1
 8007306:	2300      	movs	r3, #0
 8007308:	2502      	movs	r5, #2
 800730a:	2e00      	cmp	r6, #0
 800730c:	d17a      	bne.n	8007404 <_dtoa_r+0x4c4>
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1d3      	bne.n	80072ba <_dtoa_r+0x37a>
 8007312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 8082 	beq.w	800741e <_dtoa_r+0x4de>
 800731a:	4b91      	ldr	r3, [pc, #580]	; (8007560 <_dtoa_r+0x620>)
 800731c:	2200      	movs	r2, #0
 800731e:	4650      	mov	r0, sl
 8007320:	4659      	mov	r1, fp
 8007322:	f7fa f92b 	bl	800157c <__aeabi_dcmplt>
 8007326:	2800      	cmp	r0, #0
 8007328:	d079      	beq.n	800741e <_dtoa_r+0x4de>
 800732a:	9b03      	ldr	r3, [sp, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d076      	beq.n	800741e <_dtoa_r+0x4de>
 8007330:	9b02      	ldr	r3, [sp, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	dd36      	ble.n	80073a4 <_dtoa_r+0x464>
 8007336:	9b00      	ldr	r3, [sp, #0]
 8007338:	4650      	mov	r0, sl
 800733a:	4659      	mov	r1, fp
 800733c:	1e5f      	subs	r7, r3, #1
 800733e:	2200      	movs	r2, #0
 8007340:	4b88      	ldr	r3, [pc, #544]	; (8007564 <_dtoa_r+0x624>)
 8007342:	f7f9 fea9 	bl	8001098 <__aeabi_dmul>
 8007346:	9e02      	ldr	r6, [sp, #8]
 8007348:	4682      	mov	sl, r0
 800734a:	468b      	mov	fp, r1
 800734c:	3501      	adds	r5, #1
 800734e:	4628      	mov	r0, r5
 8007350:	f7f9 fe38 	bl	8000fc4 <__aeabi_i2d>
 8007354:	4652      	mov	r2, sl
 8007356:	465b      	mov	r3, fp
 8007358:	f7f9 fe9e 	bl	8001098 <__aeabi_dmul>
 800735c:	4b82      	ldr	r3, [pc, #520]	; (8007568 <_dtoa_r+0x628>)
 800735e:	2200      	movs	r2, #0
 8007360:	f7f9 fce4 	bl	8000d2c <__adddf3>
 8007364:	46d0      	mov	r8, sl
 8007366:	46d9      	mov	r9, fp
 8007368:	4682      	mov	sl, r0
 800736a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800736e:	2e00      	cmp	r6, #0
 8007370:	d158      	bne.n	8007424 <_dtoa_r+0x4e4>
 8007372:	4b7e      	ldr	r3, [pc, #504]	; (800756c <_dtoa_r+0x62c>)
 8007374:	2200      	movs	r2, #0
 8007376:	4640      	mov	r0, r8
 8007378:	4649      	mov	r1, r9
 800737a:	f7f9 fcd5 	bl	8000d28 <__aeabi_dsub>
 800737e:	4652      	mov	r2, sl
 8007380:	465b      	mov	r3, fp
 8007382:	4680      	mov	r8, r0
 8007384:	4689      	mov	r9, r1
 8007386:	f7fa f917 	bl	80015b8 <__aeabi_dcmpgt>
 800738a:	2800      	cmp	r0, #0
 800738c:	f040 8295 	bne.w	80078ba <_dtoa_r+0x97a>
 8007390:	4652      	mov	r2, sl
 8007392:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007396:	4640      	mov	r0, r8
 8007398:	4649      	mov	r1, r9
 800739a:	f7fa f8ef 	bl	800157c <__aeabi_dcmplt>
 800739e:	2800      	cmp	r0, #0
 80073a0:	f040 8289 	bne.w	80078b6 <_dtoa_r+0x976>
 80073a4:	ec5b ab19 	vmov	sl, fp, d9
 80073a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f2c0 8148 	blt.w	8007640 <_dtoa_r+0x700>
 80073b0:	9a00      	ldr	r2, [sp, #0]
 80073b2:	2a0e      	cmp	r2, #14
 80073b4:	f300 8144 	bgt.w	8007640 <_dtoa_r+0x700>
 80073b8:	4b67      	ldr	r3, [pc, #412]	; (8007558 <_dtoa_r+0x618>)
 80073ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f280 80d5 	bge.w	8007574 <_dtoa_r+0x634>
 80073ca:	9b03      	ldr	r3, [sp, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f300 80d1 	bgt.w	8007574 <_dtoa_r+0x634>
 80073d2:	f040 826f 	bne.w	80078b4 <_dtoa_r+0x974>
 80073d6:	4b65      	ldr	r3, [pc, #404]	; (800756c <_dtoa_r+0x62c>)
 80073d8:	2200      	movs	r2, #0
 80073da:	4640      	mov	r0, r8
 80073dc:	4649      	mov	r1, r9
 80073de:	f7f9 fe5b 	bl	8001098 <__aeabi_dmul>
 80073e2:	4652      	mov	r2, sl
 80073e4:	465b      	mov	r3, fp
 80073e6:	f7fa f8dd 	bl	80015a4 <__aeabi_dcmpge>
 80073ea:	9e03      	ldr	r6, [sp, #12]
 80073ec:	4637      	mov	r7, r6
 80073ee:	2800      	cmp	r0, #0
 80073f0:	f040 8245 	bne.w	800787e <_dtoa_r+0x93e>
 80073f4:	9d01      	ldr	r5, [sp, #4]
 80073f6:	2331      	movs	r3, #49	; 0x31
 80073f8:	f805 3b01 	strb.w	r3, [r5], #1
 80073fc:	9b00      	ldr	r3, [sp, #0]
 80073fe:	3301      	adds	r3, #1
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	e240      	b.n	8007886 <_dtoa_r+0x946>
 8007404:	07f2      	lsls	r2, r6, #31
 8007406:	d505      	bpl.n	8007414 <_dtoa_r+0x4d4>
 8007408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800740c:	f7f9 fe44 	bl	8001098 <__aeabi_dmul>
 8007410:	3501      	adds	r5, #1
 8007412:	2301      	movs	r3, #1
 8007414:	1076      	asrs	r6, r6, #1
 8007416:	3708      	adds	r7, #8
 8007418:	e777      	b.n	800730a <_dtoa_r+0x3ca>
 800741a:	2502      	movs	r5, #2
 800741c:	e779      	b.n	8007312 <_dtoa_r+0x3d2>
 800741e:	9f00      	ldr	r7, [sp, #0]
 8007420:	9e03      	ldr	r6, [sp, #12]
 8007422:	e794      	b.n	800734e <_dtoa_r+0x40e>
 8007424:	9901      	ldr	r1, [sp, #4]
 8007426:	4b4c      	ldr	r3, [pc, #304]	; (8007558 <_dtoa_r+0x618>)
 8007428:	4431      	add	r1, r6
 800742a:	910d      	str	r1, [sp, #52]	; 0x34
 800742c:	9908      	ldr	r1, [sp, #32]
 800742e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007432:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007436:	2900      	cmp	r1, #0
 8007438:	d043      	beq.n	80074c2 <_dtoa_r+0x582>
 800743a:	494d      	ldr	r1, [pc, #308]	; (8007570 <_dtoa_r+0x630>)
 800743c:	2000      	movs	r0, #0
 800743e:	f7f9 ff55 	bl	80012ec <__aeabi_ddiv>
 8007442:	4652      	mov	r2, sl
 8007444:	465b      	mov	r3, fp
 8007446:	f7f9 fc6f 	bl	8000d28 <__aeabi_dsub>
 800744a:	9d01      	ldr	r5, [sp, #4]
 800744c:	4682      	mov	sl, r0
 800744e:	468b      	mov	fp, r1
 8007450:	4649      	mov	r1, r9
 8007452:	4640      	mov	r0, r8
 8007454:	f7fa f8d0 	bl	80015f8 <__aeabi_d2iz>
 8007458:	4606      	mov	r6, r0
 800745a:	f7f9 fdb3 	bl	8000fc4 <__aeabi_i2d>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4640      	mov	r0, r8
 8007464:	4649      	mov	r1, r9
 8007466:	f7f9 fc5f 	bl	8000d28 <__aeabi_dsub>
 800746a:	3630      	adds	r6, #48	; 0x30
 800746c:	f805 6b01 	strb.w	r6, [r5], #1
 8007470:	4652      	mov	r2, sl
 8007472:	465b      	mov	r3, fp
 8007474:	4680      	mov	r8, r0
 8007476:	4689      	mov	r9, r1
 8007478:	f7fa f880 	bl	800157c <__aeabi_dcmplt>
 800747c:	2800      	cmp	r0, #0
 800747e:	d163      	bne.n	8007548 <_dtoa_r+0x608>
 8007480:	4642      	mov	r2, r8
 8007482:	464b      	mov	r3, r9
 8007484:	4936      	ldr	r1, [pc, #216]	; (8007560 <_dtoa_r+0x620>)
 8007486:	2000      	movs	r0, #0
 8007488:	f7f9 fc4e 	bl	8000d28 <__aeabi_dsub>
 800748c:	4652      	mov	r2, sl
 800748e:	465b      	mov	r3, fp
 8007490:	f7fa f874 	bl	800157c <__aeabi_dcmplt>
 8007494:	2800      	cmp	r0, #0
 8007496:	f040 80b5 	bne.w	8007604 <_dtoa_r+0x6c4>
 800749a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800749c:	429d      	cmp	r5, r3
 800749e:	d081      	beq.n	80073a4 <_dtoa_r+0x464>
 80074a0:	4b30      	ldr	r3, [pc, #192]	; (8007564 <_dtoa_r+0x624>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	4650      	mov	r0, sl
 80074a6:	4659      	mov	r1, fp
 80074a8:	f7f9 fdf6 	bl	8001098 <__aeabi_dmul>
 80074ac:	4b2d      	ldr	r3, [pc, #180]	; (8007564 <_dtoa_r+0x624>)
 80074ae:	4682      	mov	sl, r0
 80074b0:	468b      	mov	fp, r1
 80074b2:	4640      	mov	r0, r8
 80074b4:	4649      	mov	r1, r9
 80074b6:	2200      	movs	r2, #0
 80074b8:	f7f9 fdee 	bl	8001098 <__aeabi_dmul>
 80074bc:	4680      	mov	r8, r0
 80074be:	4689      	mov	r9, r1
 80074c0:	e7c6      	b.n	8007450 <_dtoa_r+0x510>
 80074c2:	4650      	mov	r0, sl
 80074c4:	4659      	mov	r1, fp
 80074c6:	f7f9 fde7 	bl	8001098 <__aeabi_dmul>
 80074ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074cc:	9d01      	ldr	r5, [sp, #4]
 80074ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80074d0:	4682      	mov	sl, r0
 80074d2:	468b      	mov	fp, r1
 80074d4:	4649      	mov	r1, r9
 80074d6:	4640      	mov	r0, r8
 80074d8:	f7fa f88e 	bl	80015f8 <__aeabi_d2iz>
 80074dc:	4606      	mov	r6, r0
 80074de:	f7f9 fd71 	bl	8000fc4 <__aeabi_i2d>
 80074e2:	3630      	adds	r6, #48	; 0x30
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4640      	mov	r0, r8
 80074ea:	4649      	mov	r1, r9
 80074ec:	f7f9 fc1c 	bl	8000d28 <__aeabi_dsub>
 80074f0:	f805 6b01 	strb.w	r6, [r5], #1
 80074f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074f6:	429d      	cmp	r5, r3
 80074f8:	4680      	mov	r8, r0
 80074fa:	4689      	mov	r9, r1
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	d124      	bne.n	800754c <_dtoa_r+0x60c>
 8007502:	4b1b      	ldr	r3, [pc, #108]	; (8007570 <_dtoa_r+0x630>)
 8007504:	4650      	mov	r0, sl
 8007506:	4659      	mov	r1, fp
 8007508:	f7f9 fc10 	bl	8000d2c <__adddf3>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4640      	mov	r0, r8
 8007512:	4649      	mov	r1, r9
 8007514:	f7fa f850 	bl	80015b8 <__aeabi_dcmpgt>
 8007518:	2800      	cmp	r0, #0
 800751a:	d173      	bne.n	8007604 <_dtoa_r+0x6c4>
 800751c:	4652      	mov	r2, sl
 800751e:	465b      	mov	r3, fp
 8007520:	4913      	ldr	r1, [pc, #76]	; (8007570 <_dtoa_r+0x630>)
 8007522:	2000      	movs	r0, #0
 8007524:	f7f9 fc00 	bl	8000d28 <__aeabi_dsub>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4640      	mov	r0, r8
 800752e:	4649      	mov	r1, r9
 8007530:	f7fa f824 	bl	800157c <__aeabi_dcmplt>
 8007534:	2800      	cmp	r0, #0
 8007536:	f43f af35 	beq.w	80073a4 <_dtoa_r+0x464>
 800753a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800753c:	1e6b      	subs	r3, r5, #1
 800753e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007540:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007544:	2b30      	cmp	r3, #48	; 0x30
 8007546:	d0f8      	beq.n	800753a <_dtoa_r+0x5fa>
 8007548:	9700      	str	r7, [sp, #0]
 800754a:	e049      	b.n	80075e0 <_dtoa_r+0x6a0>
 800754c:	4b05      	ldr	r3, [pc, #20]	; (8007564 <_dtoa_r+0x624>)
 800754e:	f7f9 fda3 	bl	8001098 <__aeabi_dmul>
 8007552:	4680      	mov	r8, r0
 8007554:	4689      	mov	r9, r1
 8007556:	e7bd      	b.n	80074d4 <_dtoa_r+0x594>
 8007558:	08009210 	.word	0x08009210
 800755c:	080091e8 	.word	0x080091e8
 8007560:	3ff00000 	.word	0x3ff00000
 8007564:	40240000 	.word	0x40240000
 8007568:	401c0000 	.word	0x401c0000
 800756c:	40140000 	.word	0x40140000
 8007570:	3fe00000 	.word	0x3fe00000
 8007574:	9d01      	ldr	r5, [sp, #4]
 8007576:	4656      	mov	r6, sl
 8007578:	465f      	mov	r7, fp
 800757a:	4642      	mov	r2, r8
 800757c:	464b      	mov	r3, r9
 800757e:	4630      	mov	r0, r6
 8007580:	4639      	mov	r1, r7
 8007582:	f7f9 feb3 	bl	80012ec <__aeabi_ddiv>
 8007586:	f7fa f837 	bl	80015f8 <__aeabi_d2iz>
 800758a:	4682      	mov	sl, r0
 800758c:	f7f9 fd1a 	bl	8000fc4 <__aeabi_i2d>
 8007590:	4642      	mov	r2, r8
 8007592:	464b      	mov	r3, r9
 8007594:	f7f9 fd80 	bl	8001098 <__aeabi_dmul>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	4630      	mov	r0, r6
 800759e:	4639      	mov	r1, r7
 80075a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80075a4:	f7f9 fbc0 	bl	8000d28 <__aeabi_dsub>
 80075a8:	f805 6b01 	strb.w	r6, [r5], #1
 80075ac:	9e01      	ldr	r6, [sp, #4]
 80075ae:	9f03      	ldr	r7, [sp, #12]
 80075b0:	1bae      	subs	r6, r5, r6
 80075b2:	42b7      	cmp	r7, r6
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	d135      	bne.n	8007626 <_dtoa_r+0x6e6>
 80075ba:	f7f9 fbb7 	bl	8000d2c <__adddf3>
 80075be:	4642      	mov	r2, r8
 80075c0:	464b      	mov	r3, r9
 80075c2:	4606      	mov	r6, r0
 80075c4:	460f      	mov	r7, r1
 80075c6:	f7f9 fff7 	bl	80015b8 <__aeabi_dcmpgt>
 80075ca:	b9d0      	cbnz	r0, 8007602 <_dtoa_r+0x6c2>
 80075cc:	4642      	mov	r2, r8
 80075ce:	464b      	mov	r3, r9
 80075d0:	4630      	mov	r0, r6
 80075d2:	4639      	mov	r1, r7
 80075d4:	f7f9 ffc8 	bl	8001568 <__aeabi_dcmpeq>
 80075d8:	b110      	cbz	r0, 80075e0 <_dtoa_r+0x6a0>
 80075da:	f01a 0f01 	tst.w	sl, #1
 80075de:	d110      	bne.n	8007602 <_dtoa_r+0x6c2>
 80075e0:	4620      	mov	r0, r4
 80075e2:	ee18 1a10 	vmov	r1, s16
 80075e6:	f000 fbdf 	bl	8007da8 <_Bfree>
 80075ea:	2300      	movs	r3, #0
 80075ec:	9800      	ldr	r0, [sp, #0]
 80075ee:	702b      	strb	r3, [r5, #0]
 80075f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075f2:	3001      	adds	r0, #1
 80075f4:	6018      	str	r0, [r3, #0]
 80075f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f43f acf1 	beq.w	8006fe0 <_dtoa_r+0xa0>
 80075fe:	601d      	str	r5, [r3, #0]
 8007600:	e4ee      	b.n	8006fe0 <_dtoa_r+0xa0>
 8007602:	9f00      	ldr	r7, [sp, #0]
 8007604:	462b      	mov	r3, r5
 8007606:	461d      	mov	r5, r3
 8007608:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800760c:	2a39      	cmp	r2, #57	; 0x39
 800760e:	d106      	bne.n	800761e <_dtoa_r+0x6de>
 8007610:	9a01      	ldr	r2, [sp, #4]
 8007612:	429a      	cmp	r2, r3
 8007614:	d1f7      	bne.n	8007606 <_dtoa_r+0x6c6>
 8007616:	9901      	ldr	r1, [sp, #4]
 8007618:	2230      	movs	r2, #48	; 0x30
 800761a:	3701      	adds	r7, #1
 800761c:	700a      	strb	r2, [r1, #0]
 800761e:	781a      	ldrb	r2, [r3, #0]
 8007620:	3201      	adds	r2, #1
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	e790      	b.n	8007548 <_dtoa_r+0x608>
 8007626:	4ba6      	ldr	r3, [pc, #664]	; (80078c0 <_dtoa_r+0x980>)
 8007628:	2200      	movs	r2, #0
 800762a:	f7f9 fd35 	bl	8001098 <__aeabi_dmul>
 800762e:	2200      	movs	r2, #0
 8007630:	2300      	movs	r3, #0
 8007632:	4606      	mov	r6, r0
 8007634:	460f      	mov	r7, r1
 8007636:	f7f9 ff97 	bl	8001568 <__aeabi_dcmpeq>
 800763a:	2800      	cmp	r0, #0
 800763c:	d09d      	beq.n	800757a <_dtoa_r+0x63a>
 800763e:	e7cf      	b.n	80075e0 <_dtoa_r+0x6a0>
 8007640:	9a08      	ldr	r2, [sp, #32]
 8007642:	2a00      	cmp	r2, #0
 8007644:	f000 80d7 	beq.w	80077f6 <_dtoa_r+0x8b6>
 8007648:	9a06      	ldr	r2, [sp, #24]
 800764a:	2a01      	cmp	r2, #1
 800764c:	f300 80ba 	bgt.w	80077c4 <_dtoa_r+0x884>
 8007650:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007652:	2a00      	cmp	r2, #0
 8007654:	f000 80b2 	beq.w	80077bc <_dtoa_r+0x87c>
 8007658:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800765c:	9e07      	ldr	r6, [sp, #28]
 800765e:	9d04      	ldr	r5, [sp, #16]
 8007660:	9a04      	ldr	r2, [sp, #16]
 8007662:	441a      	add	r2, r3
 8007664:	9204      	str	r2, [sp, #16]
 8007666:	9a05      	ldr	r2, [sp, #20]
 8007668:	2101      	movs	r1, #1
 800766a:	441a      	add	r2, r3
 800766c:	4620      	mov	r0, r4
 800766e:	9205      	str	r2, [sp, #20]
 8007670:	f000 fc52 	bl	8007f18 <__i2b>
 8007674:	4607      	mov	r7, r0
 8007676:	2d00      	cmp	r5, #0
 8007678:	dd0c      	ble.n	8007694 <_dtoa_r+0x754>
 800767a:	9b05      	ldr	r3, [sp, #20]
 800767c:	2b00      	cmp	r3, #0
 800767e:	dd09      	ble.n	8007694 <_dtoa_r+0x754>
 8007680:	42ab      	cmp	r3, r5
 8007682:	9a04      	ldr	r2, [sp, #16]
 8007684:	bfa8      	it	ge
 8007686:	462b      	movge	r3, r5
 8007688:	1ad2      	subs	r2, r2, r3
 800768a:	9204      	str	r2, [sp, #16]
 800768c:	9a05      	ldr	r2, [sp, #20]
 800768e:	1aed      	subs	r5, r5, r3
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	9305      	str	r3, [sp, #20]
 8007694:	9b07      	ldr	r3, [sp, #28]
 8007696:	b31b      	cbz	r3, 80076e0 <_dtoa_r+0x7a0>
 8007698:	9b08      	ldr	r3, [sp, #32]
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 80af 	beq.w	80077fe <_dtoa_r+0x8be>
 80076a0:	2e00      	cmp	r6, #0
 80076a2:	dd13      	ble.n	80076cc <_dtoa_r+0x78c>
 80076a4:	4639      	mov	r1, r7
 80076a6:	4632      	mov	r2, r6
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 fcf5 	bl	8008098 <__pow5mult>
 80076ae:	ee18 2a10 	vmov	r2, s16
 80076b2:	4601      	mov	r1, r0
 80076b4:	4607      	mov	r7, r0
 80076b6:	4620      	mov	r0, r4
 80076b8:	f000 fc44 	bl	8007f44 <__multiply>
 80076bc:	ee18 1a10 	vmov	r1, s16
 80076c0:	4680      	mov	r8, r0
 80076c2:	4620      	mov	r0, r4
 80076c4:	f000 fb70 	bl	8007da8 <_Bfree>
 80076c8:	ee08 8a10 	vmov	s16, r8
 80076cc:	9b07      	ldr	r3, [sp, #28]
 80076ce:	1b9a      	subs	r2, r3, r6
 80076d0:	d006      	beq.n	80076e0 <_dtoa_r+0x7a0>
 80076d2:	ee18 1a10 	vmov	r1, s16
 80076d6:	4620      	mov	r0, r4
 80076d8:	f000 fcde 	bl	8008098 <__pow5mult>
 80076dc:	ee08 0a10 	vmov	s16, r0
 80076e0:	2101      	movs	r1, #1
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 fc18 	bl	8007f18 <__i2b>
 80076e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	4606      	mov	r6, r0
 80076ee:	f340 8088 	ble.w	8007802 <_dtoa_r+0x8c2>
 80076f2:	461a      	mov	r2, r3
 80076f4:	4601      	mov	r1, r0
 80076f6:	4620      	mov	r0, r4
 80076f8:	f000 fcce 	bl	8008098 <__pow5mult>
 80076fc:	9b06      	ldr	r3, [sp, #24]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	4606      	mov	r6, r0
 8007702:	f340 8081 	ble.w	8007808 <_dtoa_r+0x8c8>
 8007706:	f04f 0800 	mov.w	r8, #0
 800770a:	6933      	ldr	r3, [r6, #16]
 800770c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007710:	6918      	ldr	r0, [r3, #16]
 8007712:	f000 fbb1 	bl	8007e78 <__hi0bits>
 8007716:	f1c0 0020 	rsb	r0, r0, #32
 800771a:	9b05      	ldr	r3, [sp, #20]
 800771c:	4418      	add	r0, r3
 800771e:	f010 001f 	ands.w	r0, r0, #31
 8007722:	f000 8092 	beq.w	800784a <_dtoa_r+0x90a>
 8007726:	f1c0 0320 	rsb	r3, r0, #32
 800772a:	2b04      	cmp	r3, #4
 800772c:	f340 808a 	ble.w	8007844 <_dtoa_r+0x904>
 8007730:	f1c0 001c 	rsb	r0, r0, #28
 8007734:	9b04      	ldr	r3, [sp, #16]
 8007736:	4403      	add	r3, r0
 8007738:	9304      	str	r3, [sp, #16]
 800773a:	9b05      	ldr	r3, [sp, #20]
 800773c:	4403      	add	r3, r0
 800773e:	4405      	add	r5, r0
 8007740:	9305      	str	r3, [sp, #20]
 8007742:	9b04      	ldr	r3, [sp, #16]
 8007744:	2b00      	cmp	r3, #0
 8007746:	dd07      	ble.n	8007758 <_dtoa_r+0x818>
 8007748:	ee18 1a10 	vmov	r1, s16
 800774c:	461a      	mov	r2, r3
 800774e:	4620      	mov	r0, r4
 8007750:	f000 fcfc 	bl	800814c <__lshift>
 8007754:	ee08 0a10 	vmov	s16, r0
 8007758:	9b05      	ldr	r3, [sp, #20]
 800775a:	2b00      	cmp	r3, #0
 800775c:	dd05      	ble.n	800776a <_dtoa_r+0x82a>
 800775e:	4631      	mov	r1, r6
 8007760:	461a      	mov	r2, r3
 8007762:	4620      	mov	r0, r4
 8007764:	f000 fcf2 	bl	800814c <__lshift>
 8007768:	4606      	mov	r6, r0
 800776a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800776c:	2b00      	cmp	r3, #0
 800776e:	d06e      	beq.n	800784e <_dtoa_r+0x90e>
 8007770:	ee18 0a10 	vmov	r0, s16
 8007774:	4631      	mov	r1, r6
 8007776:	f000 fd59 	bl	800822c <__mcmp>
 800777a:	2800      	cmp	r0, #0
 800777c:	da67      	bge.n	800784e <_dtoa_r+0x90e>
 800777e:	9b00      	ldr	r3, [sp, #0]
 8007780:	3b01      	subs	r3, #1
 8007782:	ee18 1a10 	vmov	r1, s16
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	220a      	movs	r2, #10
 800778a:	2300      	movs	r3, #0
 800778c:	4620      	mov	r0, r4
 800778e:	f000 fb2d 	bl	8007dec <__multadd>
 8007792:	9b08      	ldr	r3, [sp, #32]
 8007794:	ee08 0a10 	vmov	s16, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 81b1 	beq.w	8007b00 <_dtoa_r+0xbc0>
 800779e:	2300      	movs	r3, #0
 80077a0:	4639      	mov	r1, r7
 80077a2:	220a      	movs	r2, #10
 80077a4:	4620      	mov	r0, r4
 80077a6:	f000 fb21 	bl	8007dec <__multadd>
 80077aa:	9b02      	ldr	r3, [sp, #8]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	4607      	mov	r7, r0
 80077b0:	f300 808e 	bgt.w	80078d0 <_dtoa_r+0x990>
 80077b4:	9b06      	ldr	r3, [sp, #24]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	dc51      	bgt.n	800785e <_dtoa_r+0x91e>
 80077ba:	e089      	b.n	80078d0 <_dtoa_r+0x990>
 80077bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80077c2:	e74b      	b.n	800765c <_dtoa_r+0x71c>
 80077c4:	9b03      	ldr	r3, [sp, #12]
 80077c6:	1e5e      	subs	r6, r3, #1
 80077c8:	9b07      	ldr	r3, [sp, #28]
 80077ca:	42b3      	cmp	r3, r6
 80077cc:	bfbf      	itttt	lt
 80077ce:	9b07      	ldrlt	r3, [sp, #28]
 80077d0:	9607      	strlt	r6, [sp, #28]
 80077d2:	1af2      	sublt	r2, r6, r3
 80077d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80077d6:	bfb6      	itet	lt
 80077d8:	189b      	addlt	r3, r3, r2
 80077da:	1b9e      	subge	r6, r3, r6
 80077dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80077de:	9b03      	ldr	r3, [sp, #12]
 80077e0:	bfb8      	it	lt
 80077e2:	2600      	movlt	r6, #0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	bfb7      	itett	lt
 80077e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80077ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80077f0:	1a9d      	sublt	r5, r3, r2
 80077f2:	2300      	movlt	r3, #0
 80077f4:	e734      	b.n	8007660 <_dtoa_r+0x720>
 80077f6:	9e07      	ldr	r6, [sp, #28]
 80077f8:	9d04      	ldr	r5, [sp, #16]
 80077fa:	9f08      	ldr	r7, [sp, #32]
 80077fc:	e73b      	b.n	8007676 <_dtoa_r+0x736>
 80077fe:	9a07      	ldr	r2, [sp, #28]
 8007800:	e767      	b.n	80076d2 <_dtoa_r+0x792>
 8007802:	9b06      	ldr	r3, [sp, #24]
 8007804:	2b01      	cmp	r3, #1
 8007806:	dc18      	bgt.n	800783a <_dtoa_r+0x8fa>
 8007808:	f1ba 0f00 	cmp.w	sl, #0
 800780c:	d115      	bne.n	800783a <_dtoa_r+0x8fa>
 800780e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007812:	b993      	cbnz	r3, 800783a <_dtoa_r+0x8fa>
 8007814:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007818:	0d1b      	lsrs	r3, r3, #20
 800781a:	051b      	lsls	r3, r3, #20
 800781c:	b183      	cbz	r3, 8007840 <_dtoa_r+0x900>
 800781e:	9b04      	ldr	r3, [sp, #16]
 8007820:	3301      	adds	r3, #1
 8007822:	9304      	str	r3, [sp, #16]
 8007824:	9b05      	ldr	r3, [sp, #20]
 8007826:	3301      	adds	r3, #1
 8007828:	9305      	str	r3, [sp, #20]
 800782a:	f04f 0801 	mov.w	r8, #1
 800782e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007830:	2b00      	cmp	r3, #0
 8007832:	f47f af6a 	bne.w	800770a <_dtoa_r+0x7ca>
 8007836:	2001      	movs	r0, #1
 8007838:	e76f      	b.n	800771a <_dtoa_r+0x7da>
 800783a:	f04f 0800 	mov.w	r8, #0
 800783e:	e7f6      	b.n	800782e <_dtoa_r+0x8ee>
 8007840:	4698      	mov	r8, r3
 8007842:	e7f4      	b.n	800782e <_dtoa_r+0x8ee>
 8007844:	f43f af7d 	beq.w	8007742 <_dtoa_r+0x802>
 8007848:	4618      	mov	r0, r3
 800784a:	301c      	adds	r0, #28
 800784c:	e772      	b.n	8007734 <_dtoa_r+0x7f4>
 800784e:	9b03      	ldr	r3, [sp, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	dc37      	bgt.n	80078c4 <_dtoa_r+0x984>
 8007854:	9b06      	ldr	r3, [sp, #24]
 8007856:	2b02      	cmp	r3, #2
 8007858:	dd34      	ble.n	80078c4 <_dtoa_r+0x984>
 800785a:	9b03      	ldr	r3, [sp, #12]
 800785c:	9302      	str	r3, [sp, #8]
 800785e:	9b02      	ldr	r3, [sp, #8]
 8007860:	b96b      	cbnz	r3, 800787e <_dtoa_r+0x93e>
 8007862:	4631      	mov	r1, r6
 8007864:	2205      	movs	r2, #5
 8007866:	4620      	mov	r0, r4
 8007868:	f000 fac0 	bl	8007dec <__multadd>
 800786c:	4601      	mov	r1, r0
 800786e:	4606      	mov	r6, r0
 8007870:	ee18 0a10 	vmov	r0, s16
 8007874:	f000 fcda 	bl	800822c <__mcmp>
 8007878:	2800      	cmp	r0, #0
 800787a:	f73f adbb 	bgt.w	80073f4 <_dtoa_r+0x4b4>
 800787e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007880:	9d01      	ldr	r5, [sp, #4]
 8007882:	43db      	mvns	r3, r3
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	f04f 0800 	mov.w	r8, #0
 800788a:	4631      	mov	r1, r6
 800788c:	4620      	mov	r0, r4
 800788e:	f000 fa8b 	bl	8007da8 <_Bfree>
 8007892:	2f00      	cmp	r7, #0
 8007894:	f43f aea4 	beq.w	80075e0 <_dtoa_r+0x6a0>
 8007898:	f1b8 0f00 	cmp.w	r8, #0
 800789c:	d005      	beq.n	80078aa <_dtoa_r+0x96a>
 800789e:	45b8      	cmp	r8, r7
 80078a0:	d003      	beq.n	80078aa <_dtoa_r+0x96a>
 80078a2:	4641      	mov	r1, r8
 80078a4:	4620      	mov	r0, r4
 80078a6:	f000 fa7f 	bl	8007da8 <_Bfree>
 80078aa:	4639      	mov	r1, r7
 80078ac:	4620      	mov	r0, r4
 80078ae:	f000 fa7b 	bl	8007da8 <_Bfree>
 80078b2:	e695      	b.n	80075e0 <_dtoa_r+0x6a0>
 80078b4:	2600      	movs	r6, #0
 80078b6:	4637      	mov	r7, r6
 80078b8:	e7e1      	b.n	800787e <_dtoa_r+0x93e>
 80078ba:	9700      	str	r7, [sp, #0]
 80078bc:	4637      	mov	r7, r6
 80078be:	e599      	b.n	80073f4 <_dtoa_r+0x4b4>
 80078c0:	40240000 	.word	0x40240000
 80078c4:	9b08      	ldr	r3, [sp, #32]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 80ca 	beq.w	8007a60 <_dtoa_r+0xb20>
 80078cc:	9b03      	ldr	r3, [sp, #12]
 80078ce:	9302      	str	r3, [sp, #8]
 80078d0:	2d00      	cmp	r5, #0
 80078d2:	dd05      	ble.n	80078e0 <_dtoa_r+0x9a0>
 80078d4:	4639      	mov	r1, r7
 80078d6:	462a      	mov	r2, r5
 80078d8:	4620      	mov	r0, r4
 80078da:	f000 fc37 	bl	800814c <__lshift>
 80078de:	4607      	mov	r7, r0
 80078e0:	f1b8 0f00 	cmp.w	r8, #0
 80078e4:	d05b      	beq.n	800799e <_dtoa_r+0xa5e>
 80078e6:	6879      	ldr	r1, [r7, #4]
 80078e8:	4620      	mov	r0, r4
 80078ea:	f000 fa1d 	bl	8007d28 <_Balloc>
 80078ee:	4605      	mov	r5, r0
 80078f0:	b928      	cbnz	r0, 80078fe <_dtoa_r+0x9be>
 80078f2:	4b87      	ldr	r3, [pc, #540]	; (8007b10 <_dtoa_r+0xbd0>)
 80078f4:	4602      	mov	r2, r0
 80078f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80078fa:	f7ff bb3b 	b.w	8006f74 <_dtoa_r+0x34>
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	3202      	adds	r2, #2
 8007902:	0092      	lsls	r2, r2, #2
 8007904:	f107 010c 	add.w	r1, r7, #12
 8007908:	300c      	adds	r0, #12
 800790a:	f7fe fdf5 	bl	80064f8 <memcpy>
 800790e:	2201      	movs	r2, #1
 8007910:	4629      	mov	r1, r5
 8007912:	4620      	mov	r0, r4
 8007914:	f000 fc1a 	bl	800814c <__lshift>
 8007918:	9b01      	ldr	r3, [sp, #4]
 800791a:	f103 0901 	add.w	r9, r3, #1
 800791e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007922:	4413      	add	r3, r2
 8007924:	9305      	str	r3, [sp, #20]
 8007926:	f00a 0301 	and.w	r3, sl, #1
 800792a:	46b8      	mov	r8, r7
 800792c:	9304      	str	r3, [sp, #16]
 800792e:	4607      	mov	r7, r0
 8007930:	4631      	mov	r1, r6
 8007932:	ee18 0a10 	vmov	r0, s16
 8007936:	f7ff fa77 	bl	8006e28 <quorem>
 800793a:	4641      	mov	r1, r8
 800793c:	9002      	str	r0, [sp, #8]
 800793e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007942:	ee18 0a10 	vmov	r0, s16
 8007946:	f000 fc71 	bl	800822c <__mcmp>
 800794a:	463a      	mov	r2, r7
 800794c:	9003      	str	r0, [sp, #12]
 800794e:	4631      	mov	r1, r6
 8007950:	4620      	mov	r0, r4
 8007952:	f000 fc87 	bl	8008264 <__mdiff>
 8007956:	68c2      	ldr	r2, [r0, #12]
 8007958:	f109 3bff 	add.w	fp, r9, #4294967295
 800795c:	4605      	mov	r5, r0
 800795e:	bb02      	cbnz	r2, 80079a2 <_dtoa_r+0xa62>
 8007960:	4601      	mov	r1, r0
 8007962:	ee18 0a10 	vmov	r0, s16
 8007966:	f000 fc61 	bl	800822c <__mcmp>
 800796a:	4602      	mov	r2, r0
 800796c:	4629      	mov	r1, r5
 800796e:	4620      	mov	r0, r4
 8007970:	9207      	str	r2, [sp, #28]
 8007972:	f000 fa19 	bl	8007da8 <_Bfree>
 8007976:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800797a:	ea43 0102 	orr.w	r1, r3, r2
 800797e:	9b04      	ldr	r3, [sp, #16]
 8007980:	430b      	orrs	r3, r1
 8007982:	464d      	mov	r5, r9
 8007984:	d10f      	bne.n	80079a6 <_dtoa_r+0xa66>
 8007986:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800798a:	d02a      	beq.n	80079e2 <_dtoa_r+0xaa2>
 800798c:	9b03      	ldr	r3, [sp, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	dd02      	ble.n	8007998 <_dtoa_r+0xa58>
 8007992:	9b02      	ldr	r3, [sp, #8]
 8007994:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007998:	f88b a000 	strb.w	sl, [fp]
 800799c:	e775      	b.n	800788a <_dtoa_r+0x94a>
 800799e:	4638      	mov	r0, r7
 80079a0:	e7ba      	b.n	8007918 <_dtoa_r+0x9d8>
 80079a2:	2201      	movs	r2, #1
 80079a4:	e7e2      	b.n	800796c <_dtoa_r+0xa2c>
 80079a6:	9b03      	ldr	r3, [sp, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	db04      	blt.n	80079b6 <_dtoa_r+0xa76>
 80079ac:	9906      	ldr	r1, [sp, #24]
 80079ae:	430b      	orrs	r3, r1
 80079b0:	9904      	ldr	r1, [sp, #16]
 80079b2:	430b      	orrs	r3, r1
 80079b4:	d122      	bne.n	80079fc <_dtoa_r+0xabc>
 80079b6:	2a00      	cmp	r2, #0
 80079b8:	ddee      	ble.n	8007998 <_dtoa_r+0xa58>
 80079ba:	ee18 1a10 	vmov	r1, s16
 80079be:	2201      	movs	r2, #1
 80079c0:	4620      	mov	r0, r4
 80079c2:	f000 fbc3 	bl	800814c <__lshift>
 80079c6:	4631      	mov	r1, r6
 80079c8:	ee08 0a10 	vmov	s16, r0
 80079cc:	f000 fc2e 	bl	800822c <__mcmp>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	dc03      	bgt.n	80079dc <_dtoa_r+0xa9c>
 80079d4:	d1e0      	bne.n	8007998 <_dtoa_r+0xa58>
 80079d6:	f01a 0f01 	tst.w	sl, #1
 80079da:	d0dd      	beq.n	8007998 <_dtoa_r+0xa58>
 80079dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80079e0:	d1d7      	bne.n	8007992 <_dtoa_r+0xa52>
 80079e2:	2339      	movs	r3, #57	; 0x39
 80079e4:	f88b 3000 	strb.w	r3, [fp]
 80079e8:	462b      	mov	r3, r5
 80079ea:	461d      	mov	r5, r3
 80079ec:	3b01      	subs	r3, #1
 80079ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80079f2:	2a39      	cmp	r2, #57	; 0x39
 80079f4:	d071      	beq.n	8007ada <_dtoa_r+0xb9a>
 80079f6:	3201      	adds	r2, #1
 80079f8:	701a      	strb	r2, [r3, #0]
 80079fa:	e746      	b.n	800788a <_dtoa_r+0x94a>
 80079fc:	2a00      	cmp	r2, #0
 80079fe:	dd07      	ble.n	8007a10 <_dtoa_r+0xad0>
 8007a00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a04:	d0ed      	beq.n	80079e2 <_dtoa_r+0xaa2>
 8007a06:	f10a 0301 	add.w	r3, sl, #1
 8007a0a:	f88b 3000 	strb.w	r3, [fp]
 8007a0e:	e73c      	b.n	800788a <_dtoa_r+0x94a>
 8007a10:	9b05      	ldr	r3, [sp, #20]
 8007a12:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007a16:	4599      	cmp	r9, r3
 8007a18:	d047      	beq.n	8007aaa <_dtoa_r+0xb6a>
 8007a1a:	ee18 1a10 	vmov	r1, s16
 8007a1e:	2300      	movs	r3, #0
 8007a20:	220a      	movs	r2, #10
 8007a22:	4620      	mov	r0, r4
 8007a24:	f000 f9e2 	bl	8007dec <__multadd>
 8007a28:	45b8      	cmp	r8, r7
 8007a2a:	ee08 0a10 	vmov	s16, r0
 8007a2e:	f04f 0300 	mov.w	r3, #0
 8007a32:	f04f 020a 	mov.w	r2, #10
 8007a36:	4641      	mov	r1, r8
 8007a38:	4620      	mov	r0, r4
 8007a3a:	d106      	bne.n	8007a4a <_dtoa_r+0xb0a>
 8007a3c:	f000 f9d6 	bl	8007dec <__multadd>
 8007a40:	4680      	mov	r8, r0
 8007a42:	4607      	mov	r7, r0
 8007a44:	f109 0901 	add.w	r9, r9, #1
 8007a48:	e772      	b.n	8007930 <_dtoa_r+0x9f0>
 8007a4a:	f000 f9cf 	bl	8007dec <__multadd>
 8007a4e:	4639      	mov	r1, r7
 8007a50:	4680      	mov	r8, r0
 8007a52:	2300      	movs	r3, #0
 8007a54:	220a      	movs	r2, #10
 8007a56:	4620      	mov	r0, r4
 8007a58:	f000 f9c8 	bl	8007dec <__multadd>
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	e7f1      	b.n	8007a44 <_dtoa_r+0xb04>
 8007a60:	9b03      	ldr	r3, [sp, #12]
 8007a62:	9302      	str	r3, [sp, #8]
 8007a64:	9d01      	ldr	r5, [sp, #4]
 8007a66:	ee18 0a10 	vmov	r0, s16
 8007a6a:	4631      	mov	r1, r6
 8007a6c:	f7ff f9dc 	bl	8006e28 <quorem>
 8007a70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a74:	9b01      	ldr	r3, [sp, #4]
 8007a76:	f805 ab01 	strb.w	sl, [r5], #1
 8007a7a:	1aea      	subs	r2, r5, r3
 8007a7c:	9b02      	ldr	r3, [sp, #8]
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	dd09      	ble.n	8007a96 <_dtoa_r+0xb56>
 8007a82:	ee18 1a10 	vmov	r1, s16
 8007a86:	2300      	movs	r3, #0
 8007a88:	220a      	movs	r2, #10
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f000 f9ae 	bl	8007dec <__multadd>
 8007a90:	ee08 0a10 	vmov	s16, r0
 8007a94:	e7e7      	b.n	8007a66 <_dtoa_r+0xb26>
 8007a96:	9b02      	ldr	r3, [sp, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	bfc8      	it	gt
 8007a9c:	461d      	movgt	r5, r3
 8007a9e:	9b01      	ldr	r3, [sp, #4]
 8007aa0:	bfd8      	it	le
 8007aa2:	2501      	movle	r5, #1
 8007aa4:	441d      	add	r5, r3
 8007aa6:	f04f 0800 	mov.w	r8, #0
 8007aaa:	ee18 1a10 	vmov	r1, s16
 8007aae:	2201      	movs	r2, #1
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f000 fb4b 	bl	800814c <__lshift>
 8007ab6:	4631      	mov	r1, r6
 8007ab8:	ee08 0a10 	vmov	s16, r0
 8007abc:	f000 fbb6 	bl	800822c <__mcmp>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	dc91      	bgt.n	80079e8 <_dtoa_r+0xaa8>
 8007ac4:	d102      	bne.n	8007acc <_dtoa_r+0xb8c>
 8007ac6:	f01a 0f01 	tst.w	sl, #1
 8007aca:	d18d      	bne.n	80079e8 <_dtoa_r+0xaa8>
 8007acc:	462b      	mov	r3, r5
 8007ace:	461d      	mov	r5, r3
 8007ad0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ad4:	2a30      	cmp	r2, #48	; 0x30
 8007ad6:	d0fa      	beq.n	8007ace <_dtoa_r+0xb8e>
 8007ad8:	e6d7      	b.n	800788a <_dtoa_r+0x94a>
 8007ada:	9a01      	ldr	r2, [sp, #4]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d184      	bne.n	80079ea <_dtoa_r+0xaaa>
 8007ae0:	9b00      	ldr	r3, [sp, #0]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	2331      	movs	r3, #49	; 0x31
 8007ae8:	7013      	strb	r3, [r2, #0]
 8007aea:	e6ce      	b.n	800788a <_dtoa_r+0x94a>
 8007aec:	4b09      	ldr	r3, [pc, #36]	; (8007b14 <_dtoa_r+0xbd4>)
 8007aee:	f7ff ba95 	b.w	800701c <_dtoa_r+0xdc>
 8007af2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f47f aa6e 	bne.w	8006fd6 <_dtoa_r+0x96>
 8007afa:	4b07      	ldr	r3, [pc, #28]	; (8007b18 <_dtoa_r+0xbd8>)
 8007afc:	f7ff ba8e 	b.w	800701c <_dtoa_r+0xdc>
 8007b00:	9b02      	ldr	r3, [sp, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	dcae      	bgt.n	8007a64 <_dtoa_r+0xb24>
 8007b06:	9b06      	ldr	r3, [sp, #24]
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	f73f aea8 	bgt.w	800785e <_dtoa_r+0x91e>
 8007b0e:	e7a9      	b.n	8007a64 <_dtoa_r+0xb24>
 8007b10:	08009117 	.word	0x08009117
 8007b14:	08009074 	.word	0x08009074
 8007b18:	08009098 	.word	0x08009098

08007b1c <std>:
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	b510      	push	{r4, lr}
 8007b20:	4604      	mov	r4, r0
 8007b22:	e9c0 3300 	strd	r3, r3, [r0]
 8007b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b2a:	6083      	str	r3, [r0, #8]
 8007b2c:	8181      	strh	r1, [r0, #12]
 8007b2e:	6643      	str	r3, [r0, #100]	; 0x64
 8007b30:	81c2      	strh	r2, [r0, #14]
 8007b32:	6183      	str	r3, [r0, #24]
 8007b34:	4619      	mov	r1, r3
 8007b36:	2208      	movs	r2, #8
 8007b38:	305c      	adds	r0, #92	; 0x5c
 8007b3a:	f7fe fceb 	bl	8006514 <memset>
 8007b3e:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <std+0x38>)
 8007b40:	6263      	str	r3, [r4, #36]	; 0x24
 8007b42:	4b05      	ldr	r3, [pc, #20]	; (8007b58 <std+0x3c>)
 8007b44:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b46:	4b05      	ldr	r3, [pc, #20]	; (8007b5c <std+0x40>)
 8007b48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b4a:	4b05      	ldr	r3, [pc, #20]	; (8007b60 <std+0x44>)
 8007b4c:	6224      	str	r4, [r4, #32]
 8007b4e:	6323      	str	r3, [r4, #48]	; 0x30
 8007b50:	bd10      	pop	{r4, pc}
 8007b52:	bf00      	nop
 8007b54:	080088f1 	.word	0x080088f1
 8007b58:	08008913 	.word	0x08008913
 8007b5c:	0800894b 	.word	0x0800894b
 8007b60:	0800896f 	.word	0x0800896f

08007b64 <_cleanup_r>:
 8007b64:	4901      	ldr	r1, [pc, #4]	; (8007b6c <_cleanup_r+0x8>)
 8007b66:	f000 b8af 	b.w	8007cc8 <_fwalk_reent>
 8007b6a:	bf00      	nop
 8007b6c:	08008c85 	.word	0x08008c85

08007b70 <__sfmoreglue>:
 8007b70:	b570      	push	{r4, r5, r6, lr}
 8007b72:	2268      	movs	r2, #104	; 0x68
 8007b74:	1e4d      	subs	r5, r1, #1
 8007b76:	4355      	muls	r5, r2
 8007b78:	460e      	mov	r6, r1
 8007b7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b7e:	f000 fcd9 	bl	8008534 <_malloc_r>
 8007b82:	4604      	mov	r4, r0
 8007b84:	b140      	cbz	r0, 8007b98 <__sfmoreglue+0x28>
 8007b86:	2100      	movs	r1, #0
 8007b88:	e9c0 1600 	strd	r1, r6, [r0]
 8007b8c:	300c      	adds	r0, #12
 8007b8e:	60a0      	str	r0, [r4, #8]
 8007b90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b94:	f7fe fcbe 	bl	8006514 <memset>
 8007b98:	4620      	mov	r0, r4
 8007b9a:	bd70      	pop	{r4, r5, r6, pc}

08007b9c <__sfp_lock_acquire>:
 8007b9c:	4801      	ldr	r0, [pc, #4]	; (8007ba4 <__sfp_lock_acquire+0x8>)
 8007b9e:	f000 b8b8 	b.w	8007d12 <__retarget_lock_acquire_recursive>
 8007ba2:	bf00      	nop
 8007ba4:	2000058d 	.word	0x2000058d

08007ba8 <__sfp_lock_release>:
 8007ba8:	4801      	ldr	r0, [pc, #4]	; (8007bb0 <__sfp_lock_release+0x8>)
 8007baa:	f000 b8b3 	b.w	8007d14 <__retarget_lock_release_recursive>
 8007bae:	bf00      	nop
 8007bb0:	2000058d 	.word	0x2000058d

08007bb4 <__sinit_lock_acquire>:
 8007bb4:	4801      	ldr	r0, [pc, #4]	; (8007bbc <__sinit_lock_acquire+0x8>)
 8007bb6:	f000 b8ac 	b.w	8007d12 <__retarget_lock_acquire_recursive>
 8007bba:	bf00      	nop
 8007bbc:	2000058e 	.word	0x2000058e

08007bc0 <__sinit_lock_release>:
 8007bc0:	4801      	ldr	r0, [pc, #4]	; (8007bc8 <__sinit_lock_release+0x8>)
 8007bc2:	f000 b8a7 	b.w	8007d14 <__retarget_lock_release_recursive>
 8007bc6:	bf00      	nop
 8007bc8:	2000058e 	.word	0x2000058e

08007bcc <__sinit>:
 8007bcc:	b510      	push	{r4, lr}
 8007bce:	4604      	mov	r4, r0
 8007bd0:	f7ff fff0 	bl	8007bb4 <__sinit_lock_acquire>
 8007bd4:	69a3      	ldr	r3, [r4, #24]
 8007bd6:	b11b      	cbz	r3, 8007be0 <__sinit+0x14>
 8007bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bdc:	f7ff bff0 	b.w	8007bc0 <__sinit_lock_release>
 8007be0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007be4:	6523      	str	r3, [r4, #80]	; 0x50
 8007be6:	4b13      	ldr	r3, [pc, #76]	; (8007c34 <__sinit+0x68>)
 8007be8:	4a13      	ldr	r2, [pc, #76]	; (8007c38 <__sinit+0x6c>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	62a2      	str	r2, [r4, #40]	; 0x28
 8007bee:	42a3      	cmp	r3, r4
 8007bf0:	bf04      	itt	eq
 8007bf2:	2301      	moveq	r3, #1
 8007bf4:	61a3      	streq	r3, [r4, #24]
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f000 f820 	bl	8007c3c <__sfp>
 8007bfc:	6060      	str	r0, [r4, #4]
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f000 f81c 	bl	8007c3c <__sfp>
 8007c04:	60a0      	str	r0, [r4, #8]
 8007c06:	4620      	mov	r0, r4
 8007c08:	f000 f818 	bl	8007c3c <__sfp>
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	60e0      	str	r0, [r4, #12]
 8007c10:	2104      	movs	r1, #4
 8007c12:	6860      	ldr	r0, [r4, #4]
 8007c14:	f7ff ff82 	bl	8007b1c <std>
 8007c18:	68a0      	ldr	r0, [r4, #8]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	2109      	movs	r1, #9
 8007c1e:	f7ff ff7d 	bl	8007b1c <std>
 8007c22:	68e0      	ldr	r0, [r4, #12]
 8007c24:	2202      	movs	r2, #2
 8007c26:	2112      	movs	r1, #18
 8007c28:	f7ff ff78 	bl	8007b1c <std>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	61a3      	str	r3, [r4, #24]
 8007c30:	e7d2      	b.n	8007bd8 <__sinit+0xc>
 8007c32:	bf00      	nop
 8007c34:	08009060 	.word	0x08009060
 8007c38:	08007b65 	.word	0x08007b65

08007c3c <__sfp>:
 8007c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3e:	4607      	mov	r7, r0
 8007c40:	f7ff ffac 	bl	8007b9c <__sfp_lock_acquire>
 8007c44:	4b1e      	ldr	r3, [pc, #120]	; (8007cc0 <__sfp+0x84>)
 8007c46:	681e      	ldr	r6, [r3, #0]
 8007c48:	69b3      	ldr	r3, [r6, #24]
 8007c4a:	b913      	cbnz	r3, 8007c52 <__sfp+0x16>
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f7ff ffbd 	bl	8007bcc <__sinit>
 8007c52:	3648      	adds	r6, #72	; 0x48
 8007c54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	d503      	bpl.n	8007c64 <__sfp+0x28>
 8007c5c:	6833      	ldr	r3, [r6, #0]
 8007c5e:	b30b      	cbz	r3, 8007ca4 <__sfp+0x68>
 8007c60:	6836      	ldr	r6, [r6, #0]
 8007c62:	e7f7      	b.n	8007c54 <__sfp+0x18>
 8007c64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c68:	b9d5      	cbnz	r5, 8007ca0 <__sfp+0x64>
 8007c6a:	4b16      	ldr	r3, [pc, #88]	; (8007cc4 <__sfp+0x88>)
 8007c6c:	60e3      	str	r3, [r4, #12]
 8007c6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c72:	6665      	str	r5, [r4, #100]	; 0x64
 8007c74:	f000 f84c 	bl	8007d10 <__retarget_lock_init_recursive>
 8007c78:	f7ff ff96 	bl	8007ba8 <__sfp_lock_release>
 8007c7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c84:	6025      	str	r5, [r4, #0]
 8007c86:	61a5      	str	r5, [r4, #24]
 8007c88:	2208      	movs	r2, #8
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c90:	f7fe fc40 	bl	8006514 <memset>
 8007c94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ca0:	3468      	adds	r4, #104	; 0x68
 8007ca2:	e7d9      	b.n	8007c58 <__sfp+0x1c>
 8007ca4:	2104      	movs	r1, #4
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	f7ff ff62 	bl	8007b70 <__sfmoreglue>
 8007cac:	4604      	mov	r4, r0
 8007cae:	6030      	str	r0, [r6, #0]
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d1d5      	bne.n	8007c60 <__sfp+0x24>
 8007cb4:	f7ff ff78 	bl	8007ba8 <__sfp_lock_release>
 8007cb8:	230c      	movs	r3, #12
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	e7ee      	b.n	8007c9c <__sfp+0x60>
 8007cbe:	bf00      	nop
 8007cc0:	08009060 	.word	0x08009060
 8007cc4:	ffff0001 	.word	0xffff0001

08007cc8 <_fwalk_reent>:
 8007cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ccc:	4606      	mov	r6, r0
 8007cce:	4688      	mov	r8, r1
 8007cd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cd4:	2700      	movs	r7, #0
 8007cd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cda:	f1b9 0901 	subs.w	r9, r9, #1
 8007cde:	d505      	bpl.n	8007cec <_fwalk_reent+0x24>
 8007ce0:	6824      	ldr	r4, [r4, #0]
 8007ce2:	2c00      	cmp	r4, #0
 8007ce4:	d1f7      	bne.n	8007cd6 <_fwalk_reent+0xe>
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cec:	89ab      	ldrh	r3, [r5, #12]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d907      	bls.n	8007d02 <_fwalk_reent+0x3a>
 8007cf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	d003      	beq.n	8007d02 <_fwalk_reent+0x3a>
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	47c0      	blx	r8
 8007d00:	4307      	orrs	r7, r0
 8007d02:	3568      	adds	r5, #104	; 0x68
 8007d04:	e7e9      	b.n	8007cda <_fwalk_reent+0x12>
	...

08007d08 <_localeconv_r>:
 8007d08:	4800      	ldr	r0, [pc, #0]	; (8007d0c <_localeconv_r+0x4>)
 8007d0a:	4770      	bx	lr
 8007d0c:	200001d8 	.word	0x200001d8

08007d10 <__retarget_lock_init_recursive>:
 8007d10:	4770      	bx	lr

08007d12 <__retarget_lock_acquire_recursive>:
 8007d12:	4770      	bx	lr

08007d14 <__retarget_lock_release_recursive>:
 8007d14:	4770      	bx	lr
	...

08007d18 <malloc>:
 8007d18:	4b02      	ldr	r3, [pc, #8]	; (8007d24 <malloc+0xc>)
 8007d1a:	4601      	mov	r1, r0
 8007d1c:	6818      	ldr	r0, [r3, #0]
 8007d1e:	f000 bc09 	b.w	8008534 <_malloc_r>
 8007d22:	bf00      	nop
 8007d24:	20000084 	.word	0x20000084

08007d28 <_Balloc>:
 8007d28:	b570      	push	{r4, r5, r6, lr}
 8007d2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	460d      	mov	r5, r1
 8007d30:	b976      	cbnz	r6, 8007d50 <_Balloc+0x28>
 8007d32:	2010      	movs	r0, #16
 8007d34:	f7ff fff0 	bl	8007d18 <malloc>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	6260      	str	r0, [r4, #36]	; 0x24
 8007d3c:	b920      	cbnz	r0, 8007d48 <_Balloc+0x20>
 8007d3e:	4b18      	ldr	r3, [pc, #96]	; (8007da0 <_Balloc+0x78>)
 8007d40:	4818      	ldr	r0, [pc, #96]	; (8007da4 <_Balloc+0x7c>)
 8007d42:	2166      	movs	r1, #102	; 0x66
 8007d44:	f000 feea 	bl	8008b1c <__assert_func>
 8007d48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d4c:	6006      	str	r6, [r0, #0]
 8007d4e:	60c6      	str	r6, [r0, #12]
 8007d50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007d52:	68f3      	ldr	r3, [r6, #12]
 8007d54:	b183      	cbz	r3, 8007d78 <_Balloc+0x50>
 8007d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d5e:	b9b8      	cbnz	r0, 8007d90 <_Balloc+0x68>
 8007d60:	2101      	movs	r1, #1
 8007d62:	fa01 f605 	lsl.w	r6, r1, r5
 8007d66:	1d72      	adds	r2, r6, #5
 8007d68:	0092      	lsls	r2, r2, #2
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f000 fb60 	bl	8008430 <_calloc_r>
 8007d70:	b160      	cbz	r0, 8007d8c <_Balloc+0x64>
 8007d72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d76:	e00e      	b.n	8007d96 <_Balloc+0x6e>
 8007d78:	2221      	movs	r2, #33	; 0x21
 8007d7a:	2104      	movs	r1, #4
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f000 fb57 	bl	8008430 <_calloc_r>
 8007d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d84:	60f0      	str	r0, [r6, #12]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1e4      	bne.n	8007d56 <_Balloc+0x2e>
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	bd70      	pop	{r4, r5, r6, pc}
 8007d90:	6802      	ldr	r2, [r0, #0]
 8007d92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d96:	2300      	movs	r3, #0
 8007d98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d9c:	e7f7      	b.n	8007d8e <_Balloc+0x66>
 8007d9e:	bf00      	nop
 8007da0:	080090a5 	.word	0x080090a5
 8007da4:	08009188 	.word	0x08009188

08007da8 <_Bfree>:
 8007da8:	b570      	push	{r4, r5, r6, lr}
 8007daa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007dac:	4605      	mov	r5, r0
 8007dae:	460c      	mov	r4, r1
 8007db0:	b976      	cbnz	r6, 8007dd0 <_Bfree+0x28>
 8007db2:	2010      	movs	r0, #16
 8007db4:	f7ff ffb0 	bl	8007d18 <malloc>
 8007db8:	4602      	mov	r2, r0
 8007dba:	6268      	str	r0, [r5, #36]	; 0x24
 8007dbc:	b920      	cbnz	r0, 8007dc8 <_Bfree+0x20>
 8007dbe:	4b09      	ldr	r3, [pc, #36]	; (8007de4 <_Bfree+0x3c>)
 8007dc0:	4809      	ldr	r0, [pc, #36]	; (8007de8 <_Bfree+0x40>)
 8007dc2:	218a      	movs	r1, #138	; 0x8a
 8007dc4:	f000 feaa 	bl	8008b1c <__assert_func>
 8007dc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007dcc:	6006      	str	r6, [r0, #0]
 8007dce:	60c6      	str	r6, [r0, #12]
 8007dd0:	b13c      	cbz	r4, 8007de2 <_Bfree+0x3a>
 8007dd2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007dd4:	6862      	ldr	r2, [r4, #4]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ddc:	6021      	str	r1, [r4, #0]
 8007dde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007de2:	bd70      	pop	{r4, r5, r6, pc}
 8007de4:	080090a5 	.word	0x080090a5
 8007de8:	08009188 	.word	0x08009188

08007dec <__multadd>:
 8007dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df0:	690d      	ldr	r5, [r1, #16]
 8007df2:	4607      	mov	r7, r0
 8007df4:	460c      	mov	r4, r1
 8007df6:	461e      	mov	r6, r3
 8007df8:	f101 0c14 	add.w	ip, r1, #20
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	f8dc 3000 	ldr.w	r3, [ip]
 8007e02:	b299      	uxth	r1, r3
 8007e04:	fb02 6101 	mla	r1, r2, r1, r6
 8007e08:	0c1e      	lsrs	r6, r3, #16
 8007e0a:	0c0b      	lsrs	r3, r1, #16
 8007e0c:	fb02 3306 	mla	r3, r2, r6, r3
 8007e10:	b289      	uxth	r1, r1
 8007e12:	3001      	adds	r0, #1
 8007e14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e18:	4285      	cmp	r5, r0
 8007e1a:	f84c 1b04 	str.w	r1, [ip], #4
 8007e1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e22:	dcec      	bgt.n	8007dfe <__multadd+0x12>
 8007e24:	b30e      	cbz	r6, 8007e6a <__multadd+0x7e>
 8007e26:	68a3      	ldr	r3, [r4, #8]
 8007e28:	42ab      	cmp	r3, r5
 8007e2a:	dc19      	bgt.n	8007e60 <__multadd+0x74>
 8007e2c:	6861      	ldr	r1, [r4, #4]
 8007e2e:	4638      	mov	r0, r7
 8007e30:	3101      	adds	r1, #1
 8007e32:	f7ff ff79 	bl	8007d28 <_Balloc>
 8007e36:	4680      	mov	r8, r0
 8007e38:	b928      	cbnz	r0, 8007e46 <__multadd+0x5a>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	4b0c      	ldr	r3, [pc, #48]	; (8007e70 <__multadd+0x84>)
 8007e3e:	480d      	ldr	r0, [pc, #52]	; (8007e74 <__multadd+0x88>)
 8007e40:	21b5      	movs	r1, #181	; 0xb5
 8007e42:	f000 fe6b 	bl	8008b1c <__assert_func>
 8007e46:	6922      	ldr	r2, [r4, #16]
 8007e48:	3202      	adds	r2, #2
 8007e4a:	f104 010c 	add.w	r1, r4, #12
 8007e4e:	0092      	lsls	r2, r2, #2
 8007e50:	300c      	adds	r0, #12
 8007e52:	f7fe fb51 	bl	80064f8 <memcpy>
 8007e56:	4621      	mov	r1, r4
 8007e58:	4638      	mov	r0, r7
 8007e5a:	f7ff ffa5 	bl	8007da8 <_Bfree>
 8007e5e:	4644      	mov	r4, r8
 8007e60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e64:	3501      	adds	r5, #1
 8007e66:	615e      	str	r6, [r3, #20]
 8007e68:	6125      	str	r5, [r4, #16]
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e70:	08009117 	.word	0x08009117
 8007e74:	08009188 	.word	0x08009188

08007e78 <__hi0bits>:
 8007e78:	0c03      	lsrs	r3, r0, #16
 8007e7a:	041b      	lsls	r3, r3, #16
 8007e7c:	b9d3      	cbnz	r3, 8007eb4 <__hi0bits+0x3c>
 8007e7e:	0400      	lsls	r0, r0, #16
 8007e80:	2310      	movs	r3, #16
 8007e82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007e86:	bf04      	itt	eq
 8007e88:	0200      	lsleq	r0, r0, #8
 8007e8a:	3308      	addeq	r3, #8
 8007e8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007e90:	bf04      	itt	eq
 8007e92:	0100      	lsleq	r0, r0, #4
 8007e94:	3304      	addeq	r3, #4
 8007e96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007e9a:	bf04      	itt	eq
 8007e9c:	0080      	lsleq	r0, r0, #2
 8007e9e:	3302      	addeq	r3, #2
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	db05      	blt.n	8007eb0 <__hi0bits+0x38>
 8007ea4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ea8:	f103 0301 	add.w	r3, r3, #1
 8007eac:	bf08      	it	eq
 8007eae:	2320      	moveq	r3, #32
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	4770      	bx	lr
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	e7e4      	b.n	8007e82 <__hi0bits+0xa>

08007eb8 <__lo0bits>:
 8007eb8:	6803      	ldr	r3, [r0, #0]
 8007eba:	f013 0207 	ands.w	r2, r3, #7
 8007ebe:	4601      	mov	r1, r0
 8007ec0:	d00b      	beq.n	8007eda <__lo0bits+0x22>
 8007ec2:	07da      	lsls	r2, r3, #31
 8007ec4:	d423      	bmi.n	8007f0e <__lo0bits+0x56>
 8007ec6:	0798      	lsls	r0, r3, #30
 8007ec8:	bf49      	itett	mi
 8007eca:	085b      	lsrmi	r3, r3, #1
 8007ecc:	089b      	lsrpl	r3, r3, #2
 8007ece:	2001      	movmi	r0, #1
 8007ed0:	600b      	strmi	r3, [r1, #0]
 8007ed2:	bf5c      	itt	pl
 8007ed4:	600b      	strpl	r3, [r1, #0]
 8007ed6:	2002      	movpl	r0, #2
 8007ed8:	4770      	bx	lr
 8007eda:	b298      	uxth	r0, r3
 8007edc:	b9a8      	cbnz	r0, 8007f0a <__lo0bits+0x52>
 8007ede:	0c1b      	lsrs	r3, r3, #16
 8007ee0:	2010      	movs	r0, #16
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	b90a      	cbnz	r2, 8007eea <__lo0bits+0x32>
 8007ee6:	3008      	adds	r0, #8
 8007ee8:	0a1b      	lsrs	r3, r3, #8
 8007eea:	071a      	lsls	r2, r3, #28
 8007eec:	bf04      	itt	eq
 8007eee:	091b      	lsreq	r3, r3, #4
 8007ef0:	3004      	addeq	r0, #4
 8007ef2:	079a      	lsls	r2, r3, #30
 8007ef4:	bf04      	itt	eq
 8007ef6:	089b      	lsreq	r3, r3, #2
 8007ef8:	3002      	addeq	r0, #2
 8007efa:	07da      	lsls	r2, r3, #31
 8007efc:	d403      	bmi.n	8007f06 <__lo0bits+0x4e>
 8007efe:	085b      	lsrs	r3, r3, #1
 8007f00:	f100 0001 	add.w	r0, r0, #1
 8007f04:	d005      	beq.n	8007f12 <__lo0bits+0x5a>
 8007f06:	600b      	str	r3, [r1, #0]
 8007f08:	4770      	bx	lr
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	e7e9      	b.n	8007ee2 <__lo0bits+0x2a>
 8007f0e:	2000      	movs	r0, #0
 8007f10:	4770      	bx	lr
 8007f12:	2020      	movs	r0, #32
 8007f14:	4770      	bx	lr
	...

08007f18 <__i2b>:
 8007f18:	b510      	push	{r4, lr}
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	f7ff ff03 	bl	8007d28 <_Balloc>
 8007f22:	4602      	mov	r2, r0
 8007f24:	b928      	cbnz	r0, 8007f32 <__i2b+0x1a>
 8007f26:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <__i2b+0x24>)
 8007f28:	4805      	ldr	r0, [pc, #20]	; (8007f40 <__i2b+0x28>)
 8007f2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007f2e:	f000 fdf5 	bl	8008b1c <__assert_func>
 8007f32:	2301      	movs	r3, #1
 8007f34:	6144      	str	r4, [r0, #20]
 8007f36:	6103      	str	r3, [r0, #16]
 8007f38:	bd10      	pop	{r4, pc}
 8007f3a:	bf00      	nop
 8007f3c:	08009117 	.word	0x08009117
 8007f40:	08009188 	.word	0x08009188

08007f44 <__multiply>:
 8007f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f48:	4691      	mov	r9, r2
 8007f4a:	690a      	ldr	r2, [r1, #16]
 8007f4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	bfb8      	it	lt
 8007f54:	460b      	movlt	r3, r1
 8007f56:	460c      	mov	r4, r1
 8007f58:	bfbc      	itt	lt
 8007f5a:	464c      	movlt	r4, r9
 8007f5c:	4699      	movlt	r9, r3
 8007f5e:	6927      	ldr	r7, [r4, #16]
 8007f60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f64:	68a3      	ldr	r3, [r4, #8]
 8007f66:	6861      	ldr	r1, [r4, #4]
 8007f68:	eb07 060a 	add.w	r6, r7, sl
 8007f6c:	42b3      	cmp	r3, r6
 8007f6e:	b085      	sub	sp, #20
 8007f70:	bfb8      	it	lt
 8007f72:	3101      	addlt	r1, #1
 8007f74:	f7ff fed8 	bl	8007d28 <_Balloc>
 8007f78:	b930      	cbnz	r0, 8007f88 <__multiply+0x44>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	4b44      	ldr	r3, [pc, #272]	; (8008090 <__multiply+0x14c>)
 8007f7e:	4845      	ldr	r0, [pc, #276]	; (8008094 <__multiply+0x150>)
 8007f80:	f240 115d 	movw	r1, #349	; 0x15d
 8007f84:	f000 fdca 	bl	8008b1c <__assert_func>
 8007f88:	f100 0514 	add.w	r5, r0, #20
 8007f8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f90:	462b      	mov	r3, r5
 8007f92:	2200      	movs	r2, #0
 8007f94:	4543      	cmp	r3, r8
 8007f96:	d321      	bcc.n	8007fdc <__multiply+0x98>
 8007f98:	f104 0314 	add.w	r3, r4, #20
 8007f9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007fa0:	f109 0314 	add.w	r3, r9, #20
 8007fa4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007fa8:	9202      	str	r2, [sp, #8]
 8007faa:	1b3a      	subs	r2, r7, r4
 8007fac:	3a15      	subs	r2, #21
 8007fae:	f022 0203 	bic.w	r2, r2, #3
 8007fb2:	3204      	adds	r2, #4
 8007fb4:	f104 0115 	add.w	r1, r4, #21
 8007fb8:	428f      	cmp	r7, r1
 8007fba:	bf38      	it	cc
 8007fbc:	2204      	movcc	r2, #4
 8007fbe:	9201      	str	r2, [sp, #4]
 8007fc0:	9a02      	ldr	r2, [sp, #8]
 8007fc2:	9303      	str	r3, [sp, #12]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d80c      	bhi.n	8007fe2 <__multiply+0x9e>
 8007fc8:	2e00      	cmp	r6, #0
 8007fca:	dd03      	ble.n	8007fd4 <__multiply+0x90>
 8007fcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d05a      	beq.n	800808a <__multiply+0x146>
 8007fd4:	6106      	str	r6, [r0, #16]
 8007fd6:	b005      	add	sp, #20
 8007fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fdc:	f843 2b04 	str.w	r2, [r3], #4
 8007fe0:	e7d8      	b.n	8007f94 <__multiply+0x50>
 8007fe2:	f8b3 a000 	ldrh.w	sl, [r3]
 8007fe6:	f1ba 0f00 	cmp.w	sl, #0
 8007fea:	d024      	beq.n	8008036 <__multiply+0xf2>
 8007fec:	f104 0e14 	add.w	lr, r4, #20
 8007ff0:	46a9      	mov	r9, r5
 8007ff2:	f04f 0c00 	mov.w	ip, #0
 8007ff6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ffa:	f8d9 1000 	ldr.w	r1, [r9]
 8007ffe:	fa1f fb82 	uxth.w	fp, r2
 8008002:	b289      	uxth	r1, r1
 8008004:	fb0a 110b 	mla	r1, sl, fp, r1
 8008008:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800800c:	f8d9 2000 	ldr.w	r2, [r9]
 8008010:	4461      	add	r1, ip
 8008012:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008016:	fb0a c20b 	mla	r2, sl, fp, ip
 800801a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800801e:	b289      	uxth	r1, r1
 8008020:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008024:	4577      	cmp	r7, lr
 8008026:	f849 1b04 	str.w	r1, [r9], #4
 800802a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800802e:	d8e2      	bhi.n	8007ff6 <__multiply+0xb2>
 8008030:	9a01      	ldr	r2, [sp, #4]
 8008032:	f845 c002 	str.w	ip, [r5, r2]
 8008036:	9a03      	ldr	r2, [sp, #12]
 8008038:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800803c:	3304      	adds	r3, #4
 800803e:	f1b9 0f00 	cmp.w	r9, #0
 8008042:	d020      	beq.n	8008086 <__multiply+0x142>
 8008044:	6829      	ldr	r1, [r5, #0]
 8008046:	f104 0c14 	add.w	ip, r4, #20
 800804a:	46ae      	mov	lr, r5
 800804c:	f04f 0a00 	mov.w	sl, #0
 8008050:	f8bc b000 	ldrh.w	fp, [ip]
 8008054:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008058:	fb09 220b 	mla	r2, r9, fp, r2
 800805c:	4492      	add	sl, r2
 800805e:	b289      	uxth	r1, r1
 8008060:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008064:	f84e 1b04 	str.w	r1, [lr], #4
 8008068:	f85c 2b04 	ldr.w	r2, [ip], #4
 800806c:	f8be 1000 	ldrh.w	r1, [lr]
 8008070:	0c12      	lsrs	r2, r2, #16
 8008072:	fb09 1102 	mla	r1, r9, r2, r1
 8008076:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800807a:	4567      	cmp	r7, ip
 800807c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008080:	d8e6      	bhi.n	8008050 <__multiply+0x10c>
 8008082:	9a01      	ldr	r2, [sp, #4]
 8008084:	50a9      	str	r1, [r5, r2]
 8008086:	3504      	adds	r5, #4
 8008088:	e79a      	b.n	8007fc0 <__multiply+0x7c>
 800808a:	3e01      	subs	r6, #1
 800808c:	e79c      	b.n	8007fc8 <__multiply+0x84>
 800808e:	bf00      	nop
 8008090:	08009117 	.word	0x08009117
 8008094:	08009188 	.word	0x08009188

08008098 <__pow5mult>:
 8008098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800809c:	4615      	mov	r5, r2
 800809e:	f012 0203 	ands.w	r2, r2, #3
 80080a2:	4606      	mov	r6, r0
 80080a4:	460f      	mov	r7, r1
 80080a6:	d007      	beq.n	80080b8 <__pow5mult+0x20>
 80080a8:	4c25      	ldr	r4, [pc, #148]	; (8008140 <__pow5mult+0xa8>)
 80080aa:	3a01      	subs	r2, #1
 80080ac:	2300      	movs	r3, #0
 80080ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080b2:	f7ff fe9b 	bl	8007dec <__multadd>
 80080b6:	4607      	mov	r7, r0
 80080b8:	10ad      	asrs	r5, r5, #2
 80080ba:	d03d      	beq.n	8008138 <__pow5mult+0xa0>
 80080bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80080be:	b97c      	cbnz	r4, 80080e0 <__pow5mult+0x48>
 80080c0:	2010      	movs	r0, #16
 80080c2:	f7ff fe29 	bl	8007d18 <malloc>
 80080c6:	4602      	mov	r2, r0
 80080c8:	6270      	str	r0, [r6, #36]	; 0x24
 80080ca:	b928      	cbnz	r0, 80080d8 <__pow5mult+0x40>
 80080cc:	4b1d      	ldr	r3, [pc, #116]	; (8008144 <__pow5mult+0xac>)
 80080ce:	481e      	ldr	r0, [pc, #120]	; (8008148 <__pow5mult+0xb0>)
 80080d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80080d4:	f000 fd22 	bl	8008b1c <__assert_func>
 80080d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080dc:	6004      	str	r4, [r0, #0]
 80080de:	60c4      	str	r4, [r0, #12]
 80080e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80080e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080e8:	b94c      	cbnz	r4, 80080fe <__pow5mult+0x66>
 80080ea:	f240 2171 	movw	r1, #625	; 0x271
 80080ee:	4630      	mov	r0, r6
 80080f0:	f7ff ff12 	bl	8007f18 <__i2b>
 80080f4:	2300      	movs	r3, #0
 80080f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80080fa:	4604      	mov	r4, r0
 80080fc:	6003      	str	r3, [r0, #0]
 80080fe:	f04f 0900 	mov.w	r9, #0
 8008102:	07eb      	lsls	r3, r5, #31
 8008104:	d50a      	bpl.n	800811c <__pow5mult+0x84>
 8008106:	4639      	mov	r1, r7
 8008108:	4622      	mov	r2, r4
 800810a:	4630      	mov	r0, r6
 800810c:	f7ff ff1a 	bl	8007f44 <__multiply>
 8008110:	4639      	mov	r1, r7
 8008112:	4680      	mov	r8, r0
 8008114:	4630      	mov	r0, r6
 8008116:	f7ff fe47 	bl	8007da8 <_Bfree>
 800811a:	4647      	mov	r7, r8
 800811c:	106d      	asrs	r5, r5, #1
 800811e:	d00b      	beq.n	8008138 <__pow5mult+0xa0>
 8008120:	6820      	ldr	r0, [r4, #0]
 8008122:	b938      	cbnz	r0, 8008134 <__pow5mult+0x9c>
 8008124:	4622      	mov	r2, r4
 8008126:	4621      	mov	r1, r4
 8008128:	4630      	mov	r0, r6
 800812a:	f7ff ff0b 	bl	8007f44 <__multiply>
 800812e:	6020      	str	r0, [r4, #0]
 8008130:	f8c0 9000 	str.w	r9, [r0]
 8008134:	4604      	mov	r4, r0
 8008136:	e7e4      	b.n	8008102 <__pow5mult+0x6a>
 8008138:	4638      	mov	r0, r7
 800813a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800813e:	bf00      	nop
 8008140:	080092d8 	.word	0x080092d8
 8008144:	080090a5 	.word	0x080090a5
 8008148:	08009188 	.word	0x08009188

0800814c <__lshift>:
 800814c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008150:	460c      	mov	r4, r1
 8008152:	6849      	ldr	r1, [r1, #4]
 8008154:	6923      	ldr	r3, [r4, #16]
 8008156:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800815a:	68a3      	ldr	r3, [r4, #8]
 800815c:	4607      	mov	r7, r0
 800815e:	4691      	mov	r9, r2
 8008160:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008164:	f108 0601 	add.w	r6, r8, #1
 8008168:	42b3      	cmp	r3, r6
 800816a:	db0b      	blt.n	8008184 <__lshift+0x38>
 800816c:	4638      	mov	r0, r7
 800816e:	f7ff fddb 	bl	8007d28 <_Balloc>
 8008172:	4605      	mov	r5, r0
 8008174:	b948      	cbnz	r0, 800818a <__lshift+0x3e>
 8008176:	4602      	mov	r2, r0
 8008178:	4b2a      	ldr	r3, [pc, #168]	; (8008224 <__lshift+0xd8>)
 800817a:	482b      	ldr	r0, [pc, #172]	; (8008228 <__lshift+0xdc>)
 800817c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008180:	f000 fccc 	bl	8008b1c <__assert_func>
 8008184:	3101      	adds	r1, #1
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	e7ee      	b.n	8008168 <__lshift+0x1c>
 800818a:	2300      	movs	r3, #0
 800818c:	f100 0114 	add.w	r1, r0, #20
 8008190:	f100 0210 	add.w	r2, r0, #16
 8008194:	4618      	mov	r0, r3
 8008196:	4553      	cmp	r3, sl
 8008198:	db37      	blt.n	800820a <__lshift+0xbe>
 800819a:	6920      	ldr	r0, [r4, #16]
 800819c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081a0:	f104 0314 	add.w	r3, r4, #20
 80081a4:	f019 091f 	ands.w	r9, r9, #31
 80081a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80081b0:	d02f      	beq.n	8008212 <__lshift+0xc6>
 80081b2:	f1c9 0e20 	rsb	lr, r9, #32
 80081b6:	468a      	mov	sl, r1
 80081b8:	f04f 0c00 	mov.w	ip, #0
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	fa02 f209 	lsl.w	r2, r2, r9
 80081c2:	ea42 020c 	orr.w	r2, r2, ip
 80081c6:	f84a 2b04 	str.w	r2, [sl], #4
 80081ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ce:	4298      	cmp	r0, r3
 80081d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80081d4:	d8f2      	bhi.n	80081bc <__lshift+0x70>
 80081d6:	1b03      	subs	r3, r0, r4
 80081d8:	3b15      	subs	r3, #21
 80081da:	f023 0303 	bic.w	r3, r3, #3
 80081de:	3304      	adds	r3, #4
 80081e0:	f104 0215 	add.w	r2, r4, #21
 80081e4:	4290      	cmp	r0, r2
 80081e6:	bf38      	it	cc
 80081e8:	2304      	movcc	r3, #4
 80081ea:	f841 c003 	str.w	ip, [r1, r3]
 80081ee:	f1bc 0f00 	cmp.w	ip, #0
 80081f2:	d001      	beq.n	80081f8 <__lshift+0xac>
 80081f4:	f108 0602 	add.w	r6, r8, #2
 80081f8:	3e01      	subs	r6, #1
 80081fa:	4638      	mov	r0, r7
 80081fc:	612e      	str	r6, [r5, #16]
 80081fe:	4621      	mov	r1, r4
 8008200:	f7ff fdd2 	bl	8007da8 <_Bfree>
 8008204:	4628      	mov	r0, r5
 8008206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800820a:	f842 0f04 	str.w	r0, [r2, #4]!
 800820e:	3301      	adds	r3, #1
 8008210:	e7c1      	b.n	8008196 <__lshift+0x4a>
 8008212:	3904      	subs	r1, #4
 8008214:	f853 2b04 	ldr.w	r2, [r3], #4
 8008218:	f841 2f04 	str.w	r2, [r1, #4]!
 800821c:	4298      	cmp	r0, r3
 800821e:	d8f9      	bhi.n	8008214 <__lshift+0xc8>
 8008220:	e7ea      	b.n	80081f8 <__lshift+0xac>
 8008222:	bf00      	nop
 8008224:	08009117 	.word	0x08009117
 8008228:	08009188 	.word	0x08009188

0800822c <__mcmp>:
 800822c:	b530      	push	{r4, r5, lr}
 800822e:	6902      	ldr	r2, [r0, #16]
 8008230:	690c      	ldr	r4, [r1, #16]
 8008232:	1b12      	subs	r2, r2, r4
 8008234:	d10e      	bne.n	8008254 <__mcmp+0x28>
 8008236:	f100 0314 	add.w	r3, r0, #20
 800823a:	3114      	adds	r1, #20
 800823c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008240:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008244:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008248:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800824c:	42a5      	cmp	r5, r4
 800824e:	d003      	beq.n	8008258 <__mcmp+0x2c>
 8008250:	d305      	bcc.n	800825e <__mcmp+0x32>
 8008252:	2201      	movs	r2, #1
 8008254:	4610      	mov	r0, r2
 8008256:	bd30      	pop	{r4, r5, pc}
 8008258:	4283      	cmp	r3, r0
 800825a:	d3f3      	bcc.n	8008244 <__mcmp+0x18>
 800825c:	e7fa      	b.n	8008254 <__mcmp+0x28>
 800825e:	f04f 32ff 	mov.w	r2, #4294967295
 8008262:	e7f7      	b.n	8008254 <__mcmp+0x28>

08008264 <__mdiff>:
 8008264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008268:	460c      	mov	r4, r1
 800826a:	4606      	mov	r6, r0
 800826c:	4611      	mov	r1, r2
 800826e:	4620      	mov	r0, r4
 8008270:	4690      	mov	r8, r2
 8008272:	f7ff ffdb 	bl	800822c <__mcmp>
 8008276:	1e05      	subs	r5, r0, #0
 8008278:	d110      	bne.n	800829c <__mdiff+0x38>
 800827a:	4629      	mov	r1, r5
 800827c:	4630      	mov	r0, r6
 800827e:	f7ff fd53 	bl	8007d28 <_Balloc>
 8008282:	b930      	cbnz	r0, 8008292 <__mdiff+0x2e>
 8008284:	4b3a      	ldr	r3, [pc, #232]	; (8008370 <__mdiff+0x10c>)
 8008286:	4602      	mov	r2, r0
 8008288:	f240 2132 	movw	r1, #562	; 0x232
 800828c:	4839      	ldr	r0, [pc, #228]	; (8008374 <__mdiff+0x110>)
 800828e:	f000 fc45 	bl	8008b1c <__assert_func>
 8008292:	2301      	movs	r3, #1
 8008294:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829c:	bfa4      	itt	ge
 800829e:	4643      	movge	r3, r8
 80082a0:	46a0      	movge	r8, r4
 80082a2:	4630      	mov	r0, r6
 80082a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80082a8:	bfa6      	itte	ge
 80082aa:	461c      	movge	r4, r3
 80082ac:	2500      	movge	r5, #0
 80082ae:	2501      	movlt	r5, #1
 80082b0:	f7ff fd3a 	bl	8007d28 <_Balloc>
 80082b4:	b920      	cbnz	r0, 80082c0 <__mdiff+0x5c>
 80082b6:	4b2e      	ldr	r3, [pc, #184]	; (8008370 <__mdiff+0x10c>)
 80082b8:	4602      	mov	r2, r0
 80082ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 80082be:	e7e5      	b.n	800828c <__mdiff+0x28>
 80082c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80082c4:	6926      	ldr	r6, [r4, #16]
 80082c6:	60c5      	str	r5, [r0, #12]
 80082c8:	f104 0914 	add.w	r9, r4, #20
 80082cc:	f108 0514 	add.w	r5, r8, #20
 80082d0:	f100 0e14 	add.w	lr, r0, #20
 80082d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80082d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80082dc:	f108 0210 	add.w	r2, r8, #16
 80082e0:	46f2      	mov	sl, lr
 80082e2:	2100      	movs	r1, #0
 80082e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80082e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80082ec:	fa1f f883 	uxth.w	r8, r3
 80082f0:	fa11 f18b 	uxtah	r1, r1, fp
 80082f4:	0c1b      	lsrs	r3, r3, #16
 80082f6:	eba1 0808 	sub.w	r8, r1, r8
 80082fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80082fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008302:	fa1f f888 	uxth.w	r8, r8
 8008306:	1419      	asrs	r1, r3, #16
 8008308:	454e      	cmp	r6, r9
 800830a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800830e:	f84a 3b04 	str.w	r3, [sl], #4
 8008312:	d8e7      	bhi.n	80082e4 <__mdiff+0x80>
 8008314:	1b33      	subs	r3, r6, r4
 8008316:	3b15      	subs	r3, #21
 8008318:	f023 0303 	bic.w	r3, r3, #3
 800831c:	3304      	adds	r3, #4
 800831e:	3415      	adds	r4, #21
 8008320:	42a6      	cmp	r6, r4
 8008322:	bf38      	it	cc
 8008324:	2304      	movcc	r3, #4
 8008326:	441d      	add	r5, r3
 8008328:	4473      	add	r3, lr
 800832a:	469e      	mov	lr, r3
 800832c:	462e      	mov	r6, r5
 800832e:	4566      	cmp	r6, ip
 8008330:	d30e      	bcc.n	8008350 <__mdiff+0xec>
 8008332:	f10c 0203 	add.w	r2, ip, #3
 8008336:	1b52      	subs	r2, r2, r5
 8008338:	f022 0203 	bic.w	r2, r2, #3
 800833c:	3d03      	subs	r5, #3
 800833e:	45ac      	cmp	ip, r5
 8008340:	bf38      	it	cc
 8008342:	2200      	movcc	r2, #0
 8008344:	441a      	add	r2, r3
 8008346:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800834a:	b17b      	cbz	r3, 800836c <__mdiff+0x108>
 800834c:	6107      	str	r7, [r0, #16]
 800834e:	e7a3      	b.n	8008298 <__mdiff+0x34>
 8008350:	f856 8b04 	ldr.w	r8, [r6], #4
 8008354:	fa11 f288 	uxtah	r2, r1, r8
 8008358:	1414      	asrs	r4, r2, #16
 800835a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800835e:	b292      	uxth	r2, r2
 8008360:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008364:	f84e 2b04 	str.w	r2, [lr], #4
 8008368:	1421      	asrs	r1, r4, #16
 800836a:	e7e0      	b.n	800832e <__mdiff+0xca>
 800836c:	3f01      	subs	r7, #1
 800836e:	e7ea      	b.n	8008346 <__mdiff+0xe2>
 8008370:	08009117 	.word	0x08009117
 8008374:	08009188 	.word	0x08009188

08008378 <__d2b>:
 8008378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800837c:	4689      	mov	r9, r1
 800837e:	2101      	movs	r1, #1
 8008380:	ec57 6b10 	vmov	r6, r7, d0
 8008384:	4690      	mov	r8, r2
 8008386:	f7ff fccf 	bl	8007d28 <_Balloc>
 800838a:	4604      	mov	r4, r0
 800838c:	b930      	cbnz	r0, 800839c <__d2b+0x24>
 800838e:	4602      	mov	r2, r0
 8008390:	4b25      	ldr	r3, [pc, #148]	; (8008428 <__d2b+0xb0>)
 8008392:	4826      	ldr	r0, [pc, #152]	; (800842c <__d2b+0xb4>)
 8008394:	f240 310a 	movw	r1, #778	; 0x30a
 8008398:	f000 fbc0 	bl	8008b1c <__assert_func>
 800839c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80083a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083a4:	bb35      	cbnz	r5, 80083f4 <__d2b+0x7c>
 80083a6:	2e00      	cmp	r6, #0
 80083a8:	9301      	str	r3, [sp, #4]
 80083aa:	d028      	beq.n	80083fe <__d2b+0x86>
 80083ac:	4668      	mov	r0, sp
 80083ae:	9600      	str	r6, [sp, #0]
 80083b0:	f7ff fd82 	bl	8007eb8 <__lo0bits>
 80083b4:	9900      	ldr	r1, [sp, #0]
 80083b6:	b300      	cbz	r0, 80083fa <__d2b+0x82>
 80083b8:	9a01      	ldr	r2, [sp, #4]
 80083ba:	f1c0 0320 	rsb	r3, r0, #32
 80083be:	fa02 f303 	lsl.w	r3, r2, r3
 80083c2:	430b      	orrs	r3, r1
 80083c4:	40c2      	lsrs	r2, r0
 80083c6:	6163      	str	r3, [r4, #20]
 80083c8:	9201      	str	r2, [sp, #4]
 80083ca:	9b01      	ldr	r3, [sp, #4]
 80083cc:	61a3      	str	r3, [r4, #24]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	bf14      	ite	ne
 80083d2:	2202      	movne	r2, #2
 80083d4:	2201      	moveq	r2, #1
 80083d6:	6122      	str	r2, [r4, #16]
 80083d8:	b1d5      	cbz	r5, 8008410 <__d2b+0x98>
 80083da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80083de:	4405      	add	r5, r0
 80083e0:	f8c9 5000 	str.w	r5, [r9]
 80083e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80083e8:	f8c8 0000 	str.w	r0, [r8]
 80083ec:	4620      	mov	r0, r4
 80083ee:	b003      	add	sp, #12
 80083f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083f8:	e7d5      	b.n	80083a6 <__d2b+0x2e>
 80083fa:	6161      	str	r1, [r4, #20]
 80083fc:	e7e5      	b.n	80083ca <__d2b+0x52>
 80083fe:	a801      	add	r0, sp, #4
 8008400:	f7ff fd5a 	bl	8007eb8 <__lo0bits>
 8008404:	9b01      	ldr	r3, [sp, #4]
 8008406:	6163      	str	r3, [r4, #20]
 8008408:	2201      	movs	r2, #1
 800840a:	6122      	str	r2, [r4, #16]
 800840c:	3020      	adds	r0, #32
 800840e:	e7e3      	b.n	80083d8 <__d2b+0x60>
 8008410:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008414:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008418:	f8c9 0000 	str.w	r0, [r9]
 800841c:	6918      	ldr	r0, [r3, #16]
 800841e:	f7ff fd2b 	bl	8007e78 <__hi0bits>
 8008422:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008426:	e7df      	b.n	80083e8 <__d2b+0x70>
 8008428:	08009117 	.word	0x08009117
 800842c:	08009188 	.word	0x08009188

08008430 <_calloc_r>:
 8008430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008432:	fba1 2402 	umull	r2, r4, r1, r2
 8008436:	b94c      	cbnz	r4, 800844c <_calloc_r+0x1c>
 8008438:	4611      	mov	r1, r2
 800843a:	9201      	str	r2, [sp, #4]
 800843c:	f000 f87a 	bl	8008534 <_malloc_r>
 8008440:	9a01      	ldr	r2, [sp, #4]
 8008442:	4605      	mov	r5, r0
 8008444:	b930      	cbnz	r0, 8008454 <_calloc_r+0x24>
 8008446:	4628      	mov	r0, r5
 8008448:	b003      	add	sp, #12
 800844a:	bd30      	pop	{r4, r5, pc}
 800844c:	220c      	movs	r2, #12
 800844e:	6002      	str	r2, [r0, #0]
 8008450:	2500      	movs	r5, #0
 8008452:	e7f8      	b.n	8008446 <_calloc_r+0x16>
 8008454:	4621      	mov	r1, r4
 8008456:	f7fe f85d 	bl	8006514 <memset>
 800845a:	e7f4      	b.n	8008446 <_calloc_r+0x16>

0800845c <_free_r>:
 800845c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800845e:	2900      	cmp	r1, #0
 8008460:	d044      	beq.n	80084ec <_free_r+0x90>
 8008462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008466:	9001      	str	r0, [sp, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	f1a1 0404 	sub.w	r4, r1, #4
 800846e:	bfb8      	it	lt
 8008470:	18e4      	addlt	r4, r4, r3
 8008472:	f000 fcdf 	bl	8008e34 <__malloc_lock>
 8008476:	4a1e      	ldr	r2, [pc, #120]	; (80084f0 <_free_r+0x94>)
 8008478:	9801      	ldr	r0, [sp, #4]
 800847a:	6813      	ldr	r3, [r2, #0]
 800847c:	b933      	cbnz	r3, 800848c <_free_r+0x30>
 800847e:	6063      	str	r3, [r4, #4]
 8008480:	6014      	str	r4, [r2, #0]
 8008482:	b003      	add	sp, #12
 8008484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008488:	f000 bcda 	b.w	8008e40 <__malloc_unlock>
 800848c:	42a3      	cmp	r3, r4
 800848e:	d908      	bls.n	80084a2 <_free_r+0x46>
 8008490:	6825      	ldr	r5, [r4, #0]
 8008492:	1961      	adds	r1, r4, r5
 8008494:	428b      	cmp	r3, r1
 8008496:	bf01      	itttt	eq
 8008498:	6819      	ldreq	r1, [r3, #0]
 800849a:	685b      	ldreq	r3, [r3, #4]
 800849c:	1949      	addeq	r1, r1, r5
 800849e:	6021      	streq	r1, [r4, #0]
 80084a0:	e7ed      	b.n	800847e <_free_r+0x22>
 80084a2:	461a      	mov	r2, r3
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	b10b      	cbz	r3, 80084ac <_free_r+0x50>
 80084a8:	42a3      	cmp	r3, r4
 80084aa:	d9fa      	bls.n	80084a2 <_free_r+0x46>
 80084ac:	6811      	ldr	r1, [r2, #0]
 80084ae:	1855      	adds	r5, r2, r1
 80084b0:	42a5      	cmp	r5, r4
 80084b2:	d10b      	bne.n	80084cc <_free_r+0x70>
 80084b4:	6824      	ldr	r4, [r4, #0]
 80084b6:	4421      	add	r1, r4
 80084b8:	1854      	adds	r4, r2, r1
 80084ba:	42a3      	cmp	r3, r4
 80084bc:	6011      	str	r1, [r2, #0]
 80084be:	d1e0      	bne.n	8008482 <_free_r+0x26>
 80084c0:	681c      	ldr	r4, [r3, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	6053      	str	r3, [r2, #4]
 80084c6:	4421      	add	r1, r4
 80084c8:	6011      	str	r1, [r2, #0]
 80084ca:	e7da      	b.n	8008482 <_free_r+0x26>
 80084cc:	d902      	bls.n	80084d4 <_free_r+0x78>
 80084ce:	230c      	movs	r3, #12
 80084d0:	6003      	str	r3, [r0, #0]
 80084d2:	e7d6      	b.n	8008482 <_free_r+0x26>
 80084d4:	6825      	ldr	r5, [r4, #0]
 80084d6:	1961      	adds	r1, r4, r5
 80084d8:	428b      	cmp	r3, r1
 80084da:	bf04      	itt	eq
 80084dc:	6819      	ldreq	r1, [r3, #0]
 80084de:	685b      	ldreq	r3, [r3, #4]
 80084e0:	6063      	str	r3, [r4, #4]
 80084e2:	bf04      	itt	eq
 80084e4:	1949      	addeq	r1, r1, r5
 80084e6:	6021      	streq	r1, [r4, #0]
 80084e8:	6054      	str	r4, [r2, #4]
 80084ea:	e7ca      	b.n	8008482 <_free_r+0x26>
 80084ec:	b003      	add	sp, #12
 80084ee:	bd30      	pop	{r4, r5, pc}
 80084f0:	20000590 	.word	0x20000590

080084f4 <sbrk_aligned>:
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	4e0e      	ldr	r6, [pc, #56]	; (8008530 <sbrk_aligned+0x3c>)
 80084f8:	460c      	mov	r4, r1
 80084fa:	6831      	ldr	r1, [r6, #0]
 80084fc:	4605      	mov	r5, r0
 80084fe:	b911      	cbnz	r1, 8008506 <sbrk_aligned+0x12>
 8008500:	f000 f9e6 	bl	80088d0 <_sbrk_r>
 8008504:	6030      	str	r0, [r6, #0]
 8008506:	4621      	mov	r1, r4
 8008508:	4628      	mov	r0, r5
 800850a:	f000 f9e1 	bl	80088d0 <_sbrk_r>
 800850e:	1c43      	adds	r3, r0, #1
 8008510:	d00a      	beq.n	8008528 <sbrk_aligned+0x34>
 8008512:	1cc4      	adds	r4, r0, #3
 8008514:	f024 0403 	bic.w	r4, r4, #3
 8008518:	42a0      	cmp	r0, r4
 800851a:	d007      	beq.n	800852c <sbrk_aligned+0x38>
 800851c:	1a21      	subs	r1, r4, r0
 800851e:	4628      	mov	r0, r5
 8008520:	f000 f9d6 	bl	80088d0 <_sbrk_r>
 8008524:	3001      	adds	r0, #1
 8008526:	d101      	bne.n	800852c <sbrk_aligned+0x38>
 8008528:	f04f 34ff 	mov.w	r4, #4294967295
 800852c:	4620      	mov	r0, r4
 800852e:	bd70      	pop	{r4, r5, r6, pc}
 8008530:	20000594 	.word	0x20000594

08008534 <_malloc_r>:
 8008534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008538:	1ccd      	adds	r5, r1, #3
 800853a:	f025 0503 	bic.w	r5, r5, #3
 800853e:	3508      	adds	r5, #8
 8008540:	2d0c      	cmp	r5, #12
 8008542:	bf38      	it	cc
 8008544:	250c      	movcc	r5, #12
 8008546:	2d00      	cmp	r5, #0
 8008548:	4607      	mov	r7, r0
 800854a:	db01      	blt.n	8008550 <_malloc_r+0x1c>
 800854c:	42a9      	cmp	r1, r5
 800854e:	d905      	bls.n	800855c <_malloc_r+0x28>
 8008550:	230c      	movs	r3, #12
 8008552:	603b      	str	r3, [r7, #0]
 8008554:	2600      	movs	r6, #0
 8008556:	4630      	mov	r0, r6
 8008558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800855c:	4e2e      	ldr	r6, [pc, #184]	; (8008618 <_malloc_r+0xe4>)
 800855e:	f000 fc69 	bl	8008e34 <__malloc_lock>
 8008562:	6833      	ldr	r3, [r6, #0]
 8008564:	461c      	mov	r4, r3
 8008566:	bb34      	cbnz	r4, 80085b6 <_malloc_r+0x82>
 8008568:	4629      	mov	r1, r5
 800856a:	4638      	mov	r0, r7
 800856c:	f7ff ffc2 	bl	80084f4 <sbrk_aligned>
 8008570:	1c43      	adds	r3, r0, #1
 8008572:	4604      	mov	r4, r0
 8008574:	d14d      	bne.n	8008612 <_malloc_r+0xde>
 8008576:	6834      	ldr	r4, [r6, #0]
 8008578:	4626      	mov	r6, r4
 800857a:	2e00      	cmp	r6, #0
 800857c:	d140      	bne.n	8008600 <_malloc_r+0xcc>
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	4631      	mov	r1, r6
 8008582:	4638      	mov	r0, r7
 8008584:	eb04 0803 	add.w	r8, r4, r3
 8008588:	f000 f9a2 	bl	80088d0 <_sbrk_r>
 800858c:	4580      	cmp	r8, r0
 800858e:	d13a      	bne.n	8008606 <_malloc_r+0xd2>
 8008590:	6821      	ldr	r1, [r4, #0]
 8008592:	3503      	adds	r5, #3
 8008594:	1a6d      	subs	r5, r5, r1
 8008596:	f025 0503 	bic.w	r5, r5, #3
 800859a:	3508      	adds	r5, #8
 800859c:	2d0c      	cmp	r5, #12
 800859e:	bf38      	it	cc
 80085a0:	250c      	movcc	r5, #12
 80085a2:	4629      	mov	r1, r5
 80085a4:	4638      	mov	r0, r7
 80085a6:	f7ff ffa5 	bl	80084f4 <sbrk_aligned>
 80085aa:	3001      	adds	r0, #1
 80085ac:	d02b      	beq.n	8008606 <_malloc_r+0xd2>
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	442b      	add	r3, r5
 80085b2:	6023      	str	r3, [r4, #0]
 80085b4:	e00e      	b.n	80085d4 <_malloc_r+0xa0>
 80085b6:	6822      	ldr	r2, [r4, #0]
 80085b8:	1b52      	subs	r2, r2, r5
 80085ba:	d41e      	bmi.n	80085fa <_malloc_r+0xc6>
 80085bc:	2a0b      	cmp	r2, #11
 80085be:	d916      	bls.n	80085ee <_malloc_r+0xba>
 80085c0:	1961      	adds	r1, r4, r5
 80085c2:	42a3      	cmp	r3, r4
 80085c4:	6025      	str	r5, [r4, #0]
 80085c6:	bf18      	it	ne
 80085c8:	6059      	strne	r1, [r3, #4]
 80085ca:	6863      	ldr	r3, [r4, #4]
 80085cc:	bf08      	it	eq
 80085ce:	6031      	streq	r1, [r6, #0]
 80085d0:	5162      	str	r2, [r4, r5]
 80085d2:	604b      	str	r3, [r1, #4]
 80085d4:	4638      	mov	r0, r7
 80085d6:	f104 060b 	add.w	r6, r4, #11
 80085da:	f000 fc31 	bl	8008e40 <__malloc_unlock>
 80085de:	f026 0607 	bic.w	r6, r6, #7
 80085e2:	1d23      	adds	r3, r4, #4
 80085e4:	1af2      	subs	r2, r6, r3
 80085e6:	d0b6      	beq.n	8008556 <_malloc_r+0x22>
 80085e8:	1b9b      	subs	r3, r3, r6
 80085ea:	50a3      	str	r3, [r4, r2]
 80085ec:	e7b3      	b.n	8008556 <_malloc_r+0x22>
 80085ee:	6862      	ldr	r2, [r4, #4]
 80085f0:	42a3      	cmp	r3, r4
 80085f2:	bf0c      	ite	eq
 80085f4:	6032      	streq	r2, [r6, #0]
 80085f6:	605a      	strne	r2, [r3, #4]
 80085f8:	e7ec      	b.n	80085d4 <_malloc_r+0xa0>
 80085fa:	4623      	mov	r3, r4
 80085fc:	6864      	ldr	r4, [r4, #4]
 80085fe:	e7b2      	b.n	8008566 <_malloc_r+0x32>
 8008600:	4634      	mov	r4, r6
 8008602:	6876      	ldr	r6, [r6, #4]
 8008604:	e7b9      	b.n	800857a <_malloc_r+0x46>
 8008606:	230c      	movs	r3, #12
 8008608:	603b      	str	r3, [r7, #0]
 800860a:	4638      	mov	r0, r7
 800860c:	f000 fc18 	bl	8008e40 <__malloc_unlock>
 8008610:	e7a1      	b.n	8008556 <_malloc_r+0x22>
 8008612:	6025      	str	r5, [r4, #0]
 8008614:	e7de      	b.n	80085d4 <_malloc_r+0xa0>
 8008616:	bf00      	nop
 8008618:	20000590 	.word	0x20000590

0800861c <__sfputc_r>:
 800861c:	6893      	ldr	r3, [r2, #8]
 800861e:	3b01      	subs	r3, #1
 8008620:	2b00      	cmp	r3, #0
 8008622:	b410      	push	{r4}
 8008624:	6093      	str	r3, [r2, #8]
 8008626:	da08      	bge.n	800863a <__sfputc_r+0x1e>
 8008628:	6994      	ldr	r4, [r2, #24]
 800862a:	42a3      	cmp	r3, r4
 800862c:	db01      	blt.n	8008632 <__sfputc_r+0x16>
 800862e:	290a      	cmp	r1, #10
 8008630:	d103      	bne.n	800863a <__sfputc_r+0x1e>
 8008632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008636:	f000 b99f 	b.w	8008978 <__swbuf_r>
 800863a:	6813      	ldr	r3, [r2, #0]
 800863c:	1c58      	adds	r0, r3, #1
 800863e:	6010      	str	r0, [r2, #0]
 8008640:	7019      	strb	r1, [r3, #0]
 8008642:	4608      	mov	r0, r1
 8008644:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008648:	4770      	bx	lr

0800864a <__sfputs_r>:
 800864a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800864c:	4606      	mov	r6, r0
 800864e:	460f      	mov	r7, r1
 8008650:	4614      	mov	r4, r2
 8008652:	18d5      	adds	r5, r2, r3
 8008654:	42ac      	cmp	r4, r5
 8008656:	d101      	bne.n	800865c <__sfputs_r+0x12>
 8008658:	2000      	movs	r0, #0
 800865a:	e007      	b.n	800866c <__sfputs_r+0x22>
 800865c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008660:	463a      	mov	r2, r7
 8008662:	4630      	mov	r0, r6
 8008664:	f7ff ffda 	bl	800861c <__sfputc_r>
 8008668:	1c43      	adds	r3, r0, #1
 800866a:	d1f3      	bne.n	8008654 <__sfputs_r+0xa>
 800866c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008670 <_vfiprintf_r>:
 8008670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008674:	460d      	mov	r5, r1
 8008676:	b09d      	sub	sp, #116	; 0x74
 8008678:	4614      	mov	r4, r2
 800867a:	4698      	mov	r8, r3
 800867c:	4606      	mov	r6, r0
 800867e:	b118      	cbz	r0, 8008688 <_vfiprintf_r+0x18>
 8008680:	6983      	ldr	r3, [r0, #24]
 8008682:	b90b      	cbnz	r3, 8008688 <_vfiprintf_r+0x18>
 8008684:	f7ff faa2 	bl	8007bcc <__sinit>
 8008688:	4b89      	ldr	r3, [pc, #548]	; (80088b0 <_vfiprintf_r+0x240>)
 800868a:	429d      	cmp	r5, r3
 800868c:	d11b      	bne.n	80086c6 <_vfiprintf_r+0x56>
 800868e:	6875      	ldr	r5, [r6, #4]
 8008690:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008692:	07d9      	lsls	r1, r3, #31
 8008694:	d405      	bmi.n	80086a2 <_vfiprintf_r+0x32>
 8008696:	89ab      	ldrh	r3, [r5, #12]
 8008698:	059a      	lsls	r2, r3, #22
 800869a:	d402      	bmi.n	80086a2 <_vfiprintf_r+0x32>
 800869c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800869e:	f7ff fb38 	bl	8007d12 <__retarget_lock_acquire_recursive>
 80086a2:	89ab      	ldrh	r3, [r5, #12]
 80086a4:	071b      	lsls	r3, r3, #28
 80086a6:	d501      	bpl.n	80086ac <_vfiprintf_r+0x3c>
 80086a8:	692b      	ldr	r3, [r5, #16]
 80086aa:	b9eb      	cbnz	r3, 80086e8 <_vfiprintf_r+0x78>
 80086ac:	4629      	mov	r1, r5
 80086ae:	4630      	mov	r0, r6
 80086b0:	f000 f9c6 	bl	8008a40 <__swsetup_r>
 80086b4:	b1c0      	cbz	r0, 80086e8 <_vfiprintf_r+0x78>
 80086b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086b8:	07dc      	lsls	r4, r3, #31
 80086ba:	d50e      	bpl.n	80086da <_vfiprintf_r+0x6a>
 80086bc:	f04f 30ff 	mov.w	r0, #4294967295
 80086c0:	b01d      	add	sp, #116	; 0x74
 80086c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c6:	4b7b      	ldr	r3, [pc, #492]	; (80088b4 <_vfiprintf_r+0x244>)
 80086c8:	429d      	cmp	r5, r3
 80086ca:	d101      	bne.n	80086d0 <_vfiprintf_r+0x60>
 80086cc:	68b5      	ldr	r5, [r6, #8]
 80086ce:	e7df      	b.n	8008690 <_vfiprintf_r+0x20>
 80086d0:	4b79      	ldr	r3, [pc, #484]	; (80088b8 <_vfiprintf_r+0x248>)
 80086d2:	429d      	cmp	r5, r3
 80086d4:	bf08      	it	eq
 80086d6:	68f5      	ldreq	r5, [r6, #12]
 80086d8:	e7da      	b.n	8008690 <_vfiprintf_r+0x20>
 80086da:	89ab      	ldrh	r3, [r5, #12]
 80086dc:	0598      	lsls	r0, r3, #22
 80086de:	d4ed      	bmi.n	80086bc <_vfiprintf_r+0x4c>
 80086e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086e2:	f7ff fb17 	bl	8007d14 <__retarget_lock_release_recursive>
 80086e6:	e7e9      	b.n	80086bc <_vfiprintf_r+0x4c>
 80086e8:	2300      	movs	r3, #0
 80086ea:	9309      	str	r3, [sp, #36]	; 0x24
 80086ec:	2320      	movs	r3, #32
 80086ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80086f6:	2330      	movs	r3, #48	; 0x30
 80086f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80088bc <_vfiprintf_r+0x24c>
 80086fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008700:	f04f 0901 	mov.w	r9, #1
 8008704:	4623      	mov	r3, r4
 8008706:	469a      	mov	sl, r3
 8008708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800870c:	b10a      	cbz	r2, 8008712 <_vfiprintf_r+0xa2>
 800870e:	2a25      	cmp	r2, #37	; 0x25
 8008710:	d1f9      	bne.n	8008706 <_vfiprintf_r+0x96>
 8008712:	ebba 0b04 	subs.w	fp, sl, r4
 8008716:	d00b      	beq.n	8008730 <_vfiprintf_r+0xc0>
 8008718:	465b      	mov	r3, fp
 800871a:	4622      	mov	r2, r4
 800871c:	4629      	mov	r1, r5
 800871e:	4630      	mov	r0, r6
 8008720:	f7ff ff93 	bl	800864a <__sfputs_r>
 8008724:	3001      	adds	r0, #1
 8008726:	f000 80aa 	beq.w	800887e <_vfiprintf_r+0x20e>
 800872a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800872c:	445a      	add	r2, fp
 800872e:	9209      	str	r2, [sp, #36]	; 0x24
 8008730:	f89a 3000 	ldrb.w	r3, [sl]
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 80a2 	beq.w	800887e <_vfiprintf_r+0x20e>
 800873a:	2300      	movs	r3, #0
 800873c:	f04f 32ff 	mov.w	r2, #4294967295
 8008740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008744:	f10a 0a01 	add.w	sl, sl, #1
 8008748:	9304      	str	r3, [sp, #16]
 800874a:	9307      	str	r3, [sp, #28]
 800874c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008750:	931a      	str	r3, [sp, #104]	; 0x68
 8008752:	4654      	mov	r4, sl
 8008754:	2205      	movs	r2, #5
 8008756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800875a:	4858      	ldr	r0, [pc, #352]	; (80088bc <_vfiprintf_r+0x24c>)
 800875c:	f7f8 fa90 	bl	8000c80 <memchr>
 8008760:	9a04      	ldr	r2, [sp, #16]
 8008762:	b9d8      	cbnz	r0, 800879c <_vfiprintf_r+0x12c>
 8008764:	06d1      	lsls	r1, r2, #27
 8008766:	bf44      	itt	mi
 8008768:	2320      	movmi	r3, #32
 800876a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800876e:	0713      	lsls	r3, r2, #28
 8008770:	bf44      	itt	mi
 8008772:	232b      	movmi	r3, #43	; 0x2b
 8008774:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008778:	f89a 3000 	ldrb.w	r3, [sl]
 800877c:	2b2a      	cmp	r3, #42	; 0x2a
 800877e:	d015      	beq.n	80087ac <_vfiprintf_r+0x13c>
 8008780:	9a07      	ldr	r2, [sp, #28]
 8008782:	4654      	mov	r4, sl
 8008784:	2000      	movs	r0, #0
 8008786:	f04f 0c0a 	mov.w	ip, #10
 800878a:	4621      	mov	r1, r4
 800878c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008790:	3b30      	subs	r3, #48	; 0x30
 8008792:	2b09      	cmp	r3, #9
 8008794:	d94e      	bls.n	8008834 <_vfiprintf_r+0x1c4>
 8008796:	b1b0      	cbz	r0, 80087c6 <_vfiprintf_r+0x156>
 8008798:	9207      	str	r2, [sp, #28]
 800879a:	e014      	b.n	80087c6 <_vfiprintf_r+0x156>
 800879c:	eba0 0308 	sub.w	r3, r0, r8
 80087a0:	fa09 f303 	lsl.w	r3, r9, r3
 80087a4:	4313      	orrs	r3, r2
 80087a6:	9304      	str	r3, [sp, #16]
 80087a8:	46a2      	mov	sl, r4
 80087aa:	e7d2      	b.n	8008752 <_vfiprintf_r+0xe2>
 80087ac:	9b03      	ldr	r3, [sp, #12]
 80087ae:	1d19      	adds	r1, r3, #4
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	9103      	str	r1, [sp, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	bfbb      	ittet	lt
 80087b8:	425b      	neglt	r3, r3
 80087ba:	f042 0202 	orrlt.w	r2, r2, #2
 80087be:	9307      	strge	r3, [sp, #28]
 80087c0:	9307      	strlt	r3, [sp, #28]
 80087c2:	bfb8      	it	lt
 80087c4:	9204      	strlt	r2, [sp, #16]
 80087c6:	7823      	ldrb	r3, [r4, #0]
 80087c8:	2b2e      	cmp	r3, #46	; 0x2e
 80087ca:	d10c      	bne.n	80087e6 <_vfiprintf_r+0x176>
 80087cc:	7863      	ldrb	r3, [r4, #1]
 80087ce:	2b2a      	cmp	r3, #42	; 0x2a
 80087d0:	d135      	bne.n	800883e <_vfiprintf_r+0x1ce>
 80087d2:	9b03      	ldr	r3, [sp, #12]
 80087d4:	1d1a      	adds	r2, r3, #4
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	9203      	str	r2, [sp, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	bfb8      	it	lt
 80087de:	f04f 33ff 	movlt.w	r3, #4294967295
 80087e2:	3402      	adds	r4, #2
 80087e4:	9305      	str	r3, [sp, #20]
 80087e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80088cc <_vfiprintf_r+0x25c>
 80087ea:	7821      	ldrb	r1, [r4, #0]
 80087ec:	2203      	movs	r2, #3
 80087ee:	4650      	mov	r0, sl
 80087f0:	f7f8 fa46 	bl	8000c80 <memchr>
 80087f4:	b140      	cbz	r0, 8008808 <_vfiprintf_r+0x198>
 80087f6:	2340      	movs	r3, #64	; 0x40
 80087f8:	eba0 000a 	sub.w	r0, r0, sl
 80087fc:	fa03 f000 	lsl.w	r0, r3, r0
 8008800:	9b04      	ldr	r3, [sp, #16]
 8008802:	4303      	orrs	r3, r0
 8008804:	3401      	adds	r4, #1
 8008806:	9304      	str	r3, [sp, #16]
 8008808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800880c:	482c      	ldr	r0, [pc, #176]	; (80088c0 <_vfiprintf_r+0x250>)
 800880e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008812:	2206      	movs	r2, #6
 8008814:	f7f8 fa34 	bl	8000c80 <memchr>
 8008818:	2800      	cmp	r0, #0
 800881a:	d03f      	beq.n	800889c <_vfiprintf_r+0x22c>
 800881c:	4b29      	ldr	r3, [pc, #164]	; (80088c4 <_vfiprintf_r+0x254>)
 800881e:	bb1b      	cbnz	r3, 8008868 <_vfiprintf_r+0x1f8>
 8008820:	9b03      	ldr	r3, [sp, #12]
 8008822:	3307      	adds	r3, #7
 8008824:	f023 0307 	bic.w	r3, r3, #7
 8008828:	3308      	adds	r3, #8
 800882a:	9303      	str	r3, [sp, #12]
 800882c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800882e:	443b      	add	r3, r7
 8008830:	9309      	str	r3, [sp, #36]	; 0x24
 8008832:	e767      	b.n	8008704 <_vfiprintf_r+0x94>
 8008834:	fb0c 3202 	mla	r2, ip, r2, r3
 8008838:	460c      	mov	r4, r1
 800883a:	2001      	movs	r0, #1
 800883c:	e7a5      	b.n	800878a <_vfiprintf_r+0x11a>
 800883e:	2300      	movs	r3, #0
 8008840:	3401      	adds	r4, #1
 8008842:	9305      	str	r3, [sp, #20]
 8008844:	4619      	mov	r1, r3
 8008846:	f04f 0c0a 	mov.w	ip, #10
 800884a:	4620      	mov	r0, r4
 800884c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008850:	3a30      	subs	r2, #48	; 0x30
 8008852:	2a09      	cmp	r2, #9
 8008854:	d903      	bls.n	800885e <_vfiprintf_r+0x1ee>
 8008856:	2b00      	cmp	r3, #0
 8008858:	d0c5      	beq.n	80087e6 <_vfiprintf_r+0x176>
 800885a:	9105      	str	r1, [sp, #20]
 800885c:	e7c3      	b.n	80087e6 <_vfiprintf_r+0x176>
 800885e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008862:	4604      	mov	r4, r0
 8008864:	2301      	movs	r3, #1
 8008866:	e7f0      	b.n	800884a <_vfiprintf_r+0x1da>
 8008868:	ab03      	add	r3, sp, #12
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	462a      	mov	r2, r5
 800886e:	4b16      	ldr	r3, [pc, #88]	; (80088c8 <_vfiprintf_r+0x258>)
 8008870:	a904      	add	r1, sp, #16
 8008872:	4630      	mov	r0, r6
 8008874:	f7fd fef6 	bl	8006664 <_printf_float>
 8008878:	4607      	mov	r7, r0
 800887a:	1c78      	adds	r0, r7, #1
 800887c:	d1d6      	bne.n	800882c <_vfiprintf_r+0x1bc>
 800887e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008880:	07d9      	lsls	r1, r3, #31
 8008882:	d405      	bmi.n	8008890 <_vfiprintf_r+0x220>
 8008884:	89ab      	ldrh	r3, [r5, #12]
 8008886:	059a      	lsls	r2, r3, #22
 8008888:	d402      	bmi.n	8008890 <_vfiprintf_r+0x220>
 800888a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800888c:	f7ff fa42 	bl	8007d14 <__retarget_lock_release_recursive>
 8008890:	89ab      	ldrh	r3, [r5, #12]
 8008892:	065b      	lsls	r3, r3, #25
 8008894:	f53f af12 	bmi.w	80086bc <_vfiprintf_r+0x4c>
 8008898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800889a:	e711      	b.n	80086c0 <_vfiprintf_r+0x50>
 800889c:	ab03      	add	r3, sp, #12
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	462a      	mov	r2, r5
 80088a2:	4b09      	ldr	r3, [pc, #36]	; (80088c8 <_vfiprintf_r+0x258>)
 80088a4:	a904      	add	r1, sp, #16
 80088a6:	4630      	mov	r0, r6
 80088a8:	f7fe f980 	bl	8006bac <_printf_i>
 80088ac:	e7e4      	b.n	8008878 <_vfiprintf_r+0x208>
 80088ae:	bf00      	nop
 80088b0:	08009148 	.word	0x08009148
 80088b4:	08009168 	.word	0x08009168
 80088b8:	08009128 	.word	0x08009128
 80088bc:	080092e4 	.word	0x080092e4
 80088c0:	080092ee 	.word	0x080092ee
 80088c4:	08006665 	.word	0x08006665
 80088c8:	0800864b 	.word	0x0800864b
 80088cc:	080092ea 	.word	0x080092ea

080088d0 <_sbrk_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4d06      	ldr	r5, [pc, #24]	; (80088ec <_sbrk_r+0x1c>)
 80088d4:	2300      	movs	r3, #0
 80088d6:	4604      	mov	r4, r0
 80088d8:	4608      	mov	r0, r1
 80088da:	602b      	str	r3, [r5, #0]
 80088dc:	f7f9 fec2 	bl	8002664 <_sbrk>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d102      	bne.n	80088ea <_sbrk_r+0x1a>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	b103      	cbz	r3, 80088ea <_sbrk_r+0x1a>
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	20000598 	.word	0x20000598

080088f0 <__sread>:
 80088f0:	b510      	push	{r4, lr}
 80088f2:	460c      	mov	r4, r1
 80088f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f8:	f000 faa8 	bl	8008e4c <_read_r>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	bfab      	itete	ge
 8008900:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008902:	89a3      	ldrhlt	r3, [r4, #12]
 8008904:	181b      	addge	r3, r3, r0
 8008906:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800890a:	bfac      	ite	ge
 800890c:	6563      	strge	r3, [r4, #84]	; 0x54
 800890e:	81a3      	strhlt	r3, [r4, #12]
 8008910:	bd10      	pop	{r4, pc}

08008912 <__swrite>:
 8008912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008916:	461f      	mov	r7, r3
 8008918:	898b      	ldrh	r3, [r1, #12]
 800891a:	05db      	lsls	r3, r3, #23
 800891c:	4605      	mov	r5, r0
 800891e:	460c      	mov	r4, r1
 8008920:	4616      	mov	r6, r2
 8008922:	d505      	bpl.n	8008930 <__swrite+0x1e>
 8008924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008928:	2302      	movs	r3, #2
 800892a:	2200      	movs	r2, #0
 800892c:	f000 f9f8 	bl	8008d20 <_lseek_r>
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800893a:	81a3      	strh	r3, [r4, #12]
 800893c:	4632      	mov	r2, r6
 800893e:	463b      	mov	r3, r7
 8008940:	4628      	mov	r0, r5
 8008942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008946:	f000 b869 	b.w	8008a1c <_write_r>

0800894a <__sseek>:
 800894a:	b510      	push	{r4, lr}
 800894c:	460c      	mov	r4, r1
 800894e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008952:	f000 f9e5 	bl	8008d20 <_lseek_r>
 8008956:	1c43      	adds	r3, r0, #1
 8008958:	89a3      	ldrh	r3, [r4, #12]
 800895a:	bf15      	itete	ne
 800895c:	6560      	strne	r0, [r4, #84]	; 0x54
 800895e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008966:	81a3      	strheq	r3, [r4, #12]
 8008968:	bf18      	it	ne
 800896a:	81a3      	strhne	r3, [r4, #12]
 800896c:	bd10      	pop	{r4, pc}

0800896e <__sclose>:
 800896e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008972:	f000 b8f1 	b.w	8008b58 <_close_r>
	...

08008978 <__swbuf_r>:
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897a:	460e      	mov	r6, r1
 800897c:	4614      	mov	r4, r2
 800897e:	4605      	mov	r5, r0
 8008980:	b118      	cbz	r0, 800898a <__swbuf_r+0x12>
 8008982:	6983      	ldr	r3, [r0, #24]
 8008984:	b90b      	cbnz	r3, 800898a <__swbuf_r+0x12>
 8008986:	f7ff f921 	bl	8007bcc <__sinit>
 800898a:	4b21      	ldr	r3, [pc, #132]	; (8008a10 <__swbuf_r+0x98>)
 800898c:	429c      	cmp	r4, r3
 800898e:	d12b      	bne.n	80089e8 <__swbuf_r+0x70>
 8008990:	686c      	ldr	r4, [r5, #4]
 8008992:	69a3      	ldr	r3, [r4, #24]
 8008994:	60a3      	str	r3, [r4, #8]
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	071a      	lsls	r2, r3, #28
 800899a:	d52f      	bpl.n	80089fc <__swbuf_r+0x84>
 800899c:	6923      	ldr	r3, [r4, #16]
 800899e:	b36b      	cbz	r3, 80089fc <__swbuf_r+0x84>
 80089a0:	6923      	ldr	r3, [r4, #16]
 80089a2:	6820      	ldr	r0, [r4, #0]
 80089a4:	1ac0      	subs	r0, r0, r3
 80089a6:	6963      	ldr	r3, [r4, #20]
 80089a8:	b2f6      	uxtb	r6, r6
 80089aa:	4283      	cmp	r3, r0
 80089ac:	4637      	mov	r7, r6
 80089ae:	dc04      	bgt.n	80089ba <__swbuf_r+0x42>
 80089b0:	4621      	mov	r1, r4
 80089b2:	4628      	mov	r0, r5
 80089b4:	f000 f966 	bl	8008c84 <_fflush_r>
 80089b8:	bb30      	cbnz	r0, 8008a08 <__swbuf_r+0x90>
 80089ba:	68a3      	ldr	r3, [r4, #8]
 80089bc:	3b01      	subs	r3, #1
 80089be:	60a3      	str	r3, [r4, #8]
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	6022      	str	r2, [r4, #0]
 80089c6:	701e      	strb	r6, [r3, #0]
 80089c8:	6963      	ldr	r3, [r4, #20]
 80089ca:	3001      	adds	r0, #1
 80089cc:	4283      	cmp	r3, r0
 80089ce:	d004      	beq.n	80089da <__swbuf_r+0x62>
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	07db      	lsls	r3, r3, #31
 80089d4:	d506      	bpl.n	80089e4 <__swbuf_r+0x6c>
 80089d6:	2e0a      	cmp	r6, #10
 80089d8:	d104      	bne.n	80089e4 <__swbuf_r+0x6c>
 80089da:	4621      	mov	r1, r4
 80089dc:	4628      	mov	r0, r5
 80089de:	f000 f951 	bl	8008c84 <_fflush_r>
 80089e2:	b988      	cbnz	r0, 8008a08 <__swbuf_r+0x90>
 80089e4:	4638      	mov	r0, r7
 80089e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089e8:	4b0a      	ldr	r3, [pc, #40]	; (8008a14 <__swbuf_r+0x9c>)
 80089ea:	429c      	cmp	r4, r3
 80089ec:	d101      	bne.n	80089f2 <__swbuf_r+0x7a>
 80089ee:	68ac      	ldr	r4, [r5, #8]
 80089f0:	e7cf      	b.n	8008992 <__swbuf_r+0x1a>
 80089f2:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <__swbuf_r+0xa0>)
 80089f4:	429c      	cmp	r4, r3
 80089f6:	bf08      	it	eq
 80089f8:	68ec      	ldreq	r4, [r5, #12]
 80089fa:	e7ca      	b.n	8008992 <__swbuf_r+0x1a>
 80089fc:	4621      	mov	r1, r4
 80089fe:	4628      	mov	r0, r5
 8008a00:	f000 f81e 	bl	8008a40 <__swsetup_r>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	d0cb      	beq.n	80089a0 <__swbuf_r+0x28>
 8008a08:	f04f 37ff 	mov.w	r7, #4294967295
 8008a0c:	e7ea      	b.n	80089e4 <__swbuf_r+0x6c>
 8008a0e:	bf00      	nop
 8008a10:	08009148 	.word	0x08009148
 8008a14:	08009168 	.word	0x08009168
 8008a18:	08009128 	.word	0x08009128

08008a1c <_write_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4d07      	ldr	r5, [pc, #28]	; (8008a3c <_write_r+0x20>)
 8008a20:	4604      	mov	r4, r0
 8008a22:	4608      	mov	r0, r1
 8008a24:	4611      	mov	r1, r2
 8008a26:	2200      	movs	r2, #0
 8008a28:	602a      	str	r2, [r5, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f7f9 fdc9 	bl	80025c2 <_write>
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	d102      	bne.n	8008a3a <_write_r+0x1e>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	b103      	cbz	r3, 8008a3a <_write_r+0x1e>
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	bd38      	pop	{r3, r4, r5, pc}
 8008a3c:	20000598 	.word	0x20000598

08008a40 <__swsetup_r>:
 8008a40:	4b32      	ldr	r3, [pc, #200]	; (8008b0c <__swsetup_r+0xcc>)
 8008a42:	b570      	push	{r4, r5, r6, lr}
 8008a44:	681d      	ldr	r5, [r3, #0]
 8008a46:	4606      	mov	r6, r0
 8008a48:	460c      	mov	r4, r1
 8008a4a:	b125      	cbz	r5, 8008a56 <__swsetup_r+0x16>
 8008a4c:	69ab      	ldr	r3, [r5, #24]
 8008a4e:	b913      	cbnz	r3, 8008a56 <__swsetup_r+0x16>
 8008a50:	4628      	mov	r0, r5
 8008a52:	f7ff f8bb 	bl	8007bcc <__sinit>
 8008a56:	4b2e      	ldr	r3, [pc, #184]	; (8008b10 <__swsetup_r+0xd0>)
 8008a58:	429c      	cmp	r4, r3
 8008a5a:	d10f      	bne.n	8008a7c <__swsetup_r+0x3c>
 8008a5c:	686c      	ldr	r4, [r5, #4]
 8008a5e:	89a3      	ldrh	r3, [r4, #12]
 8008a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a64:	0719      	lsls	r1, r3, #28
 8008a66:	d42c      	bmi.n	8008ac2 <__swsetup_r+0x82>
 8008a68:	06dd      	lsls	r5, r3, #27
 8008a6a:	d411      	bmi.n	8008a90 <__swsetup_r+0x50>
 8008a6c:	2309      	movs	r3, #9
 8008a6e:	6033      	str	r3, [r6, #0]
 8008a70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a74:	81a3      	strh	r3, [r4, #12]
 8008a76:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7a:	e03e      	b.n	8008afa <__swsetup_r+0xba>
 8008a7c:	4b25      	ldr	r3, [pc, #148]	; (8008b14 <__swsetup_r+0xd4>)
 8008a7e:	429c      	cmp	r4, r3
 8008a80:	d101      	bne.n	8008a86 <__swsetup_r+0x46>
 8008a82:	68ac      	ldr	r4, [r5, #8]
 8008a84:	e7eb      	b.n	8008a5e <__swsetup_r+0x1e>
 8008a86:	4b24      	ldr	r3, [pc, #144]	; (8008b18 <__swsetup_r+0xd8>)
 8008a88:	429c      	cmp	r4, r3
 8008a8a:	bf08      	it	eq
 8008a8c:	68ec      	ldreq	r4, [r5, #12]
 8008a8e:	e7e6      	b.n	8008a5e <__swsetup_r+0x1e>
 8008a90:	0758      	lsls	r0, r3, #29
 8008a92:	d512      	bpl.n	8008aba <__swsetup_r+0x7a>
 8008a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a96:	b141      	cbz	r1, 8008aaa <__swsetup_r+0x6a>
 8008a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a9c:	4299      	cmp	r1, r3
 8008a9e:	d002      	beq.n	8008aa6 <__swsetup_r+0x66>
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	f7ff fcdb 	bl	800845c <_free_r>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	6363      	str	r3, [r4, #52]	; 0x34
 8008aaa:	89a3      	ldrh	r3, [r4, #12]
 8008aac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ab0:	81a3      	strh	r3, [r4, #12]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	6063      	str	r3, [r4, #4]
 8008ab6:	6923      	ldr	r3, [r4, #16]
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	f043 0308 	orr.w	r3, r3, #8
 8008ac0:	81a3      	strh	r3, [r4, #12]
 8008ac2:	6923      	ldr	r3, [r4, #16]
 8008ac4:	b94b      	cbnz	r3, 8008ada <__swsetup_r+0x9a>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ad0:	d003      	beq.n	8008ada <__swsetup_r+0x9a>
 8008ad2:	4621      	mov	r1, r4
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	f000 f95b 	bl	8008d90 <__smakebuf_r>
 8008ada:	89a0      	ldrh	r0, [r4, #12]
 8008adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ae0:	f010 0301 	ands.w	r3, r0, #1
 8008ae4:	d00a      	beq.n	8008afc <__swsetup_r+0xbc>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	60a3      	str	r3, [r4, #8]
 8008aea:	6963      	ldr	r3, [r4, #20]
 8008aec:	425b      	negs	r3, r3
 8008aee:	61a3      	str	r3, [r4, #24]
 8008af0:	6923      	ldr	r3, [r4, #16]
 8008af2:	b943      	cbnz	r3, 8008b06 <__swsetup_r+0xc6>
 8008af4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008af8:	d1ba      	bne.n	8008a70 <__swsetup_r+0x30>
 8008afa:	bd70      	pop	{r4, r5, r6, pc}
 8008afc:	0781      	lsls	r1, r0, #30
 8008afe:	bf58      	it	pl
 8008b00:	6963      	ldrpl	r3, [r4, #20]
 8008b02:	60a3      	str	r3, [r4, #8]
 8008b04:	e7f4      	b.n	8008af0 <__swsetup_r+0xb0>
 8008b06:	2000      	movs	r0, #0
 8008b08:	e7f7      	b.n	8008afa <__swsetup_r+0xba>
 8008b0a:	bf00      	nop
 8008b0c:	20000084 	.word	0x20000084
 8008b10:	08009148 	.word	0x08009148
 8008b14:	08009168 	.word	0x08009168
 8008b18:	08009128 	.word	0x08009128

08008b1c <__assert_func>:
 8008b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b1e:	4614      	mov	r4, r2
 8008b20:	461a      	mov	r2, r3
 8008b22:	4b09      	ldr	r3, [pc, #36]	; (8008b48 <__assert_func+0x2c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4605      	mov	r5, r0
 8008b28:	68d8      	ldr	r0, [r3, #12]
 8008b2a:	b14c      	cbz	r4, 8008b40 <__assert_func+0x24>
 8008b2c:	4b07      	ldr	r3, [pc, #28]	; (8008b4c <__assert_func+0x30>)
 8008b2e:	9100      	str	r1, [sp, #0]
 8008b30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b34:	4906      	ldr	r1, [pc, #24]	; (8008b50 <__assert_func+0x34>)
 8008b36:	462b      	mov	r3, r5
 8008b38:	f000 f8e0 	bl	8008cfc <fiprintf>
 8008b3c:	f000 f9a5 	bl	8008e8a <abort>
 8008b40:	4b04      	ldr	r3, [pc, #16]	; (8008b54 <__assert_func+0x38>)
 8008b42:	461c      	mov	r4, r3
 8008b44:	e7f3      	b.n	8008b2e <__assert_func+0x12>
 8008b46:	bf00      	nop
 8008b48:	20000084 	.word	0x20000084
 8008b4c:	080092f5 	.word	0x080092f5
 8008b50:	08009302 	.word	0x08009302
 8008b54:	08009330 	.word	0x08009330

08008b58 <_close_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4d06      	ldr	r5, [pc, #24]	; (8008b74 <_close_r+0x1c>)
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	4604      	mov	r4, r0
 8008b60:	4608      	mov	r0, r1
 8008b62:	602b      	str	r3, [r5, #0]
 8008b64:	f7f9 fd49 	bl	80025fa <_close>
 8008b68:	1c43      	adds	r3, r0, #1
 8008b6a:	d102      	bne.n	8008b72 <_close_r+0x1a>
 8008b6c:	682b      	ldr	r3, [r5, #0]
 8008b6e:	b103      	cbz	r3, 8008b72 <_close_r+0x1a>
 8008b70:	6023      	str	r3, [r4, #0]
 8008b72:	bd38      	pop	{r3, r4, r5, pc}
 8008b74:	20000598 	.word	0x20000598

08008b78 <__sflush_r>:
 8008b78:	898a      	ldrh	r2, [r1, #12]
 8008b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7e:	4605      	mov	r5, r0
 8008b80:	0710      	lsls	r0, r2, #28
 8008b82:	460c      	mov	r4, r1
 8008b84:	d458      	bmi.n	8008c38 <__sflush_r+0xc0>
 8008b86:	684b      	ldr	r3, [r1, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	dc05      	bgt.n	8008b98 <__sflush_r+0x20>
 8008b8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	dc02      	bgt.n	8008b98 <__sflush_r+0x20>
 8008b92:	2000      	movs	r0, #0
 8008b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b9a:	2e00      	cmp	r6, #0
 8008b9c:	d0f9      	beq.n	8008b92 <__sflush_r+0x1a>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ba4:	682f      	ldr	r7, [r5, #0]
 8008ba6:	602b      	str	r3, [r5, #0]
 8008ba8:	d032      	beq.n	8008c10 <__sflush_r+0x98>
 8008baa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	075a      	lsls	r2, r3, #29
 8008bb0:	d505      	bpl.n	8008bbe <__sflush_r+0x46>
 8008bb2:	6863      	ldr	r3, [r4, #4]
 8008bb4:	1ac0      	subs	r0, r0, r3
 8008bb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bb8:	b10b      	cbz	r3, 8008bbe <__sflush_r+0x46>
 8008bba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bbc:	1ac0      	subs	r0, r0, r3
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bc4:	6a21      	ldr	r1, [r4, #32]
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	47b0      	blx	r6
 8008bca:	1c43      	adds	r3, r0, #1
 8008bcc:	89a3      	ldrh	r3, [r4, #12]
 8008bce:	d106      	bne.n	8008bde <__sflush_r+0x66>
 8008bd0:	6829      	ldr	r1, [r5, #0]
 8008bd2:	291d      	cmp	r1, #29
 8008bd4:	d82c      	bhi.n	8008c30 <__sflush_r+0xb8>
 8008bd6:	4a2a      	ldr	r2, [pc, #168]	; (8008c80 <__sflush_r+0x108>)
 8008bd8:	40ca      	lsrs	r2, r1
 8008bda:	07d6      	lsls	r6, r2, #31
 8008bdc:	d528      	bpl.n	8008c30 <__sflush_r+0xb8>
 8008bde:	2200      	movs	r2, #0
 8008be0:	6062      	str	r2, [r4, #4]
 8008be2:	04d9      	lsls	r1, r3, #19
 8008be4:	6922      	ldr	r2, [r4, #16]
 8008be6:	6022      	str	r2, [r4, #0]
 8008be8:	d504      	bpl.n	8008bf4 <__sflush_r+0x7c>
 8008bea:	1c42      	adds	r2, r0, #1
 8008bec:	d101      	bne.n	8008bf2 <__sflush_r+0x7a>
 8008bee:	682b      	ldr	r3, [r5, #0]
 8008bf0:	b903      	cbnz	r3, 8008bf4 <__sflush_r+0x7c>
 8008bf2:	6560      	str	r0, [r4, #84]	; 0x54
 8008bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bf6:	602f      	str	r7, [r5, #0]
 8008bf8:	2900      	cmp	r1, #0
 8008bfa:	d0ca      	beq.n	8008b92 <__sflush_r+0x1a>
 8008bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c00:	4299      	cmp	r1, r3
 8008c02:	d002      	beq.n	8008c0a <__sflush_r+0x92>
 8008c04:	4628      	mov	r0, r5
 8008c06:	f7ff fc29 	bl	800845c <_free_r>
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	6360      	str	r0, [r4, #52]	; 0x34
 8008c0e:	e7c1      	b.n	8008b94 <__sflush_r+0x1c>
 8008c10:	6a21      	ldr	r1, [r4, #32]
 8008c12:	2301      	movs	r3, #1
 8008c14:	4628      	mov	r0, r5
 8008c16:	47b0      	blx	r6
 8008c18:	1c41      	adds	r1, r0, #1
 8008c1a:	d1c7      	bne.n	8008bac <__sflush_r+0x34>
 8008c1c:	682b      	ldr	r3, [r5, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0c4      	beq.n	8008bac <__sflush_r+0x34>
 8008c22:	2b1d      	cmp	r3, #29
 8008c24:	d001      	beq.n	8008c2a <__sflush_r+0xb2>
 8008c26:	2b16      	cmp	r3, #22
 8008c28:	d101      	bne.n	8008c2e <__sflush_r+0xb6>
 8008c2a:	602f      	str	r7, [r5, #0]
 8008c2c:	e7b1      	b.n	8008b92 <__sflush_r+0x1a>
 8008c2e:	89a3      	ldrh	r3, [r4, #12]
 8008c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c34:	81a3      	strh	r3, [r4, #12]
 8008c36:	e7ad      	b.n	8008b94 <__sflush_r+0x1c>
 8008c38:	690f      	ldr	r7, [r1, #16]
 8008c3a:	2f00      	cmp	r7, #0
 8008c3c:	d0a9      	beq.n	8008b92 <__sflush_r+0x1a>
 8008c3e:	0793      	lsls	r3, r2, #30
 8008c40:	680e      	ldr	r6, [r1, #0]
 8008c42:	bf08      	it	eq
 8008c44:	694b      	ldreq	r3, [r1, #20]
 8008c46:	600f      	str	r7, [r1, #0]
 8008c48:	bf18      	it	ne
 8008c4a:	2300      	movne	r3, #0
 8008c4c:	eba6 0807 	sub.w	r8, r6, r7
 8008c50:	608b      	str	r3, [r1, #8]
 8008c52:	f1b8 0f00 	cmp.w	r8, #0
 8008c56:	dd9c      	ble.n	8008b92 <__sflush_r+0x1a>
 8008c58:	6a21      	ldr	r1, [r4, #32]
 8008c5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c5c:	4643      	mov	r3, r8
 8008c5e:	463a      	mov	r2, r7
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b0      	blx	r6
 8008c64:	2800      	cmp	r0, #0
 8008c66:	dc06      	bgt.n	8008c76 <__sflush_r+0xfe>
 8008c68:	89a3      	ldrh	r3, [r4, #12]
 8008c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c6e:	81a3      	strh	r3, [r4, #12]
 8008c70:	f04f 30ff 	mov.w	r0, #4294967295
 8008c74:	e78e      	b.n	8008b94 <__sflush_r+0x1c>
 8008c76:	4407      	add	r7, r0
 8008c78:	eba8 0800 	sub.w	r8, r8, r0
 8008c7c:	e7e9      	b.n	8008c52 <__sflush_r+0xda>
 8008c7e:	bf00      	nop
 8008c80:	20400001 	.word	0x20400001

08008c84 <_fflush_r>:
 8008c84:	b538      	push	{r3, r4, r5, lr}
 8008c86:	690b      	ldr	r3, [r1, #16]
 8008c88:	4605      	mov	r5, r0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	b913      	cbnz	r3, 8008c94 <_fflush_r+0x10>
 8008c8e:	2500      	movs	r5, #0
 8008c90:	4628      	mov	r0, r5
 8008c92:	bd38      	pop	{r3, r4, r5, pc}
 8008c94:	b118      	cbz	r0, 8008c9e <_fflush_r+0x1a>
 8008c96:	6983      	ldr	r3, [r0, #24]
 8008c98:	b90b      	cbnz	r3, 8008c9e <_fflush_r+0x1a>
 8008c9a:	f7fe ff97 	bl	8007bcc <__sinit>
 8008c9e:	4b14      	ldr	r3, [pc, #80]	; (8008cf0 <_fflush_r+0x6c>)
 8008ca0:	429c      	cmp	r4, r3
 8008ca2:	d11b      	bne.n	8008cdc <_fflush_r+0x58>
 8008ca4:	686c      	ldr	r4, [r5, #4]
 8008ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d0ef      	beq.n	8008c8e <_fflush_r+0xa>
 8008cae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cb0:	07d0      	lsls	r0, r2, #31
 8008cb2:	d404      	bmi.n	8008cbe <_fflush_r+0x3a>
 8008cb4:	0599      	lsls	r1, r3, #22
 8008cb6:	d402      	bmi.n	8008cbe <_fflush_r+0x3a>
 8008cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cba:	f7ff f82a 	bl	8007d12 <__retarget_lock_acquire_recursive>
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	f7ff ff59 	bl	8008b78 <__sflush_r>
 8008cc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cc8:	07da      	lsls	r2, r3, #31
 8008cca:	4605      	mov	r5, r0
 8008ccc:	d4e0      	bmi.n	8008c90 <_fflush_r+0xc>
 8008cce:	89a3      	ldrh	r3, [r4, #12]
 8008cd0:	059b      	lsls	r3, r3, #22
 8008cd2:	d4dd      	bmi.n	8008c90 <_fflush_r+0xc>
 8008cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cd6:	f7ff f81d 	bl	8007d14 <__retarget_lock_release_recursive>
 8008cda:	e7d9      	b.n	8008c90 <_fflush_r+0xc>
 8008cdc:	4b05      	ldr	r3, [pc, #20]	; (8008cf4 <_fflush_r+0x70>)
 8008cde:	429c      	cmp	r4, r3
 8008ce0:	d101      	bne.n	8008ce6 <_fflush_r+0x62>
 8008ce2:	68ac      	ldr	r4, [r5, #8]
 8008ce4:	e7df      	b.n	8008ca6 <_fflush_r+0x22>
 8008ce6:	4b04      	ldr	r3, [pc, #16]	; (8008cf8 <_fflush_r+0x74>)
 8008ce8:	429c      	cmp	r4, r3
 8008cea:	bf08      	it	eq
 8008cec:	68ec      	ldreq	r4, [r5, #12]
 8008cee:	e7da      	b.n	8008ca6 <_fflush_r+0x22>
 8008cf0:	08009148 	.word	0x08009148
 8008cf4:	08009168 	.word	0x08009168
 8008cf8:	08009128 	.word	0x08009128

08008cfc <fiprintf>:
 8008cfc:	b40e      	push	{r1, r2, r3}
 8008cfe:	b503      	push	{r0, r1, lr}
 8008d00:	4601      	mov	r1, r0
 8008d02:	ab03      	add	r3, sp, #12
 8008d04:	4805      	ldr	r0, [pc, #20]	; (8008d1c <fiprintf+0x20>)
 8008d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d0a:	6800      	ldr	r0, [r0, #0]
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	f7ff fcaf 	bl	8008670 <_vfiprintf_r>
 8008d12:	b002      	add	sp, #8
 8008d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d18:	b003      	add	sp, #12
 8008d1a:	4770      	bx	lr
 8008d1c:	20000084 	.word	0x20000084

08008d20 <_lseek_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d07      	ldr	r5, [pc, #28]	; (8008d40 <_lseek_r+0x20>)
 8008d24:	4604      	mov	r4, r0
 8008d26:	4608      	mov	r0, r1
 8008d28:	4611      	mov	r1, r2
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	602a      	str	r2, [r5, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f7f9 fc8a 	bl	8002648 <_lseek>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_lseek_r+0x1e>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_lseek_r+0x1e>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	20000598 	.word	0x20000598

08008d44 <__swhatbuf_r>:
 8008d44:	b570      	push	{r4, r5, r6, lr}
 8008d46:	460e      	mov	r6, r1
 8008d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d4c:	2900      	cmp	r1, #0
 8008d4e:	b096      	sub	sp, #88	; 0x58
 8008d50:	4614      	mov	r4, r2
 8008d52:	461d      	mov	r5, r3
 8008d54:	da08      	bge.n	8008d68 <__swhatbuf_r+0x24>
 8008d56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	602a      	str	r2, [r5, #0]
 8008d5e:	061a      	lsls	r2, r3, #24
 8008d60:	d410      	bmi.n	8008d84 <__swhatbuf_r+0x40>
 8008d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d66:	e00e      	b.n	8008d86 <__swhatbuf_r+0x42>
 8008d68:	466a      	mov	r2, sp
 8008d6a:	f000 f895 	bl	8008e98 <_fstat_r>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	dbf1      	blt.n	8008d56 <__swhatbuf_r+0x12>
 8008d72:	9a01      	ldr	r2, [sp, #4]
 8008d74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d7c:	425a      	negs	r2, r3
 8008d7e:	415a      	adcs	r2, r3
 8008d80:	602a      	str	r2, [r5, #0]
 8008d82:	e7ee      	b.n	8008d62 <__swhatbuf_r+0x1e>
 8008d84:	2340      	movs	r3, #64	; 0x40
 8008d86:	2000      	movs	r0, #0
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	b016      	add	sp, #88	; 0x58
 8008d8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008d90 <__smakebuf_r>:
 8008d90:	898b      	ldrh	r3, [r1, #12]
 8008d92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d94:	079d      	lsls	r5, r3, #30
 8008d96:	4606      	mov	r6, r0
 8008d98:	460c      	mov	r4, r1
 8008d9a:	d507      	bpl.n	8008dac <__smakebuf_r+0x1c>
 8008d9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008da0:	6023      	str	r3, [r4, #0]
 8008da2:	6123      	str	r3, [r4, #16]
 8008da4:	2301      	movs	r3, #1
 8008da6:	6163      	str	r3, [r4, #20]
 8008da8:	b002      	add	sp, #8
 8008daa:	bd70      	pop	{r4, r5, r6, pc}
 8008dac:	ab01      	add	r3, sp, #4
 8008dae:	466a      	mov	r2, sp
 8008db0:	f7ff ffc8 	bl	8008d44 <__swhatbuf_r>
 8008db4:	9900      	ldr	r1, [sp, #0]
 8008db6:	4605      	mov	r5, r0
 8008db8:	4630      	mov	r0, r6
 8008dba:	f7ff fbbb 	bl	8008534 <_malloc_r>
 8008dbe:	b948      	cbnz	r0, 8008dd4 <__smakebuf_r+0x44>
 8008dc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dc4:	059a      	lsls	r2, r3, #22
 8008dc6:	d4ef      	bmi.n	8008da8 <__smakebuf_r+0x18>
 8008dc8:	f023 0303 	bic.w	r3, r3, #3
 8008dcc:	f043 0302 	orr.w	r3, r3, #2
 8008dd0:	81a3      	strh	r3, [r4, #12]
 8008dd2:	e7e3      	b.n	8008d9c <__smakebuf_r+0xc>
 8008dd4:	4b0d      	ldr	r3, [pc, #52]	; (8008e0c <__smakebuf_r+0x7c>)
 8008dd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008dd8:	89a3      	ldrh	r3, [r4, #12]
 8008dda:	6020      	str	r0, [r4, #0]
 8008ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008de0:	81a3      	strh	r3, [r4, #12]
 8008de2:	9b00      	ldr	r3, [sp, #0]
 8008de4:	6163      	str	r3, [r4, #20]
 8008de6:	9b01      	ldr	r3, [sp, #4]
 8008de8:	6120      	str	r0, [r4, #16]
 8008dea:	b15b      	cbz	r3, 8008e04 <__smakebuf_r+0x74>
 8008dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008df0:	4630      	mov	r0, r6
 8008df2:	f000 f863 	bl	8008ebc <_isatty_r>
 8008df6:	b128      	cbz	r0, 8008e04 <__smakebuf_r+0x74>
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	f023 0303 	bic.w	r3, r3, #3
 8008dfe:	f043 0301 	orr.w	r3, r3, #1
 8008e02:	81a3      	strh	r3, [r4, #12]
 8008e04:	89a0      	ldrh	r0, [r4, #12]
 8008e06:	4305      	orrs	r5, r0
 8008e08:	81a5      	strh	r5, [r4, #12]
 8008e0a:	e7cd      	b.n	8008da8 <__smakebuf_r+0x18>
 8008e0c:	08007b65 	.word	0x08007b65

08008e10 <__ascii_mbtowc>:
 8008e10:	b082      	sub	sp, #8
 8008e12:	b901      	cbnz	r1, 8008e16 <__ascii_mbtowc+0x6>
 8008e14:	a901      	add	r1, sp, #4
 8008e16:	b142      	cbz	r2, 8008e2a <__ascii_mbtowc+0x1a>
 8008e18:	b14b      	cbz	r3, 8008e2e <__ascii_mbtowc+0x1e>
 8008e1a:	7813      	ldrb	r3, [r2, #0]
 8008e1c:	600b      	str	r3, [r1, #0]
 8008e1e:	7812      	ldrb	r2, [r2, #0]
 8008e20:	1e10      	subs	r0, r2, #0
 8008e22:	bf18      	it	ne
 8008e24:	2001      	movne	r0, #1
 8008e26:	b002      	add	sp, #8
 8008e28:	4770      	bx	lr
 8008e2a:	4610      	mov	r0, r2
 8008e2c:	e7fb      	b.n	8008e26 <__ascii_mbtowc+0x16>
 8008e2e:	f06f 0001 	mvn.w	r0, #1
 8008e32:	e7f8      	b.n	8008e26 <__ascii_mbtowc+0x16>

08008e34 <__malloc_lock>:
 8008e34:	4801      	ldr	r0, [pc, #4]	; (8008e3c <__malloc_lock+0x8>)
 8008e36:	f7fe bf6c 	b.w	8007d12 <__retarget_lock_acquire_recursive>
 8008e3a:	bf00      	nop
 8008e3c:	2000058c 	.word	0x2000058c

08008e40 <__malloc_unlock>:
 8008e40:	4801      	ldr	r0, [pc, #4]	; (8008e48 <__malloc_unlock+0x8>)
 8008e42:	f7fe bf67 	b.w	8007d14 <__retarget_lock_release_recursive>
 8008e46:	bf00      	nop
 8008e48:	2000058c 	.word	0x2000058c

08008e4c <_read_r>:
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	4d07      	ldr	r5, [pc, #28]	; (8008e6c <_read_r+0x20>)
 8008e50:	4604      	mov	r4, r0
 8008e52:	4608      	mov	r0, r1
 8008e54:	4611      	mov	r1, r2
 8008e56:	2200      	movs	r2, #0
 8008e58:	602a      	str	r2, [r5, #0]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	f7f9 fb94 	bl	8002588 <_read>
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	d102      	bne.n	8008e6a <_read_r+0x1e>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	b103      	cbz	r3, 8008e6a <_read_r+0x1e>
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
 8008e6c:	20000598 	.word	0x20000598

08008e70 <__ascii_wctomb>:
 8008e70:	b149      	cbz	r1, 8008e86 <__ascii_wctomb+0x16>
 8008e72:	2aff      	cmp	r2, #255	; 0xff
 8008e74:	bf85      	ittet	hi
 8008e76:	238a      	movhi	r3, #138	; 0x8a
 8008e78:	6003      	strhi	r3, [r0, #0]
 8008e7a:	700a      	strbls	r2, [r1, #0]
 8008e7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e80:	bf98      	it	ls
 8008e82:	2001      	movls	r0, #1
 8008e84:	4770      	bx	lr
 8008e86:	4608      	mov	r0, r1
 8008e88:	4770      	bx	lr

08008e8a <abort>:
 8008e8a:	b508      	push	{r3, lr}
 8008e8c:	2006      	movs	r0, #6
 8008e8e:	f000 f84d 	bl	8008f2c <raise>
 8008e92:	2001      	movs	r0, #1
 8008e94:	f7f9 fb6e 	bl	8002574 <_exit>

08008e98 <_fstat_r>:
 8008e98:	b538      	push	{r3, r4, r5, lr}
 8008e9a:	4d07      	ldr	r5, [pc, #28]	; (8008eb8 <_fstat_r+0x20>)
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	4608      	mov	r0, r1
 8008ea2:	4611      	mov	r1, r2
 8008ea4:	602b      	str	r3, [r5, #0]
 8008ea6:	f7f9 fbb4 	bl	8002612 <_fstat>
 8008eaa:	1c43      	adds	r3, r0, #1
 8008eac:	d102      	bne.n	8008eb4 <_fstat_r+0x1c>
 8008eae:	682b      	ldr	r3, [r5, #0]
 8008eb0:	b103      	cbz	r3, 8008eb4 <_fstat_r+0x1c>
 8008eb2:	6023      	str	r3, [r4, #0]
 8008eb4:	bd38      	pop	{r3, r4, r5, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20000598 	.word	0x20000598

08008ebc <_isatty_r>:
 8008ebc:	b538      	push	{r3, r4, r5, lr}
 8008ebe:	4d06      	ldr	r5, [pc, #24]	; (8008ed8 <_isatty_r+0x1c>)
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	602b      	str	r3, [r5, #0]
 8008ec8:	f7f9 fbb3 	bl	8002632 <_isatty>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	d102      	bne.n	8008ed6 <_isatty_r+0x1a>
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	b103      	cbz	r3, 8008ed6 <_isatty_r+0x1a>
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	bd38      	pop	{r3, r4, r5, pc}
 8008ed8:	20000598 	.word	0x20000598

08008edc <_raise_r>:
 8008edc:	291f      	cmp	r1, #31
 8008ede:	b538      	push	{r3, r4, r5, lr}
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	460d      	mov	r5, r1
 8008ee4:	d904      	bls.n	8008ef0 <_raise_r+0x14>
 8008ee6:	2316      	movs	r3, #22
 8008ee8:	6003      	str	r3, [r0, #0]
 8008eea:	f04f 30ff 	mov.w	r0, #4294967295
 8008eee:	bd38      	pop	{r3, r4, r5, pc}
 8008ef0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008ef2:	b112      	cbz	r2, 8008efa <_raise_r+0x1e>
 8008ef4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ef8:	b94b      	cbnz	r3, 8008f0e <_raise_r+0x32>
 8008efa:	4620      	mov	r0, r4
 8008efc:	f000 f830 	bl	8008f60 <_getpid_r>
 8008f00:	462a      	mov	r2, r5
 8008f02:	4601      	mov	r1, r0
 8008f04:	4620      	mov	r0, r4
 8008f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f0a:	f000 b817 	b.w	8008f3c <_kill_r>
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d00a      	beq.n	8008f28 <_raise_r+0x4c>
 8008f12:	1c59      	adds	r1, r3, #1
 8008f14:	d103      	bne.n	8008f1e <_raise_r+0x42>
 8008f16:	2316      	movs	r3, #22
 8008f18:	6003      	str	r3, [r0, #0]
 8008f1a:	2001      	movs	r0, #1
 8008f1c:	e7e7      	b.n	8008eee <_raise_r+0x12>
 8008f1e:	2400      	movs	r4, #0
 8008f20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f24:	4628      	mov	r0, r5
 8008f26:	4798      	blx	r3
 8008f28:	2000      	movs	r0, #0
 8008f2a:	e7e0      	b.n	8008eee <_raise_r+0x12>

08008f2c <raise>:
 8008f2c:	4b02      	ldr	r3, [pc, #8]	; (8008f38 <raise+0xc>)
 8008f2e:	4601      	mov	r1, r0
 8008f30:	6818      	ldr	r0, [r3, #0]
 8008f32:	f7ff bfd3 	b.w	8008edc <_raise_r>
 8008f36:	bf00      	nop
 8008f38:	20000084 	.word	0x20000084

08008f3c <_kill_r>:
 8008f3c:	b538      	push	{r3, r4, r5, lr}
 8008f3e:	4d07      	ldr	r5, [pc, #28]	; (8008f5c <_kill_r+0x20>)
 8008f40:	2300      	movs	r3, #0
 8008f42:	4604      	mov	r4, r0
 8008f44:	4608      	mov	r0, r1
 8008f46:	4611      	mov	r1, r2
 8008f48:	602b      	str	r3, [r5, #0]
 8008f4a:	f7f9 fb03 	bl	8002554 <_kill>
 8008f4e:	1c43      	adds	r3, r0, #1
 8008f50:	d102      	bne.n	8008f58 <_kill_r+0x1c>
 8008f52:	682b      	ldr	r3, [r5, #0]
 8008f54:	b103      	cbz	r3, 8008f58 <_kill_r+0x1c>
 8008f56:	6023      	str	r3, [r4, #0]
 8008f58:	bd38      	pop	{r3, r4, r5, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20000598 	.word	0x20000598

08008f60 <_getpid_r>:
 8008f60:	f7f9 baf0 	b.w	8002544 <_getpid>

08008f64 <_init>:
 8008f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f66:	bf00      	nop
 8008f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f6a:	bc08      	pop	{r3}
 8008f6c:	469e      	mov	lr, r3
 8008f6e:	4770      	bx	lr

08008f70 <_fini>:
 8008f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f72:	bf00      	nop
 8008f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f76:	bc08      	pop	{r3}
 8008f78:	469e      	mov	lr, r3
 8008f7a:	4770      	bx	lr
