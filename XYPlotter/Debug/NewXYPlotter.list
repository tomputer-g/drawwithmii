
NewXYPlotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002618  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080027d4  080027d4  000127d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002814  08002814  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002814  08002814  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002814  08002814  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002814  08002814  00012814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002818  08002818  00012818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800281c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000010  0800282c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  0800282c  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c160  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b1  00000000  00000000  0002c1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002d958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  0002e498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029406  00000000  00000000  0002ef20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bad3  00000000  00000000  00058326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102034  00000000  00000000  00063df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00165e2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ea0  00000000  00000000  00165e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000010 	.word	0x20000010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080027bc 	.word	0x080027bc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000014 	.word	0x20000014
 80001f8:	080027bc 	.word	0x080027bc

080001fc <setSpeed>:
	while (__HAL_TIM_GET_COUNTER(&htim4) < us) {
		//long x = __HAL_TIM_GET_COUNTER(&htim4);  // wait for the counter to reach the us input in the parameter
	}
} */

void setSpeed(long whatSpeed) {
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	step_delay = (long)60 * (long)1000 / number_of_steps / whatSpeed;
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <setSpeed+0x2c>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	f64e 2260 	movw	r2, #60000	; 0xea60
 800020c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	fb92 f3f3 	sdiv	r3, r2, r3
 8000216:	461a      	mov	r2, r3
 8000218:	4b04      	ldr	r3, [pc, #16]	; (800022c <setSpeed+0x30>)
 800021a:	601a      	str	r2, [r3, #0]
}
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	20000000 	.word	0x20000000
 800022c:	2000002c 	.word	0x2000002c

08000230 <step>:

void step(int steps_to_move) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	int steps_left = abs(steps_to_move);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b00      	cmp	r3, #0
 800023c:	bfb8      	it	lt
 800023e:	425b      	neglt	r3, r3
 8000240:	60fb      	str	r3, [r7, #12]
	if(steps_to_move > 0) {
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b00      	cmp	r3, #0
 8000246:	dd02      	ble.n	800024e <step+0x1e>
		direction = 1;
 8000248:	4b27      	ldr	r3, [pc, #156]	; (80002e8 <step+0xb8>)
 800024a:	2201      	movs	r2, #1
 800024c:	601a      	str	r2, [r3, #0]
		}
	if(steps_to_move < 0) {
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2b00      	cmp	r3, #0
 8000252:	da41      	bge.n	80002d8 <step+0xa8>
		direction = 0;
 8000254:	4b24      	ldr	r3, [pc, #144]	; (80002e8 <step+0xb8>)
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
		}

	while(steps_left > 0) {
 800025a:	e03d      	b.n	80002d8 <step+0xa8>
		unsigned long now = __HAL_TIM_GET_COUNTER(&htim4);
 800025c:	4b23      	ldr	r3, [pc, #140]	; (80002ec <step+0xbc>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000262:	60bb      	str	r3, [r7, #8]
		if(now - last_step_time >= step_delay) {
 8000264:	4b22      	ldr	r3, [pc, #136]	; (80002f0 <step+0xc0>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	68ba      	ldr	r2, [r7, #8]
 800026a:	1ad2      	subs	r2, r2, r3
 800026c:	4b21      	ldr	r3, [pc, #132]	; (80002f4 <step+0xc4>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	429a      	cmp	r2, r3
 8000272:	d331      	bcc.n	80002d8 <step+0xa8>
			last_step_time = now;
 8000274:	4a1e      	ldr	r2, [pc, #120]	; (80002f0 <step+0xc0>)
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	6013      	str	r3, [r2, #0]
			if(direction == 1) {
 800027a:	4b1b      	ldr	r3, [pc, #108]	; (80002e8 <step+0xb8>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d10e      	bne.n	80002a0 <step+0x70>
				step_number++;
 8000282:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <step+0xc8>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	3301      	adds	r3, #1
 8000288:	4a1b      	ldr	r2, [pc, #108]	; (80002f8 <step+0xc8>)
 800028a:	6013      	str	r3, [r2, #0]
				if(step_number == number_of_steps) {
 800028c:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <step+0xc8>)
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <step+0xcc>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	429a      	cmp	r2, r3
 8000296:	d110      	bne.n	80002ba <step+0x8a>
					step_number = 0;
 8000298:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <step+0xc8>)
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	e00c      	b.n	80002ba <step+0x8a>
				}
			}
			else {
				if(step_number == 0) {
 80002a0:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <step+0xc8>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d103      	bne.n	80002b0 <step+0x80>
					step_number = number_of_steps;
 80002a8:	4b14      	ldr	r3, [pc, #80]	; (80002fc <step+0xcc>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a12      	ldr	r2, [pc, #72]	; (80002f8 <step+0xc8>)
 80002ae:	6013      	str	r3, [r2, #0]
				}
				step_number--;
 80002b0:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <step+0xc8>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	3b01      	subs	r3, #1
 80002b6:	4a10      	ldr	r2, [pc, #64]	; (80002f8 <step+0xc8>)
 80002b8:	6013      	str	r3, [r2, #0]
			}
			steps_left--;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	3b01      	subs	r3, #1
 80002be:	60fb      	str	r3, [r7, #12]
			stepMotor(step_number % 4);
 80002c0:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <step+0xc8>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	425a      	negs	r2, r3
 80002c6:	f003 0303 	and.w	r3, r3, #3
 80002ca:	f002 0203 	and.w	r2, r2, #3
 80002ce:	bf58      	it	pl
 80002d0:	4253      	negpl	r3, r2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 f814 	bl	8000300 <stepMotor>
	while(steps_left > 0) {
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	dcbe      	bgt.n	800025c <step+0x2c>
	}
	}
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000030 	.word	0x20000030
 80002ec:	2000003c 	.word	0x2000003c
 80002f0:	20000038 	.word	0x20000038
 80002f4:	2000002c 	.word	0x2000002c
 80002f8:	20000034 	.word	0x20000034
 80002fc:	20000000 	.word	0x20000000

08000300 <stepMotor>:

void stepMotor(int thisStep) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2b03      	cmp	r3, #3
 800030c:	d86e      	bhi.n	80003ec <stepMotor+0xec>
 800030e:	a201      	add	r2, pc, #4	; (adr r2, 8000314 <stepMotor+0x14>)
 8000310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000314:	08000325 	.word	0x08000325
 8000318:	08000357 	.word	0x08000357
 800031c:	08000389 	.word	0x08000389
 8000320:	080003bb 	.word	0x080003bb
	switch(thisStep) {
	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000324:	2201      	movs	r2, #1
 8000326:	2101      	movs	r1, #1
 8000328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032c:	f000 ff48 	bl	80011c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000330:	2200      	movs	r2, #0
 8000332:	2102      	movs	r1, #2
 8000334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000338:	f000 ff42 	bl	80011c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 800033c:	2201      	movs	r2, #1
 800033e:	2104      	movs	r1, #4
 8000340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000344:	f000 ff3c 	bl	80011c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000348:	2200      	movs	r2, #0
 800034a:	2108      	movs	r1, #8
 800034c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000350:	f000 ff36 	bl	80011c0 <HAL_GPIO_WritePin>
		break;
 8000354:	e04a      	b.n	80003ec <stepMotor+0xec>

	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000356:	2200      	movs	r2, #0
 8000358:	2101      	movs	r1, #1
 800035a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035e:	f000 ff2f 	bl	80011c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000362:	2201      	movs	r2, #1
 8000364:	2102      	movs	r1, #2
 8000366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036a:	f000 ff29 	bl	80011c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 800036e:	2201      	movs	r2, #1
 8000370:	2104      	movs	r1, #4
 8000372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000376:	f000 ff23 	bl	80011c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 800037a:	2200      	movs	r2, #0
 800037c:	2108      	movs	r1, #8
 800037e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000382:	f000 ff1d 	bl	80011c0 <HAL_GPIO_WritePin>
		break;
 8000386:	e031      	b.n	80003ec <stepMotor+0xec>

	case 2:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000388:	2200      	movs	r2, #0
 800038a:	2101      	movs	r1, #1
 800038c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000390:	f000 ff16 	bl	80011c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000394:	2201      	movs	r2, #1
 8000396:	2102      	movs	r1, #2
 8000398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039c:	f000 ff10 	bl	80011c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2104      	movs	r1, #4
 80003a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a8:	f000 ff0a 	bl	80011c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2108      	movs	r1, #8
 80003b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b4:	f000 ff04 	bl	80011c0 <HAL_GPIO_WritePin>
		break;
 80003b8:	e018      	b.n	80003ec <stepMotor+0xec>

	case 3:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80003ba:	2201      	movs	r2, #1
 80003bc:	2101      	movs	r1, #1
 80003be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c2:	f000 fefd 	bl	80011c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2102      	movs	r1, #2
 80003ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ce:	f000 fef7 	bl	80011c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2104      	movs	r1, #4
 80003d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003da:	f000 fef1 	bl	80011c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80003de:	2201      	movs	r2, #1
 80003e0:	2108      	movs	r1, #8
 80003e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e6:	f000 feeb 	bl	80011c0 <HAL_GPIO_WritePin>
		break;
 80003ea:	bf00      	nop
		}

	}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f000 fbd1 	bl	8000b9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f828 	bl	8000450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000400:	f000 f8bc 	bl	800057c <MX_GPIO_Init>
  MX_TIM4_Init();
 8000404:	f000 f86a 	bl	80004dc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim4);
 8000408:	480f      	ldr	r0, [pc, #60]	; (8000448 <main+0x54>)
 800040a:	f001 febd 	bl	8002188 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setSpeed(120);
 800040e:	2078      	movs	r0, #120	; 0x78
 8000410:	f7ff fef4 	bl	80001fc <setSpeed>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000414:	2201      	movs	r2, #1
 8000416:	2101      	movs	r1, #1
 8000418:	480c      	ldr	r0, [pc, #48]	; (800044c <main+0x58>)
 800041a:	f000 fed1 	bl	80011c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800041e:	2201      	movs	r2, #1
 8000420:	2102      	movs	r1, #2
 8000422:	480a      	ldr	r0, [pc, #40]	; (800044c <main+0x58>)
 8000424:	f000 fecc 	bl	80011c0 <HAL_GPIO_WritePin>
  // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
   //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
   //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
  while (1)
  {
	 step(200);
 8000428:	20c8      	movs	r0, #200	; 0xc8
 800042a:	f7ff ff01 	bl	8000230 <step>
	 HAL_Delay(500);
 800042e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000432:	f000 fc29 	bl	8000c88 <HAL_Delay>
	 step(-200);
 8000436:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 800043a:	f7ff fef9 	bl	8000230 <step>
	 HAL_Delay(500);
 800043e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000442:	f000 fc21 	bl	8000c88 <HAL_Delay>
	 step(200);
 8000446:	e7ef      	b.n	8000428 <main+0x34>
 8000448:	2000003c 	.word	0x2000003c
 800044c:	48000400 	.word	0x48000400

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b096      	sub	sp, #88	; 0x58
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	f107 0314 	add.w	r3, r7, #20
 800045a:	2244      	movs	r2, #68	; 0x44
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f002 f9a4 	bl	80027ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000464:	463b      	mov	r3, r7
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000472:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000476:	f000 fedb 	bl	8001230 <HAL_PWREx_ControlVoltageScaling>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000480:	f000 fa9c 	bl	80009bc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000484:	2310      	movs	r3, #16
 8000486:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000488:	2301      	movs	r3, #1
 800048a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000490:	2360      	movs	r3, #96	; 0x60
 8000492:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000494:	2300      	movs	r3, #0
 8000496:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	f107 0314 	add.w	r3, r7, #20
 800049c:	4618      	mov	r0, r3
 800049e:	f000 ff7b 	bl	8001398 <HAL_RCC_OscConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004a8:	f000 fa88 	bl	80009bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ac:	230f      	movs	r3, #15
 80004ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004b0:	2300      	movs	r3, #0
 80004b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004c0:	463b      	mov	r3, r7
 80004c2:	2100      	movs	r1, #0
 80004c4:	4618      	mov	r0, r3
 80004c6:	f001 fb8d 	bl	8001be4 <HAL_RCC_ClockConfig>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80004d0:	f000 fa74 	bl	80009bc <Error_Handler>
  }
}
 80004d4:	bf00      	nop
 80004d6:	3758      	adds	r7, #88	; 0x58
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004e2:	f107 0310 	add.w	r3, r7, #16
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80004fa:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <MX_TIM4_Init+0x98>)
 80004fc:	4a1e      	ldr	r2, [pc, #120]	; (8000578 <MX_TIM4_Init+0x9c>)
 80004fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3999;
 8000500:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <MX_TIM4_Init+0x98>)
 8000502:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000506:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000508:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <MX_TIM4_Init+0x98>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800050e:	4b19      	ldr	r3, [pc, #100]	; (8000574 <MX_TIM4_Init+0x98>)
 8000510:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000514:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_TIM4_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <MX_TIM4_Init+0x98>)
 800051e:	2200      	movs	r2, #0
 8000520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000522:	4814      	ldr	r0, [pc, #80]	; (8000574 <MX_TIM4_Init+0x98>)
 8000524:	f001 fdd8 	bl	80020d8 <HAL_TIM_Base_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800052e:	f000 fa45 	bl	80009bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000536:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	480d      	ldr	r0, [pc, #52]	; (8000574 <MX_TIM4_Init+0x98>)
 8000540:	f001 fe8a 	bl	8002258 <HAL_TIM_ConfigClockSource>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800054a:	f000 fa37 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4619      	mov	r1, r3
 800055a:	4806      	ldr	r0, [pc, #24]	; (8000574 <MX_TIM4_Init+0x98>)
 800055c:	f002 f87a 	bl	8002654 <HAL_TIMEx_MasterConfigSynchronization>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000566:	f000 fa29 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	3720      	adds	r7, #32
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	2000003c 	.word	0x2000003c
 8000578:	40000800 	.word	0x40000800

0800057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08e      	sub	sp, #56	; 0x38
 8000580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000592:	4bb2      	ldr	r3, [pc, #712]	; (800085c <MX_GPIO_Init+0x2e0>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	4ab1      	ldr	r2, [pc, #708]	; (800085c <MX_GPIO_Init+0x2e0>)
 8000598:	f043 0310 	orr.w	r3, r3, #16
 800059c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059e:	4baf      	ldr	r3, [pc, #700]	; (800085c <MX_GPIO_Init+0x2e0>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	f003 0310 	and.w	r3, r3, #16
 80005a6:	623b      	str	r3, [r7, #32]
 80005a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	4bac      	ldr	r3, [pc, #688]	; (800085c <MX_GPIO_Init+0x2e0>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	4aab      	ldr	r2, [pc, #684]	; (800085c <MX_GPIO_Init+0x2e0>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b6:	4ba9      	ldr	r3, [pc, #676]	; (800085c <MX_GPIO_Init+0x2e0>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	61fb      	str	r3, [r7, #28]
 80005c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c2:	4ba6      	ldr	r3, [pc, #664]	; (800085c <MX_GPIO_Init+0x2e0>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	4aa5      	ldr	r2, [pc, #660]	; (800085c <MX_GPIO_Init+0x2e0>)
 80005c8:	f043 0320 	orr.w	r3, r3, #32
 80005cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ce:	4ba3      	ldr	r3, [pc, #652]	; (800085c <MX_GPIO_Init+0x2e0>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	f003 0320 	and.w	r3, r3, #32
 80005d6:	61bb      	str	r3, [r7, #24]
 80005d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005da:	4ba0      	ldr	r3, [pc, #640]	; (800085c <MX_GPIO_Init+0x2e0>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a9f      	ldr	r2, [pc, #636]	; (800085c <MX_GPIO_Init+0x2e0>)
 80005e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b9d      	ldr	r3, [pc, #628]	; (800085c <MX_GPIO_Init+0x2e0>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b9a      	ldr	r3, [pc, #616]	; (800085c <MX_GPIO_Init+0x2e0>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a99      	ldr	r2, [pc, #612]	; (800085c <MX_GPIO_Init+0x2e0>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b97      	ldr	r3, [pc, #604]	; (800085c <MX_GPIO_Init+0x2e0>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b94      	ldr	r3, [pc, #592]	; (800085c <MX_GPIO_Init+0x2e0>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a93      	ldr	r2, [pc, #588]	; (800085c <MX_GPIO_Init+0x2e0>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b91      	ldr	r3, [pc, #580]	; (800085c <MX_GPIO_Init+0x2e0>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000622:	4b8e      	ldr	r3, [pc, #568]	; (800085c <MX_GPIO_Init+0x2e0>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a8d      	ldr	r2, [pc, #564]	; (800085c <MX_GPIO_Init+0x2e0>)
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b8b      	ldr	r3, [pc, #556]	; (800085c <MX_GPIO_Init+0x2e0>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800063a:	4b88      	ldr	r3, [pc, #544]	; (800085c <MX_GPIO_Init+0x2e0>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a87      	ldr	r2, [pc, #540]	; (800085c <MX_GPIO_Init+0x2e0>)
 8000640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b85      	ldr	r3, [pc, #532]	; (800085c <MX_GPIO_Init+0x2e0>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000652:	f000 fe91 	bl	8001378 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	210f      	movs	r1, #15
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f000 fdaf 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2103      	movs	r1, #3
 8000666:	487e      	ldr	r0, [pc, #504]	; (8000860 <MX_GPIO_Init+0x2e4>)
 8000668:	f000 fdaa 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800066c:	230c      	movs	r3, #12
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000670:	2302      	movs	r3, #2
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800067c:	230d      	movs	r3, #13
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000684:	4619      	mov	r1, r3
 8000686:	4877      	ldr	r0, [pc, #476]	; (8000864 <MX_GPIO_Init+0x2e8>)
 8000688:	f000 fc08 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800068c:	2307      	movs	r3, #7
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000690:	2312      	movs	r3, #18
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000698:	2303      	movs	r3, #3
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800069c:	2304      	movs	r3, #4
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a4:	4619      	mov	r1, r3
 80006a6:	4870      	ldr	r0, [pc, #448]	; (8000868 <MX_GPIO_Init+0x2ec>)
 80006a8:	f000 fbf8 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b0:	2302      	movs	r3, #2
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80006bc:	230d      	movs	r3, #13
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c4:	4619      	mov	r1, r3
 80006c6:	4868      	ldr	r0, [pc, #416]	; (8000868 <MX_GPIO_Init+0x2ec>)
 80006c8:	f000 fbe8 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006cc:	233f      	movs	r3, #63	; 0x3f
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006d0:	230b      	movs	r3, #11
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006dc:	4619      	mov	r1, r3
 80006de:	4863      	ldr	r0, [pc, #396]	; (800086c <MX_GPIO_Init+0x2f0>)
 80006e0:	f000 fbdc 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006e4:	230f      	movs	r3, #15
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f8:	4619      	mov	r1, r3
 80006fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fe:	f000 fbcd 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000702:	23f0      	movs	r3, #240	; 0xf0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000712:	2305      	movs	r3, #5
 8000714:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	4619      	mov	r1, r3
 800071c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000720:	f000 fbbc 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000724:	2303      	movs	r3, #3
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000738:	4619      	mov	r1, r3
 800073a:	4849      	ldr	r0, [pc, #292]	; (8000860 <MX_GPIO_Init+0x2e4>)
 800073c:	f000 fbae 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000740:	2344      	movs	r3, #68	; 0x44
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000744:	2303      	movs	r3, #3
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000750:	4619      	mov	r1, r3
 8000752:	4843      	ldr	r0, [pc, #268]	; (8000860 <MX_GPIO_Init+0x2e4>)
 8000754:	f000 fba2 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000758:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800076a:	2301      	movs	r3, #1
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800076e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000772:	4619      	mov	r1, r3
 8000774:	483b      	ldr	r0, [pc, #236]	; (8000864 <MX_GPIO_Init+0x2e8>)
 8000776:	f000 fb91 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800077a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800078c:	2303      	movs	r3, #3
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000794:	4619      	mov	r1, r3
 8000796:	4833      	ldr	r0, [pc, #204]	; (8000864 <MX_GPIO_Init+0x2e8>)
 8000798:	f000 fb80 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800079c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007ae:	2301      	movs	r3, #1
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b6:	4619      	mov	r1, r3
 80007b8:	4829      	ldr	r0, [pc, #164]	; (8000860 <MX_GPIO_Init+0x2e4>)
 80007ba:	f000 fb6f 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80007be:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80007d0:	230d      	movs	r3, #13
 80007d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d8:	4619      	mov	r1, r3
 80007da:	4821      	ldr	r0, [pc, #132]	; (8000860 <MX_GPIO_Init+0x2e4>)
 80007dc:	f000 fb5e 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80007f2:	230e      	movs	r3, #14
 80007f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fa:	4619      	mov	r1, r3
 80007fc:	4818      	ldr	r0, [pc, #96]	; (8000860 <MX_GPIO_Init+0x2e4>)
 80007fe:	f000 fb4d 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000802:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000810:	2303      	movs	r3, #3
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000814:	2307      	movs	r3, #7
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081c:	4619      	mov	r1, r3
 800081e:	4814      	ldr	r0, [pc, #80]	; (8000870 <MX_GPIO_Init+0x2f4>)
 8000820:	f000 fb3c 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000824:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000836:	2308      	movs	r3, #8
 8000838:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	4619      	mov	r1, r3
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_GPIO_Init+0x2f8>)
 8000842:	f000 fb2b 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000846:	2340      	movs	r3, #64	; 0x40
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000856:	230d      	movs	r3, #13
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
 800085a:	e00d      	b.n	8000878 <MX_GPIO_Init+0x2fc>
 800085c:	40021000 	.word	0x40021000
 8000860:	48000400 	.word	0x48000400
 8000864:	48001000 	.word	0x48001000
 8000868:	48001400 	.word	0x48001400
 800086c:	48000800 	.word	0x48000800
 8000870:	48000c00 	.word	0x48000c00
 8000874:	48001800 	.word	0x48001800
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087c:	4619      	mov	r1, r3
 800087e:	484c      	ldr	r0, [pc, #304]	; (80009b0 <MX_GPIO_Init+0x434>)
 8000880:	f000 fb0c 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000894:	2302      	movs	r3, #2
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089c:	4619      	mov	r1, r3
 800089e:	4844      	ldr	r0, [pc, #272]	; (80009b0 <MX_GPIO_Init+0x434>)
 80008a0:	f000 fafc 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80008a4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008b6:	230c      	movs	r3, #12
 80008b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	4619      	mov	r1, r3
 80008c0:	483b      	ldr	r0, [pc, #236]	; (80009b0 <MX_GPIO_Init+0x434>)
 80008c2:	f000 faeb 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80008c6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008d8:	230a      	movs	r3, #10
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e0:	4619      	mov	r1, r3
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f000 fad9 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	4619      	mov	r1, r3
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000902:	f000 facb 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000906:	2301      	movs	r3, #1
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000916:	2309      	movs	r3, #9
 8000918:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	4619      	mov	r1, r3
 8000920:	4824      	ldr	r0, [pc, #144]	; (80009b4 <MX_GPIO_Init+0x438>)
 8000922:	f000 fabb 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000926:	2304      	movs	r3, #4
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000936:	230c      	movs	r3, #12
 8000938:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	4619      	mov	r1, r3
 8000940:	481c      	ldr	r0, [pc, #112]	; (80009b4 <MX_GPIO_Init+0x438>)
 8000942:	f000 faab 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000946:	2378      	movs	r3, #120	; 0x78
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000956:	2307      	movs	r3, #7
 8000958:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095e:	4619      	mov	r1, r3
 8000960:	4814      	ldr	r0, [pc, #80]	; (80009b4 <MX_GPIO_Init+0x438>)
 8000962:	f000 fa9b 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000966:	2338      	movs	r3, #56	; 0x38
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000976:	2306      	movs	r3, #6
 8000978:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4619      	mov	r1, r3
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <MX_GPIO_Init+0x43c>)
 8000982:	f000 fa8b 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000986:	f44f 7340 	mov.w	r3, #768	; 0x300
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098c:	2312      	movs	r3, #18
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000998:	2304      	movs	r3, #4
 800099a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a0:	4619      	mov	r1, r3
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_GPIO_Init+0x43c>)
 80009a4:	f000 fa7a 	bl	8000e9c <HAL_GPIO_Init>

}
 80009a8:	bf00      	nop
 80009aa:	3738      	adds	r7, #56	; 0x38
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	48000800 	.word	0x48000800
 80009b4:	48000c00 	.word	0x48000c00
 80009b8:	48000400 	.word	0x48000400

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x44>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_MspInit+0x44>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6613      	str	r3, [r2, #96]	; 0x60
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_MspInit+0x44>)
 80009dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_MspInit+0x44>)
 80009e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x44>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6593      	str	r3, [r2, #88]	; 0x58
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x44>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a25      	ldr	r2, [pc, #148]	; (8000ac4 <HAL_TIM_Base_MspInit+0xb4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d144      	bne.n	8000abc <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a32:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <HAL_TIM_Base_MspInit+0xb8>)
 8000a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a36:	4a24      	ldr	r2, [pc, #144]	; (8000ac8 <HAL_TIM_Base_MspInit+0xb8>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a3e:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <HAL_TIM_Base_MspInit+0xb8>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <HAL_TIM_Base_MspInit+0xb8>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a1e      	ldr	r2, [pc, #120]	; (8000ac8 <HAL_TIM_Base_MspInit+0xb8>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <HAL_TIM_Base_MspInit+0xb8>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <HAL_TIM_Base_MspInit+0xb8>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a18      	ldr	r2, [pc, #96]	; (8000ac8 <HAL_TIM_Base_MspInit+0xb8>)
 8000a68:	f043 0310 	orr.w	r3, r3, #16
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <HAL_TIM_Base_MspInit+0xb8>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0310 	and.w	r3, r3, #16
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a7a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <HAL_TIM_Base_MspInit+0xbc>)
 8000a98:	f000 fa00 	bl	8000e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000aac:	2302      	movs	r3, #2
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <HAL_TIM_Base_MspInit+0xc0>)
 8000ab8:	f000 f9f0 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	; 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40000800 	.word	0x40000800
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48000c00 	.word	0x48000c00
 8000ad0:	48001000 	.word	0x48001000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 f892 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <SystemInit+0x20>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <SystemInit+0x20>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b50:	f7ff ffea 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b56:	490d      	ldr	r1, [pc, #52]	; (8000b8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <LoopForever+0xe>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	; (8000b98 <LoopForever+0x16>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f001 fdf3 	bl	8002764 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b7e:	f7ff fc39 	bl	80003f4 <main>

08000b82 <LoopForever>:

LoopForever:
    b LoopForever
 8000b82:	e7fe      	b.n	8000b82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b84:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b90:	0800281c 	.word	0x0800281c
  ldr r2, =_sbss
 8000b94:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b98:	2000008c 	.word	0x2000008c

08000b9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC1_IRQHandler>

08000b9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 f943 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f000 f80e 	bl	8000bd0 <HAL_InitTick>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d002      	beq.n	8000bc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	71fb      	strb	r3, [r7, #7]
 8000bbe:	e001      	b.n	8000bc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc0:	f7ff ff02 	bl	80009c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <HAL_InitTick+0x6c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d023      	beq.n	8000c2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <HAL_InitTick+0x70>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_InitTick+0x6c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f941 	bl	8000e82 <HAL_SYSTICK_Config>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10f      	bne.n	8000c26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b0f      	cmp	r3, #15
 8000c0a:	d809      	bhi.n	8000c20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f000 f919 	bl	8000e4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <HAL_InitTick+0x74>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	e007      	b.n	8000c30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
 8000c24:	e004      	b.n	8000c30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e001      	b.n	8000c30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000000c 	.word	0x2000000c
 8000c40:	20000004 	.word	0x20000004
 8000c44:	20000008 	.word	0x20000008

08000c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	2000000c 	.word	0x2000000c
 8000c6c:	20000088 	.word	0x20000088

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000088 	.word	0x20000088

08000c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff ffee 	bl	8000c70 <HAL_GetTick>
 8000c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	d005      	beq.n	8000cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_Delay+0x44>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cae:	bf00      	nop
 8000cb0:	f7ff ffde 	bl	8000c70 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d8f7      	bhi.n	8000cb0 <HAL_Delay+0x28>
  {
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000000c 	.word	0x2000000c

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e00:	d301      	bcc.n	8000e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00f      	b.n	8000e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <SysTick_Config+0x40>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0e:	210f      	movs	r1, #15
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f7ff ff8e 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <SysTick_Config+0x40>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1e:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <SysTick_Config+0x40>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	e000e010 	.word	0xe000e010

08000e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff47 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5c:	f7ff ff5c 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	6978      	ldr	r0, [r7, #20]
 8000e68:	f7ff ff8e 	bl	8000d88 <NVIC_EncodePriority>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff5d 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffb0 	bl	8000df0 <SysTick_Config>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eaa:	e166      	b.n	800117a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 8158 	beq.w	8001174 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d005      	beq.n	8000edc <HAL_GPIO_Init+0x40>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d130      	bne.n	8000f3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f12:	2201      	movs	r2, #1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	f003 0201 	and.w	r2, r3, #1
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d017      	beq.n	8000f7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d123      	bne.n	8000fce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3208      	adds	r2, #8
 8000f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	6939      	ldr	r1, [r7, #16]
 8000fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0203 	and.w	r2, r3, #3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80b2 	beq.w	8001174 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001010:	4b61      	ldr	r3, [pc, #388]	; (8001198 <HAL_GPIO_Init+0x2fc>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001014:	4a60      	ldr	r2, [pc, #384]	; (8001198 <HAL_GPIO_Init+0x2fc>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6613      	str	r3, [r2, #96]	; 0x60
 800101c:	4b5e      	ldr	r3, [pc, #376]	; (8001198 <HAL_GPIO_Init+0x2fc>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001028:	4a5c      	ldr	r2, [pc, #368]	; (800119c <HAL_GPIO_Init+0x300>)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001052:	d02b      	beq.n	80010ac <HAL_GPIO_Init+0x210>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a52      	ldr	r2, [pc, #328]	; (80011a0 <HAL_GPIO_Init+0x304>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d025      	beq.n	80010a8 <HAL_GPIO_Init+0x20c>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a51      	ldr	r2, [pc, #324]	; (80011a4 <HAL_GPIO_Init+0x308>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d01f      	beq.n	80010a4 <HAL_GPIO_Init+0x208>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a50      	ldr	r2, [pc, #320]	; (80011a8 <HAL_GPIO_Init+0x30c>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d019      	beq.n	80010a0 <HAL_GPIO_Init+0x204>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a4f      	ldr	r2, [pc, #316]	; (80011ac <HAL_GPIO_Init+0x310>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d013      	beq.n	800109c <HAL_GPIO_Init+0x200>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a4e      	ldr	r2, [pc, #312]	; (80011b0 <HAL_GPIO_Init+0x314>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d00d      	beq.n	8001098 <HAL_GPIO_Init+0x1fc>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a4d      	ldr	r2, [pc, #308]	; (80011b4 <HAL_GPIO_Init+0x318>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d007      	beq.n	8001094 <HAL_GPIO_Init+0x1f8>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a4c      	ldr	r2, [pc, #304]	; (80011b8 <HAL_GPIO_Init+0x31c>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d101      	bne.n	8001090 <HAL_GPIO_Init+0x1f4>
 800108c:	2307      	movs	r3, #7
 800108e:	e00e      	b.n	80010ae <HAL_GPIO_Init+0x212>
 8001090:	2308      	movs	r3, #8
 8001092:	e00c      	b.n	80010ae <HAL_GPIO_Init+0x212>
 8001094:	2306      	movs	r3, #6
 8001096:	e00a      	b.n	80010ae <HAL_GPIO_Init+0x212>
 8001098:	2305      	movs	r3, #5
 800109a:	e008      	b.n	80010ae <HAL_GPIO_Init+0x212>
 800109c:	2304      	movs	r3, #4
 800109e:	e006      	b.n	80010ae <HAL_GPIO_Init+0x212>
 80010a0:	2303      	movs	r3, #3
 80010a2:	e004      	b.n	80010ae <HAL_GPIO_Init+0x212>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e002      	b.n	80010ae <HAL_GPIO_Init+0x212>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <HAL_GPIO_Init+0x212>
 80010ac:	2300      	movs	r3, #0
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	f002 0203 	and.w	r2, r2, #3
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	4093      	lsls	r3, r2
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010be:	4937      	ldr	r1, [pc, #220]	; (800119c <HAL_GPIO_Init+0x300>)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010cc:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <HAL_GPIO_Init+0x320>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010f0:	4a32      	ldr	r2, [pc, #200]	; (80011bc <HAL_GPIO_Init+0x320>)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010f6:	4b31      	ldr	r3, [pc, #196]	; (80011bc <HAL_GPIO_Init+0x320>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800111a:	4a28      	ldr	r2, [pc, #160]	; (80011bc <HAL_GPIO_Init+0x320>)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001120:	4b26      	ldr	r3, [pc, #152]	; (80011bc <HAL_GPIO_Init+0x320>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001144:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <HAL_GPIO_Init+0x320>)
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <HAL_GPIO_Init+0x320>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800116e:	4a13      	ldr	r2, [pc, #76]	; (80011bc <HAL_GPIO_Init+0x320>)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	fa22 f303 	lsr.w	r3, r2, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	f47f ae91 	bne.w	8000eac <HAL_GPIO_Init+0x10>
  }
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40021000 	.word	0x40021000
 800119c:	40010000 	.word	0x40010000
 80011a0:	48000400 	.word	0x48000400
 80011a4:	48000800 	.word	0x48000800
 80011a8:	48000c00 	.word	0x48000c00
 80011ac:	48001000 	.word	0x48001000
 80011b0:	48001400 	.word	0x48001400
 80011b4:	48001800 	.word	0x48001800
 80011b8:	48001c00 	.word	0x48001c00
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <HAL_PWREx_GetVoltageRange+0x3c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001200:	d102      	bne.n	8001208 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001206:	e00b      	b.n	8001220 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_PWREx_GetVoltageRange+0x3c>)
 800120a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800120e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001216:	d102      	bne.n	800121e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800121c:	e000      	b.n	8001220 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800121e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40007000 	.word	0x40007000

08001230 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d141      	bne.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800123e:	4b4b      	ldr	r3, [pc, #300]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800124a:	d131      	bne.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800124c:	4b47      	ldr	r3, [pc, #284]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001252:	4a46      	ldr	r2, [pc, #280]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001258:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800125c:	4b43      	ldr	r3, [pc, #268]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001264:	4a41      	ldr	r2, [pc, #260]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800126c:	4b40      	ldr	r3, [pc, #256]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2232      	movs	r2, #50	; 0x32
 8001272:	fb02 f303 	mul.w	r3, r2, r3
 8001276:	4a3f      	ldr	r2, [pc, #252]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001278:	fba2 2303 	umull	r2, r3, r2, r3
 800127c:	0c9b      	lsrs	r3, r3, #18
 800127e:	3301      	adds	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001282:	e002      	b.n	800128a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	3b01      	subs	r3, #1
 8001288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800128a:	4b38      	ldr	r3, [pc, #224]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001296:	d102      	bne.n	800129e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f2      	bne.n	8001284 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800129e:	4b33      	ldr	r3, [pc, #204]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012aa:	d158      	bne.n	800135e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e057      	b.n	8001360 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012b0:	4b2e      	ldr	r3, [pc, #184]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012b6:	4a2d      	ldr	r2, [pc, #180]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012c0:	e04d      	b.n	800135e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012c8:	d141      	bne.n	800134e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ca:	4b28      	ldr	r3, [pc, #160]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d6:	d131      	bne.n	800133c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012d8:	4b24      	ldr	r3, [pc, #144]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012de:	4a23      	ldr	r2, [pc, #140]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e8:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012f0:	4a1e      	ldr	r2, [pc, #120]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2232      	movs	r2, #50	; 0x32
 80012fe:	fb02 f303 	mul.w	r3, r2, r3
 8001302:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001304:	fba2 2303 	umull	r2, r3, r2, r3
 8001308:	0c9b      	lsrs	r3, r3, #18
 800130a:	3301      	adds	r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800130e:	e002      	b.n	8001316 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	3b01      	subs	r3, #1
 8001314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800131e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001322:	d102      	bne.n	800132a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f2      	bne.n	8001310 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001336:	d112      	bne.n	800135e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e011      	b.n	8001360 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001348:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800134c:	e007      	b.n	800135e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001358:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	40007000 	.word	0x40007000
 8001370:	20000004 	.word	0x20000004
 8001374:	431bde83 	.word	0x431bde83

08001378 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_PWREx_EnableVddIO2+0x1c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001386:	6053      	str	r3, [r2, #4]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40007000 	.word	0x40007000

08001398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d102      	bne.n	80013ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	f000 bc16 	b.w	8001bd8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ac:	4ba0      	ldr	r3, [pc, #640]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 030c 	and.w	r3, r3, #12
 80013b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013b6:	4b9e      	ldr	r3, [pc, #632]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80e4 	beq.w	8001596 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d007      	beq.n	80013e4 <HAL_RCC_OscConfig+0x4c>
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2b0c      	cmp	r3, #12
 80013d8:	f040 808b 	bne.w	80014f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	f040 8087 	bne.w	80014f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013e4:	4b92      	ldr	r3, [pc, #584]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_RCC_OscConfig+0x64>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e3ed      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1a      	ldr	r2, [r3, #32]
 8001400:	4b8b      	ldr	r3, [pc, #556]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <HAL_RCC_OscConfig+0x7e>
 800140c:	4b88      	ldr	r3, [pc, #544]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001414:	e005      	b.n	8001422 <HAL_RCC_OscConfig+0x8a>
 8001416:	4b86      	ldr	r3, [pc, #536]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800141c:	091b      	lsrs	r3, r3, #4
 800141e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001422:	4293      	cmp	r3, r2
 8001424:	d223      	bcs.n	800146e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	4618      	mov	r0, r3
 800142c:	f000 fd92 	bl	8001f54 <RCC_SetFlashLatencyFromMSIRange>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e3ce      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800143a:	4b7d      	ldr	r3, [pc, #500]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a7c      	ldr	r2, [pc, #496]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b7a      	ldr	r3, [pc, #488]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4977      	ldr	r1, [pc, #476]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001458:	4b75      	ldr	r3, [pc, #468]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	4972      	ldr	r1, [pc, #456]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
 800146c:	e025      	b.n	80014ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800146e:	4b70      	ldr	r3, [pc, #448]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a6f      	ldr	r2, [pc, #444]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b6d      	ldr	r3, [pc, #436]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	496a      	ldr	r1, [pc, #424]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001488:	4313      	orrs	r3, r2
 800148a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800148c:	4b68      	ldr	r3, [pc, #416]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	4965      	ldr	r1, [pc, #404]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d109      	bne.n	80014ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fd52 	bl	8001f54 <RCC_SetFlashLatencyFromMSIRange>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e38e      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014ba:	f000 fcbf 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 80014be:	4602      	mov	r2, r0
 80014c0:	4b5b      	ldr	r3, [pc, #364]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	091b      	lsrs	r3, r3, #4
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	495a      	ldr	r1, [pc, #360]	; (8001634 <HAL_RCC_OscConfig+0x29c>)
 80014cc:	5ccb      	ldrb	r3, [r1, r3]
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	fa22 f303 	lsr.w	r3, r2, r3
 80014d6:	4a58      	ldr	r2, [pc, #352]	; (8001638 <HAL_RCC_OscConfig+0x2a0>)
 80014d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014da:	4b58      	ldr	r3, [pc, #352]	; (800163c <HAL_RCC_OscConfig+0x2a4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fb76 	bl	8000bd0 <HAL_InitTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d052      	beq.n	8001594 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	e372      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d032      	beq.n	8001560 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014fa:	4b4d      	ldr	r3, [pc, #308]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a4c      	ldr	r2, [pc, #304]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001506:	f7ff fbb3 	bl	8000c70 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800150e:	f7ff fbaf 	bl	8000c70 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e35b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001520:	4b43      	ldr	r3, [pc, #268]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800152c:	4b40      	ldr	r3, [pc, #256]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a3f      	ldr	r2, [pc, #252]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001532:	f043 0308 	orr.w	r3, r3, #8
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	493a      	ldr	r1, [pc, #232]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800154a:	4b39      	ldr	r3, [pc, #228]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	4935      	ldr	r1, [pc, #212]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 800155a:	4313      	orrs	r3, r2
 800155c:	604b      	str	r3, [r1, #4]
 800155e:	e01a      	b.n	8001596 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001560:	4b33      	ldr	r3, [pc, #204]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a32      	ldr	r2, [pc, #200]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800156c:	f7ff fb80 	bl	8000c70 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001574:	f7ff fb7c 	bl	8000c70 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e328      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001586:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x1dc>
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001594:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d073      	beq.n	800168a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_OscConfig+0x21c>
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b0c      	cmp	r3, #12
 80015ac:	d10e      	bne.n	80015cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d10b      	bne.n	80015cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d063      	beq.n	8001688 <HAL_RCC_OscConfig+0x2f0>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d15f      	bne.n	8001688 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e305      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d4:	d106      	bne.n	80015e4 <HAL_RCC_OscConfig+0x24c>
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a15      	ldr	r2, [pc, #84]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e01d      	b.n	8001620 <HAL_RCC_OscConfig+0x288>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x270>
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a0f      	ldr	r2, [pc, #60]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e00b      	b.n	8001620 <HAL_RCC_OscConfig+0x288>
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a08      	ldr	r2, [pc, #32]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 800160e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a05      	ldr	r2, [pc, #20]	; (8001630 <HAL_RCC_OscConfig+0x298>)
 800161a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01b      	beq.n	8001660 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fb22 	bl	8000c70 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800162e:	e010      	b.n	8001652 <HAL_RCC_OscConfig+0x2ba>
 8001630:	40021000 	.word	0x40021000
 8001634:	080027d4 	.word	0x080027d4
 8001638:	20000004 	.word	0x20000004
 800163c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001640:	f7ff fb16 	bl	8000c70 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b64      	cmp	r3, #100	; 0x64
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e2c2      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001652:	4baf      	ldr	r3, [pc, #700]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x2a8>
 800165e:	e014      	b.n	800168a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fb06 	bl	8000c70 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fb02 	bl	8000c70 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e2ae      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800167a:	4ba5      	ldr	r3, [pc, #660]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x2d0>
 8001686:	e000      	b.n	800168a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d060      	beq.n	8001758 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b04      	cmp	r3, #4
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_OscConfig+0x310>
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b0c      	cmp	r3, #12
 80016a0:	d119      	bne.n	80016d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d116      	bne.n	80016d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a8:	4b99      	ldr	r3, [pc, #612]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_OscConfig+0x328>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e28b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c0:	4b93      	ldr	r3, [pc, #588]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	061b      	lsls	r3, r3, #24
 80016ce:	4990      	ldr	r1, [pc, #576]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d4:	e040      	b.n	8001758 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d023      	beq.n	8001726 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016de:	4b8c      	ldr	r3, [pc, #560]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a8b      	ldr	r2, [pc, #556]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ea:	f7ff fac1 	bl	8000c70 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f2:	f7ff fabd 	bl	8000c70 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e269      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001704:	4b82      	ldr	r3, [pc, #520]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001710:	4b7f      	ldr	r3, [pc, #508]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	061b      	lsls	r3, r3, #24
 800171e:	497c      	ldr	r1, [pc, #496]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
 8001724:	e018      	b.n	8001758 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001726:	4b7a      	ldr	r3, [pc, #488]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a79      	ldr	r2, [pc, #484]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 800172c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001732:	f7ff fa9d 	bl	8000c70 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173a:	f7ff fa99 	bl	8000c70 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e245      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800174c:	4b70      	ldr	r3, [pc, #448]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f0      	bne.n	800173a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d03c      	beq.n	80017de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01c      	beq.n	80017a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176c:	4b68      	ldr	r3, [pc, #416]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 800176e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001772:	4a67      	ldr	r2, [pc, #412]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177c:	f7ff fa78 	bl	8000c70 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff fa74 	bl	8000c70 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e220      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001796:	4b5e      	ldr	r3, [pc, #376]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 8001798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0ef      	beq.n	8001784 <HAL_RCC_OscConfig+0x3ec>
 80017a4:	e01b      	b.n	80017de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a6:	4b5a      	ldr	r3, [pc, #360]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 80017a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ac:	4a58      	ldr	r2, [pc, #352]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff fa5b 	bl	8000c70 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017be:	f7ff fa57 	bl	8000c70 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e203      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d0:	4b4f      	ldr	r3, [pc, #316]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 80017d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1ef      	bne.n	80017be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 80a6 	beq.w	8001938 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017f0:	4b47      	ldr	r3, [pc, #284]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10d      	bne.n	8001818 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fc:	4b44      	ldr	r3, [pc, #272]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	4a43      	ldr	r2, [pc, #268]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 8001802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001806:	6593      	str	r3, [r2, #88]	; 0x58
 8001808:	4b41      	ldr	r3, [pc, #260]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 800180a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001814:	2301      	movs	r3, #1
 8001816:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001818:	4b3e      	ldr	r3, [pc, #248]	; (8001914 <HAL_RCC_OscConfig+0x57c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d118      	bne.n	8001856 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001824:	4b3b      	ldr	r3, [pc, #236]	; (8001914 <HAL_RCC_OscConfig+0x57c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a3a      	ldr	r2, [pc, #232]	; (8001914 <HAL_RCC_OscConfig+0x57c>)
 800182a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001830:	f7ff fa1e 	bl	8000c70 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001838:	f7ff fa1a 	bl	8000c70 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e1c6      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184a:	4b32      	ldr	r3, [pc, #200]	; (8001914 <HAL_RCC_OscConfig+0x57c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d108      	bne.n	8001870 <HAL_RCC_OscConfig+0x4d8>
 800185e:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 8001860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001864:	4a2a      	ldr	r2, [pc, #168]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800186e:	e024      	b.n	80018ba <HAL_RCC_OscConfig+0x522>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b05      	cmp	r3, #5
 8001876:	d110      	bne.n	800189a <HAL_RCC_OscConfig+0x502>
 8001878:	4b25      	ldr	r3, [pc, #148]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 800187a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187e:	4a24      	ldr	r2, [pc, #144]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 800188a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188e:	4a20      	ldr	r2, [pc, #128]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001898:	e00f      	b.n	80018ba <HAL_RCC_OscConfig+0x522>
 800189a:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 800189c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a0:	4a1b      	ldr	r2, [pc, #108]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 80018ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b0:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 80018b2:	f023 0304 	bic.w	r3, r3, #4
 80018b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d016      	beq.n	80018f0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c2:	f7ff f9d5 	bl	8000c70 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018c8:	e00a      	b.n	80018e0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f7ff f9d1 	bl	8000c70 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d8:	4293      	cmp	r3, r2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e17b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCC_OscConfig+0x578>)
 80018e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0ed      	beq.n	80018ca <HAL_RCC_OscConfig+0x532>
 80018ee:	e01a      	b.n	8001926 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f0:	f7ff f9be 	bl	8000c70 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018f6:	e00f      	b.n	8001918 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f8:	f7ff f9ba 	bl	8000c70 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	f241 3288 	movw	r2, #5000	; 0x1388
 8001906:	4293      	cmp	r3, r2
 8001908:	d906      	bls.n	8001918 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e164      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000
 8001914:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001918:	4ba8      	ldr	r3, [pc, #672]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 800191a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1e8      	bne.n	80018f8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001926:	7ffb      	ldrb	r3, [r7, #31]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192c:	4ba3      	ldr	r3, [pc, #652]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	4aa2      	ldr	r2, [pc, #648]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001936:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0320 	and.w	r3, r3, #32
 8001940:	2b00      	cmp	r3, #0
 8001942:	d03c      	beq.n	80019be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	2b00      	cmp	r3, #0
 800194a:	d01c      	beq.n	8001986 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800194c:	4b9b      	ldr	r3, [pc, #620]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 800194e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001952:	4a9a      	ldr	r2, [pc, #616]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195c:	f7ff f988 	bl	8000c70 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001964:	f7ff f984 	bl	8000c70 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e130      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001976:	4b91      	ldr	r3, [pc, #580]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001978:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ef      	beq.n	8001964 <HAL_RCC_OscConfig+0x5cc>
 8001984:	e01b      	b.n	80019be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001986:	4b8d      	ldr	r3, [pc, #564]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001988:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800198c:	4a8b      	ldr	r2, [pc, #556]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001996:	f7ff f96b 	bl	8000c70 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800199e:	f7ff f967 	bl	8000c70 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e113      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019b0:	4b82      	ldr	r3, [pc, #520]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 80019b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1ef      	bne.n	800199e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8107 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	f040 80cb 	bne.w	8001b68 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019d2:	4b7a      	ldr	r3, [pc, #488]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f003 0203 	and.w	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d12c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	3b01      	subs	r3, #1
 80019f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d123      	bne.n	8001a40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d11b      	bne.n	8001a40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d113      	bne.n	8001a40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a22:	085b      	lsrs	r3, r3, #1
 8001a24:	3b01      	subs	r3, #1
 8001a26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d109      	bne.n	8001a40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	085b      	lsrs	r3, r3, #1
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d06d      	beq.n	8001b1c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d068      	beq.n	8001b18 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a46:	4b5d      	ldr	r3, [pc, #372]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d105      	bne.n	8001a5e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a52:	4b5a      	ldr	r3, [pc, #360]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0ba      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a62:	4b56      	ldr	r3, [pc, #344]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a55      	ldr	r2, [pc, #340]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001a68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a6c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a6e:	f7ff f8ff 	bl	8000c70 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a76:	f7ff f8fb 	bl	8000c70 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e0a7      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a88:	4b4c      	ldr	r3, [pc, #304]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1f0      	bne.n	8001a76 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a94:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	4b49      	ldr	r3, [pc, #292]	; (8001bc0 <HAL_RCC_OscConfig+0x828>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001aa4:	3a01      	subs	r2, #1
 8001aa6:	0112      	lsls	r2, r2, #4
 8001aa8:	4311      	orrs	r1, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001aae:	0212      	lsls	r2, r2, #8
 8001ab0:	4311      	orrs	r1, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ab6:	0852      	lsrs	r2, r2, #1
 8001ab8:	3a01      	subs	r2, #1
 8001aba:	0552      	lsls	r2, r2, #21
 8001abc:	4311      	orrs	r1, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ac2:	0852      	lsrs	r2, r2, #1
 8001ac4:	3a01      	subs	r2, #1
 8001ac6:	0652      	lsls	r2, r2, #25
 8001ac8:	4311      	orrs	r1, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ace:	06d2      	lsls	r2, r2, #27
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	493a      	ldr	r1, [pc, #232]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ad8:	4b38      	ldr	r3, [pc, #224]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a37      	ldr	r2, [pc, #220]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ae4:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	4a34      	ldr	r2, [pc, #208]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001af0:	f7ff f8be 	bl	8000c70 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af8:	f7ff f8ba 	bl	8000c70 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e066      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0a:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b16:	e05e      	b.n	8001bd6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e05d      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1c:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d156      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a23      	ldr	r2, [pc, #140]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b34:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	4a20      	ldr	r2, [pc, #128]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b40:	f7ff f896 	bl	8000c70 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff f892 	bl	8000c70 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e03e      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0x7b0>
 8001b66:	e036      	b.n	8001bd6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d031      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001b74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b78:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d105      	bne.n	8001b92 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	4a0c      	ldr	r2, [pc, #48]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001b8c:	f023 0303 	bic.w	r3, r3, #3
 8001b90:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001b98:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7ff f865 	bl	8000c70 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba8:	e00c      	b.n	8001bc4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff f861 	bl	8000c70 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d905      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e00d      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_RCC_OscConfig+0x848>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1ec      	bne.n	8001baa <HAL_RCC_OscConfig+0x812>
 8001bd0:	e001      	b.n	8001bd6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000

08001be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e10f      	b.n	8001e1c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b89      	ldr	r3, [pc, #548]	; (8001e24 <HAL_RCC_ClockConfig+0x240>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d910      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b86      	ldr	r3, [pc, #536]	; (8001e24 <HAL_RCC_ClockConfig+0x240>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 020f 	bic.w	r2, r3, #15
 8001c12:	4984      	ldr	r1, [pc, #528]	; (8001e24 <HAL_RCC_ClockConfig+0x240>)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b82      	ldr	r3, [pc, #520]	; (8001e24 <HAL_RCC_ClockConfig+0x240>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0f7      	b.n	8001e1c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 8089 	beq.w	8001d4c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d133      	bne.n	8001caa <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c42:	4b79      	ldr	r3, [pc, #484]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0e4      	b.n	8001e1c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001c52:	f000 f9d9 	bl	8002008 <RCC_GetSysClockFreqFromPLLSource>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4a74      	ldr	r2, [pc, #464]	; (8001e2c <HAL_RCC_ClockConfig+0x248>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d955      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c5e:	4b72      	ldr	r3, [pc, #456]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10a      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c6a:	4b6f      	ldr	r3, [pc, #444]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c72:	4a6d      	ldr	r2, [pc, #436]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	e044      	b.n	8001d0a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d03e      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x126>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d13a      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c94:	4b64      	ldr	r3, [pc, #400]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c9c:	4a62      	ldr	r2, [pc, #392]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	e02f      	b.n	8001d0a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cb2:	4b5d      	ldr	r3, [pc, #372]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d115      	bne.n	8001cea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e0ac      	b.n	8001e1c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cca:	4b57      	ldr	r3, [pc, #348]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e0a0      	b.n	8001e1c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cda:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e098      	b.n	8001e1c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001cea:	f000 f8a7 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4a4e      	ldr	r2, [pc, #312]	; (8001e2c <HAL_RCC_ClockConfig+0x248>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d909      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cf6:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cfe:	4a4a      	ldr	r2, [pc, #296]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d04:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d0a:	4b47      	ldr	r3, [pc, #284]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f023 0203 	bic.w	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4944      	ldr	r1, [pc, #272]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d1c:	f7fe ffa8 	bl	8000c70 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d24:	f7fe ffa4 	bl	8000c70 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e070      	b.n	8001e1c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3a:	4b3b      	ldr	r3, [pc, #236]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 020c 	and.w	r2, r3, #12
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d1eb      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d009      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d58:	4b33      	ldr	r3, [pc, #204]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4930      	ldr	r1, [pc, #192]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2b80      	cmp	r3, #128	; 0x80
 8001d70:	d105      	bne.n	8001d7e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d72:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	4a2c      	ldr	r2, [pc, #176]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001d78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d7c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d7e:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <HAL_RCC_ClockConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d210      	bcs.n	8001dae <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8c:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <HAL_RCC_ClockConfig+0x240>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 020f 	bic.w	r2, r3, #15
 8001d94:	4923      	ldr	r1, [pc, #140]	; (8001e24 <HAL_RCC_ClockConfig+0x240>)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9c:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <HAL_RCC_ClockConfig+0x240>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e036      	b.n	8001e1c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d008      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dba:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	4918      	ldr	r1, [pc, #96]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d009      	beq.n	8001dec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4910      	ldr	r1, [pc, #64]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dec:	f000 f826 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	490c      	ldr	r1, [pc, #48]	; (8001e30 <HAL_RCC_ClockConfig+0x24c>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
 8001e08:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <HAL_RCC_ClockConfig+0x250>)
 8001e0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_RCC_ClockConfig+0x254>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fedd 	bl	8000bd0 <HAL_InitTick>
 8001e16:	4603      	mov	r3, r0
 8001e18:	73fb      	strb	r3, [r7, #15]

  return status;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40022000 	.word	0x40022000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	04c4b400 	.word	0x04c4b400
 8001e30:	080027d4 	.word	0x080027d4
 8001e34:	20000004 	.word	0x20000004
 8001e38:	20000008 	.word	0x20000008

08001e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e4a:	4b3e      	ldr	r3, [pc, #248]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e54:	4b3b      	ldr	r3, [pc, #236]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_GetSysClockFreq+0x34>
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	d121      	bne.n	8001eae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d11e      	bne.n	8001eae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e70:	4b34      	ldr	r3, [pc, #208]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e7c:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	e005      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e8c:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e98:	4a2b      	ldr	r2, [pc, #172]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10d      	bne.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d102      	bne.n	8001eba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001eb4:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	e004      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ec0:	4b23      	ldr	r3, [pc, #140]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ec2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	2b0c      	cmp	r3, #12
 8001ec8:	d134      	bne.n	8001f34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d003      	beq.n	8001ee2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d003      	beq.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xac>
 8001ee0:	e005      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ee4:	617b      	str	r3, [r7, #20]
      break;
 8001ee6:	e005      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ee8:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x114>)
 8001eea:	617b      	str	r3, [r7, #20]
      break;
 8001eec:	e002      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	617b      	str	r3, [r7, #20]
      break;
 8001ef2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3301      	adds	r3, #1
 8001f00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	fb02 f203 	mul.w	r2, r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	0e5b      	lsrs	r3, r3, #25
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	3301      	adds	r3, #1
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f34:	69bb      	ldr	r3, [r7, #24]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3724      	adds	r7, #36	; 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000
 8001f48:	080027e4 	.word	0x080027e4
 8001f4c:	00f42400 	.word	0x00f42400
 8001f50:	007a1200 	.word	0x007a1200

08001f54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f6c:	f7ff f940 	bl	80011f0 <HAL_PWREx_GetVoltageRange>
 8001f70:	6178      	str	r0, [r7, #20]
 8001f72:	e014      	b.n	8001f9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	4a21      	ldr	r2, [pc, #132]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f80:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f8c:	f7ff f930 	bl	80011f0 <HAL_PWREx_GetVoltageRange>
 8001f90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	4a1a      	ldr	r2, [pc, #104]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa4:	d10b      	bne.n	8001fbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b80      	cmp	r3, #128	; 0x80
 8001faa:	d913      	bls.n	8001fd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2ba0      	cmp	r3, #160	; 0xa0
 8001fb0:	d902      	bls.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	e00d      	b.n	8001fd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fb8:	2301      	movs	r3, #1
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	e00a      	b.n	8001fd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b7f      	cmp	r3, #127	; 0x7f
 8001fc2:	d902      	bls.n	8001fca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	e004      	b.n	8001fd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b70      	cmp	r3, #112	; 0x70
 8001fce:	d101      	bne.n	8001fd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f023 020f 	bic.w	r2, r3, #15
 8001fdc:	4909      	ldr	r1, [pc, #36]	; (8002004 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fe4:	4b07      	ldr	r3, [pc, #28]	; (8002004 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d001      	beq.n	8001ff6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	40022000 	.word	0x40022000

08002008 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002012:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b01      	cmp	r3, #1
 800201c:	d118      	bne.n	8002050 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800201e:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d107      	bne.n	800203a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800202a:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800202c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	e005      	b.n	8002046 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800203a:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002046:	4a21      	ldr	r2, [pc, #132]	; (80020cc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d003      	beq.n	8002068 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d003      	beq.n	800206e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002066:	e005      	b.n	8002074 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800206a:	613b      	str	r3, [r7, #16]
    break;
 800206c:	e005      	b.n	800207a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800206e:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002070:	613b      	str	r3, [r7, #16]
    break;
 8002072:	e002      	b.n	800207a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	613b      	str	r3, [r7, #16]
    break;
 8002078:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800207a:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	091b      	lsrs	r3, r3, #4
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	3301      	adds	r3, #1
 8002086:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	fb02 f203 	mul.w	r2, r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	fbb2 f3f3 	udiv	r3, r2, r3
 800209e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0e5b      	lsrs	r3, r3, #25
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	3301      	adds	r3, #1
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80020ba:	683b      	ldr	r3, [r7, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40021000 	.word	0x40021000
 80020cc:	080027e4 	.word	0x080027e4
 80020d0:	00f42400 	.word	0x00f42400
 80020d4:	007a1200 	.word	0x007a1200

080020d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e049      	b.n	800217e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d106      	bne.n	8002104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7fe fc86 	bl	8000a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3304      	adds	r3, #4
 8002114:	4619      	mov	r1, r3
 8002116:	4610      	mov	r0, r2
 8002118:	f000 f968 	bl	80023ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d001      	beq.n	80021a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e047      	b.n	8002230 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a23      	ldr	r2, [pc, #140]	; (800223c <HAL_TIM_Base_Start+0xb4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01d      	beq.n	80021ee <HAL_TIM_Base_Start+0x66>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ba:	d018      	beq.n	80021ee <HAL_TIM_Base_Start+0x66>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1f      	ldr	r2, [pc, #124]	; (8002240 <HAL_TIM_Base_Start+0xb8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <HAL_TIM_Base_Start+0x66>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1e      	ldr	r2, [pc, #120]	; (8002244 <HAL_TIM_Base_Start+0xbc>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d00e      	beq.n	80021ee <HAL_TIM_Base_Start+0x66>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <HAL_TIM_Base_Start+0xc0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d009      	beq.n	80021ee <HAL_TIM_Base_Start+0x66>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a1b      	ldr	r2, [pc, #108]	; (800224c <HAL_TIM_Base_Start+0xc4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d004      	beq.n	80021ee <HAL_TIM_Base_Start+0x66>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a19      	ldr	r2, [pc, #100]	; (8002250 <HAL_TIM_Base_Start+0xc8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d115      	bne.n	800221a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_TIM_Base_Start+0xcc>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b06      	cmp	r3, #6
 80021fe:	d015      	beq.n	800222c <HAL_TIM_Base_Start+0xa4>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002206:	d011      	beq.n	800222c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002218:	e008      	b.n	800222c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0201 	orr.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	e000      	b.n	800222e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800222c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	40012c00 	.word	0x40012c00
 8002240:	40000400 	.word	0x40000400
 8002244:	40000800 	.word	0x40000800
 8002248:	40000c00 	.word	0x40000c00
 800224c:	40013400 	.word	0x40013400
 8002250:	40014000 	.word	0x40014000
 8002254:	00010007 	.word	0x00010007

08002258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_TIM_ConfigClockSource+0x1c>
 8002270:	2302      	movs	r3, #2
 8002272:	e0b6      	b.n	80023e2 <HAL_TIM_ConfigClockSource+0x18a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002292:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800229e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b0:	d03e      	beq.n	8002330 <HAL_TIM_ConfigClockSource+0xd8>
 80022b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b6:	f200 8087 	bhi.w	80023c8 <HAL_TIM_ConfigClockSource+0x170>
 80022ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022be:	f000 8086 	beq.w	80023ce <HAL_TIM_ConfigClockSource+0x176>
 80022c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c6:	d87f      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x170>
 80022c8:	2b70      	cmp	r3, #112	; 0x70
 80022ca:	d01a      	beq.n	8002302 <HAL_TIM_ConfigClockSource+0xaa>
 80022cc:	2b70      	cmp	r3, #112	; 0x70
 80022ce:	d87b      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x170>
 80022d0:	2b60      	cmp	r3, #96	; 0x60
 80022d2:	d050      	beq.n	8002376 <HAL_TIM_ConfigClockSource+0x11e>
 80022d4:	2b60      	cmp	r3, #96	; 0x60
 80022d6:	d877      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x170>
 80022d8:	2b50      	cmp	r3, #80	; 0x50
 80022da:	d03c      	beq.n	8002356 <HAL_TIM_ConfigClockSource+0xfe>
 80022dc:	2b50      	cmp	r3, #80	; 0x50
 80022de:	d873      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x170>
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d058      	beq.n	8002396 <HAL_TIM_ConfigClockSource+0x13e>
 80022e4:	2b40      	cmp	r3, #64	; 0x40
 80022e6:	d86f      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x170>
 80022e8:	2b30      	cmp	r3, #48	; 0x30
 80022ea:	d064      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x15e>
 80022ec:	2b30      	cmp	r3, #48	; 0x30
 80022ee:	d86b      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x170>
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d060      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x15e>
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d867      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x170>
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d05c      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x15e>
 80022fc:	2b10      	cmp	r3, #16
 80022fe:	d05a      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x15e>
 8002300:	e062      	b.n	80023c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	6899      	ldr	r1, [r3, #8]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f000 f97f 	bl	8002614 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002324:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	609a      	str	r2, [r3, #8]
      break;
 800232e:	e04f      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	6899      	ldr	r1, [r3, #8]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f000 f968 	bl	8002614 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002352:	609a      	str	r2, [r3, #8]
      break;
 8002354:	e03c      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6859      	ldr	r1, [r3, #4]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	461a      	mov	r2, r3
 8002364:	f000 f8dc 	bl	8002520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2150      	movs	r1, #80	; 0x50
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f935 	bl	80025de <TIM_ITRx_SetConfig>
      break;
 8002374:	e02c      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6859      	ldr	r1, [r3, #4]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	461a      	mov	r2, r3
 8002384:	f000 f8fb 	bl	800257e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2160      	movs	r1, #96	; 0x60
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f925 	bl	80025de <TIM_ITRx_SetConfig>
      break;
 8002394:	e01c      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6859      	ldr	r1, [r3, #4]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f000 f8bc 	bl	8002520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2140      	movs	r1, #64	; 0x40
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f915 	bl	80025de <TIM_ITRx_SetConfig>
      break;
 80023b4:	e00c      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4619      	mov	r1, r3
 80023c0:	4610      	mov	r0, r2
 80023c2:	f000 f90c 	bl	80025de <TIM_ITRx_SetConfig>
      break;
 80023c6:	e003      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
      break;
 80023cc:	e000      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80023ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a40      	ldr	r2, [pc, #256]	; (8002500 <TIM_Base_SetConfig+0x114>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d013      	beq.n	800242c <TIM_Base_SetConfig+0x40>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240a:	d00f      	beq.n	800242c <TIM_Base_SetConfig+0x40>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a3d      	ldr	r2, [pc, #244]	; (8002504 <TIM_Base_SetConfig+0x118>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00b      	beq.n	800242c <TIM_Base_SetConfig+0x40>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a3c      	ldr	r2, [pc, #240]	; (8002508 <TIM_Base_SetConfig+0x11c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d007      	beq.n	800242c <TIM_Base_SetConfig+0x40>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a3b      	ldr	r2, [pc, #236]	; (800250c <TIM_Base_SetConfig+0x120>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d003      	beq.n	800242c <TIM_Base_SetConfig+0x40>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a3a      	ldr	r2, [pc, #232]	; (8002510 <TIM_Base_SetConfig+0x124>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d108      	bne.n	800243e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a2f      	ldr	r2, [pc, #188]	; (8002500 <TIM_Base_SetConfig+0x114>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d01f      	beq.n	8002486 <TIM_Base_SetConfig+0x9a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244c:	d01b      	beq.n	8002486 <TIM_Base_SetConfig+0x9a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a2c      	ldr	r2, [pc, #176]	; (8002504 <TIM_Base_SetConfig+0x118>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d017      	beq.n	8002486 <TIM_Base_SetConfig+0x9a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a2b      	ldr	r2, [pc, #172]	; (8002508 <TIM_Base_SetConfig+0x11c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <TIM_Base_SetConfig+0x9a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a2a      	ldr	r2, [pc, #168]	; (800250c <TIM_Base_SetConfig+0x120>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00f      	beq.n	8002486 <TIM_Base_SetConfig+0x9a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a29      	ldr	r2, [pc, #164]	; (8002510 <TIM_Base_SetConfig+0x124>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00b      	beq.n	8002486 <TIM_Base_SetConfig+0x9a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a28      	ldr	r2, [pc, #160]	; (8002514 <TIM_Base_SetConfig+0x128>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d007      	beq.n	8002486 <TIM_Base_SetConfig+0x9a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a27      	ldr	r2, [pc, #156]	; (8002518 <TIM_Base_SetConfig+0x12c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d003      	beq.n	8002486 <TIM_Base_SetConfig+0x9a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a26      	ldr	r2, [pc, #152]	; (800251c <TIM_Base_SetConfig+0x130>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d108      	bne.n	8002498 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800248c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4313      	orrs	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a10      	ldr	r2, [pc, #64]	; (8002500 <TIM_Base_SetConfig+0x114>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00f      	beq.n	80024e4 <TIM_Base_SetConfig+0xf8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <TIM_Base_SetConfig+0x124>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00b      	beq.n	80024e4 <TIM_Base_SetConfig+0xf8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a11      	ldr	r2, [pc, #68]	; (8002514 <TIM_Base_SetConfig+0x128>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d007      	beq.n	80024e4 <TIM_Base_SetConfig+0xf8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a10      	ldr	r2, [pc, #64]	; (8002518 <TIM_Base_SetConfig+0x12c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d003      	beq.n	80024e4 <TIM_Base_SetConfig+0xf8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a0f      	ldr	r2, [pc, #60]	; (800251c <TIM_Base_SetConfig+0x130>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d103      	bne.n	80024ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	615a      	str	r2, [r3, #20]
}
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40012c00 	.word	0x40012c00
 8002504:	40000400 	.word	0x40000400
 8002508:	40000800 	.word	0x40000800
 800250c:	40000c00 	.word	0x40000c00
 8002510:	40013400 	.word	0x40013400
 8002514:	40014000 	.word	0x40014000
 8002518:	40014400 	.word	0x40014400
 800251c:	40014800 	.word	0x40014800

08002520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	f023 0201 	bic.w	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800254a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f023 030a 	bic.w	r3, r3, #10
 800255c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	621a      	str	r2, [r3, #32]
}
 8002572:	bf00      	nop
 8002574:	371c      	adds	r7, #28
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800257e:	b480      	push	{r7}
 8002580:	b087      	sub	sp, #28
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	f023 0210 	bic.w	r2, r3, #16
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	031b      	lsls	r3, r3, #12
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	621a      	str	r2, [r3, #32]
}
 80025d2:	bf00      	nop
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025de:	b480      	push	{r7}
 80025e0:	b085      	sub	sp, #20
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f043 0307 	orr.w	r3, r3, #7
 8002600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	609a      	str	r2, [r3, #8]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800262e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	021a      	lsls	r2, r3, #8
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	431a      	orrs	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4313      	orrs	r3, r2
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	609a      	str	r2, [r3, #8]
}
 8002648:	bf00      	nop
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002668:	2302      	movs	r3, #2
 800266a:	e068      	b.n	800273e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a2e      	ldr	r2, [pc, #184]	; (800274c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d004      	beq.n	80026a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a2d      	ldr	r2, [pc, #180]	; (8002750 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d108      	bne.n	80026b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80026a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1e      	ldr	r2, [pc, #120]	; (800274c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d01d      	beq.n	8002712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026de:	d018      	beq.n	8002712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1b      	ldr	r2, [pc, #108]	; (8002754 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d00e      	beq.n	8002712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a18      	ldr	r2, [pc, #96]	; (800275c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d009      	beq.n	8002712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a13      	ldr	r2, [pc, #76]	; (8002750 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d004      	beq.n	8002712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a14      	ldr	r2, [pc, #80]	; (8002760 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10c      	bne.n	800272c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002718:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	4313      	orrs	r3, r2
 8002722:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40013400 	.word	0x40013400
 8002754:	40000400 	.word	0x40000400
 8002758:	40000800 	.word	0x40000800
 800275c:	40000c00 	.word	0x40000c00
 8002760:	40014000 	.word	0x40014000

08002764 <__libc_init_array>:
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	4d0d      	ldr	r5, [pc, #52]	; (800279c <__libc_init_array+0x38>)
 8002768:	4c0d      	ldr	r4, [pc, #52]	; (80027a0 <__libc_init_array+0x3c>)
 800276a:	1b64      	subs	r4, r4, r5
 800276c:	10a4      	asrs	r4, r4, #2
 800276e:	2600      	movs	r6, #0
 8002770:	42a6      	cmp	r6, r4
 8002772:	d109      	bne.n	8002788 <__libc_init_array+0x24>
 8002774:	4d0b      	ldr	r5, [pc, #44]	; (80027a4 <__libc_init_array+0x40>)
 8002776:	4c0c      	ldr	r4, [pc, #48]	; (80027a8 <__libc_init_array+0x44>)
 8002778:	f000 f820 	bl	80027bc <_init>
 800277c:	1b64      	subs	r4, r4, r5
 800277e:	10a4      	asrs	r4, r4, #2
 8002780:	2600      	movs	r6, #0
 8002782:	42a6      	cmp	r6, r4
 8002784:	d105      	bne.n	8002792 <__libc_init_array+0x2e>
 8002786:	bd70      	pop	{r4, r5, r6, pc}
 8002788:	f855 3b04 	ldr.w	r3, [r5], #4
 800278c:	4798      	blx	r3
 800278e:	3601      	adds	r6, #1
 8002790:	e7ee      	b.n	8002770 <__libc_init_array+0xc>
 8002792:	f855 3b04 	ldr.w	r3, [r5], #4
 8002796:	4798      	blx	r3
 8002798:	3601      	adds	r6, #1
 800279a:	e7f2      	b.n	8002782 <__libc_init_array+0x1e>
 800279c:	08002814 	.word	0x08002814
 80027a0:	08002814 	.word	0x08002814
 80027a4:	08002814 	.word	0x08002814
 80027a8:	08002818 	.word	0x08002818

080027ac <memset>:
 80027ac:	4402      	add	r2, r0
 80027ae:	4603      	mov	r3, r0
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d100      	bne.n	80027b6 <memset+0xa>
 80027b4:	4770      	bx	lr
 80027b6:	f803 1b01 	strb.w	r1, [r3], #1
 80027ba:	e7f9      	b.n	80027b0 <memset+0x4>

080027bc <_init>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	bf00      	nop
 80027c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c2:	bc08      	pop	{r3}
 80027c4:	469e      	mov	lr, r3
 80027c6:	4770      	bx	lr

080027c8 <_fini>:
 80027c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ca:	bf00      	nop
 80027cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ce:	bc08      	pop	{r3}
 80027d0:	469e      	mov	lr, r3
 80027d2:	4770      	bx	lr
