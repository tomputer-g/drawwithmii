
NewXYPlotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b14  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002cd0  08002cd0  00012cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d14  08002d14  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002d14  08002d14  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d14  08002d14  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d14  08002d14  00012d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d18  08002d18  00012d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000078  08002d94  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002d94  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b789  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a00  00000000  00000000  0002b831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002d238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  0002de48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a615  00000000  00000000  0002e980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb0c  00000000  00000000  00058f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104146  00000000  00000000  00065aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169be7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f4  00000000  00000000  00169c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000078 	.word	0x20000078
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002cb8 	.word	0x08002cb8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	2000007c 	.word	0x2000007c
 80001f8:	08002cb8 	.word	0x08002cb8

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 ff31 	bl	8001066 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f820 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f8b4 	bl	8000374 <MX_GPIO_Init>
  MX_TIM4_Init();
 800020c:	f000 f862 	bl	80002d4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  step_init(4, &htim4, 1);
 8000210:	2201      	movs	r2, #1
 8000212:	490c      	ldr	r1, [pc, #48]	; (8000244 <main+0x48>)
 8000214:	2004      	movs	r0, #4
 8000216:	f000 fad3 	bl	80007c0 <step_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //code assumes the jumper is connected for the enables and thus will not handle writing 1 to them
  setSpeed(60);
 800021a:	203c      	movs	r0, #60	; 0x3c
 800021c:	f000 faee 	bl	80007fc <setSpeed>
  
  while (1)
  {
	 step(200, 0);
 8000220:	2100      	movs	r1, #0
 8000222:	20c8      	movs	r0, #200	; 0xc8
 8000224:	f000 fb04 	bl	8000830 <step>
	 HAL_Delay(1000);
 8000228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022c:	f000 ff90 	bl	8001150 <HAL_Delay>
	 step(-200, 0);
 8000230:	2100      	movs	r1, #0
 8000232:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8000236:	f000 fafb 	bl	8000830 <step>
	 HAL_Delay(1000);
 800023a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800023e:	f000 ff87 	bl	8001150 <HAL_Delay>
	 step(200, 0);
 8000242:	e7ed      	b.n	8000220 <main+0x24>
 8000244:	20000094 	.word	0x20000094

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b096      	sub	sp, #88	; 0x58
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0314 	add.w	r3, r7, #20
 8000252:	2244      	movs	r2, #68	; 0x44
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f002 fd26 	bl	8002ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	463b      	mov	r3, r7
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800026a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800026e:	f001 fa43 	bl	80016f8 <HAL_PWREx_ControlVoltageScaling>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000278:	f000 fa9c 	bl	80007b4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800027c:	2310      	movs	r3, #16
 800027e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000280:	2301      	movs	r3, #1
 8000282:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000288:	2360      	movs	r3, #96	; 0x60
 800028a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800028c:	2300      	movs	r3, #0
 800028e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000290:	f107 0314 	add.w	r3, r7, #20
 8000294:	4618      	mov	r0, r3
 8000296:	f001 fae3 	bl	8001860 <HAL_RCC_OscConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002a0:	f000 fa88 	bl	80007b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a4:	230f      	movs	r3, #15
 80002a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002a8:	2300      	movs	r3, #0
 80002aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b8:	463b      	mov	r3, r7
 80002ba:	2100      	movs	r1, #0
 80002bc:	4618      	mov	r0, r3
 80002be:	f001 fef5 	bl	80020ac <HAL_RCC_ClockConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002c8:	f000 fa74 	bl	80007b4 <Error_Handler>
  }
}
 80002cc:	bf00      	nop
 80002ce:	3758      	adds	r7, #88	; 0x58
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b088      	sub	sp, #32
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002da:	f107 0310 	add.w	r3, r7, #16
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80002f2:	4b1e      	ldr	r3, [pc, #120]	; (800036c <MX_TIM4_Init+0x98>)
 80002f4:	4a1e      	ldr	r2, [pc, #120]	; (8000370 <MX_TIM4_Init+0x9c>)
 80002f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3999;
 80002f8:	4b1c      	ldr	r3, [pc, #112]	; (800036c <MX_TIM4_Init+0x98>)
 80002fa:	f640 729f 	movw	r2, #3999	; 0xf9f
 80002fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000300:	4b1a      	ldr	r3, [pc, #104]	; (800036c <MX_TIM4_Init+0x98>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8000306:	4b19      	ldr	r3, [pc, #100]	; (800036c <MX_TIM4_Init+0x98>)
 8000308:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800030c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <MX_TIM4_Init+0x98>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000314:	4b15      	ldr	r3, [pc, #84]	; (800036c <MX_TIM4_Init+0x98>)
 8000316:	2200      	movs	r2, #0
 8000318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800031a:	4814      	ldr	r0, [pc, #80]	; (800036c <MX_TIM4_Init+0x98>)
 800031c:	f002 f940 	bl	80025a0 <HAL_TIM_Base_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000326:	f000 fa45 	bl	80007b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800032a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800032e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000330:	f107 0310 	add.w	r3, r7, #16
 8000334:	4619      	mov	r1, r3
 8000336:	480d      	ldr	r0, [pc, #52]	; (800036c <MX_TIM4_Init+0x98>)
 8000338:	f002 f9f2 	bl	8002720 <HAL_TIM_ConfigClockSource>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000342:	f000 fa37 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000346:	2300      	movs	r3, #0
 8000348:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	4619      	mov	r1, r3
 8000352:	4806      	ldr	r0, [pc, #24]	; (800036c <MX_TIM4_Init+0x98>)
 8000354:	f002 fbe2 	bl	8002b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800035e:	f000 fa29 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	3720      	adds	r7, #32
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000094 	.word	0x20000094
 8000370:	40000800 	.word	0x40000800

08000374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b08e      	sub	sp, #56	; 0x38
 8000378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800038a:	4bb2      	ldr	r3, [pc, #712]	; (8000654 <MX_GPIO_Init+0x2e0>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038e:	4ab1      	ldr	r2, [pc, #708]	; (8000654 <MX_GPIO_Init+0x2e0>)
 8000390:	f043 0310 	orr.w	r3, r3, #16
 8000394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000396:	4baf      	ldr	r3, [pc, #700]	; (8000654 <MX_GPIO_Init+0x2e0>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039a:	f003 0310 	and.w	r3, r3, #16
 800039e:	623b      	str	r3, [r7, #32]
 80003a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a2:	4bac      	ldr	r3, [pc, #688]	; (8000654 <MX_GPIO_Init+0x2e0>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a6:	4aab      	ldr	r2, [pc, #684]	; (8000654 <MX_GPIO_Init+0x2e0>)
 80003a8:	f043 0304 	orr.w	r3, r3, #4
 80003ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ae:	4ba9      	ldr	r3, [pc, #676]	; (8000654 <MX_GPIO_Init+0x2e0>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b2:	f003 0304 	and.w	r3, r3, #4
 80003b6:	61fb      	str	r3, [r7, #28]
 80003b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ba:	4ba6      	ldr	r3, [pc, #664]	; (8000654 <MX_GPIO_Init+0x2e0>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	4aa5      	ldr	r2, [pc, #660]	; (8000654 <MX_GPIO_Init+0x2e0>)
 80003c0:	f043 0320 	orr.w	r3, r3, #32
 80003c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003c6:	4ba3      	ldr	r3, [pc, #652]	; (8000654 <MX_GPIO_Init+0x2e0>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	f003 0320 	and.w	r3, r3, #32
 80003ce:	61bb      	str	r3, [r7, #24]
 80003d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003d2:	4ba0      	ldr	r3, [pc, #640]	; (8000654 <MX_GPIO_Init+0x2e0>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a9f      	ldr	r2, [pc, #636]	; (8000654 <MX_GPIO_Init+0x2e0>)
 80003d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b9d      	ldr	r3, [pc, #628]	; (8000654 <MX_GPIO_Init+0x2e0>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b9a      	ldr	r3, [pc, #616]	; (8000654 <MX_GPIO_Init+0x2e0>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a99      	ldr	r2, [pc, #612]	; (8000654 <MX_GPIO_Init+0x2e0>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b97      	ldr	r3, [pc, #604]	; (8000654 <MX_GPIO_Init+0x2e0>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	613b      	str	r3, [r7, #16]
 8000400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000402:	4b94      	ldr	r3, [pc, #592]	; (8000654 <MX_GPIO_Init+0x2e0>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	4a93      	ldr	r2, [pc, #588]	; (8000654 <MX_GPIO_Init+0x2e0>)
 8000408:	f043 0302 	orr.w	r3, r3, #2
 800040c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040e:	4b91      	ldr	r3, [pc, #580]	; (8000654 <MX_GPIO_Init+0x2e0>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	f003 0302 	and.w	r3, r3, #2
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800041a:	4b8e      	ldr	r3, [pc, #568]	; (8000654 <MX_GPIO_Init+0x2e0>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041e:	4a8d      	ldr	r2, [pc, #564]	; (8000654 <MX_GPIO_Init+0x2e0>)
 8000420:	f043 0308 	orr.w	r3, r3, #8
 8000424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000426:	4b8b      	ldr	r3, [pc, #556]	; (8000654 <MX_GPIO_Init+0x2e0>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042a:	f003 0308 	and.w	r3, r3, #8
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000432:	4b88      	ldr	r3, [pc, #544]	; (8000654 <MX_GPIO_Init+0x2e0>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000436:	4a87      	ldr	r2, [pc, #540]	; (8000654 <MX_GPIO_Init+0x2e0>)
 8000438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800043c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800043e:	4b85      	ldr	r3, [pc, #532]	; (8000654 <MX_GPIO_Init+0x2e0>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800044a:	f001 f9f9 	bl	8001840 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	210f      	movs	r1, #15
 8000452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000456:	f001 f917 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	2103      	movs	r1, #3
 800045e:	487e      	ldr	r0, [pc, #504]	; (8000658 <MX_GPIO_Init+0x2e4>)
 8000460:	f001 f912 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000464:	230c      	movs	r3, #12
 8000466:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000468:	2302      	movs	r3, #2
 800046a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	2300      	movs	r3, #0
 8000472:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000474:	230d      	movs	r3, #13
 8000476:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800047c:	4619      	mov	r1, r3
 800047e:	4877      	ldr	r0, [pc, #476]	; (800065c <MX_GPIO_Init+0x2e8>)
 8000480:	f000 ff70 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000484:	2307      	movs	r3, #7
 8000486:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000488:	2312      	movs	r3, #18
 800048a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000490:	2303      	movs	r3, #3
 8000492:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000494:	2304      	movs	r3, #4
 8000496:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800049c:	4619      	mov	r1, r3
 800049e:	4870      	ldr	r0, [pc, #448]	; (8000660 <MX_GPIO_Init+0x2ec>)
 80004a0:	f000 ff60 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a8:	2302      	movs	r3, #2
 80004aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	2300      	movs	r3, #0
 80004b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80004b4:	230d      	movs	r3, #13
 80004b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004bc:	4619      	mov	r1, r3
 80004be:	4868      	ldr	r0, [pc, #416]	; (8000660 <MX_GPIO_Init+0x2ec>)
 80004c0:	f000 ff50 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80004c4:	233f      	movs	r3, #63	; 0x3f
 80004c6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004c8:	230b      	movs	r3, #11
 80004ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d4:	4619      	mov	r1, r3
 80004d6:	4863      	ldr	r0, [pc, #396]	; (8000664 <MX_GPIO_Init+0x2f0>)
 80004d8:	f000 ff44 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80004dc:	230f      	movs	r3, #15
 80004de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e0:	2301      	movs	r3, #1
 80004e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	2300      	movs	r3, #0
 80004ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f0:	4619      	mov	r1, r3
 80004f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f6:	f000 ff35 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004fa:	23f0      	movs	r3, #240	; 0xf0
 80004fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fe:	2302      	movs	r3, #2
 8000500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000506:	2303      	movs	r3, #3
 8000508:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800050a:	2305      	movs	r3, #5
 800050c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000512:	4619      	mov	r1, r3
 8000514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000518:	f000 ff24 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800051c:	2303      	movs	r3, #3
 800051e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000520:	2301      	movs	r3, #1
 8000522:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000528:	2300      	movs	r3, #0
 800052a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000530:	4619      	mov	r1, r3
 8000532:	4849      	ldr	r0, [pc, #292]	; (8000658 <MX_GPIO_Init+0x2e4>)
 8000534:	f000 ff16 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000538:	2344      	movs	r3, #68	; 0x44
 800053a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800053c:	2303      	movs	r3, #3
 800053e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000548:	4619      	mov	r1, r3
 800054a:	4843      	ldr	r0, [pc, #268]	; (8000658 <MX_GPIO_Init+0x2e4>)
 800054c:	f000 ff0a 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000550:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000556:	2302      	movs	r3, #2
 8000558:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055e:	2300      	movs	r3, #0
 8000560:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000562:	2301      	movs	r3, #1
 8000564:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056a:	4619      	mov	r1, r3
 800056c:	483b      	ldr	r0, [pc, #236]	; (800065c <MX_GPIO_Init+0x2e8>)
 800056e:	f000 fef9 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000572:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000578:	2302      	movs	r3, #2
 800057a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000584:	2303      	movs	r3, #3
 8000586:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058c:	4619      	mov	r1, r3
 800058e:	4833      	ldr	r0, [pc, #204]	; (800065c <MX_GPIO_Init+0x2e8>)
 8000590:	f000 fee8 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059a:	2302      	movs	r3, #2
 800059c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2300      	movs	r3, #0
 80005a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80005a6:	2301      	movs	r3, #1
 80005a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ae:	4619      	mov	r1, r3
 80005b0:	4829      	ldr	r0, [pc, #164]	; (8000658 <MX_GPIO_Init+0x2e4>)
 80005b2:	f000 fed7 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80005b6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80005ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005bc:	2302      	movs	r3, #2
 80005be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2300      	movs	r3, #0
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80005c8:	230d      	movs	r3, #13
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d0:	4619      	mov	r1, r3
 80005d2:	4821      	ldr	r0, [pc, #132]	; (8000658 <MX_GPIO_Init+0x2e4>)
 80005d4:	f000 fec6 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80005d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005de:	2302      	movs	r3, #2
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80005ea:	230e      	movs	r3, #14
 80005ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f2:	4619      	mov	r1, r3
 80005f4:	4818      	ldr	r0, [pc, #96]	; (8000658 <MX_GPIO_Init+0x2e4>)
 80005f6:	f000 feb5 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000600:	2302      	movs	r3, #2
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800060c:	2307      	movs	r3, #7
 800060e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000614:	4619      	mov	r1, r3
 8000616:	4814      	ldr	r0, [pc, #80]	; (8000668 <MX_GPIO_Init+0x2f4>)
 8000618:	f000 fea4 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800061c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000622:	2302      	movs	r3, #2
 8000624:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800062a:	2303      	movs	r3, #3
 800062c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800062e:	2308      	movs	r3, #8
 8000630:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000636:	4619      	mov	r1, r3
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <MX_GPIO_Init+0x2f8>)
 800063a:	f000 fe93 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800063e:	2340      	movs	r3, #64	; 0x40
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000642:	2302      	movs	r3, #2
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800064e:	230d      	movs	r3, #13
 8000650:	637b      	str	r3, [r7, #52]	; 0x34
 8000652:	e00d      	b.n	8000670 <MX_GPIO_Init+0x2fc>
 8000654:	40021000 	.word	0x40021000
 8000658:	48000400 	.word	0x48000400
 800065c:	48001000 	.word	0x48001000
 8000660:	48001400 	.word	0x48001400
 8000664:	48000800 	.word	0x48000800
 8000668:	48000c00 	.word	0x48000c00
 800066c:	48001800 	.word	0x48001800
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000674:	4619      	mov	r1, r3
 8000676:	484c      	ldr	r0, [pc, #304]	; (80007a8 <MX_GPIO_Init+0x434>)
 8000678:	f000 fe74 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800068c:	2302      	movs	r3, #2
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000694:	4619      	mov	r1, r3
 8000696:	4844      	ldr	r0, [pc, #272]	; (80007a8 <MX_GPIO_Init+0x434>)
 8000698:	f000 fe64 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800069c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a2:	2302      	movs	r3, #2
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006aa:	2303      	movs	r3, #3
 80006ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80006ae:	230c      	movs	r3, #12
 80006b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b6:	4619      	mov	r1, r3
 80006b8:	483b      	ldr	r0, [pc, #236]	; (80007a8 <MX_GPIO_Init+0x434>)
 80006ba:	f000 fe53 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80006be:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006d0:	230a      	movs	r3, #10
 80006d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d8:	4619      	mov	r1, r3
 80006da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006de:	f000 fe41 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f000 fe33 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006fe:	2301      	movs	r3, #1
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800070e:	2309      	movs	r3, #9
 8000710:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000716:	4619      	mov	r1, r3
 8000718:	4824      	ldr	r0, [pc, #144]	; (80007ac <MX_GPIO_Init+0x438>)
 800071a:	f000 fe23 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800071e:	2304      	movs	r3, #4
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072a:	2303      	movs	r3, #3
 800072c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800072e:	230c      	movs	r3, #12
 8000730:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000736:	4619      	mov	r1, r3
 8000738:	481c      	ldr	r0, [pc, #112]	; (80007ac <MX_GPIO_Init+0x438>)
 800073a:	f000 fe13 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800073e:	2378      	movs	r3, #120	; 0x78
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800074e:	2307      	movs	r3, #7
 8000750:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000756:	4619      	mov	r1, r3
 8000758:	4814      	ldr	r0, [pc, #80]	; (80007ac <MX_GPIO_Init+0x438>)
 800075a:	f000 fe03 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800075e:	2338      	movs	r3, #56	; 0x38
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076a:	2303      	movs	r3, #3
 800076c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800076e:	2306      	movs	r3, #6
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000776:	4619      	mov	r1, r3
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_GPIO_Init+0x43c>)
 800077a:	f000 fdf3 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800077e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000784:	2312      	movs	r3, #18
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000790:	2304      	movs	r3, #4
 8000792:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000798:	4619      	mov	r1, r3
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_GPIO_Init+0x43c>)
 800079c:	f000 fde2 	bl	8001364 <HAL_GPIO_Init>

}
 80007a0:	bf00      	nop
 80007a2:	3738      	adds	r7, #56	; 0x38
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	48000800 	.word	0x48000800
 80007ac:	48000c00 	.word	0x48000c00
 80007b0:	48000400 	.word	0x48000400

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	e7fe      	b.n	80007bc <Error_Handler+0x8>
	...

080007c0 <step_init>:

//for step mode let a value of 0 represent half step and
//a value of 1 represent full step mode
int stepMode = 1;

void step_init(int pin_num, TIM_HandleTypeDef* countTimer, int mode) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
    if(pin_num != 4) {
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	d002      	beq.n	80007d8 <step_init+0x18>
        exit(1);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f002 fa30 	bl	8002c38 <exit>
    }
countTim = countTimer;
 80007d8:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <step_init+0x34>)
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	6013      	str	r3, [r2, #0]
stepMode = mode;
 80007de:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <step_init+0x38>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6013      	str	r3, [r2, #0]
 HAL_TIM_Base_Start(countTimer);
 80007e4:	68b8      	ldr	r0, [r7, #8]
 80007e6:	f001 ff33 	bl	8002650 <HAL_TIM_Base_Start>
}
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000e0 	.word	0x200000e0
 80007f8:	20000004 	.word	0x20000004

080007fc <setSpeed>:

void setSpeed(long whatSpeed) {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	step_delay = (long)60 * (long)1000 / number_of_steps / whatSpeed;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <setSpeed+0x2c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f64e 2260 	movw	r2, #60000	; 0xea60
 800080c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	fb92 f3f3 	sdiv	r3, r2, r3
 8000816:	461a      	mov	r2, r3
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <setSpeed+0x30>)
 800081a:	601a      	str	r2, [r3, #0]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	20000000 	.word	0x20000000
 800082c:	200000e4 	.word	0x200000e4

08000830 <step>:
void switchMode(int mode) {
	stepMode = mode;
}


void step(int steps_to_move, int axis) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
	int steps_left = abs(steps_to_move);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	bfb8      	it	lt
 8000840:	425b      	neglt	r3, r3
 8000842:	60fb      	str	r3, [r7, #12]
	if(steps_to_move > 0) {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	dd02      	ble.n	8000850 <step+0x20>
		direction = 1;
 800084a:	4b33      	ldr	r3, [pc, #204]	; (8000918 <step+0xe8>)
 800084c:	2201      	movs	r2, #1
 800084e:	601a      	str	r2, [r3, #0]
		}
	if(steps_to_move < 0) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b00      	cmp	r3, #0
 8000854:	da58      	bge.n	8000908 <step+0xd8>
		direction = 0;
 8000856:	4b30      	ldr	r3, [pc, #192]	; (8000918 <step+0xe8>)
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
		}

	while(steps_left > 0) {
 800085c:	e054      	b.n	8000908 <step+0xd8>
		unsigned long now = __HAL_TIM_GET_COUNTER(countTim);
 800085e:	4b2f      	ldr	r3, [pc, #188]	; (800091c <step+0xec>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000866:	60bb      	str	r3, [r7, #8]
		if(now - last_step_time >= step_delay) {
 8000868:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <step+0xf0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	68ba      	ldr	r2, [r7, #8]
 800086e:	1ad2      	subs	r2, r2, r3
 8000870:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <step+0xf4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	429a      	cmp	r2, r3
 8000876:	d347      	bcc.n	8000908 <step+0xd8>
			last_step_time = now;
 8000878:	4a29      	ldr	r2, [pc, #164]	; (8000920 <step+0xf0>)
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	6013      	str	r3, [r2, #0]
			if(direction == 1) {
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <step+0xe8>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d10e      	bne.n	80008a4 <step+0x74>
				step_number++;
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <step+0xf8>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	3301      	adds	r3, #1
 800088c:	4a26      	ldr	r2, [pc, #152]	; (8000928 <step+0xf8>)
 800088e:	6013      	str	r3, [r2, #0]
				if(step_number == number_of_steps) {
 8000890:	4b25      	ldr	r3, [pc, #148]	; (8000928 <step+0xf8>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <step+0xfc>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	429a      	cmp	r2, r3
 800089a:	d110      	bne.n	80008be <step+0x8e>
					step_number = 0;
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <step+0xf8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	e00c      	b.n	80008be <step+0x8e>
				}
			}
			else {
				if(step_number == 0) {
 80008a4:	4b20      	ldr	r3, [pc, #128]	; (8000928 <step+0xf8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d103      	bne.n	80008b4 <step+0x84>
					step_number = number_of_steps;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <step+0xfc>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a1d      	ldr	r2, [pc, #116]	; (8000928 <step+0xf8>)
 80008b2:	6013      	str	r3, [r2, #0]
				}
				step_number--;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <step+0xf8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	4a1b      	ldr	r2, [pc, #108]	; (8000928 <step+0xf8>)
 80008bc:	6013      	str	r3, [r2, #0]
			}
			steps_left--;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
			if(stepMode) {
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <step+0x100>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d00d      	beq.n	80008e8 <step+0xb8>
				stepMotor(step_number % 4, axis);
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <step+0xf8>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	425a      	negs	r2, r3
 80008d2:	f003 0303 	and.w	r3, r3, #3
 80008d6:	f002 0203 	and.w	r2, r2, #3
 80008da:	bf58      	it	pl
 80008dc:	4253      	negpl	r3, r2
 80008de:	6839      	ldr	r1, [r7, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f829 	bl	8000938 <stepMotor>
 80008e6:	e00f      	b.n	8000908 <step+0xd8>
			}
			else {
				stepMotor(step_number % 7, axis);
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <step+0xf8>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <step+0x104>)
 80008ee:	fb83 1302 	smull	r1, r3, r3, r2
 80008f2:	4413      	add	r3, r2
 80008f4:	1099      	asrs	r1, r3, #2
 80008f6:	17d3      	asrs	r3, r2, #31
 80008f8:	1ac8      	subs	r0, r1, r3
 80008fa:	4603      	mov	r3, r0
 80008fc:	00db      	lsls	r3, r3, #3
 80008fe:	1a1b      	subs	r3, r3, r0
 8000900:	1ad0      	subs	r0, r2, r3
 8000902:	6839      	ldr	r1, [r7, #0]
 8000904:	f000 f818 	bl	8000938 <stepMotor>
	while(steps_left > 0) {
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b00      	cmp	r3, #0
 800090c:	dca7      	bgt.n	800085e <step+0x2e>
			}
	}
	}
}
 800090e:	bf00      	nop
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200000e8 	.word	0x200000e8
 800091c:	200000e0 	.word	0x200000e0
 8000920:	200000f0 	.word	0x200000f0
 8000924:	200000e4 	.word	0x200000e4
 8000928:	200000ec 	.word	0x200000ec
 800092c:	20000000 	.word	0x20000000
 8000930:	20000004 	.word	0x20000004
 8000934:	92492493 	.word	0x92492493

08000938 <stepMotor>:

void stepMotor(int thisStep, int axis) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	if(!axis) {
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	f040 8157 	bne.w	8000bf8 <stepMotor+0x2c0>
		if(stepMode) {
 800094a:	4bdf      	ldr	r3, [pc, #892]	; (8000cc8 <stepMotor+0x390>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d072      	beq.n	8000a38 <stepMotor+0x100>
			//lettering is notationaly consistant with http://www.idc-online.com/technical_references/pdfs/electrical_engineering/Step_Sequence_of_Stepper_Motor.pdf
			switch(thisStep) {
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b03      	cmp	r3, #3
 8000956:	f200 827b 	bhi.w	8000e50 <stepMotor+0x518>
 800095a:	a201      	add	r2, pc, #4	; (adr r2, 8000960 <stepMotor+0x28>)
 800095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000960:	08000971 	.word	0x08000971
 8000964:	080009a3 	.word	0x080009a3
 8000968:	080009d5 	.word	0x080009d5
 800096c:	08000a07 	.word	0x08000a07
			case 0:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1); //d
 8000970:	2201      	movs	r2, #1
 8000972:	2101      	movs	r1, #1
 8000974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000978:	f000 fe86 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0); //b
 800097c:	2200      	movs	r2, #0
 800097e:	2102      	movs	r1, #2
 8000980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000984:	f000 fe80 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1); //a
 8000988:	2201      	movs	r2, #1
 800098a:	2104      	movs	r1, #4
 800098c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000990:	f000 fe7a 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0); //c
 8000994:	2200      	movs	r2, #0
 8000996:	2108      	movs	r1, #8
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f000 fe74 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 80009a0:	e256      	b.n	8000e50 <stepMotor+0x518>

			case 1:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0); //d
 80009a2:	2200      	movs	r2, #0
 80009a4:	2101      	movs	r1, #1
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009aa:	f000 fe6d 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1); //b
 80009ae:	2201      	movs	r2, #1
 80009b0:	2102      	movs	r1, #2
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b6:	f000 fe67 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1); //a
 80009ba:	2201      	movs	r2, #1
 80009bc:	2104      	movs	r1, #4
 80009be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c2:	f000 fe61 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0); //c
 80009c6:	2200      	movs	r2, #0
 80009c8:	2108      	movs	r1, #8
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ce:	f000 fe5b 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 80009d2:	e23d      	b.n	8000e50 <stepMotor+0x518>

			case 2:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0); //d
 80009d4:	2200      	movs	r2, #0
 80009d6:	2101      	movs	r1, #1
 80009d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009dc:	f000 fe54 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1); //b
 80009e0:	2201      	movs	r2, #1
 80009e2:	2102      	movs	r1, #2
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f000 fe4e 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0); //a
 80009ec:	2200      	movs	r2, #0
 80009ee:	2104      	movs	r1, #4
 80009f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f4:	f000 fe48 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1); //c
 80009f8:	2201      	movs	r2, #1
 80009fa:	2108      	movs	r1, #8
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a00:	f000 fe42 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000a04:	e224      	b.n	8000e50 <stepMotor+0x518>

			case 3:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1); //d
 8000a06:	2201      	movs	r2, #1
 8000a08:	2101      	movs	r1, #1
 8000a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0e:	f000 fe3b 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0); //b
 8000a12:	2200      	movs	r2, #0
 8000a14:	2102      	movs	r1, #2
 8000a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1a:	f000 fe35 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0); //a
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2104      	movs	r1, #4
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a26:	f000 fe2f 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1); //c
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2108      	movs	r1, #8
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f000 fe29 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000a36:	e20b      	b.n	8000e50 <stepMotor+0x518>
				}
			}
		else {
			switch(thisStep) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b07      	cmp	r3, #7
 8000a3c:	f200 8208 	bhi.w	8000e50 <stepMotor+0x518>
 8000a40:	a201      	add	r2, pc, #4	; (adr r2, 8000a48 <stepMotor+0x110>)
 8000a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a46:	bf00      	nop
 8000a48:	08000a69 	.word	0x08000a69
 8000a4c:	08000a9b 	.word	0x08000a9b
 8000a50:	08000acd 	.word	0x08000acd
 8000a54:	08000aff 	.word	0x08000aff
 8000a58:	08000b31 	.word	0x08000b31
 8000a5c:	08000b63 	.word	0x08000b63
 8000a60:	08000b95 	.word	0x08000b95
 8000a64:	08000bc7 	.word	0x08000bc7
			case 0:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1); //d
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a70:	f000 fe0a 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0); //b
 8000a74:	2200      	movs	r2, #0
 8000a76:	2102      	movs	r1, #2
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f000 fe04 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1); //a
 8000a80:	2201      	movs	r2, #1
 8000a82:	2104      	movs	r1, #4
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f000 fdfe 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0); //c
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2108      	movs	r1, #8
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f000 fdf8 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000a98:	e1da      	b.n	8000e50 <stepMotor+0x518>

			case 1:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f000 fdf1 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aae:	f000 fdeb 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aba:	f000 fde5 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2108      	movs	r1, #8
 8000ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac6:	f000 fddf 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000aca:	e1c1      	b.n	8000e50 <stepMotor+0x518>

			case 2:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2101      	movs	r1, #1
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad4:	f000 fdd8 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2102      	movs	r1, #2
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae0:	f000 fdd2 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2104      	movs	r1, #4
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f000 fdcc 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2108      	movs	r1, #8
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f000 fdc6 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000afc:	e1a8      	b.n	8000e50 <stepMotor+0x518>

			case 3:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2101      	movs	r1, #1
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b06:	f000 fdbf 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b12:	f000 fdb9 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2104      	movs	r1, #4
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1e:	f000 fdb3 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2108      	movs	r1, #8
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2a:	f000 fdad 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000b2e:	e18f      	b.n	8000e50 <stepMotor+0x518>
			case 4:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2101      	movs	r1, #1
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f000 fda6 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2102      	movs	r1, #2
 8000b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b44:	f000 fda0 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b50:	f000 fd9a 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2108      	movs	r1, #8
 8000b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5c:	f000 fd94 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000b60:	e176      	b.n	8000e50 <stepMotor+0x518>
			case 5:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2101      	movs	r1, #1
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f000 fd8d 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2102      	movs	r1, #2
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b76:	f000 fd87 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f000 fd81 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2108      	movs	r1, #8
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f000 fd7b 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000b92:	e15d      	b.n	8000e50 <stepMotor+0x518>
			case 6:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000b94:	2201      	movs	r2, #1
 8000b96:	2101      	movs	r1, #1
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9c:	f000 fd74 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba8:	f000 fd6e 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2104      	movs	r1, #4
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb4:	f000 fd68 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2108      	movs	r1, #8
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc0:	f000 fd62 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000bc4:	e144      	b.n	8000e50 <stepMotor+0x518>
			case 7:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2101      	movs	r1, #1
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bce:	f000 fd5b 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bda:	f000 fd55 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2104      	movs	r1, #4
 8000be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be6:	f000 fd4f 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2108      	movs	r1, #8
 8000bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf2:	f000 fd49 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000bf6:	e12b      	b.n	8000e50 <stepMotor+0x518>
				}
		}
	}
	else {
		if(stepMode) {
 8000bf8:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <stepMotor+0x390>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d067      	beq.n	8000cd0 <stepMotor+0x398>
			switch(thisStep) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	f200 8124 	bhi.w	8000e50 <stepMotor+0x518>
 8000c08:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <stepMotor+0x2d8>)
 8000c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0e:	bf00      	nop
 8000c10:	08000c21 	.word	0x08000c21
 8000c14:	08000c4b 	.word	0x08000c4b
 8000c18:	08000c75 	.word	0x08000c75
 8000c1c:	08000c9f 	.word	0x08000c9f
				//lettering is notationaly consistant with http://www.idc-online.com/technical_references/pdfs/electrical_engineering/Step_Sequence_of_Stepper_Motor.pdf
			case 0:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1); //d
 8000c20:	2201      	movs	r2, #1
 8000c22:	2101      	movs	r1, #1
 8000c24:	4829      	ldr	r0, [pc, #164]	; (8000ccc <stepMotor+0x394>)
 8000c26:	f000 fd2f 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); //b
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	4827      	ldr	r0, [pc, #156]	; (8000ccc <stepMotor+0x394>)
 8000c30:	f000 fd2a 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1); //a
 8000c34:	2201      	movs	r2, #1
 8000c36:	2104      	movs	r1, #4
 8000c38:	4824      	ldr	r0, [pc, #144]	; (8000ccc <stepMotor+0x394>)
 8000c3a:	f000 fd25 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0); //c
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2108      	movs	r1, #8
 8000c42:	4822      	ldr	r0, [pc, #136]	; (8000ccc <stepMotor+0x394>)
 8000c44:	f000 fd20 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000c48:	e102      	b.n	8000e50 <stepMotor+0x518>

			case 1:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //d
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	481f      	ldr	r0, [pc, #124]	; (8000ccc <stepMotor+0x394>)
 8000c50:	f000 fd1a 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1); //b
 8000c54:	2201      	movs	r2, #1
 8000c56:	2102      	movs	r1, #2
 8000c58:	481c      	ldr	r0, [pc, #112]	; (8000ccc <stepMotor+0x394>)
 8000c5a:	f000 fd15 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1); //a
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2104      	movs	r1, #4
 8000c62:	481a      	ldr	r0, [pc, #104]	; (8000ccc <stepMotor+0x394>)
 8000c64:	f000 fd10 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0); //c
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2108      	movs	r1, #8
 8000c6c:	4817      	ldr	r0, [pc, #92]	; (8000ccc <stepMotor+0x394>)
 8000c6e:	f000 fd0b 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000c72:	e0ed      	b.n	8000e50 <stepMotor+0x518>

			case 2:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //d
 8000c74:	2200      	movs	r2, #0
 8000c76:	2101      	movs	r1, #1
 8000c78:	4814      	ldr	r0, [pc, #80]	; (8000ccc <stepMotor+0x394>)
 8000c7a:	f000 fd05 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1); //b
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2102      	movs	r1, #2
 8000c82:	4812      	ldr	r0, [pc, #72]	; (8000ccc <stepMotor+0x394>)
 8000c84:	f000 fd00 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0); //a
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	480f      	ldr	r0, [pc, #60]	; (8000ccc <stepMotor+0x394>)
 8000c8e:	f000 fcfb 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1); //c
 8000c92:	2201      	movs	r2, #1
 8000c94:	2108      	movs	r1, #8
 8000c96:	480d      	ldr	r0, [pc, #52]	; (8000ccc <stepMotor+0x394>)
 8000c98:	f000 fcf6 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000c9c:	e0d8      	b.n	8000e50 <stepMotor+0x518>

			case 3:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1); //d
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	480a      	ldr	r0, [pc, #40]	; (8000ccc <stepMotor+0x394>)
 8000ca4:	f000 fcf0 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); //b
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2102      	movs	r1, #2
 8000cac:	4807      	ldr	r0, [pc, #28]	; (8000ccc <stepMotor+0x394>)
 8000cae:	f000 fceb 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0); //a
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2104      	movs	r1, #4
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <stepMotor+0x394>)
 8000cb8:	f000 fce6 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1); //c
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <stepMotor+0x394>)
 8000cc2:	f000 fce1 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000cc6:	e0c3      	b.n	8000e50 <stepMotor+0x518>
 8000cc8:	20000004 	.word	0x20000004
 8000ccc:	48000400 	.word	0x48000400
				}
			}
		else {
			switch(thisStep) {
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b07      	cmp	r3, #7
 8000cd4:	f200 80bc 	bhi.w	8000e50 <stepMotor+0x518>
 8000cd8:	a201      	add	r2, pc, #4	; (adr r2, 8000ce0 <stepMotor+0x3a8>)
 8000cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cde:	bf00      	nop
 8000ce0:	08000d01 	.word	0x08000d01
 8000ce4:	08000d2b 	.word	0x08000d2b
 8000ce8:	08000d55 	.word	0x08000d55
 8000cec:	08000d7f 	.word	0x08000d7f
 8000cf0:	08000da9 	.word	0x08000da9
 8000cf4:	08000dd3 	.word	0x08000dd3
 8000cf8:	08000dfd 	.word	0x08000dfd
 8000cfc:	08000e27 	.word	0x08000e27
			case 0:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1); //d
 8000d00:	2201      	movs	r2, #1
 8000d02:	2101      	movs	r1, #1
 8000d04:	4854      	ldr	r0, [pc, #336]	; (8000e58 <stepMotor+0x520>)
 8000d06:	f000 fcbf 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); //b
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4852      	ldr	r0, [pc, #328]	; (8000e58 <stepMotor+0x520>)
 8000d10:	f000 fcba 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1); //a
 8000d14:	2201      	movs	r2, #1
 8000d16:	2104      	movs	r1, #4
 8000d18:	484f      	ldr	r0, [pc, #316]	; (8000e58 <stepMotor+0x520>)
 8000d1a:	f000 fcb5 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0); //c
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2108      	movs	r1, #8
 8000d22:	484d      	ldr	r0, [pc, #308]	; (8000e58 <stepMotor+0x520>)
 8000d24:	f000 fcb0 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000d28:	e092      	b.n	8000e50 <stepMotor+0x518>

			case 1:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	484a      	ldr	r0, [pc, #296]	; (8000e58 <stepMotor+0x520>)
 8000d30:	f000 fcaa 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2102      	movs	r1, #2
 8000d38:	4847      	ldr	r0, [pc, #284]	; (8000e58 <stepMotor+0x520>)
 8000d3a:	f000 fca5 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2104      	movs	r1, #4
 8000d42:	4845      	ldr	r0, [pc, #276]	; (8000e58 <stepMotor+0x520>)
 8000d44:	f000 fca0 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2108      	movs	r1, #8
 8000d4c:	4842      	ldr	r0, [pc, #264]	; (8000e58 <stepMotor+0x520>)
 8000d4e:	f000 fc9b 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000d52:	e07d      	b.n	8000e50 <stepMotor+0x518>

			case 2:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2101      	movs	r1, #1
 8000d58:	483f      	ldr	r0, [pc, #252]	; (8000e58 <stepMotor+0x520>)
 8000d5a:	f000 fc95 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2102      	movs	r1, #2
 8000d62:	483d      	ldr	r0, [pc, #244]	; (8000e58 <stepMotor+0x520>)
 8000d64:	f000 fc90 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	483a      	ldr	r0, [pc, #232]	; (8000e58 <stepMotor+0x520>)
 8000d6e:	f000 fc8b 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2108      	movs	r1, #8
 8000d76:	4838      	ldr	r0, [pc, #224]	; (8000e58 <stepMotor+0x520>)
 8000d78:	f000 fc86 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000d7c:	e068      	b.n	8000e50 <stepMotor+0x518>

			case 3:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2101      	movs	r1, #1
 8000d82:	4835      	ldr	r0, [pc, #212]	; (8000e58 <stepMotor+0x520>)
 8000d84:	f000 fc80 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	4832      	ldr	r0, [pc, #200]	; (8000e58 <stepMotor+0x520>)
 8000d8e:	f000 fc7b 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2104      	movs	r1, #4
 8000d96:	4830      	ldr	r0, [pc, #192]	; (8000e58 <stepMotor+0x520>)
 8000d98:	f000 fc76 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2108      	movs	r1, #8
 8000da0:	482d      	ldr	r0, [pc, #180]	; (8000e58 <stepMotor+0x520>)
 8000da2:	f000 fc71 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000da6:	e053      	b.n	8000e50 <stepMotor+0x518>
			case 4:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2101      	movs	r1, #1
 8000dac:	482a      	ldr	r0, [pc, #168]	; (8000e58 <stepMotor+0x520>)
 8000dae:	f000 fc6b 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2102      	movs	r1, #2
 8000db6:	4828      	ldr	r0, [pc, #160]	; (8000e58 <stepMotor+0x520>)
 8000db8:	f000 fc66 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	4825      	ldr	r0, [pc, #148]	; (8000e58 <stepMotor+0x520>)
 8000dc2:	f000 fc61 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2108      	movs	r1, #8
 8000dca:	4823      	ldr	r0, [pc, #140]	; (8000e58 <stepMotor+0x520>)
 8000dcc:	f000 fc5c 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000dd0:	e03e      	b.n	8000e50 <stepMotor+0x518>
			case 5:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	4820      	ldr	r0, [pc, #128]	; (8000e58 <stepMotor+0x520>)
 8000dd8:	f000 fc56 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2102      	movs	r1, #2
 8000de0:	481d      	ldr	r0, [pc, #116]	; (8000e58 <stepMotor+0x520>)
 8000de2:	f000 fc51 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2104      	movs	r1, #4
 8000dea:	481b      	ldr	r0, [pc, #108]	; (8000e58 <stepMotor+0x520>)
 8000dec:	f000 fc4c 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2108      	movs	r1, #8
 8000df4:	4818      	ldr	r0, [pc, #96]	; (8000e58 <stepMotor+0x520>)
 8000df6:	f000 fc47 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000dfa:	e029      	b.n	8000e50 <stepMotor+0x518>
			case 6:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2101      	movs	r1, #1
 8000e00:	4815      	ldr	r0, [pc, #84]	; (8000e58 <stepMotor+0x520>)
 8000e02:	f000 fc41 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2102      	movs	r1, #2
 8000e0a:	4813      	ldr	r0, [pc, #76]	; (8000e58 <stepMotor+0x520>)
 8000e0c:	f000 fc3c 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2104      	movs	r1, #4
 8000e14:	4810      	ldr	r0, [pc, #64]	; (8000e58 <stepMotor+0x520>)
 8000e16:	f000 fc37 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2108      	movs	r1, #8
 8000e1e:	480e      	ldr	r0, [pc, #56]	; (8000e58 <stepMotor+0x520>)
 8000e20:	f000 fc32 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000e24:	e014      	b.n	8000e50 <stepMotor+0x518>
			case 7:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2101      	movs	r1, #1
 8000e2a:	480b      	ldr	r0, [pc, #44]	; (8000e58 <stepMotor+0x520>)
 8000e2c:	f000 fc2c 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2102      	movs	r1, #2
 8000e34:	4808      	ldr	r0, [pc, #32]	; (8000e58 <stepMotor+0x520>)
 8000e36:	f000 fc27 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2104      	movs	r1, #4
 8000e3e:	4806      	ldr	r0, [pc, #24]	; (8000e58 <stepMotor+0x520>)
 8000e40:	f000 fc22 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2108      	movs	r1, #8
 8000e48:	4803      	ldr	r0, [pc, #12]	; (8000e58 <stepMotor+0x520>)
 8000e4a:	f000 fc1d 	bl	8001688 <HAL_GPIO_WritePin>
				break;
 8000e4e:	bf00      	nop
				}
		}
	}

	}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	48000400 	.word	0x48000400

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	6593      	str	r3, [r2, #88]	; 0x58
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a25      	ldr	r2, [pc, #148]	; (8000f58 <HAL_TIM_Base_MspInit+0xb4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d144      	bne.n	8000f50 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ec6:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <HAL_TIM_Base_MspInit+0xb8>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	4a24      	ldr	r2, [pc, #144]	; (8000f5c <HAL_TIM_Base_MspInit+0xb8>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <HAL_TIM_Base_MspInit+0xb8>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <HAL_TIM_Base_MspInit+0xb8>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	4a1e      	ldr	r2, [pc, #120]	; (8000f5c <HAL_TIM_Base_MspInit+0xb8>)
 8000ee4:	f043 0308 	orr.w	r3, r3, #8
 8000ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <HAL_TIM_Base_MspInit+0xb8>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_TIM_Base_MspInit+0xb8>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	4a18      	ldr	r2, [pc, #96]	; (8000f5c <HAL_TIM_Base_MspInit+0xb8>)
 8000efc:	f043 0310 	orr.w	r3, r3, #16
 8000f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <HAL_TIM_Base_MspInit+0xb8>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f0e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f20:	2302      	movs	r3, #2
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480d      	ldr	r0, [pc, #52]	; (8000f60 <HAL_TIM_Base_MspInit+0xbc>)
 8000f2c:	f000 fa1a 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f30:	2301      	movs	r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f40:	2302      	movs	r3, #2
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <HAL_TIM_Base_MspInit+0xc0>)
 8000f4c:	f000 fa0a 	bl	8001364 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40000800 	.word	0x40000800
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	48000c00 	.word	0x48000c00
 8000f64:	48001000 	.word	0x48001000

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <NMI_Handler+0x4>

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb4:	f000 f8ac 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fc6:	f001 fe31 	bl	8002c2c <__errno>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2216      	movs	r2, #22
 8000fce:	601a      	str	r2, [r3, #0]
	return -1;
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <_exit>:

void _exit (int status)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ffe7 	bl	8000fbc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fee:	e7fe      	b.n	8000fee <_exit+0x12>

08000ff0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800104c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001018:	f7ff ffea 	bl	8000ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	; (8001050 <LoopForever+0x6>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	; (8001054 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <LoopForever+0xe>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	; (8001060 <LoopForever+0x16>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001042:	f001 fe0d 	bl	8002c60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001046:	f7ff f8d9 	bl	80001fc <main>

0800104a <LoopForever>:

LoopForever:
    b LoopForever
 800104a:	e7fe      	b.n	800104a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800104c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001058:	08002d1c 	.word	0x08002d1c
  ldr r2, =_sbss
 800105c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001060:	200000f8 	.word	0x200000f8

08001064 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC1_IRQHandler>

08001066 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 f943 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001076:	2000      	movs	r0, #0
 8001078:	f000 f80e 	bl	8001098 <HAL_InitTick>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	e001      	b.n	800108c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001088:	f7ff fee8 	bl	8000e5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800108c:	79fb      	ldrb	r3, [r7, #7]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_InitTick+0x6c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d023      	beq.n	80010f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HAL_InitTick+0x70>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_InitTick+0x6c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80010be:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f941 	bl	800134a <HAL_SYSTICK_Config>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10f      	bne.n	80010ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d809      	bhi.n	80010e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d4:	2200      	movs	r2, #0
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f000 f919 	bl	8001312 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <HAL_InitTick+0x74>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e007      	b.n	80010f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	73fb      	strb	r3, [r7, #15]
 80010ec:	e004      	b.n	80010f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	73fb      	strb	r3, [r7, #15]
 80010f2:	e001      	b.n	80010f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000010 	.word	0x20000010
 8001108:	20000008 	.word	0x20000008
 800110c:	2000000c 	.word	0x2000000c

08001110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x20>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x24>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <HAL_IncTick+0x24>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000010 	.word	0x20000010
 8001134:	200000f4 	.word	0x200000f4

08001138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_GetTick+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	200000f4 	.word	0x200000f4

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff ffee 	bl	8001138 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_Delay+0x44>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001176:	bf00      	nop
 8001178:	f7ff ffde 	bl	8001138 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
  {
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000010 	.word	0x20000010

08001198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff8e 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff47 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001324:	f7ff ff5c 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 8001328:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff ff8e 	bl	8001250 <NVIC_EncodePriority>
 8001334:	4602      	mov	r2, r0
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff5d 	bl	80011fc <__NVIC_SetPriority>
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffb0 	bl	80012b8 <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001372:	e166      	b.n	8001642 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	2101      	movs	r1, #1
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	4013      	ands	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 8158 	beq.w	800163c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b01      	cmp	r3, #1
 8001396:	d005      	beq.n	80013a4 <HAL_GPIO_Init+0x40>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d130      	bne.n	8001406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013da:	2201      	movs	r2, #1
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	f003 0201 	and.w	r2, r3, #1
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b03      	cmp	r3, #3
 8001410:	d017      	beq.n	8001442 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d123      	bne.n	8001496 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	08da      	lsrs	r2, r3, #3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3208      	adds	r2, #8
 8001456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	220f      	movs	r2, #15
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	691a      	ldr	r2, [r3, #16]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	08da      	lsrs	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3208      	adds	r2, #8
 8001490:	6939      	ldr	r1, [r7, #16]
 8001492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0203 	and.w	r2, r3, #3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 80b2 	beq.w	800163c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d8:	4b61      	ldr	r3, [pc, #388]	; (8001660 <HAL_GPIO_Init+0x2fc>)
 80014da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014dc:	4a60      	ldr	r2, [pc, #384]	; (8001660 <HAL_GPIO_Init+0x2fc>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6613      	str	r3, [r2, #96]	; 0x60
 80014e4:	4b5e      	ldr	r3, [pc, #376]	; (8001660 <HAL_GPIO_Init+0x2fc>)
 80014e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014f0:	4a5c      	ldr	r2, [pc, #368]	; (8001664 <HAL_GPIO_Init+0x300>)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	3302      	adds	r3, #2
 80014f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	220f      	movs	r2, #15
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800151a:	d02b      	beq.n	8001574 <HAL_GPIO_Init+0x210>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a52      	ldr	r2, [pc, #328]	; (8001668 <HAL_GPIO_Init+0x304>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d025      	beq.n	8001570 <HAL_GPIO_Init+0x20c>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a51      	ldr	r2, [pc, #324]	; (800166c <HAL_GPIO_Init+0x308>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d01f      	beq.n	800156c <HAL_GPIO_Init+0x208>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a50      	ldr	r2, [pc, #320]	; (8001670 <HAL_GPIO_Init+0x30c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d019      	beq.n	8001568 <HAL_GPIO_Init+0x204>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a4f      	ldr	r2, [pc, #316]	; (8001674 <HAL_GPIO_Init+0x310>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d013      	beq.n	8001564 <HAL_GPIO_Init+0x200>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a4e      	ldr	r2, [pc, #312]	; (8001678 <HAL_GPIO_Init+0x314>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d00d      	beq.n	8001560 <HAL_GPIO_Init+0x1fc>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a4d      	ldr	r2, [pc, #308]	; (800167c <HAL_GPIO_Init+0x318>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d007      	beq.n	800155c <HAL_GPIO_Init+0x1f8>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a4c      	ldr	r2, [pc, #304]	; (8001680 <HAL_GPIO_Init+0x31c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d101      	bne.n	8001558 <HAL_GPIO_Init+0x1f4>
 8001554:	2307      	movs	r3, #7
 8001556:	e00e      	b.n	8001576 <HAL_GPIO_Init+0x212>
 8001558:	2308      	movs	r3, #8
 800155a:	e00c      	b.n	8001576 <HAL_GPIO_Init+0x212>
 800155c:	2306      	movs	r3, #6
 800155e:	e00a      	b.n	8001576 <HAL_GPIO_Init+0x212>
 8001560:	2305      	movs	r3, #5
 8001562:	e008      	b.n	8001576 <HAL_GPIO_Init+0x212>
 8001564:	2304      	movs	r3, #4
 8001566:	e006      	b.n	8001576 <HAL_GPIO_Init+0x212>
 8001568:	2303      	movs	r3, #3
 800156a:	e004      	b.n	8001576 <HAL_GPIO_Init+0x212>
 800156c:	2302      	movs	r3, #2
 800156e:	e002      	b.n	8001576 <HAL_GPIO_Init+0x212>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <HAL_GPIO_Init+0x212>
 8001574:	2300      	movs	r3, #0
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	f002 0203 	and.w	r2, r2, #3
 800157c:	0092      	lsls	r2, r2, #2
 800157e:	4093      	lsls	r3, r2
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001586:	4937      	ldr	r1, [pc, #220]	; (8001664 <HAL_GPIO_Init+0x300>)
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001594:	4b3b      	ldr	r3, [pc, #236]	; (8001684 <HAL_GPIO_Init+0x320>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	43db      	mvns	r3, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015b8:	4a32      	ldr	r2, [pc, #200]	; (8001684 <HAL_GPIO_Init+0x320>)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015be:	4b31      	ldr	r3, [pc, #196]	; (8001684 <HAL_GPIO_Init+0x320>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e2:	4a28      	ldr	r2, [pc, #160]	; (8001684 <HAL_GPIO_Init+0x320>)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015e8:	4b26      	ldr	r3, [pc, #152]	; (8001684 <HAL_GPIO_Init+0x320>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800160c:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <HAL_GPIO_Init+0x320>)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001612:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <HAL_GPIO_Init+0x320>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001636:	4a13      	ldr	r2, [pc, #76]	; (8001684 <HAL_GPIO_Init+0x320>)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3301      	adds	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	f47f ae91 	bne.w	8001374 <HAL_GPIO_Init+0x10>
  }
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40021000 	.word	0x40021000
 8001664:	40010000 	.word	0x40010000
 8001668:	48000400 	.word	0x48000400
 800166c:	48000800 	.word	0x48000800
 8001670:	48000c00 	.word	0x48000c00
 8001674:	48001000 	.word	0x48001000
 8001678:	48001400 	.word	0x48001400
 800167c:	48001800 	.word	0x48001800
 8001680:	48001c00 	.word	0x48001c00
 8001684:	40010400 	.word	0x40010400

08001688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001698:	787b      	ldrb	r3, [r7, #1]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c8:	d102      	bne.n	80016d0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80016ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ce:	e00b      	b.n	80016e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80016d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016de:	d102      	bne.n	80016e6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80016e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e4:	e000      	b.n	80016e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80016e6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40007000 	.word	0x40007000

080016f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d141      	bne.n	800178a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001706:	4b4b      	ldr	r3, [pc, #300]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800170e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001712:	d131      	bne.n	8001778 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001714:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800171a:	4a46      	ldr	r2, [pc, #280]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001720:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001724:	4b43      	ldr	r3, [pc, #268]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800172c:	4a41      	ldr	r2, [pc, #260]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800172e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001732:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001734:	4b40      	ldr	r3, [pc, #256]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2232      	movs	r2, #50	; 0x32
 800173a:	fb02 f303 	mul.w	r3, r2, r3
 800173e:	4a3f      	ldr	r2, [pc, #252]	; (800183c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001740:	fba2 2303 	umull	r2, r3, r2, r3
 8001744:	0c9b      	lsrs	r3, r3, #18
 8001746:	3301      	adds	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800174a:	e002      	b.n	8001752 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3b01      	subs	r3, #1
 8001750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001752:	4b38      	ldr	r3, [pc, #224]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175e:	d102      	bne.n	8001766 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f2      	bne.n	800174c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001766:	4b33      	ldr	r3, [pc, #204]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800176e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001772:	d158      	bne.n	8001826 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e057      	b.n	8001828 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001778:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800177e:	4a2d      	ldr	r2, [pc, #180]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001784:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001788:	e04d      	b.n	8001826 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001790:	d141      	bne.n	8001816 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001792:	4b28      	ldr	r3, [pc, #160]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800179a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179e:	d131      	bne.n	8001804 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017a0:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017a6:	4a23      	ldr	r2, [pc, #140]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017b8:	4a1e      	ldr	r2, [pc, #120]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2232      	movs	r2, #50	; 0x32
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	4a1c      	ldr	r2, [pc, #112]	; (800183c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017cc:	fba2 2303 	umull	r2, r3, r2, r3
 80017d0:	0c9b      	lsrs	r3, r3, #18
 80017d2:	3301      	adds	r3, #1
 80017d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017d6:	e002      	b.n	80017de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3b01      	subs	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ea:	d102      	bne.n	80017f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f2      	bne.n	80017d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d112      	bne.n	8001826 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e011      	b.n	8001828 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800180c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001810:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001814:	e007      	b.n	8001826 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001820:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001824:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	40007000 	.word	0x40007000
 8001838:	20000008 	.word	0x20000008
 800183c:	431bde83 	.word	0x431bde83

08001840 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <HAL_PWREx_EnableVddIO2+0x1c>)
 800184a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184e:	6053      	str	r3, [r2, #4]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40007000 	.word	0x40007000

08001860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d102      	bne.n	8001874 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	f000 bc16 	b.w	80020a0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001874:	4b96      	ldr	r3, [pc, #600]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800187e:	4b94      	ldr	r3, [pc, #592]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80e4 	beq.w	8001a5e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d007      	beq.n	80018ac <HAL_RCC_OscConfig+0x4c>
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	f040 808b 	bne.w	80019ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	f040 8087 	bne.w	80019ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018ac:	4b88      	ldr	r3, [pc, #544]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_OscConfig+0x64>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e3ed      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1a      	ldr	r2, [r3, #32]
 80018c8:	4b81      	ldr	r3, [pc, #516]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d004      	beq.n	80018de <HAL_RCC_OscConfig+0x7e>
 80018d4:	4b7e      	ldr	r3, [pc, #504]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018dc:	e005      	b.n	80018ea <HAL_RCC_OscConfig+0x8a>
 80018de:	4b7c      	ldr	r3, [pc, #496]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80018e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e4:	091b      	lsrs	r3, r3, #4
 80018e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d223      	bcs.n	8001936 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fd92 	bl	800241c <RCC_SetFlashLatencyFromMSIRange>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e3ce      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001902:	4b73      	ldr	r3, [pc, #460]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a72      	ldr	r2, [pc, #456]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001908:	f043 0308 	orr.w	r3, r3, #8
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b70      	ldr	r3, [pc, #448]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	496d      	ldr	r1, [pc, #436]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 800191c:	4313      	orrs	r3, r2
 800191e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001920:	4b6b      	ldr	r3, [pc, #428]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	4968      	ldr	r1, [pc, #416]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
 8001934:	e025      	b.n	8001982 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001936:	4b66      	ldr	r3, [pc, #408]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a65      	ldr	r2, [pc, #404]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b63      	ldr	r3, [pc, #396]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4960      	ldr	r1, [pc, #384]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001954:	4b5e      	ldr	r3, [pc, #376]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	495b      	ldr	r1, [pc, #364]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	4618      	mov	r0, r3
 8001974:	f000 fd52 	bl	800241c <RCC_SetFlashLatencyFromMSIRange>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e38e      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001982:	f000 fcbf 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 8001986:	4602      	mov	r2, r0
 8001988:	4b51      	ldr	r3, [pc, #324]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	4950      	ldr	r1, [pc, #320]	; (8001ad4 <HAL_RCC_OscConfig+0x274>)
 8001994:	5ccb      	ldrb	r3, [r1, r3]
 8001996:	f003 031f 	and.w	r3, r3, #31
 800199a:	fa22 f303 	lsr.w	r3, r2, r3
 800199e:	4a4e      	ldr	r2, [pc, #312]	; (8001ad8 <HAL_RCC_OscConfig+0x278>)
 80019a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019a2:	4b4e      	ldr	r3, [pc, #312]	; (8001adc <HAL_RCC_OscConfig+0x27c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fb76 	bl	8001098 <HAL_InitTick>
 80019ac:	4603      	mov	r3, r0
 80019ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d052      	beq.n	8001a5c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	e372      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d032      	beq.n	8001a28 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019c2:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a42      	ldr	r2, [pc, #264]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019ce:	f7ff fbb3 	bl	8001138 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019d6:	f7ff fbaf 	bl	8001138 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e35b      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e8:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f4:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a35      	ldr	r2, [pc, #212]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80019fa:	f043 0308 	orr.w	r3, r3, #8
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4930      	ldr	r1, [pc, #192]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a12:	4b2f      	ldr	r3, [pc, #188]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	492b      	ldr	r1, [pc, #172]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
 8001a26:	e01a      	b.n	8001a5e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a28:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a28      	ldr	r2, [pc, #160]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	f023 0301 	bic.w	r3, r3, #1
 8001a32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fb80 	bl	8001138 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fb7c 	bl	8001138 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e328      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x1dc>
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d073      	beq.n	8001b52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_OscConfig+0x21c>
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b0c      	cmp	r3, #12
 8001a74:	d10e      	bne.n	8001a94 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d10b      	bne.n	8001a94 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d063      	beq.n	8001b50 <HAL_RCC_OscConfig+0x2f0>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d15f      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e305      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9c:	d106      	bne.n	8001aac <HAL_RCC_OscConfig+0x24c>
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e025      	b.n	8001af8 <HAL_RCC_OscConfig+0x298>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab4:	d114      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x280>
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a02      	ldr	r2, [pc, #8]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e013      	b.n	8001af8 <HAL_RCC_OscConfig+0x298>
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	08002cd0 	.word	0x08002cd0
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	2000000c 	.word	0x2000000c
 8001ae0:	4ba0      	ldr	r3, [pc, #640]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a9f      	ldr	r2, [pc, #636]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b9d      	ldr	r3, [pc, #628]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a9c      	ldr	r2, [pc, #624]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d013      	beq.n	8001b28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff fb1a 	bl	8001138 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff fb16 	bl	8001138 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e2c2      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b1a:	4b92      	ldr	r3, [pc, #584]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x2a8>
 8001b26:	e014      	b.n	8001b52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff fb06 	bl	8001138 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b30:	f7ff fb02 	bl	8001138 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	; 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e2ae      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b42:	4b88      	ldr	r3, [pc, #544]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x2d0>
 8001b4e:	e000      	b.n	8001b52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d060      	beq.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d005      	beq.n	8001b70 <HAL_RCC_OscConfig+0x310>
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2b0c      	cmp	r3, #12
 8001b68:	d119      	bne.n	8001b9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d116      	bne.n	8001b9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b70:	4b7c      	ldr	r3, [pc, #496]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_OscConfig+0x328>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e28b      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	4973      	ldr	r1, [pc, #460]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b9c:	e040      	b.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d023      	beq.n	8001bee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba6:	4b6f      	ldr	r3, [pc, #444]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a6e      	ldr	r2, [pc, #440]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fac1 	bl	8001138 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff fabd 	bl	8001138 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e269      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bcc:	4b65      	ldr	r3, [pc, #404]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b62      	ldr	r3, [pc, #392]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	061b      	lsls	r3, r3, #24
 8001be6:	495f      	ldr	r1, [pc, #380]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
 8001bec:	e018      	b.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a5c      	ldr	r2, [pc, #368]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fa9d 	bl	8001138 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c02:	f7ff fa99 	bl	8001138 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e245      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c14:	4b53      	ldr	r3, [pc, #332]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d03c      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01c      	beq.n	8001c6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c34:	4b4b      	ldr	r3, [pc, #300]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3a:	4a4a      	ldr	r2, [pc, #296]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c44:	f7ff fa78 	bl	8001138 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fa74 	bl	8001138 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e220      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c5e:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0ef      	beq.n	8001c4c <HAL_RCC_OscConfig+0x3ec>
 8001c6c:	e01b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6e:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c74:	4a3b      	ldr	r2, [pc, #236]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fa5b 	bl	8001138 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c86:	f7ff fa57 	bl	8001138 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e203      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c98:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ef      	bne.n	8001c86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 80a6 	beq.w	8001e00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cb8:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10d      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	4a26      	ldr	r2, [pc, #152]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cce:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd0:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <HAL_RCC_OscConfig+0x508>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d118      	bne.n	8001d1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cec:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <HAL_RCC_OscConfig+0x508>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1d      	ldr	r2, [pc, #116]	; (8001d68 <HAL_RCC_OscConfig+0x508>)
 8001cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf8:	f7ff fa1e 	bl	8001138 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d00:	f7ff fa1a 	bl	8001138 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e1c6      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <HAL_RCC_OscConfig+0x508>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d108      	bne.n	8001d38 <HAL_RCC_OscConfig+0x4d8>
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2c:	4a0d      	ldr	r2, [pc, #52]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d36:	e029      	b.n	8001d8c <HAL_RCC_OscConfig+0x52c>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d115      	bne.n	8001d6c <HAL_RCC_OscConfig+0x50c>
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d46:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d56:	4a03      	ldr	r2, [pc, #12]	; (8001d64 <HAL_RCC_OscConfig+0x504>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d60:	e014      	b.n	8001d8c <HAL_RCC_OscConfig+0x52c>
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40007000 	.word	0x40007000
 8001d6c:	4b9d      	ldr	r3, [pc, #628]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d72:	4a9c      	ldr	r2, [pc, #624]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d7c:	4b99      	ldr	r3, [pc, #612]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d82:	4a98      	ldr	r2, [pc, #608]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001d84:	f023 0304 	bic.w	r3, r3, #4
 8001d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d016      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff f9d0 	bl	8001138 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7ff f9cc 	bl	8001138 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e176      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db2:	4b8c      	ldr	r3, [pc, #560]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0ed      	beq.n	8001d9c <HAL_RCC_OscConfig+0x53c>
 8001dc0:	e015      	b.n	8001dee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc2:	f7ff f9b9 	bl	8001138 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7ff f9b5 	bl	8001138 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e15f      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001de0:	4b80      	ldr	r3, [pc, #512]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1ed      	bne.n	8001dca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dee:	7ffb      	ldrb	r3, [r7, #31]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d105      	bne.n	8001e00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df4:	4b7b      	ldr	r3, [pc, #492]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	4a7a      	ldr	r2, [pc, #488]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d03c      	beq.n	8001e86 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d01c      	beq.n	8001e4e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e14:	4b73      	ldr	r3, [pc, #460]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e1a:	4a72      	ldr	r2, [pc, #456]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e24:	f7ff f988 	bl	8001138 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e2c:	f7ff f984 	bl	8001138 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e130      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e3e:	4b69      	ldr	r3, [pc, #420]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001e40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0ef      	beq.n	8001e2c <HAL_RCC_OscConfig+0x5cc>
 8001e4c:	e01b      	b.n	8001e86 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e4e:	4b65      	ldr	r3, [pc, #404]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001e50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e54:	4a63      	ldr	r2, [pc, #396]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5e:	f7ff f96b 	bl	8001138 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e66:	f7ff f967 	bl	8001138 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e113      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e78:	4b5a      	ldr	r3, [pc, #360]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001e7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1ef      	bne.n	8001e66 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8107 	beq.w	800209e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	f040 80cf 	bne.w	8002038 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e9a:	4b52      	ldr	r3, [pc, #328]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f003 0203 	and.w	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d12c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d123      	bne.n	8001f08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d11b      	bne.n	8001f08 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eda:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d113      	bne.n	8001f08 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eea:	085b      	lsrs	r3, r3, #1
 8001eec:	3b01      	subs	r3, #1
 8001eee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d109      	bne.n	8001f08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	085b      	lsrs	r3, r3, #1
 8001f00:	3b01      	subs	r3, #1
 8001f02:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d071      	beq.n	8001fec <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d068      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f0e:	4b35      	ldr	r3, [pc, #212]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d105      	bne.n	8001f26 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f1a:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0ba      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f2a:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a2d      	ldr	r2, [pc, #180]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001f30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f36:	f7ff f8ff 	bl	8001138 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7ff f8fb 	bl	8001138 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0a7      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f50:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f0      	bne.n	8001f3e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f5c:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <HAL_RCC_OscConfig+0x788>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f6c:	3a01      	subs	r2, #1
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	4311      	orrs	r1, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f76:	0212      	lsls	r2, r2, #8
 8001f78:	4311      	orrs	r1, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f7e:	0852      	lsrs	r2, r2, #1
 8001f80:	3a01      	subs	r2, #1
 8001f82:	0552      	lsls	r2, r2, #21
 8001f84:	4311      	orrs	r1, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f8a:	0852      	lsrs	r2, r2, #1
 8001f8c:	3a01      	subs	r2, #1
 8001f8e:	0652      	lsls	r2, r2, #25
 8001f90:	4311      	orrs	r1, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f96:	06d2      	lsls	r2, r2, #27
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	4912      	ldr	r1, [pc, #72]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001faa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a0c      	ldr	r2, [pc, #48]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fb8:	f7ff f8be 	bl	8001138 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7ff f8ba 	bl	8001138 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e066      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <HAL_RCC_OscConfig+0x784>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fde:	e05e      	b.n	800209e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e05d      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fec:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <HAL_RCC_OscConfig+0x848>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d152      	bne.n	800209e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_RCC_OscConfig+0x848>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a2a      	ldr	r2, [pc, #168]	; (80020a8 <HAL_RCC_OscConfig+0x848>)
 8001ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002002:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002004:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <HAL_RCC_OscConfig+0x848>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <HAL_RCC_OscConfig+0x848>)
 800200a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800200e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002010:	f7ff f892 	bl	8001138 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002018:	f7ff f88e 	bl	8001138 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e03a      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202a:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <HAL_RCC_OscConfig+0x848>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x7b8>
 8002036:	e032      	b.n	800209e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2b0c      	cmp	r3, #12
 800203c:	d02d      	beq.n	800209a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203e:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <HAL_RCC_OscConfig+0x848>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a19      	ldr	r2, [pc, #100]	; (80020a8 <HAL_RCC_OscConfig+0x848>)
 8002044:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002048:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <HAL_RCC_OscConfig+0x848>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d105      	bne.n	8002062 <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_RCC_OscConfig+0x848>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	4a13      	ldr	r2, [pc, #76]	; (80020a8 <HAL_RCC_OscConfig+0x848>)
 800205c:	f023 0303 	bic.w	r3, r3, #3
 8002060:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_RCC_OscConfig+0x848>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	4a10      	ldr	r2, [pc, #64]	; (80020a8 <HAL_RCC_OscConfig+0x848>)
 8002068:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800206c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002070:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002072:	f7ff f861 	bl	8001138 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207a:	f7ff f85d 	bl	8001138 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e009      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_RCC_OscConfig+0x848>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f0      	bne.n	800207a <HAL_RCC_OscConfig+0x81a>
 8002098:	e001      	b.n	800209e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3720      	adds	r7, #32
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000

080020ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e10f      	b.n	80022e4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c4:	4b89      	ldr	r3, [pc, #548]	; (80022ec <HAL_RCC_ClockConfig+0x240>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d910      	bls.n	80020f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d2:	4b86      	ldr	r3, [pc, #536]	; (80022ec <HAL_RCC_ClockConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 020f 	bic.w	r2, r3, #15
 80020da:	4984      	ldr	r1, [pc, #528]	; (80022ec <HAL_RCC_ClockConfig+0x240>)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e2:	4b82      	ldr	r3, [pc, #520]	; (80022ec <HAL_RCC_ClockConfig+0x240>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0f7      	b.n	80022e4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8089 	beq.w	8002214 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d133      	bne.n	8002172 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210a:	4b79      	ldr	r3, [pc, #484]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e0e4      	b.n	80022e4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800211a:	f000 f9d9 	bl	80024d0 <RCC_GetSysClockFreqFromPLLSource>
 800211e:	4603      	mov	r3, r0
 8002120:	4a74      	ldr	r2, [pc, #464]	; (80022f4 <HAL_RCC_ClockConfig+0x248>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d955      	bls.n	80021d2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002126:	4b72      	ldr	r3, [pc, #456]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10a      	bne.n	8002148 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002132:	4b6f      	ldr	r3, [pc, #444]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800213a:	4a6d      	ldr	r2, [pc, #436]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 800213c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002140:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e044      	b.n	80021d2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d03e      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x126>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d13a      	bne.n	80021d2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800215c:	4b64      	ldr	r3, [pc, #400]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002164:	4a62      	ldr	r2, [pc, #392]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 8002166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800216a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e02f      	b.n	80021d2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800217a:	4b5d      	ldr	r3, [pc, #372]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d115      	bne.n	80021b2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e0ac      	b.n	80022e4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002192:	4b57      	ldr	r3, [pc, #348]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e0a0      	b.n	80022e4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a2:	4b53      	ldr	r3, [pc, #332]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e098      	b.n	80022e4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80021b2:	f000 f8a7 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4a4e      	ldr	r2, [pc, #312]	; (80022f4 <HAL_RCC_ClockConfig+0x248>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d909      	bls.n	80021d2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021be:	4b4c      	ldr	r3, [pc, #304]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021c6:	4a4a      	ldr	r2, [pc, #296]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 80021c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021d2:	4b47      	ldr	r3, [pc, #284]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f023 0203 	bic.w	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4944      	ldr	r1, [pc, #272]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e4:	f7fe ffa8 	bl	8001138 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ec:	f7fe ffa4 	bl	8001138 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e070      	b.n	80022e4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 020c 	and.w	r2, r3, #12
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	429a      	cmp	r2, r3
 8002212:	d1eb      	bne.n	80021ec <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d009      	beq.n	8002234 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002220:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	4930      	ldr	r1, [pc, #192]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 800222e:	4313      	orrs	r3, r2
 8002230:	608b      	str	r3, [r1, #8]
 8002232:	e008      	b.n	8002246 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b80      	cmp	r3, #128	; 0x80
 8002238:	d105      	bne.n	8002246 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800223a:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4a2c      	ldr	r2, [pc, #176]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 8002240:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002244:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002246:	4b29      	ldr	r3, [pc, #164]	; (80022ec <HAL_RCC_ClockConfig+0x240>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d210      	bcs.n	8002276 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002254:	4b25      	ldr	r3, [pc, #148]	; (80022ec <HAL_RCC_ClockConfig+0x240>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 020f 	bic.w	r2, r3, #15
 800225c:	4923      	ldr	r1, [pc, #140]	; (80022ec <HAL_RCC_ClockConfig+0x240>)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002264:	4b21      	ldr	r3, [pc, #132]	; (80022ec <HAL_RCC_ClockConfig+0x240>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d001      	beq.n	8002276 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e036      	b.n	80022e4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002282:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	4918      	ldr	r1, [pc, #96]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 8002290:	4313      	orrs	r3, r2
 8002292:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d009      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4910      	ldr	r1, [pc, #64]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022b4:	f000 f826 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022b8:	4602      	mov	r2, r0
 80022ba:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <HAL_RCC_ClockConfig+0x244>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	091b      	lsrs	r3, r3, #4
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	490c      	ldr	r1, [pc, #48]	; (80022f8 <HAL_RCC_ClockConfig+0x24c>)
 80022c6:	5ccb      	ldrb	r3, [r1, r3]
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	fa22 f303 	lsr.w	r3, r2, r3
 80022d0:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <HAL_RCC_ClockConfig+0x250>)
 80022d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022d4:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <HAL_RCC_ClockConfig+0x254>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fedd 	bl	8001098 <HAL_InitTick>
 80022de:	4603      	mov	r3, r0
 80022e0:	73fb      	strb	r3, [r7, #15]

  return status;
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40022000 	.word	0x40022000
 80022f0:	40021000 	.word	0x40021000
 80022f4:	04c4b400 	.word	0x04c4b400
 80022f8:	08002cd0 	.word	0x08002cd0
 80022fc:	20000008 	.word	0x20000008
 8002300:	2000000c 	.word	0x2000000c

08002304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002312:	4b3e      	ldr	r3, [pc, #248]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800231c:	4b3b      	ldr	r3, [pc, #236]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0x34>
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d121      	bne.n	8002376 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d11e      	bne.n	8002376 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002338:	4b34      	ldr	r3, [pc, #208]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d107      	bne.n	8002354 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002344:	4b31      	ldr	r3, [pc, #196]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 8002346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	e005      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002354:	4b2d      	ldr	r3, [pc, #180]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002360:	4a2b      	ldr	r2, [pc, #172]	; (8002410 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002368:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10d      	bne.n	800238c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002374:	e00a      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	2b04      	cmp	r3, #4
 800237a:	d102      	bne.n	8002382 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <HAL_RCC_GetSysClockFreq+0x110>)
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	e004      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b08      	cmp	r3, #8
 8002386:	d101      	bne.n	800238c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002388:	4b23      	ldr	r3, [pc, #140]	; (8002418 <HAL_RCC_GetSysClockFreq+0x114>)
 800238a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	2b0c      	cmp	r3, #12
 8002390:	d134      	bne.n	80023fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002392:	4b1e      	ldr	r3, [pc, #120]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d003      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0xa6>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d003      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0xac>
 80023a8:	e005      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023aa:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <HAL_RCC_GetSysClockFreq+0x110>)
 80023ac:	617b      	str	r3, [r7, #20]
      break;
 80023ae:	e005      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023b0:	4b19      	ldr	r3, [pc, #100]	; (8002418 <HAL_RCC_GetSysClockFreq+0x114>)
 80023b2:	617b      	str	r3, [r7, #20]
      break;
 80023b4:	e002      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	617b      	str	r3, [r7, #20]
      break;
 80023ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	3301      	adds	r3, #1
 80023c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	fb03 f202 	mul.w	r2, r3, r2
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_RCC_GetSysClockFreq+0x108>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	0e5b      	lsrs	r3, r3, #25
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	3301      	adds	r3, #1
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023fc:	69bb      	ldr	r3, [r7, #24]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	; 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	08002ce0 	.word	0x08002ce0
 8002414:	00f42400 	.word	0x00f42400
 8002418:	007a1200 	.word	0x007a1200

0800241c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002424:	2300      	movs	r3, #0
 8002426:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002428:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800242a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002434:	f7ff f940 	bl	80016b8 <HAL_PWREx_GetVoltageRange>
 8002438:	6178      	str	r0, [r7, #20]
 800243a:	e014      	b.n	8002466 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800243c:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	4a21      	ldr	r2, [pc, #132]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002446:	6593      	str	r3, [r2, #88]	; 0x58
 8002448:	4b1f      	ldr	r3, [pc, #124]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002454:	f7ff f930 	bl	80016b8 <HAL_PWREx_GetVoltageRange>
 8002458:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800245a:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	4a1a      	ldr	r2, [pc, #104]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002464:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800246c:	d10b      	bne.n	8002486 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b80      	cmp	r3, #128	; 0x80
 8002472:	d913      	bls.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2ba0      	cmp	r3, #160	; 0xa0
 8002478:	d902      	bls.n	8002480 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800247a:	2302      	movs	r3, #2
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	e00d      	b.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002480:	2301      	movs	r3, #1
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	e00a      	b.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b7f      	cmp	r3, #127	; 0x7f
 800248a:	d902      	bls.n	8002492 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800248c:	2302      	movs	r3, #2
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	e004      	b.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b70      	cmp	r3, #112	; 0x70
 8002496:	d101      	bne.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002498:	2301      	movs	r3, #1
 800249a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f023 020f 	bic.w	r2, r3, #15
 80024a4:	4909      	ldr	r1, [pc, #36]	; (80024cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024ac:	4b07      	ldr	r3, [pc, #28]	; (80024cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d001      	beq.n	80024be <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40022000 	.word	0x40022000

080024d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80024da:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d118      	bne.n	8002518 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024e6:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d107      	bne.n	8002502 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024f2:	4b27      	ldr	r3, [pc, #156]	; (8002590 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80024f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	e005      	b.n	800250e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002502:	4b23      	ldr	r3, [pc, #140]	; (8002590 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800250e:	4a21      	ldr	r2, [pc, #132]	; (8002594 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002516:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002518:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d003      	beq.n	8002530 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b03      	cmp	r3, #3
 800252c:	d003      	beq.n	8002536 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800252e:	e005      	b.n	800253c <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002532:	613b      	str	r3, [r7, #16]
    break;
 8002534:	e005      	b.n	8002542 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002536:	4b19      	ldr	r3, [pc, #100]	; (800259c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002538:	613b      	str	r3, [r7, #16]
    break;
 800253a:	e002      	b.n	8002542 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	613b      	str	r3, [r7, #16]
    break;
 8002540:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002542:	4b13      	ldr	r3, [pc, #76]	; (8002590 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	3301      	adds	r3, #1
 800254e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	fb03 f202 	mul.w	r2, r3, r2
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	fbb2 f3f3 	udiv	r3, r2, r3
 8002566:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	0e5b      	lsrs	r3, r3, #25
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	3301      	adds	r3, #1
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002582:	683b      	ldr	r3, [r7, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	40021000 	.word	0x40021000
 8002594:	08002ce0 	.word	0x08002ce0
 8002598:	00f42400 	.word	0x00f42400
 800259c:	007a1200 	.word	0x007a1200

080025a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e049      	b.n	8002646 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7fe fc6c 	bl	8000ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3304      	adds	r3, #4
 80025dc:	4619      	mov	r1, r3
 80025de:	4610      	mov	r0, r2
 80025e0:	f000 f968 	bl	80028b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d001      	beq.n	8002668 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e047      	b.n	80026f8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a23      	ldr	r2, [pc, #140]	; (8002704 <HAL_TIM_Base_Start+0xb4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d01d      	beq.n	80026b6 <HAL_TIM_Base_Start+0x66>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002682:	d018      	beq.n	80026b6 <HAL_TIM_Base_Start+0x66>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1f      	ldr	r2, [pc, #124]	; (8002708 <HAL_TIM_Base_Start+0xb8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d013      	beq.n	80026b6 <HAL_TIM_Base_Start+0x66>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1e      	ldr	r2, [pc, #120]	; (800270c <HAL_TIM_Base_Start+0xbc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00e      	beq.n	80026b6 <HAL_TIM_Base_Start+0x66>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1c      	ldr	r2, [pc, #112]	; (8002710 <HAL_TIM_Base_Start+0xc0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d009      	beq.n	80026b6 <HAL_TIM_Base_Start+0x66>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <HAL_TIM_Base_Start+0xc4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d004      	beq.n	80026b6 <HAL_TIM_Base_Start+0x66>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a19      	ldr	r2, [pc, #100]	; (8002718 <HAL_TIM_Base_Start+0xc8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d115      	bne.n	80026e2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	4b17      	ldr	r3, [pc, #92]	; (800271c <HAL_TIM_Base_Start+0xcc>)
 80026be:	4013      	ands	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b06      	cmp	r3, #6
 80026c6:	d015      	beq.n	80026f4 <HAL_TIM_Base_Start+0xa4>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ce:	d011      	beq.n	80026f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e0:	e008      	b.n	80026f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0201 	orr.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	e000      	b.n	80026f6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40000400 	.word	0x40000400
 800270c:	40000800 	.word	0x40000800
 8002710:	40000c00 	.word	0x40000c00
 8002714:	40013400 	.word	0x40013400
 8002718:	40014000 	.word	0x40014000
 800271c:	00010007 	.word	0x00010007

08002720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_TIM_ConfigClockSource+0x1c>
 8002738:	2302      	movs	r3, #2
 800273a:	e0b6      	b.n	80028aa <HAL_TIM_ConfigClockSource+0x18a>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800275e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002778:	d03e      	beq.n	80027f8 <HAL_TIM_ConfigClockSource+0xd8>
 800277a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277e:	f200 8087 	bhi.w	8002890 <HAL_TIM_ConfigClockSource+0x170>
 8002782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002786:	f000 8086 	beq.w	8002896 <HAL_TIM_ConfigClockSource+0x176>
 800278a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278e:	d87f      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x170>
 8002790:	2b70      	cmp	r3, #112	; 0x70
 8002792:	d01a      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0xaa>
 8002794:	2b70      	cmp	r3, #112	; 0x70
 8002796:	d87b      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x170>
 8002798:	2b60      	cmp	r3, #96	; 0x60
 800279a:	d050      	beq.n	800283e <HAL_TIM_ConfigClockSource+0x11e>
 800279c:	2b60      	cmp	r3, #96	; 0x60
 800279e:	d877      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x170>
 80027a0:	2b50      	cmp	r3, #80	; 0x50
 80027a2:	d03c      	beq.n	800281e <HAL_TIM_ConfigClockSource+0xfe>
 80027a4:	2b50      	cmp	r3, #80	; 0x50
 80027a6:	d873      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x170>
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	d058      	beq.n	800285e <HAL_TIM_ConfigClockSource+0x13e>
 80027ac:	2b40      	cmp	r3, #64	; 0x40
 80027ae:	d86f      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x170>
 80027b0:	2b30      	cmp	r3, #48	; 0x30
 80027b2:	d064      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x15e>
 80027b4:	2b30      	cmp	r3, #48	; 0x30
 80027b6:	d86b      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x170>
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d060      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x15e>
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d867      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x170>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d05c      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x15e>
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d05a      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x15e>
 80027c8:	e062      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6899      	ldr	r1, [r3, #8]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f000 f97f 	bl	8002adc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	609a      	str	r2, [r3, #8]
      break;
 80027f6:	e04f      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6899      	ldr	r1, [r3, #8]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f000 f968 	bl	8002adc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800281a:	609a      	str	r2, [r3, #8]
      break;
 800281c:	e03c      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6859      	ldr	r1, [r3, #4]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	461a      	mov	r2, r3
 800282c:	f000 f8dc 	bl	80029e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2150      	movs	r1, #80	; 0x50
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f935 	bl	8002aa6 <TIM_ITRx_SetConfig>
      break;
 800283c:	e02c      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	461a      	mov	r2, r3
 800284c:	f000 f8fb 	bl	8002a46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2160      	movs	r1, #96	; 0x60
 8002856:	4618      	mov	r0, r3
 8002858:	f000 f925 	bl	8002aa6 <TIM_ITRx_SetConfig>
      break;
 800285c:	e01c      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6859      	ldr	r1, [r3, #4]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	461a      	mov	r2, r3
 800286c:	f000 f8bc 	bl	80029e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2140      	movs	r1, #64	; 0x40
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f915 	bl	8002aa6 <TIM_ITRx_SetConfig>
      break;
 800287c:	e00c      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4619      	mov	r1, r3
 8002888:	4610      	mov	r0, r2
 800288a:	f000 f90c 	bl	8002aa6 <TIM_ITRx_SetConfig>
      break;
 800288e:	e003      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
      break;
 8002894:	e000      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002896:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a40      	ldr	r2, [pc, #256]	; (80029c8 <TIM_Base_SetConfig+0x114>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d013      	beq.n	80028f4 <TIM_Base_SetConfig+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d2:	d00f      	beq.n	80028f4 <TIM_Base_SetConfig+0x40>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a3d      	ldr	r2, [pc, #244]	; (80029cc <TIM_Base_SetConfig+0x118>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00b      	beq.n	80028f4 <TIM_Base_SetConfig+0x40>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a3c      	ldr	r2, [pc, #240]	; (80029d0 <TIM_Base_SetConfig+0x11c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d007      	beq.n	80028f4 <TIM_Base_SetConfig+0x40>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a3b      	ldr	r2, [pc, #236]	; (80029d4 <TIM_Base_SetConfig+0x120>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d003      	beq.n	80028f4 <TIM_Base_SetConfig+0x40>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a3a      	ldr	r2, [pc, #232]	; (80029d8 <TIM_Base_SetConfig+0x124>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d108      	bne.n	8002906 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a2f      	ldr	r2, [pc, #188]	; (80029c8 <TIM_Base_SetConfig+0x114>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01f      	beq.n	800294e <TIM_Base_SetConfig+0x9a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d01b      	beq.n	800294e <TIM_Base_SetConfig+0x9a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a2c      	ldr	r2, [pc, #176]	; (80029cc <TIM_Base_SetConfig+0x118>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d017      	beq.n	800294e <TIM_Base_SetConfig+0x9a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <TIM_Base_SetConfig+0x11c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <TIM_Base_SetConfig+0x9a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a2a      	ldr	r2, [pc, #168]	; (80029d4 <TIM_Base_SetConfig+0x120>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00f      	beq.n	800294e <TIM_Base_SetConfig+0x9a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a29      	ldr	r2, [pc, #164]	; (80029d8 <TIM_Base_SetConfig+0x124>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d00b      	beq.n	800294e <TIM_Base_SetConfig+0x9a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a28      	ldr	r2, [pc, #160]	; (80029dc <TIM_Base_SetConfig+0x128>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d007      	beq.n	800294e <TIM_Base_SetConfig+0x9a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <TIM_Base_SetConfig+0x12c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d003      	beq.n	800294e <TIM_Base_SetConfig+0x9a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a26      	ldr	r2, [pc, #152]	; (80029e4 <TIM_Base_SetConfig+0x130>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d108      	bne.n	8002960 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4313      	orrs	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a10      	ldr	r2, [pc, #64]	; (80029c8 <TIM_Base_SetConfig+0x114>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00f      	beq.n	80029ac <TIM_Base_SetConfig+0xf8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <TIM_Base_SetConfig+0x124>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00b      	beq.n	80029ac <TIM_Base_SetConfig+0xf8>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a11      	ldr	r2, [pc, #68]	; (80029dc <TIM_Base_SetConfig+0x128>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d007      	beq.n	80029ac <TIM_Base_SetConfig+0xf8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a10      	ldr	r2, [pc, #64]	; (80029e0 <TIM_Base_SetConfig+0x12c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d003      	beq.n	80029ac <TIM_Base_SetConfig+0xf8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <TIM_Base_SetConfig+0x130>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d103      	bne.n	80029b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	615a      	str	r2, [r3, #20]
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40000800 	.word	0x40000800
 80029d4:	40000c00 	.word	0x40000c00
 80029d8:	40013400 	.word	0x40013400
 80029dc:	40014000 	.word	0x40014000
 80029e0:	40014400 	.word	0x40014400
 80029e4:	40014800 	.word	0x40014800

080029e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	f023 0201 	bic.w	r2, r3, #1
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f023 030a 	bic.w	r3, r3, #10
 8002a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	621a      	str	r2, [r3, #32]
}
 8002a3a:	bf00      	nop
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b087      	sub	sp, #28
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	f023 0210 	bic.w	r2, r3, #16
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	031b      	lsls	r3, r3, #12
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	621a      	str	r2, [r3, #32]
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f043 0307 	orr.w	r3, r3, #7
 8002ac8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	609a      	str	r2, [r3, #8]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002af6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	021a      	lsls	r2, r3, #8
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	609a      	str	r2, [r3, #8]
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e068      	b.n	8002c06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a2e      	ldr	r2, [pc, #184]	; (8002c14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d004      	beq.n	8002b68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a2d      	ldr	r2, [pc, #180]	; (8002c18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d108      	bne.n	8002b7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002b6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a1e      	ldr	r2, [pc, #120]	; (8002c14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01d      	beq.n	8002bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba6:	d018      	beq.n	8002bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a1b      	ldr	r2, [pc, #108]	; (8002c1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d013      	beq.n	8002bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1a      	ldr	r2, [pc, #104]	; (8002c20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00e      	beq.n	8002bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a18      	ldr	r2, [pc, #96]	; (8002c24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d009      	beq.n	8002bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a13      	ldr	r2, [pc, #76]	; (8002c18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002be0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40012c00 	.word	0x40012c00
 8002c18:	40013400 	.word	0x40013400
 8002c1c:	40000400 	.word	0x40000400
 8002c20:	40000800 	.word	0x40000800
 8002c24:	40000c00 	.word	0x40000c00
 8002c28:	40014000 	.word	0x40014000

08002c2c <__errno>:
 8002c2c:	4b01      	ldr	r3, [pc, #4]	; (8002c34 <__errno+0x8>)
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20000014 	.word	0x20000014

08002c38 <exit>:
 8002c38:	b508      	push	{r3, lr}
 8002c3a:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <exit+0x20>)
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	b113      	cbz	r3, 8002c46 <exit+0xe>
 8002c40:	2100      	movs	r1, #0
 8002c42:	f3af 8000 	nop.w
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <exit+0x24>)
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002c4c:	b103      	cbz	r3, 8002c50 <exit+0x18>
 8002c4e:	4798      	blx	r3
 8002c50:	4620      	mov	r0, r4
 8002c52:	f7fe f9c3 	bl	8000fdc <_exit>
 8002c56:	bf00      	nop
 8002c58:	00000000 	.word	0x00000000
 8002c5c:	08002d10 	.word	0x08002d10

08002c60 <__libc_init_array>:
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	4d0d      	ldr	r5, [pc, #52]	; (8002c98 <__libc_init_array+0x38>)
 8002c64:	4c0d      	ldr	r4, [pc, #52]	; (8002c9c <__libc_init_array+0x3c>)
 8002c66:	1b64      	subs	r4, r4, r5
 8002c68:	10a4      	asrs	r4, r4, #2
 8002c6a:	2600      	movs	r6, #0
 8002c6c:	42a6      	cmp	r6, r4
 8002c6e:	d109      	bne.n	8002c84 <__libc_init_array+0x24>
 8002c70:	4d0b      	ldr	r5, [pc, #44]	; (8002ca0 <__libc_init_array+0x40>)
 8002c72:	4c0c      	ldr	r4, [pc, #48]	; (8002ca4 <__libc_init_array+0x44>)
 8002c74:	f000 f820 	bl	8002cb8 <_init>
 8002c78:	1b64      	subs	r4, r4, r5
 8002c7a:	10a4      	asrs	r4, r4, #2
 8002c7c:	2600      	movs	r6, #0
 8002c7e:	42a6      	cmp	r6, r4
 8002c80:	d105      	bne.n	8002c8e <__libc_init_array+0x2e>
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c88:	4798      	blx	r3
 8002c8a:	3601      	adds	r6, #1
 8002c8c:	e7ee      	b.n	8002c6c <__libc_init_array+0xc>
 8002c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c92:	4798      	blx	r3
 8002c94:	3601      	adds	r6, #1
 8002c96:	e7f2      	b.n	8002c7e <__libc_init_array+0x1e>
 8002c98:	08002d14 	.word	0x08002d14
 8002c9c:	08002d14 	.word	0x08002d14
 8002ca0:	08002d14 	.word	0x08002d14
 8002ca4:	08002d18 	.word	0x08002d18

08002ca8 <memset>:
 8002ca8:	4402      	add	r2, r0
 8002caa:	4603      	mov	r3, r0
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d100      	bne.n	8002cb2 <memset+0xa>
 8002cb0:	4770      	bx	lr
 8002cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cb6:	e7f9      	b.n	8002cac <memset+0x4>

08002cb8 <_init>:
 8002cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cba:	bf00      	nop
 8002cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cbe:	bc08      	pop	{r3}
 8002cc0:	469e      	mov	lr, r3
 8002cc2:	4770      	bx	lr

08002cc4 <_fini>:
 8002cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc6:	bf00      	nop
 8002cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cca:	bc08      	pop	{r3}
 8002ccc:	469e      	mov	lr, r3
 8002cce:	4770      	bx	lr
